dnl -*- sh -*-
dnl
dnl  Authors:
dnl    Michael Mehl (mehl@dfki.de)
dnl
dnl  Contributors:
dnl    optional, Contributor's name (Contributor's email address)
dnl
dnl  Copyright:
dnl    Michael Mehl (1997)
dnl
dnl  Last change:
dnl    $Date$ by $Author$
dnl    $Revision$
dnl
dnl  This file is part of Mozart, an implementation
dnl  of Oz 3:
dnl     http://mozart.ps.uni-sb.de
dnl
dnl  See the file "LICENSE" or
dnl     http://mozart.ps.uni-sb.de/LICENSE.html
dnl  for information on usage and redistribution
dnl  of this file, and for a DISCLAIMER OF ALL
dnl  WARRANTIES.
dnl

dnl Process this file with autoconf to produce a configure script.

dnl *****************************************************************
dnl INITIALIZE
dnl *****************************************************************

dnl This will check that we are in the Oz directory and initiate
AC_INIT(ozMain.c)


dnl *****************************************************************
dnl windows cross compilation
dnl *****************************************************************

case "$target" in
   NONE)
        SRCS="ozMain.c ozAppInit.c"
   ;;
   i386-mingw32)
        AC_MSG_RESULT(cross compiling for windows)
        CC=${target}-gcc
        EXTRALDFLAGS="-mwindows -s"
        platform="win32-i486"
        SRCS="winMain.c"
        oz_tcl_inc_dir=$oz_wincross_tcl_inc_dir
        oz_tcl_lib_dir=$oz_wincross_tcl_lib_dir
   ;;

   *)
        AC_MSG_ERROR("cannot cross-compile for target $target")
    ;;
esac

AC_SUBST(SRCS)
AC_SUBST(EXTRALDFLAGS)

dnl ******************************************************************
OZ_INIT

OZ_CC_CHOOSE

AC_PROG_LN_S

OZ_PATH_PROG(PLATFORMSCRIPT, ozplatform)

dnl *****************************************************************
dnl platform
dnl *****************************************************************

: ${platform=`$PLATFORMSCRIPT`}
AC_SUBST(platform)

PLATFORM="`echo $platform|sed -e s/-/_/|tr a-z A-Z`"
AC_DEFINE_UNQUOTED($PLATFORM)
AC_SUBST(PLATFORM)


dnl *****************************************************************
dnl Try to link system libraries statically
dnl *****************************************************************

OZ_ENABLE(link-static,[ link system libraries statically],no,
        AC_MSG_RESULT(yes)
        ,
        AC_MSG_RESULT(no)
        )

dnl *****************************************************************
dnl Checks for libraries.
dnl *****************************************************************

# intl is required when linking statically
AC_CHECK_LIB(intl, dgettext)
AC_CHECK_LIB(nsl, gethostbyaddr)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(m, fabs)
AC_CHECK_LIB(dl, dlopen)

dnl *****************************************************************
dnl FINALIZE
dnl *****************************************************************

AC_ARG_ENABLE(link-static,
  [--enable-link-static  link libraries statically (default=no)])

AC_MSG_CHECKING(whether to link libraries statically)

if test "${enable_link_static}" = yes; then
    AC_MSG_RESULT(yes)
else
   AC_MSG_RESULT(no)
fi


dnl *****************************************************************
dnl *** X11
dnl *****************************************************************

: ${oz_x11_inc_path_extra="/usr/local/include /usr/pkg/include /usr/X11R6/include /usr/X11/include /opt/X11R6/include /opt/X11/include"}
: ${oz_x11_lib_path_extra="/usr/local/lib /usr/pkg/lib /usr/X11R6/lib /usr/X11/lib /opt/X11/lib /opt/X11R6/lib"}

AC_ARG_WITH(x11,
    [--with-x11=<dir>
    search x11 library and header in <dir> (default: NONE)])

if test -n "${with_x11}"
then
    oz_x11_lib_dir=$with_x11
    oz_x11_inc_dir=$with_x11
fi

AC_ARG_WITH(x11_lib,
    [--with-x11-lib=<dir>
    search x11 library in <dir> (default: /usr/local/lib)])

if test -n "${with_x11_lib}"
then
    oz_x11_lib_dir=$with_x11_lib
fi

AC_ARG_WITH(x11_include,
    [--with-x11-include=<dir>
    search x11 header in <dir> (default: /usr/local/include)])

if test -n "${with_x11_include}"
then
    oz_x11_inc_dir=$with_x11_include
fi

oz_inc_path="$oz_x11_inc_dir $oz_inc_path $oz_x11_inc_path_extra"
oz_lib_path="$oz_x11_lib_dir $oz_lib_path $oz_x11_lib_path_extra"

if test "$target" != i386-mingw32
then
    OZ_CHECK_HEADER_PATH(X11/Xlib.h,,
            AC_MSG_ERROR(required X include files not found))

    OZ_CHECK_LIB_PATH(X11, XOpenDisplay,,
            AC_MSG_ERROR(required lib X11 not found))
fi

dnl *****************************************************************
dnl *** Tcl/Tk
dnl *****************************************************************

AC_ARG_WITH(tcl,
    [--with-tcl=<dir>
    search tcl library, header, tcl-library in <dir> (default: NONE)])

if test -n "${with_tcl}"
then
    oz_tcl_lib_dir=$with_tcl/lib
    oz_tcl_inc_dir=$with_tcl/include
    oz_tcl_lib_tcl_dir=$with_tcl/lib/tcl8.0
fi

AC_ARG_WITH(tcl_lib,
    [--with-tcl-lib=<dir>
    search tcl library in <dir> (default: /usr/lib)])

if test -n "${with_tcl_lib}"
then
    oz_tcl_lib_dir=$with_tcl_lib
fi

AC_ARG_WITH(tcl_include,
    [--with-tcl-include=<dir>
    search tcl header in <dir> (default: /usr/include)])

if test -n "${with_tcl_include}"
then
    oz_tcl_inc_dir=$with_tcl_include
fi

AC_ARG_WITH(tcl_lib_tcl,
    [--with-tcl-lib-tcl=<dir>
    search tcl libraries (tcl) in <dir> (default: /usr/lib/tcl8.0)])

if test -n "${with_tcl_lib_tcl}"
then
    oz_tcl_lib_tcl_dir=$with_tcl_lib_tcl
fi

: ${oz_tcl_lib_tcl_dir=/usr/lib/tcl8.0}

oz_inc_path="$oz_tcl_inc_dir $oz_inc_path"
oz_lib_path="$oz_tcl_lib_dir $oz_lib_path"

OZ_CHECK_HEADER_PATH(tcl8.0.h,
    AC_DEFINE(HAVE_TCL8_0_H),
    OZ_CHECK_HEADER_PATH(tcl.h,,
            AC_MSG_ERROR(required tcl8.0.h/tcl.h include file not found)))

OZ_CHECK_LIB_PATH(tcl8.0, Tcl_Init, ,
    OZ_CHECK_LIB_PATH(tcl, Tcl_Init, ,
        OZ_CHECK_LIB_PATH(tcl80, Tcl_Init, ,
            AC_MSG_ERROR(required lib "-ltcl80/tcl" not found))))

AC_SUBST(oz_tcl_lib_tcl_dir)

AC_ARG_WITH(tk,
    [--with-tk=<dir>
    search tk library, header, tk tcl-library in <dir> (default: NONE)])
if test -n "${with_tk}"
then
    oz_tk_lib_dir=$with_tk/lib
    oz_tk_inc_dir=$with_tk/include
    oz_tk_lib_tcl_dir=$with_tk/lib/tk8.0
fi

AC_ARG_WITH(tk_lib,
    [--with-tk-lib=<dir>
    search tk library in <dir> (default: oz_tcl_lib_dir)])

if test -n "${with_tk_lib}"
then
    oz_tk_lib_dir=$with_tk_lib
fi

AC_ARG_WITH(tk_include,
    [--with-tk-include=<dir>
    search tk header in <dir> (default: oz_tcl_inc_dir)])

if test -n "${with_tk_include}"
then
    oz_tk_inc_dir=$with_tk_include
fi

AC_ARG_WITH(tk_lib_tcl,
    [--with-tk-lib-tcl=<dir>
    search tk libraries (tcl) in <dir> (default: /usr/lib/tk8.0)])

if test -n "${with_tk_lib_tcl}"
then
    oz_tk_lib_tcl_dir=$with_tk_lib_tcl
fi

: ${oz_tk_lib_tcl_dir=/usr/lib/tk8.0}

oz_inc_path="$oz_tk_inc_dir $oz_inc_path"
oz_lib_path="$oz_tk_lib_dir $oz_lib_path"

OZ_CHECK_HEADER_PATH(tk8.0.h,
    AC_DEFINE(HAVE_TK8_0_H),
    OZ_CHECK_HEADER_PATH(tk.h,,
            AC_MSG_ERROR(required tk8.0.h/tk.h include file not found)))

OZ_CHECK_LIB_PATH(tk8.0, Tk_Init, ,
    OZ_CHECK_LIB_PATH(tk, Tk_Init, ,
        OZ_CHECK_LIB_PATH(tk80, Tk_Init, ,
            AC_MSG_ERROR(required lib "-ltk80/tk" not found))))

AC_SUBST(oz_tk_lib_tcl_dir)

dnl *****************************************************************
dnl copy libs
dnl *****************************************************************

AC_ARG_ENABLE(copy-tcl-libs,
  [--enable-copy-tcl-libs  Copy tcl libraries (rather than drawing a link) (default=no)])

AC_MSG_CHECKING(whether to copy tcl libraries)

if test "${enable_copy_tcl_libs}" = yes; then
   AC_MSG_RESULT(yes)
   PROVIDETCLLIBS="provide-copy"
else
   AC_MSG_RESULT(no)
fi

: ${PROVIDETCLLIBS="provide-link"}

AC_SUBST(PROVIDETCLLIBS)

dnl *****************************************************************
dnl FINALIZE
dnl *****************************************************************

AC_CONFIG_HEADER(conf.h)

AC_OUTPUT(Makefile)

errprint(ifdef([OZ_INIT],
 [autoconf succeeded
],
 [autoconf failed: use 'autoconf -l ../..' to include ../aclocal.m4.
]))

dnl -*- sh -*-
dnl
dnl  Authors:
dnl    Christian Schulte (2000)
dnl    Andreas Simon (2000)
dnl
dnl  Copyright:
dnl    Christian Schulte (2000)
dnl    Andreas Simon (2000)
dnl
dnl  Last change:
dnl    $Date$ by $Author$
dnl    $Revision$
dnl
dnl  This file is part of Mozart, an implementation
dnl  of Oz 3:
dnl     http://www.mozart-oz.org
dnl
dnl  See the file "LICENSE" or
dnl     http://www.mozart-oz.org/LICENSE.html
dnl  for information on usage and redistribution
dnl  of this file, and for a DISCLAIMER OF ALL
dnl  WARRANTIES.
dnl

dnl Process this file with autoconf to produce a configure script.

dnl *****************************************************************
dnl INITIALIZE
dnl *****************************************************************

dnl This will check that we are in the Oz directory and initiate
AC_INIT(goz_support.h)


AC_SUBST(EXTRALDFLAGS)

OZ_INIT

OZ_CC_CHOOSE
OZ_CXX_CHOOSE

AC_PROG_LN_S

dnl *****************************************************************
dnl platform
dnl *****************************************************************

OZ_PATH_PROG(PLATFORMSCRIPT, ozplatform)
: ${platform=`$PLATFORMSCRIPT`}

dnl *********************************************************************
dnl ** Perl
dnl *********************************************************************

AC_PATH_PROG(perl_path, perl)
PERL=$perl_path
AC_SUBST(PERL)
AC_MSG_RESULT(ok)

dnl *********************************************************************
dnl ** GLIB
dnl *********************************************************************

AC_PATH_PROG(glib_path, glib-config)
if test -z $glib_path; then
    AC_MSG_ERROR(You need the glib library to enable GTK+ support. It can be found at http://www.gtk.org)
fi
AC_MSG_CHECKING(for Glib compile flags)
GLIB_CFLAGS=`$glib_path --cflags`
GLIB_LIBS=`$glib_path --libs`
CFLAGS="$CFLAGS $GLIB_CFLAGS"
LIBS="$LIBS $GLIB_LIBS"
AC_MSG_RESULT(ok)

dnl *********************************************************************
dnl ** GTK
dnl *********************************************************************

dnl Check for the GTK+ config tool
AC_PATH_PROG(gtk_path, gtk-config)
if test -z $gtk_path; then
    AC_MSG_ERROR(The gtk-config script, which is part of the GTK+ library, could no be found. Please make sure you have a working installation of GTK+ on your system, otherwise GTK+ support can not be enabled. GTK+ can be found at http://www.gtk.org)
fi

dnl Check for the right GTK+ version
AC_MSG_CHECKING(for GTK+ version)
GTK_VERSION=`$gtk_path --version`
case $GTK_VERSION in
    1.2.*) ;;
    *)     AC_MSG_ERROR(Your GTK+ library is too old, please update to version 1.2.x. The current version can be found at http://www.gtk.org)
esac
AC_MSG_RESULT($GTK_VERSION is ok)

dnl Set compiler flags
AC_MSG_CHECKING(for GTK+ compile flags)
GTK_CFLAGS=`$gtk_path --cflags`
GTK_LIBS=`$gtk_path --libs`
GTK_HDRS=`$gtk_path --prefix`/include/gtk
GDK_HDRS=`$gtk_path --prefix`/include/gdk
CFLAGS="$CFLAGS $GTK_CFLAGS"
LIBS="$LIBS $GTK_LIBS"
AC_MSG_RESULT(ok)

AC_SUBST(GTK_HDRS)
AC_SUBST(GDK_HDRS)

dnl *********************************************************************
dnl ** Gnome/GTK+ Canvas Stuff
dnl *********************************************************************

have_gnome_config=yes
OZ_PATH_PROG(gnome_config,gnome-config,[have_gnome_config=no])

have_canvas=no
have_gtk_canvas=no
AC_CHECKING([for Gnome/canvas header])
gnome_header_paths="/usr/include /usr/local/include /opt/include /opt/gnome/include /usr/local/gnome/include"
gnome_lib_paths="/usr/lib /usr/local/lib /opt/lib /opt/gnome/lib /usr/local/gnome/lib"
if test "$have_gnome_config" = yes; then
  oz_tmp=`$gnome_config --includedir gnomeui`
  if test -n "$oz_tmp"; then
    gnome_header_paths="$oz_tmp $gnome_header_paths"
  fi
  oz_tmp=`$gnome_config --libdir gnomeui`
  if test -n "$oz_tmp"; then
    gnome_lib_paths="$oz_tmp $gnome_lib_paths"
  fi
fi
oz_inc_path_sav=$oz_inc_path
for dir in $gnome_header_paths; do
  oz_inc_path="$oz_inc_path $dir/libgnomeui $dir"
done
OZ_CHECK_HEADER_PATH(gnome-canvas.h,[canvas_header="gnome-canvas.h"])
oz_inc_path=$oz_inc_path_sav
if test -n "$canvas_header"; then
  AC_CHECKING([for Gnome/canvas library])
  oz_lib_path_sav=$oz_lib_path
  oz_lib_path="$oz_lib_path $gnome_lib_paths"
  canvas_ok=no
  OZ_CHECK_LIB_PATH(gnomeui,gnome_canvas_new,[canvas_ok=yes])
  oz_lib_path=$oz_lib_path_sav
fi
if test "$canvas_ok" = yes; then
  canvas_type=gnome
  have_canvas=yes
else
  canvas_header=
fi
if test -z "$canvas_type"; then
  AC_CHECKING([for GTK/canvas header])
  gtk_canvas_inc_paths="/usr/include /usr/local/include /opt/include"
  oz_inc_path_sav=$oz_inc_path
  oz_inc_path="$oz_inc_path /usr/include /usr/local/include /opt/include"
  oz_inc_path="$oz_inc_path /usr/include/gdk /usr/local/include/gdk /opt/include/gdk"
  oz_inc_path="$oz_inc_path /usr/lib/glib/include /usr/local/lib/glib/include /opt/lib/glib/include"
  canvas_ok=no
  OZ_CHECK_HEADER_PATH(glibconfig.h,[canvas_ok=yes])
  if test "$canvas_ok" = yes; then
    OZ_CHECK_HEADER_PATH(gtk-canvas.h,[canvas_header="gtk-canvas.h"])
  fi
  oz_inc_path=$oz_inc_path_sav
  if test -n "$canvas_header"; then
    AC_CHECKING([for GTK/canvas library])
    gtk_canvas_lib_paths="/usr/lib /usr/lib/gtk-canvas /usr/local/lib /usr/local/lib/gtk-canvas /opt/lib /opt/lib/gtk-canvas /opt/gnome/lib /opt/gnome/lib/gtk-canvas /usr/local/gnome/lib /usr/local/gnome/lib/gtk-canvas"
    oz_lib_path_sav=$oz_lib_path
    oz_lib_path="$gtk_canvas_lib_paths $oz_lib_path"
    canvas_ok=no
    OZ_CHECK_LIB_PATH(art_lgpl,art_uta_from_svp,[canvas_ok=yes])
    if test "$canvas_ok" = yes; then
      canvas_ok=no
      OZ_CHECK_LIB_PATH(gtk-canvas,gtk_canvas_new,[canvas_ok=yes])
    fi
    oz_lib_path=$oz_lib_path_sav
  fi
  if test "$canvas_ok" = yes; then
    canvas_type=gtk
    have_canvas=yes
    have_gtk_canvas=yes
  else
    canvas_header=
  fi
fi

if test -z "$canvas_type"; then
    AC_MSG_WARN(Canvas support will be disabled)
fi

AC_SUBST(have_canvas)
AC_SUBST(have_gtk_canvas)
AC_SUBST(canvas_header)

dnl *********************************************************************
dnl ** Glade
dnl *********************************************************************

ENABLE_GLADE="no"
GLADE_FAIL="not found. Glade support will be disabled."
AC_PATH_PROG(libglade_config, libglade-config, $GLADE_FAIL)
if test "$libglade_config" != "$GLADE_FAIL"; then
    ENABLE_GLADE="yes"
    GLADE_CFLAGS=`$libglade_config --cflags`
    GLADE_LIBS=`$libglade_config --libs`
    GFLAGS="$CFLAGS $GLADE_CFLAGS"
    LIBS="$LIBS $GLADE_LIBS"
    AC_SUBST(GLADE_CFLAGS)
    AC_SUBST(GLADE_LIBS)
fi
AC_SUBST(ENABLE_GLADE)

dnl *****************************************************************
dnl FINALIZE
dnl *****************************************************************

AC_OUTPUT(Makefile)

errprint(ifdef([OZ_INIT],
 [autoconf succeeded
],
 [autoconf failed: use 'autoconf -l ../..' to include ../aclocal.m4.
]))

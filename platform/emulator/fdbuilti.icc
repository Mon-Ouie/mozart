/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: tmueller
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$
  
  ------------------------------------------------------------------------
*/

#ifndef __fdbuiltin_icc__
#define __fdbuiltin_icc__

#if defined(__GNUC__) && !defined(OUTLINE) && !defined(FDOUTLINE)
#pragma interface
#endif


//-----------------------------------------------------------------------------
// Inlined member functions of class BIfdHeadManager

inline
Bool BIfdHeadManager::addForXorYdet(OZ_CFun func, RefsArray xregs, int arity)
{
  if (bifdhm_vartag[0] == SMALLINT || bifdhm_vartag[1] == SMALLINT)
    return TRUE;

  Suspension * s = createNonResSusp(func, xregs, arity);

  addSuspFDVar(bifdhm_var[0], new SuspList(s, NULL), fd_det);
  addSuspFDVar(bifdhm_var[1], new SuspList(s, NULL), fd_det);

  return FALSE;
}

inline
Bool BIfdHeadManager::expectFDish(int i, TaggedRef v, int &s)
{
  DebugCheck(i < 0 || i >= curr_num_of_items, error("index violation"));

  bifdhm_var[i] = deref(v, bifdhm_varptr[i], bifdhm_vartag[i]);
  TypeOfTerm vtag = bifdhm_vartag[i];
  
  if (isGenFDVar(v,vtag)) {
    return TRUE;
  } else if (vtag == SMALLINT) {
    return smallIntValue(v) >= 0;
  } else if (isNotCVar(vtag)) {
    s += 1;
    return TRUE;
  } 
  
  return FALSE;
}
  
inline
Bool BIfdHeadManager::expectInt(int i, TaggedRef v, int &s)
{
  DebugCheck(i < 0 || i >= curr_num_of_items, error("index violation"));

  bifdhm_var[i] = deref(v, bifdhm_varptr[i], bifdhm_vartag[i]);
  TypeOfTerm vtag = bifdhm_vartag[i];
  
  if (vtag == SMALLINT) {
    bifdhm_coeff[i] = smallIntValue(bifdhm_var[i]);
    return TRUE;
  } else if (isGenFDVar(v,vtag)) {
    s += 1;
    return TRUE;
  } else if (isNotCVar(vtag)) {
    s += 1;
    return TRUE;
  }
  return FALSE;
}


//-----------------------------------------------------------------------------
// Inlined member functions of class BIfdHeadManager

inline
OZ_Bool BIfdBodyManager::entailmentClause(int from_b, int to_b,
					  int from,   int to,
					  int from_p, int to_p)
{
  Assert((from <= to) && (from_p <= to_p) && ((to - from) == (to_p - from_p)));

  for (int i = from, j = from_p; i < to+1; i += 1, j += 1) {

    *bifdbm_dom[i] &= *bifdbm_dom[j];
    if(bifdbm_vartag[j] == CVAR) {
      if (bifdbm_vartag[i] == CVAR) {
	tagged2GenFDVar(bifdbm_var[j])->
	  relinkSuspListTo(tagged2GenFDVar(bifdbm_var[i]));
	doBind(bifdbm_varptr[j], TaggedRef(bifdbm_varptr[i]));
      } else {
	propagateIfTouched(j);
      }
    }
  }
  
  if (only_local_vars) {
    processLocalFromTo(from, to+1);
  } else {
    processFromTo(from, to+1);
    if (glob_vars_touched) dismissCurrentTaskSusp();
  }

  processLocalFromTo(from_b, to_b+1);
  
  return EntailFD;
}

inline
void BIfdBodyManager::propagateIfTouched(int i)
{
  Assert(0 <= i && i <= curr_num_of_vars);
  
  if (isTouched(i)) {
    if (*bifdbm_dom[i] == fd_singleton) {
      tagged2GenFDVar(bifdbm_var[i])->
	becomesSmallIntAndPropagate(bifdbm_varptr[i]);
    } else { 
      Assert(isCVar(bifdbm_vartag[i]));
      tagged2GenFDVar(bifdbm_var[i])->
	propagate(bifdbm_var[i], fd_bounds, makeTaggedRef(bifdbm_varptr[i]));
    }
  }
}

inline
void BIfdBodyManager::setSpeculative(int i) {
  Assert(0 <= i && i <= curr_num_of_vars);

  if (bifdbm_var_state[i] == fdbm_local) {
    bifdbm_domain[i] = *bifdbm_dom[i];
    bifdbm_dom[i] = &bifdbm_domain[i];
  }
  bifdbm_var_state[i] = fdbm_speculative;
}
  

inline
void BIfdBodyManager::introduceSpeculative(int i, TaggedRef v) {
  if (only_local_vars) {
    introduceLocal(i, v);
    } else {
      _introduce(i, v);
    }
  setSpeculative(i);
}


inline
int BIfdBodyManager::initCache(void) {
  int num_of_slots = int(ceil(double(curr_num_of_vars)/double(cache_slot_size)));
  cache_from[0] = 0;

  int i;
  for (i = 0; i < num_of_slots; i += 1) {
    cache_from[i + 1] = cache_to[i] = cache_slot_size + cache_from[i];
    Assert(cache_from[i] < curr_num_of_vars);
  }
  cache_to[i - 1] = min(curr_num_of_vars, cache_to[i - 1]);
  Assert(cache_to[i - 1] <= curr_num_of_vars);
  
  return num_of_slots;
  
}


// might be a bit of an overkill
inline
OZ_Bool BIfdBodyManager::unify_cd(int var, int prime) {
  Bool ret = isCVar(bifdbm_var[var])
    ? tagged2GenFDVar(bifdbm_var[var])->unifyFD(bifdbm_varptr[var],
						bifdbm_var[var],
						bifdbm_varptr[prime],
						bifdbm_var[prime],
						TRUE, FALSE)
    : (isCVar(bifdbm_var[prime])
       ? tagged2GenFDVar(bifdbm_var[prime])->unifyFD(bifdbm_varptr[prime],
						     bifdbm_var[prime],
						     bifdbm_varptr[var],
						     bifdbm_var[var],
						     TRUE, FALSE)
       : TRUE);
  if (ret == FALSE) return FAILED;
  
  introduce(var, makeTaggedRef(bifdbm_varptr[var]));
  introduce(prime, makeTaggedRef(bifdbm_varptr[prime]));

  return (bifdbm_var[var] == bifdbm_var[prime]) ? PROCEED : FAILED;
}
  

inline
Bool BIfdBodyManager::addAnySuspToTouchedGlobalVars(void) {
#ifdef NEWCOUNTER
  killPropagatedCurrentTaskSusp();
#endif
  Suspension * s = NULL;
  
  for (int i = curr_num_of_vars; i--; )
    if (bifdbm_var_state[i] == fdbm_global &&  isTouched(i)) {
      if (s == NULL)
	(s = FDcurrentTaskSusp = new Suspension(am.currentBoard))->anyGlobalInit();
      addSuspAnyVar(bifdbm_varptr[i], new SuspList(s, NULL));
    }

  return s != NULL;
}


inline
OZ_Bool BIfdBodyManager::entailmentAndSuspOnAny(void) {
  Assert(FDcurrentTaskSusp);
  killPropagatedCurrentTaskSusp();
  
  Bool a = FALSE;
  
  if (only_local_vars) {
    processLocal();
  } else {
    a = addAnySuspToTouchedGlobalVars();
    process();
  }
  
  if (a) 
    activateCurrentTaskSusp();
  
  return EntailFD;
}


inline
void BIfdBodyManager::backup(void)
{
  backup_count += 1;

  backup_curr_num_of_vars1 = curr_num_of_vars;
  backup_vars_left1 = vars_left;
  backup_glob_vars_touched1 = glob_vars_touched;
  backup_only_local_vars1 = only_local_vars;
  backup_FDcurrentTaskSusp1 = FDcurrentTaskSusp;
  
  bifdbm_var += backup_curr_num_of_vars1;
  bifdbm_varptr += backup_curr_num_of_vars1;
  bifdbm_vartag += backup_curr_num_of_vars1;
  bifdbm_dom += backup_curr_num_of_vars1;
  bifdbm_domain += backup_curr_num_of_vars1;
  bifdbm_init_dom_size += backup_curr_num_of_vars1;
  cache_from += backup_curr_num_of_vars1;
  cache_to += backup_curr_num_of_vars1;
  index_offset += backup_curr_num_of_vars1;
  index_size += backup_curr_num_of_vars1;
  bifdbm_var_state += backup_curr_num_of_vars1;
}


inline
void BIfdBodyManager::restore(void)
{
  backup_count -= 1;

  bifdbm_var -= backup_curr_num_of_vars1;
  bifdbm_varptr -= backup_curr_num_of_vars1;
  bifdbm_vartag -= backup_curr_num_of_vars1;
  bifdbm_dom -= backup_curr_num_of_vars1;
  bifdbm_domain -= backup_curr_num_of_vars1;
  bifdbm_init_dom_size -= backup_curr_num_of_vars1;
  cache_from -= backup_curr_num_of_vars1;
  cache_to -= backup_curr_num_of_vars1;
  index_offset -= backup_curr_num_of_vars1;
  index_size -= backup_curr_num_of_vars1;
  bifdbm_var_state -= backup_curr_num_of_vars1;

  curr_num_of_vars = backup_curr_num_of_vars1;
  vars_left = backup_vars_left1;
  glob_vars_touched = backup_glob_vars_touched1;
  only_local_vars = backup_only_local_vars1;
  FDcurrentTaskSusp = backup_FDcurrentTaskSusp1;
}

//-----------------------------------------------------------------------------
// Inlined functions

inline
OZ_Bool addNonResSuspForDet(TaggedRef v, TaggedRefPtr vp, TypeOfTerm vt,
			    Suspension * s)
{
  if (isGenFDVar(v,vt)) {
    addSuspFDVar(v, new SuspList(s, NULL), fd_det);
  } else if (isSVar(vt)) {
    addSuspSVar(v, new CondSuspList(s, NULL, isDet));
  } else if (isUVar(vt)) {
    addSuspOnlyToUVar(vp, new CondSuspList(s, NULL, isDet));
  } else {
    error("unexpected term found");
    return FAILED;
  }
  return PROCEED;
}
  
inline
OZ_Bool addNonResSuspForCon(TaggedRef v, TaggedRefPtr vp, TypeOfTerm vt,
				Suspension * s)
{
  if (isSVar(vt)) {
    addSuspSVar(v, new CondSuspList(s, NULL, isConstrained));
  } else if (isUVar(vt)) {
    addSuspOnlyToUVar(vp, new CondSuspList(s, NULL, isConstrained));
  } else if (isGenFDVar(v,vt)) {
    addSuspFDVar(v, new SuspList(s, NULL));
  } else {
    error("unexpected term found");
    return FAILED;
  }
  return PROCEED;
}

#endif







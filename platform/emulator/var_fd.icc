/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: tmueller
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __fdgenvar_icc__
#define __fdgenvar_icc__

#if defined(__GNUC__) && !defined(OUTLINE) && !defined(FDOUTLINE)
#pragma interface
#endif

inline
void GenFDVariable::dispose(void) {
  finiteDomain.dispose();
  fdSuspList[fd_det]->disposeList();
  fdSuspList[fd_bounds]->disposeList();
  fdSuspList[fd_size]->disposeList();
  fdSuspList[fd_eqvar]->disposeList();
  suspList->disposeList();
  freeListDispose(this, sizeof(GenFDVariable));
}

inline
void GenFDVariable::propagate(TaggedRef var, FDPropState state,
                              TaggedRef term, PropCaller prop_eq)
{
  if (prop_eq == pc_propagator) {
    home = getHome();
    switch (state) {
    case fd_det:
      fdSuspList[fd_det] = fdSuspList[fd_det]->propagate_p(home);
    case fd_bounds:
      fdSuspList[fd_bounds] = fdSuspList[fd_bounds]->propagate_p(home);
    case fd_size:
      fdSuspList[fd_size] = fdSuspList[fd_size]->propagate_p(home);
    default:
      break;
    }
  } else {
    switch (state) {
    case fd_det:
      GenCVariable::propagate(var, fdSuspList[fd_det], term, prop_eq);
    case fd_bounds:
      GenCVariable::propagate(var, fdSuspList[fd_bounds], term, prop_eq);
    case fd_size:
      GenCVariable::propagate(var, fdSuspList[fd_size], term, prop_eq);
    default:
      break;
    }
  }
  GenCVariable::propagate(var, suspList, term, prop_eq);

  if (prop_eq)
    GenCVariable::propagate(var, fdSuspList[fd_eqvar], term, prop_eq);
}

inline
void GenFDVariable::relinkSuspListTo(GenFDVariable * lv)
{
  GenCVariable::relinkSuspListTo(lv); // any
  for (int i = 0; i < fd_any; i += 1)
    fdSuspList[i] = fdSuspList[i]->appendToAndUnlink(lv->fdSuspList[i]);
}

inline
void GenFDVariable::becomesSmallIntAndPropagate(TaggedRef * trPtr)
{
  TaggedRef si_val = newSmallInt(finiteDomain.singl());
  propagate(*trPtr, fd_det, si_val);
  doBind(trPtr, si_val);
  dispose();
}


inline
Bool isGenFDVar(TaggedRef term)
{
  GCDEBUG(term);
  return isCVar(term) && (tagged2CVar(term)->getType() == FDVariable);
}

inline
Bool isGenFDVar(TaggedRef term, TypeOfTerm tag)
{
  GCDEBUG(term);
  Assert(tag == tagTypeOf(term));
  return isCVar(tag) && (tagged2CVar(term)->getType() == FDVariable);
}

inline
GenFDVariable * tagged2GenFDVar(TaggedRef term)
{
  GCDEBUG(term);
  return (GenFDVariable *) tagged2CVar(term);
}

inline
void addSuspFDVar(TaggedRef v, SuspList * el, FDPropState l)
{
  DebugCheck(l > fd_eqvar, error("list index out of range."));

  GenFDVariable * fv = tagged2GenFDVar(v);
  fv->fdSuspList[l] = addSuspToList(fv->fdSuspList[l], el, fv->home);
}

inline
void addSuspFDVar(TaggedRef v, SuspList * el)
{
  GenFDVariable * fv = tagged2GenFDVar(v);
  fv->suspList = addSuspToList(fv->suspList, el, fv->home);
}


#endif

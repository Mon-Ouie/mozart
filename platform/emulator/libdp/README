Notation:

	CORE centralized mozart (i.e. using mozart with pickling but without
		distributed entities)
	DP   distributed programming (i.e. using mozart with distributed 
		entities).
	

The following files are part of CORE


genhashtbl.hh
genhashtbl.cc
	Defines the general hash table class, as well as a general free 
	list management. Used mainly by DP, but
	to some extent the CORE (site tables).
	
site.hh:		
	Sites are a component of gnames. Procedures, oznames, etc.
	all are identified by gnames. In CORE this is 
	only needed for pickling.
	
site.cc: 	
gname.hh:	
gname.cc:
msgbuffer.hh:
	used by pickling and DP

marshaler.hh:
	Marshaler used both for pickling and DP
marshaler.cc:
components.cc:  
	Part of pickling
componentBuffer.cc:
	Defines the buffers used by marshaling for pickling.
	
dpInterface.hh:
	The interface between CORE and DP. Defines the methods 
	that DP provides for CORE.


The file organization of the extension for DP. This files are in
the dplib directory,


----- Marshaling

msgFormat.m4:
	defines the format of messages sent between sites.

marshalMsg.m4cc: -->> marshalMsg.cc
	creates marshaling/unmarshaling routines used for perdio
	msg sending
marshaler.m4hh -->> marshaler.hh

msgType.hh  message types
msgType.cc

dpMarshaler.cc
	marshaling routine for distributed entities (i.e. marshaling that
	is not dealt with in ../marshaler.cc which is common to pickling.
dpMarshaler.m4hh -->> dpMarshaler.hh


----- Central

dpBuiltins.cc    
dpBase.hh    base types

perdio.hh: 
perdio.cc: 
	the central part of perdio (msgReceived)

----- Debug

dpDebug.hh
dpDebug.cc

----- Distributed stateful entities (cell, locks, objects)

chain.hh
chain.cc 
	defines the methods of the class Chain, used by stateful distributed
	Oz entities. This includes cells, locks, and objects

state.hh 
state.cc
	classes for stateful entities
	
protocolState.hh
protocolState.cc:
	the perdio protocols of distributed stateful entities. 

----- Distributed ports 

port.hh
port.cc
	everything to do with distributed ports.

----- Distributed variables

var.hh
var.cc
	distributed simple variables and futures

var_obj.hh
var_obj.cc
	lazy objects

----- Distributed failure

fail.hh
fail.cc

protocolFail.hh
protocolFail.cc
	defines protocol additions necessary for dealing with failure
	detection of distributed entities.

---- Distributed memory management

protocolCredit.hh
protocolCredit.cc
	defines protocol additions necessary for dealing with credit
	requests, return etc.
	
table.hh
table.cc
 	distributed memory management. Defines the owner and borrow tables. 
	This are used both for distributed memory management and entity 
	identification upon import and export.
	The basic structures used for managing credit are defined here. 

---- Sites & communication

dSite.hh:
	dsites are used both for identifying distributed entities and for
	knowing how to communicate with them.
dSite.cc:

comm.hh
	communication layer interface (common to network and virtual sites
	communication)

----  communication between remote sites

network.cc
network.hh
	tcp communication

----  virtual sites

virtual.hh
virtual.cc

vs_xx        all virtual sites stuff


/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: tmueller
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __fdgenvar_icc__
#define __fdgenvar_icc__

#if defined(__GNUC__) && !defined(OUTLINE) && !defined(FDOUTLINE)
#pragma interface
#endif

inline
void GenFDVariable::propagate(TaggedRef var, FDPropState state,
			      TaggedRef term, Bool prop_eq)
{
#ifdef DEBUG_FD
  if ((int)this != var >> 4)
    error("variable expected");
#endif
  
  switch (state) {
  case fd_det:
    GenCVariable::propagate(var, fdSuspList[fd_det], term, prop_eq);
  case fd_bounds:
    GenCVariable::propagate(var, fdSuspList[fd_bounds], term, prop_eq);
  case fd_size:
    GenCVariable::propagate(var, fdSuspList[fd_size], term, prop_eq);
  case fd_any:
    GenCVariable::propagate(var, suspList, term, prop_eq);
    break;
  default:
    error("unexpected case");
  }
  if (prop_eq)
    GenCVariable::propagate(var, fdSuspList[fd_eqvar], term, prop_eq);
}

inline
SuspList * concSuspList(SuspList * list_a, SuspList * list_b)
{
  if (list_a){
    if (list_b){
      for (SuspList * aux = list_a;
	   aux->getNext();
	   aux = aux->getNext()
	   );
      aux->setNext(list_b);
    }
    return list_a;
  }
  return list_b;
}


inline
void GenFDVariable::relinkSuspList(GenFDVariable * leftVar)
{
  GenCVariable::relinkSuspList(leftVar); // any
  for (int i = 0; i < fd_any; i++)
  leftVar->fdSuspList[i] = concSuspList(leftVar->fdSuspList[i], fdSuspList[i]);
}

inline
void GenFDVariable::becomesSmallIntAndPropagate(TaggedRef * trPtr)
{
#ifdef DEBUG_FD
  if (! (finiteDomain == fd_singleton))
    error("singleton expected");
#endif

  TaggedRef si_val = newSmallInt(finiteDomain.singl());
  propagate(*trPtr, fd_det, si_val);
  *trPtr = si_val;
}


#ifdef CVAR_ONLY_FDVAR
#define cvarIsFDvar(term) (OK)
#else
inline Bool cvarIsFDvar(TaggedRef term)
{
  return (tagged2CVar(term)->getType() == FDVariable);
}
#endif


inline
Bool isGenFDVar(TaggedRef term)
{
  GCDEBUG(term);
  return isCVar(term) && cvarIsFDvar(term);
}

inline
Bool isGenFDVar(TaggedRef term, TypeOfTerm tag)
{
  GCDEBUG(term);
  return isCVar(tag) && cvarIsFDvar(term);
}

inline
GenFDVariable * tagged2GenFDVar(TaggedRef term)
{
  GCDEBUG(term);
#ifdef DEBUG_FD
  if(isGenFDVar(term) == NO)
    error("fd variable expected");
#endif
  return (GenFDVariable*) tagged2CVar(term);
}

inline
void addSuspFDVar(TaggedRef v, SuspList * el, FDPropState l)
{
  DebugCheck(l > fd_eqvar, error("list index out of range."));
  
  GenFDVariable * fv = tagged2GenFDVar(v);
  fv->fdSuspList[l] = addSuspToList(fv->fdSuspList[l], el, fv->home);
}

inline
void addSuspFDVar(TaggedRef v, SuspList * el)
{
  GenFDVariable * fv = tagged2GenFDVar(v);
  fv->suspList = addSuspToList(fv->suspList, el, fv->home);
}


#endif






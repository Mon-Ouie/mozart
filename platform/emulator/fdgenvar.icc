/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: tmueller
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __fdgenvar_icc__
#define __fdgenvar_icc__

#if defined(__GNUC__) && !defined(OUTLINE) && !defined(FDOUTLINE)
#pragma interface
#endif

inline
void GenFDVariable::dispose(void) {
  finiteDomain.dispose();
  fdSuspList[fd_det]->disposeList();
  fdSuspList[fd_bounds]->disposeList();
  suspList->disposeList();
  freeListDispose(this, sizeof(GenFDVariable));
}

inline
void GenFDVariable::propagate(TaggedRef var, FDPropState state,
                              PropCaller prop_eq)
{
  if (prop_eq == pc_propagator) {
    switch (state) {
    case fd_det:
      if (fdSuspList[fd_det])
        GenCVariable::propagate(var, fdSuspList[fd_det], prop_eq);
    case fd_bounds:
      if (fdSuspList[fd_bounds])
        GenCVariable::propagate(var, fdSuspList[fd_bounds], prop_eq);
    default:
      break;
    }
  } else {
    GenCVariable::propagate(var, fdSuspList[fd_det], prop_eq);
    GenCVariable::propagate(var, fdSuspList[fd_bounds], prop_eq);
  }
  if (suspList)
    GenCVariable::propagate(var, suspList, prop_eq);
}

inline
void GenFDVariable::propagateUnify(TaggedRef var) {
  propagate(var, fd_det, pc_cv_unif);
}

inline
void GenFDVariable::relinkSuspListTo(GenFDVariable * lv, Bool reset_local)
{
  GenCVariable::relinkSuspListTo(lv, reset_local); // any
  for (int i = 0; i < fd_any; i += 1)
    fdSuspList[i] =
      fdSuspList[i]->appendToAndUnlink(lv->fdSuspList[i], reset_local);
}

inline
void GenFDVariable::becomesSmallIntAndPropagate(TaggedRef * trPtr)
{
  if (isSmallInt(*trPtr)) return;

  Assert(this == tagged2SuspVar(*trPtr));

  TaggedRef si_val = OZ_CToInt(finiteDomain.singl());
  propagate(*trPtr, fd_det);
  doBind(trPtr, si_val);
  dispose();
}


inline
void GenFDVariable::installPropagators(GenFDVariable * glob_var,
                                       Board * glob_home)
{
  for (int i = 0; i < fd_any; i += 1)
    fdSuspList[i] = ::installPropagators(fdSuspList[i],
                                         glob_var->fdSuspList[i],
                                         glob_home);
}

inline
Bool isGenFDVar(TaggedRef term)
{
  GCDEBUG(term);
  return isCVar(term) && (tagged2CVar(term)->getType() == FDVariable);
}

inline
Bool isGenFDVar(TaggedRef term, TypeOfTerm tag)
{
  GCDEBUG(term);
  Assert(tag == tagTypeOf(term));
  return isCVar(tag) && (tagged2CVar(term)->getType() == FDVariable);
}

inline
GenFDVariable * tagged2GenFDVar(TaggedRef term)
{
  GCDEBUG(term);
  return (GenFDVariable *) tagged2CVar(term);
}

inline
void addSuspFDVar(TaggedRef v, SuspList * el, FDPropState list_index)
{
  GenFDVariable * fv = tagged2GenFDVar(v);

  switch (list_index) {
  case fd_det:
    fv->fdSuspList[fd_det] = addSuspToList(fv->fdSuspList[fd_det], el,
                                           fv->home);
    break;
  case fd_bounds:
    fv->fdSuspList[fd_bounds] = addSuspToList(fv->fdSuspList[fd_bounds], el,
                                              fv->home);
    break;
  case fd_any:
    fv->suspList = addSuspToList(fv->suspList, el, fv->home);
    break;
  default:
    error("list index out of range.");
    break;
  }
}

#endif

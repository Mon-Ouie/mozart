/*
 *  Authors:
 *    Tobias Mueller (tmueller@ps.uni-sb.de)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     http://mozart.ps.uni-sb.de
 * 
 *  See the file "LICENSE" or
 *     http://mozart.ps.uni-sb.de/LICENSE.html
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */

#ifndef __FDGENVAR_ICC__
#define __FDGENVAR_ICC__

#if defined(INTERFACE) && !defined(OUTLINE)
#pragma interface
#endif

// this is only needed for the becomesBool hack
#include "fdbvar.hh"

inline
void GenFDVariable::dispose(void) {
  finiteDomain.disposeExtension();
  fdSuspList[fd_prop_singl]->disposeList();
  fdSuspList[fd_prop_bounds]->disposeList();
  suspList->disposeList();
  freeListDispose(this, sizeof(GenFDVariable));
}

inline
void GenFDVariable::relinkSuspListTo(GenFDVariable * lv, Bool reset_local)
{
  Assert(this != lv);

  GenCVariable::relinkSuspListTo(lv, reset_local); // any
  for (int i = 0; i < fd_prop_any; i += 1)
    fdSuspList[i] =
      fdSuspList[i]->appendToAndUnlink(lv->fdSuspList[i], reset_local);
}

inline
void GenFDVariable::installPropagators(GenFDVariable * glob_var)
{
  installPropagatorsG(glob_var);
  for (int i = 0; i < fd_prop_any; i += 1)
    fdSuspList[i] = oz_installPropagators(fdSuspList[i],
					  glob_var->fdSuspList[i],
					  GETBOARD(glob_var));
}

inline
Bool isGenFDVar(TaggedRef term)
{
  GCDEBUG(term);
  return isCVar(term) && (tagged2CVar(term)->getType() == FDVariable);
}

inline
Bool isGenFDVar(TaggedRef term, TypeOfTerm tag)
{
  GCDEBUG(term);
  Assert(tag == tagTypeOf(term));
  return isCVar(tag) && (tagged2CVar(term)->getType() == FDVariable);
}

inline
GenFDVariable * tagged2GenFDVar(TaggedRef term)
{
  GCDEBUG(term);
  return (GenFDVariable *) tagged2CVar(term);
}

inline
void addSuspFDVar(TaggedRef v, Suspension susp, OZ_FDPropState list_index)
{
  GenFDVariable * fv = tagged2GenFDVar(v);

  switch (list_index) {
  case fd_prop_singl:
    AddSuspToList(fv->fdSuspList[fd_prop_singl], susp, fv->getHome1());
    break;
  case fd_prop_bounds:
    AddSuspToList(fv->fdSuspList[fd_prop_bounds], susp, fv->getHome1());
    break;
  case fd_prop_any:
    AddSuspToList(fv->suspList, susp, fv->getHome1());
    break;
  default:
    error("list index out of range.");
    break;
  }
}

inline 
GenBoolVariable * GenFDVariable::becomesBool(void) { 
  relinkSuspListToItself(); // mm2: should return the suspList
  finiteDomain.disposeExtension();
  return new(this) GenBoolVariable(suspList);
}

inline
void GenFDVariable::becomesSmallIntAndPropagate(TaggedRef * trPtr)
{
  if (oz_isSmallInt(*trPtr)) return;

  Assert(this == tagged2SVarPlus(*trPtr));

  TaggedRef si_val = OZ_int(finiteDomain.getSingleElem());
  propagate(fd_prop_singl);
  doBind(trPtr, si_val);
  dispose();
}

#endif /* __FDGENVAR_ICC__ */

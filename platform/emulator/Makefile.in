#  Authors:
#    Michael Mehl (mehl@dfki.de)
#
#  Contributors:
#    optional, Contributor's name (Contributor's email address)
#
#  Copyright:
#    Michael Mehl, 1998
#
#  Last change:
#    $Date$ by $Author$
#    $Revision$
#
#  This file is part of Mozart, an implementation
#  of Oz 3:
#     http://mozart.ps.uni-sb.de
#
#  See the file "LICENSE" or
#     http://mozart.ps.uni-sb.de/LICENSE.html
#  for information on usage and redistribution
#  of this file, and for a DISCLAIMER OF ALL
#  WARRANTIES.

# !!! THIS MAKEFILE REQUIRES GNU MAKE !!!!

############################################################################
# VARIABLES
############################################################################

VPATH=  @srcdir@
SRCDIR= @srcdir@

include Makefile.vars

MODULE_NAMES = Wif FDP Schedule FSP Parser \
        ozma CompilerSupport Browser Debug
STATIC_MODULETARGETS  = $(MODULE_NAMES:%=lib%.a)
DYNAMIC_MODULETARGETS = $(MODULE_NAMES:%=%.so)

INCS            = -I. -I$(SRCDIR)
M4_D            = -DEMUDIR=$(SRCDIR)
TARGETS         = @TARGETS@
MODULETARGETS   = @MODULETARGETS@
MODULEINSTALL   = @MODULEINSTALL@
SUBDIRS         = libfd libfset
OZVERSION       = $(SRCTOP)/OZVERSION

MODSPECS = FDP FSP Schedule Wif Parser OS Property Pickle \
        PID URL FDB FSB System Finalize CTB \
        CompilerSupport Profile \
        Debug Fault Foreign Browser Misc Distribution \
        Builtins

MODINTERS = $(MODSPECS:%=mod%-if.cc)

CREATEDOTHERS= \
        instrtab.hh opcodes.hh optostr.hh marshaler.hh\
        marshalcode.cc marshalMsg.cc register.hh oz.c \
        atoms.hh \
        config.h scanner.cc parser.cc \
        $(MODINTERS)


CREATEDSRCS= \
        copycode.cc opcodes.cc \
        version.cc initffuns.cc atoms.cc

CREATEDFILES= $(CREATEDOTHERS) $(CREATEDSRCS)

PEANUTSFILE= peanuts.cc
PEANUTS= \
        am.cc genvar.cc indexing.cc fdhook.cc \
        taskstk.cc mem.cc \
        statisti.cc fdgenvar.cc \
        codearea.cc trace.cc lps.cc solve.cc \
        variable.cc thrqueue.cc thrspool.cc \
        perdiovar.cc \
        print.cc

CXXSRCS= \
        actor.cc base.cc board.cc thread.cc \
        dictionary.cc stack.cc susplist.cc \
        cpbag.cc tagged.cc value.cc \
        cont.cc ozconfig.cc trail.cc \
        foreign.cc boot-manager.cc \
        ofgenvar.cc genhashtbl.cc \
        ozostream.cc controlvar.cc unix.cc \
        perdio.cc debug.cc \
        urlc.cc iso-ctype.cc hashtbl.cc \
        os.cc emulate.cc scheduler.cc builtins.cc \
        components.cc network.cc virtual.cc \
        comm.cc marshaler.cc liveness.cc gc.cc \
        vprops.cc \
        vs_comm.cc vs_mailbox.cc vs_msgbuffer.cc \
        ctgenvar.cc simplevar.cc \
        ofbi.cc ioHandler.cc future.cc \
        threadInterface.cc space.cc

FDSRCS=\
        fdbuilti.cc fdomn.cc fdcore.cc \
        fdcd.cc fdbvar.cc

CPISRCS=\
        cpi.cc cpi_fd.cc cpi_prop.cc \
        cpi_fs.cc cpi_expect.cc cpi_misc.cc \
        cpi_stream.cc cpi_profile.cc cpi_ct.cc

FSETSRCS=\
        fset.cc fsetcore.cc fsgenvar.cc

SRCS1=  $(FDSRCS) $(FSETSRCS) $(CPISRCS) $(CXXSRCS) @PEANUTS@ main.cc

SRCS=   $(SRCS1) $(CREATEDSRCS)

OBJS = $(SRCS:.cc=.o)

############################################################################
### TARGETS
############################################################################

.NOEXPORT: emulate.o @PROGRAMNAME@ peanuts.o
.PHONY: all win win-install first install install-bin install-inc \
        install-dir depend tags clean distclean veryclean \
        install-module

all: $(TARGETS)

bootstrap:: all

$(MODINTERS): bidecl.perl

libFDP.a FDP.so libSchedule.a Schedule.so: \
        libfd modFDP-if.cc modSchedule-if.cc
        cd libfd; $(MAKE) $@

libFSP.a FSP.so: \
        libfset modFSP-if.cc
        cd libfset; $(MAKE) $@

Wif.so: wif.o
        $(DYNLD) -o $@ wif.o

libWif.a: wif.o
        $(AR) -rc $@ wif.o && $(RANLIB) $@

CompilerSupport.so: compiler.o
        $(DYNLD) -o $@ compiler.o

libCompilerSupport.a: compiler.o
        $(AR) -rc $@ compiler.o && $(RANLIB) $@

browser.o: modBrowser-if.cc

Browser.so: browser.o
        $(DYNLD) -o $@ browser.o

libBrowser.a: browser.o
        $(AR) -rc $@ browser.o && $(RANLIB) $@

Debug.so: debug.o
        $(DYNLD) -o $@ debug.o

libDebug.a: debug.o
        $(AR) -rc $@ debug.o && $(RANLIB) $@


win: ozlib.lnk $(CREATEDFILES)


PRGDEP=$(CREATEDFILES) $(SRCS) $(OBJS) $(OZMALIB) $(MODULETARGETS)

first: $(CREATEDFILES) $(SRCS)

@PROGRAMNAME@: $(PRGDEP)
        $(LD) $(LDFLAGS) $(LDOPT) -o $@ $(OBJS) $(LIBS)

@oz_tmphack_programname@: $(PRGDEP)
        tmp=/tmp/ozemu$$$$; \
        trap "rm -f $$tmp; exit 1" 1 2 15; \
         $(LD) $(LDFLAGS) $(LDOPT) -o $$tmp $(OBJS) $(LIBS) && \
         echo 'moving ...' && \
         rcp $$tmp @oz_tmphack_host@:`pwd`/$@ && \
         rm -f $$tmp

install:: install-bin install-inc $(MODULEINSTALL)

install-bin: $(TARGETS) $(BINDIR)
        $(INSTALL_BIN) $(TARGETS) $(BINDIR)

install-inc: $(INCDIR)
        $(INSTALL_FILE) $(SRCDIR)/oz.h $(INCDIR)
        $(INSTALL_FILE) $(SRCDIR)/oz_cpi.hh $(INCDIR)

install-module: $(DYNAMIC_MODULETARGETS) $(BINDIR)
        $(INSTALL_BIN) $(DYNAMIC_MODULETARGETS) $(BINDIR)

$(BINDIR) $(INCDIR):
        $(INSTALL_DIR) $@

initffuns.cc oz.c: oz.h $(OZVERSION)
        $(SHELL) $(SRCDIR)/makeffuns $(SRCDIR) `$(OZVERSION)`

version.cc: version.sed $(filter-out version.cc,$(SRCS))
        sed -e "s/HEREGOESDATE/`date '+%h %d %Y \(%T\)'`/" \
             -e "s/OZPLATFORM/$(PLATFORM)/" \
             $(SRCDIR)/version.sed > version.cc

depend:: Makefile $(CREATEDFILES) $(SRCS)
        $(DEPEND) $(SRCDIR)/wif.cc $(SRCS1:%=$(SRCDIR)/%) $(CREATEDSRCS) > Makefile.deps

## prefered gmake depend!
## include $(SRCS:.cc=.d)

tags:   $(CREATEDFILES) version.cc
        etags \
        --regex='/OZ_BI_\(io\)?define([         ]*\([^  ,)]+\)/\2/' \
        --regex='/OZ_C_\(io\)?proc_begin([      ]*\([^  ,)]+\)/\2/' -l c++ \
        -o $(SRCDIR)/TAGS \
        $(CREATEDFILES) \
        $(SRCDIR)/*c $(SRCDIR)/*h $(SRCDIR)/*/*c $(SRCDIR)/*/*h

clean::
        -rm -f gmon.out  fetchedInstr.dump verb_out.txt

ozlib.lnk: oz.h
        grep FUNDECL oz.h | grep -v typedef | grep -v define | \
        sed -e 's/.*_FUNDECL(\([A-Za-z0-9_]*\).*/export _\1/' > $@

scanner.cc: scanner.ll
        $(LEX) $(LFLAGS) -Pxy -o$@ $<

parser.cc: parser.hh
        @echo > /dev/null

parser.hh: parser.yy
        $(YACC) $(YFLAGS) -p xy $<
        @mv y.tab.c parser.cc
        @mv y.tab.h parser.hh

Parser.so: parser.o scanner.o parsertable.o
        $(DYNLD) -o $@ parser.o scanner.o parsertable.o

libParser.a: parser.o scanner.o parsertable.o
        $(AR) -rc $@ parser.o scanner.o parsertable.o && $(RANLIB) $@

wif.o: modWif-if.cc

parsertable.o: modParser-if.cc

compiler.o: modCompilerSupport-if.cc

boot-manager.o: $(MODINTERS)

%-if.cc: %.spec
        perl $(SRCDIR)/bidecl.perl -file $< -interface > $@

# this special rule ensures that warnings issued in bison.simple
# are not treated as errors:
parser.o: parser.cc
        $(CXX) $(CPPFLAGS) $(CXXFLAGS_NO_ERROR) -c $< -o $@

config.h: config.m4h $(OZVERSION)
        $(M4) $(M4_D) -DOZVERSION=\"`$(OZVERSION)`\" $(SRCDIR)/config.m4h > $@

#/usr/include/signal.h is broken on Linux:
#os.cc: In function `void osBlockSignals(int = 0)':
#os.cc:208: warning: assignment of negative value `-1' to `long unsigned int'
os.o: os.cc
        $(CXX) $(CPPFLAGS) $(CXXFLAGS_NO_ERROR) -c $< -o $@

# dependencies
-include Makefile.deps

value.cc: atoms.hh

marshaler.hh marshalMsg.cc: msgFormat.m4
copycode.cc optostr.hh marshalcode.cc opcodes.hh opcodes.cc instrtab.hh config.h: instrDefs.m4

marshaler.o: marshalcode.cc

components.o: componentBuffer.cc

# automatic configure
#${srcdir}/configure: configure.in
#       cd ${srcdir} && autoconf -l ..

conf.h: conf.h.in
        ./config.status

Makefile: Makefile.in
        ./config.status

Makefile.vars: Makefile.vars.in
        ./config.status

Makefile.rules: Makefile.rules.in
        ./config.status

config.status: configure
        ./config.status --recheck


# ozma
ozma-s.cc: ozma-s.ll
        $(LEX) $(LFLAGS) -Pozma $<
        @mv lex.ozma.c ozma-s.cc

ozma-p.cc ozma.hh: ozma-p.yy
        $(YACC) $(YFLAGS) -p ozma $<
        @mv y.tab.c ozma-p.cc
        @mv y.tab.h ozma.hh

ozma-s.ll ozma-p.yy: instrDefs.m4
ozma-p.o ozma-s.o: config.h opcodes.hh

# this special rule ensures that warnings issued in bison.simple
# are not treated as errors:
ozma-p.o: ozma-p.cc
        $(CXX) $(CPPFLAGS) $(CXXFLAGS_NO_ERROR) -c $< -o $@

ozma-s.ll: ozma-s.m4ll
        $(M4) $(M4_D) $< > $@

ozma-p.yy: ozma-p.m4yy
        $(M4) $(M4_D) $< > $@

ozma.so: ozma-p.o ozma-s.o
        $(DYNLD) -o $@ ozma-p.o ozma-s.o -lc

libozma.a: ozma-p.o ozma-s.o
        $(AR) -rc $@ ozma-p.o ozma-s.o && $(RANLIB) $@

veryclean::
        -rm -f ozma-p.cc ozma-p.yy ozma-s.cc ozma-s.ll ozma.hh

############################################################################
# testing the local emulator:
#   make test-check       # runs the test suite with local emulator
#   make test-stage1-check # ... with the stage1 components
#   make lib-check        # runs the check in the lib with local emulator
############################################################################

.PHONY: test-all test lib-all check

test-all:
        OZEMULATOR=`pwd`/oz.emulator.bin; export OZEMULATOR; \
        cd $(TESTDIR) && ./configure && make clean all
        $(MAKE) test1;

test:
        OZEMULATOR=`pwd`/oz.emulator.bin; export OZEMULATOR; \
        cd $(TESTDIR) && \
        $(MAKE) check

lib-all:
        $(MAKE) lib-check

lib-%:
        OZEMULATOR=`pwd`/oz.emulator.bin && export OZEMULATOR; \
        cd $(LIBDIR) && \
        $(MAKE) $*

test-%:
        OZEMULATOR=`pwd`/oz.emulator.bin && export OZEMULATOR; \
        cd $(TESTDIR) && \
        $(MAKE) $*

check-all: oz.emulator.bin
        $(MAKE) test
        $(MAKE) lib-check


############################################################################
# RULES
############################################################################

include Makefile.rules

# should be after make in subdirs (see Makefiles.rules)

veryclean::
        -rm -f version.cc scanner.cc parser.cc parser.hh $(TARGETS) \
                ozlib.lnk *.exe *.map *.imp *.sym \
                $(CREATEDFILES) TAGS Makefile.deps

distclean::
        -rm -f CONF.h conf.h config.cache config.log config.status \
                Makefile.rules Makefile.vars Makefile

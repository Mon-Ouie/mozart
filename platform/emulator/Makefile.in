#  Authors:
#    Michael Mehl (mehl@dfki.de)
# 
#  Contributors:
#    optional, Contributor's name (Contributor's email address)
# 
#  Copyright:
#    Michael Mehl, 1998
# 
#  Last change:
#    $Date$ by $Author$
#    $Revision$
# 
#  This file is part of Mozart, an implementation 
#  of Oz 3:
#     http://www.mozart-oz.org
# 
#  See the file "LICENSE" or
#     http://www.mozart-oz.org/LICENSE.html
#  for information on usage and redistribution 
#  of this file, and for a DISCLAIMER OF ALL 
#  WARRANTIES.

# !!! THIS MAKEFILE REQUIRES GNU MAKE !!!!

############################################################################
# VARIABLES
############################################################################

VPATH=	@srcdir@
SRCDIR=	@srcdir@

include Makefile.vars

MODULE_NAMES =							\
	PID Fault DPMisc DPB VirtualSite DPPane Tk Schedule FDP FSP Parser \
	CompilerSupport Browser Debug Space FDB FSB CTB RecordC Compat

STATIC_MODULES=		@STATIC_MODULES@
DYNAMIC_MODULES=	@DYNAMIC_MODULES@
STATIC_MODULELIBS=	-L. ${STATIC_MODULES:%=-l%}
STATIC_MODULETARGETS=	$(STATIC_MODULES:%=lib%.a)
DYNAMIC_MODULETARGETS=	$(DYNAMIC_MODULES:%=%.so)

LIBS=		$(STATIC_MODULELIBS) @LIBS@ 

INCS=		-I. -I$(SRCDIR)
M4_D=		-DEMUDIR=$(SRCDIR)
TARGETS=	emulator.exe text2pickle.exe $(DYNAMIC_MODULETARGETS)
SUBDIRS=	libdp libfd libfset
OZVERSION=	$(SRCTOP)/OZVERSION

# these are the builtin modules: non-sited primitives
# NOTE: update this list also in share/lib/Makefile.in 
BIMODSPECS = \
	Array Atom BitArray Bool Cell Char Chunk Class \
	Dictionary Exception Float ForeignPointer Int List Literal \
	Lock Name Number Object Port Procedure Record \
	String Thread Time Tuple Unit Value VirtualString \
	BitString ByteString InterFault \
	INTERNAL # do not include this at compiler (things will blow up!)

MODSPECS= \
	FDP FSP Schedule Tk Parser OS Property Pickle \
	PID URL FDB FSB CTB RecordC Space System Finalize CTB \
	CompilerSupport Compat Profile \
	Debug Fault Browser Misc DPMisc Distribution \
	VirtualSite Application DPPane \
	$(BIMODSPECS) \
	WeakDictionary $(DENYS_SPECS)

MODINTERS = $(MODSPECS:%=mod%-if.cc)

CREATEDFILES=						\
	instrtab.hh opcodes.hh				\
	marshalcode.cc mozart.c		\
	atoms.hh atoms.cc				\
	config.h					\
	version.cc initffuns.cc copycode.cc opcodes.cc	\
	$(MODINTERS)

OTHERSRCS= \
	main.cc \
	version.cc initffuns.cc \
	statisti.cc trace.cc \
	print.cc base.cc ozconfig.cc \
	foreign.cc dpInterface.cc boot-manager.cc \
	builtins.cc vprops.cc debug.cc interFault.cc

SUPPORTSRCS=\
	stack.cc genhashtbl.cc ozostream.cc hashtbl.cc \
	iso-ctype.cc

OSSRCS=\
	os.cc unix.cc urlc.cc ioHandler.cc $(DENYS_SRCS)

STORESRCS=\
	tagged.cc value.cc atoms.cc \
	dictionary.cc extension.cc bitarray.cc \
	ozthread.cc heapchunk.cc bytedata.cc bits.cc \
	susplist.cc \
	var_base.cc var_ext.cc var_simple.cc var_future.cc \
	namer.cc \
	weakdict.cc

RUNSRCS=\
	am.cc unify.cc indexing.cc codearea.cc \
	trail.cc emulate.cc scheduler.cc \
	copycode.cc opcodes.cc controlvar.cc \
	prop_int.cc prop_class.cc \
	thr_stack.cc thr_class.cc thr_pool.cc \
	susp_queue.cc thr_int.cc suspendable.cc

SPACESRCS=\
	board.cc distributor.cc space.cc

MEMSRCS=\
	g-collect.cc mem.cc liveness.cc

PICKLESRCS=\
	gname.cc components.cc marshaler.cc site.cc
#	gentraverser.cc newmarshaler.cc

OFSRCS=	var_of.cc

FDSRCS=\
	fdomn.cc \
	var_fd.cc var_bool.cc

CPISRCS=\
	cpi.cc cpi_fd.cc cpi_prop.cc \
	cpi_fs.cc cpi_expect.cc cpi_misc.cc \
	cpi_stream.cc cpi_profile.cc cpi_ct.cc \
	var_ct.cc

FSETSRCS=\
	fset.cc var_fs.cc

TEXT2PICKLESRCS= text2pickle.cc
TEXT2PICKLEOBJS= $(TEXT2PICKLESRCS:.cc=.o)

SRCS= \
	$(SUPPORTSRCS) $(STORESRCS) $(OSSRCS) \
	$(RUNSRCS) $(MEMSRCS) $(SPACESRCS) \
	$(CPISRCS) $(FDSRCS) $(FSETSRCS) $(OFSRCS) \
	$(PICKLESRCS)


OBJS=   $(SRCS:%.cc=%.o) $(OTHERSRCS:%.cc=%.o)

TKSRCS=	\
	tk.cc
COMPILERSUPPORTSRCS= \
	compiler.cc
BROWSERSRCS= \
	browser.cc
DEBUGSRCS= \
	debugBI.cc
SPACEOPSRCS = \
	s-clone.cc board-bi.cc
FDBSRCS = \
	fdcore.cc
FSBSRCS = \
	fsetcore.cc
CTBSRCS = \
	ct-bi.cc
RECORDCSRCS = \
	ofs-bi.cc
COMPATSRCS = \
	compat.cc

TKOBJS=	$(TKSRCS:%.cc=%.lo)
COMPILERSUPPORTOBJS=	$(COMPILERSUPPORTSRCS:%.cc=%.lo)
BROWSEROBJS=	$(BROWSERSRCS:%.cc=%.lo)
DEBUGOBJS=	$(DEBUGSRCS:%.cc=%.lo)
SPACEOPOBJS=	$(SPACEOPSRCS:%.cc=%.lo)
FDBOBJS=	$(FDBSRCS:%.cc=%.lo)
FSBOBJS=	$(FSBSRCS:%.cc=%.lo)
CTBOBJS=	$(CTBSRCS:%.cc=%.lo)
RECORDCOBJS=	$(RECORDCSRCS:%.cc=%.lo)
COMPATOBJS=	$(COMPATSRCS:%.cc=%.lo)


ALLSRCS= $(SRCS) \
	$(TKSRCS) $(COMPILERSUPPORTSRCS) $(BROWSERSRCS) \
	$(SPACEOPSRCS) $(FDBSRCS) $(FSBSRCS) $(CTBSRCS) \
	$(RECORDCSRCS) $(COMPATSRCS) \
	$(DEBUGSRCS) $(TEXT2PICKLESRCS)

############################################################################
### TARGETS
############################################################################

.NOEXPORT: emulate.o emulator.exe
.PHONY:	all first install install-bin install-inc \
	install-dir depend tags clean distclean veryclean

all: $(TARGETS) 

bootstrap:: all

$(MODINTERS): bidecl.perl

.PHONY: libDPB.a DPB.so
libDPB.a DPB.so:
	cd libdp; $(MAKE) ../$@

.PHONY: libPID.a PID.so
libPID.a PID.so:
	cd libdp; $(MAKE) ../$@

.PHONY: libFault.a Fault.so
libFault.a Fault.so:
	cd libdp; $(MAKE) ../$@


.PHONY: libDPMisc.a DPMisc.so
libDPMisc.a DPMisc.so:
	cd libdp; $(MAKE) ../$@

.PHONY: libDPPane.a DPPane.so
libDPPane.a DPPane.so:
	cd libdp; $(MAKE) ../$@

.PHONY: libVirtualSite.a VirtualSite.so
libVirtualSite.a VirtualSite.so:
	cd libdp; $(MAKE) ../$@

.PHONY: libFDP.a FDP.so libSchedule.a Schedule.so
libFDP.a FDP.so libSchedule.a Schedule.so:
	cd libfd; $(MAKE) ../$@

.PHONY: libFSP.a FSP.so
libFSP.a FSP.so:
	cd libfset; $(MAKE) ../$@

Tk.so: $(TKOBJS)
	$(DYNLD) -o $@ $(TKOBJS)

libTk.a: $(TKOBJS)
	$(AR) -rc $@ $(TKOBJS) && $(RANLIB) $@

Space.so: $(SPACEOPOBJS)
	$(DYNLD) -o $@ $(SPACEOPOBJS)

libSpace.a: $(SPACEOPOBJS)
	$(AR) -rc $@ $(SPACEOPOBJS) && $(RANLIB) $@

FDB.so: $(FDBOBJS)
	$(DYNLD) -o $@ $(FDBOBJS)

libFDB.a: $(FDBOBJS)
	$(AR) -rc $@ $(FDBOBJS) && $(RANLIB) $@

FSB.so: $(FSBOBJS)
	$(DYNLD) -o $@ $(FSBOBJS)

libFSB.a: $(FSBOBJS)
	$(AR) -rc $@ $(FSBOBJS) && $(RANLIB) $@

CTB.so: $(CTBOBJS)
	$(DYNLD) -o $@ $(CTBOBJS)

libCTB.a: $(CTBOBJS)
	$(AR) -rc $@ $(CTBOBJS) && $(RANLIB) $@

RecordC.so: $(RECORDCOBJS)
	$(DYNLD) -o $@ $(RECORDCOBJS)

libRecordC.a: $(RECORDCOBJS)
	$(AR) -rc $@ $(RECORDCOBJS) && $(RANLIB) $@

Compat.so: $(COMPATOBJS)
	$(DYNLD) -o $@ $(COMPATOBJS)

libCompat.a: $(COMPATOBJS)
	$(AR) -rc $@ $(COMPATOBJS) && $(RANLIB) $@

CompilerSupport.so: $(COMPILERSUPPORTOBJS)
	$(DYNLD) -o $@ $(COMPILERSUPPORTOBJS)

libCompilerSupport.a: $(COMPILERSUPPORTOBJS)
	$(AR) -rc $@ $(COMPILERSUPPORTOBJS) && $(RANLIB) $@

browser.o: modBrowser-if.cc

Browser.so: $(BROWSEROBJS)
	$(DYNLD) -o $@ $(BROWSEROBJS)

libBrowser.a: $(BROWSEROBJS)
	$(AR) -rc $@ $(BROWSEROBJS) && $(RANLIB) $@

Debug.so: $(DEBUGOBJS)
	$(DYNLD) -o $@ $(DEBUGOBJS)

libDebug.a: $(DEBUGOBJS)
	$(AR) -rc $@ $(DEBUGOBJS) && $(RANLIB) $@


PRGDEP=$(CREATEDFILES) $(OBJS) $(STATIC_MODULETARGETS)

first: $(CREATEDFILES)
	for d in $(SUBDIRS); do (cd $$d; $(MAKE) first); done

emulator.exe: $(PRGDEP)
	$(LD) $(EMULDFLAGS) $(LDFLAGS) $(LDOPT) -o $@ $(OBJS) $(LIBS)

text2pickle.exe: $(TEXT2PICKLEOBJS)
	$(LD) $(EMULDFLAGS) $(LDFLAGS) $(LDOPT) -o $@ $(TEXT2PICKLEOBJS)

install:: install-bin install-inc

install-bin: $(TARGETS) $(BINDIR)
	for exe in oztool.sh $(TARGETS); do\
	  $(INSTALL_BIN) $$exe $(BINDIR) || exit 1;\
	done

install-inc: $(INCDIR)
	$(INSTALL_FILE) $(SRCDIR)/mozart.h $(INCDIR)
	$(INSTALL_FILE) $(SRCDIR)/extension.hh $(INCDIR)
	$(INSTALL_FILE) $(BUILDDIR)/mozart.c $(INCDIR)
	$(INSTALL_FILE) $(SRCDIR)/mozart_cpi.hh $(INCDIR)

$(BINDIR) $(INCDIR):
	$(INSTALL_DIR) $@

initffuns.cc mozart.c: mozart.h $(OZVERSION)
	$(SHELL) $(SRCDIR)/makeffuns $(SRCDIR) `$(OZVERSION)`

version.cc: version.sed $(filter-out version.cc,$(ALLSRCS))
	sed -e "s/HEREGOESDATE/@OZBUILDDATE@/" \
	     -e "s/OZPLATFORM/$(PLATFORM)/" \
	     $(SRCDIR)/version.sed > version.cc

depend:: version.cc initffuns.cc $(ALLSRCS)
	$(MAKE) first
	$(DEPEND) $^ > Makefile.deps

BUILDDIR=$(shell pwd)
tags:	$(CREATEDFILES) version.cc
	etags \
	--regex='/OZ_BI_\(io\)?define([ 	]*\([^ 	,)]+\)/\2/' \
	--regex='/OZ_C_\(io\)?proc_begin([ 	]*\([^ 	,)]+\)/\2/' -l c++ \
	-o $(SRCDIR)/TAGS \
	$(addprefix $(BUILDDIR)/,$(CREATEDFILES)) \
	$(SRCDIR)/*c $(SRCDIR)/*h $(SRCDIR)/*/*c $(SRCDIR)/*/*h

clean::
	-rm -f gmon.out  fetchedInstr.dump verb_out.txt


new-scanner:
	$(LEX) $(LFLAGS) -L -Pxy -o$(SRCDIR)/scanner.cc $(SRCDIR)/scanner.ll
	grep -v unistd.h $(SRCDIR)/scanner.cc > $(SRCDIR)/winscanner.cc

new-parser:
	$(YACC) $(YFLAGS) -l -p xy $(SRCDIR)/parser.yy
	@mv y.tab.c $(SRCDIR)/parser.cc
	@mv y.tab.h $(SRCDIR)/parser.hh


PARSEROBJS = parser.lo scanner.lo parsertable.lo
Parser.so: $(PARSEROBJS)
	$(DYNLD) -o $@ $(PARSEROBJS)

libParser.a: $(PARSEROBJS)
	$(AR) -rc $@ $(PARSEROBJS) && $(RANLIB) $@

board-bi.o: modSpace-if.cc
board-bi.lo: modSpace-if.cc

tk.o: modTk-if.cc

parsertable.o: modParser-if.cc

compiler.o: modCompilerSupport-if.cc

boot-manager.o: $(MODINTERS)

%-if.cc: %.spec
	$(PERL) $(SRCDIR)/bidecl.perl -file $< -interface > $@

# these special rules ensure that warnings issued in bison.simple
# are not treated as errors:
parser.o: parser.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS_NO_ERROR) -c -o $@ $<
parser.lo: parser.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS_NO_ERROR) $(CDYNOPT) -c -o $@ $<

config.h: config.m4h $(OZVERSION)
	$(M4) $(M4_D) -DOZVERSION=\"`$(OZVERSION)`\" $(SRCDIR)/config.m4h > $@

# dependencies
-include Makefile.deps

value.o: atoms.hh

copycode.cc marshalcode.cc opcodes.hh opcodes.cc instrtab.hh config.h: instrDefs.m4

marshaler.o: marshalcode.cc pickle.cc
text2Pickle.o: pickle.cc
components.o: componentBuffer.cc

# automatic configure
#${srcdir}/configure: configure.in
#	cd ${srcdir} && autoconf -l ..

conf.h: conf.h.in
	./config.status

Makefile: Makefile.in
	./config.status

Makefile.vars: Makefile.vars.in
	./config.status

Makefile.rules: Makefile.rules.in
	./config.status

config.status: configure
	./config.status --recheck

############################################################################
# testing the local emulator:
#   make test-check       # runs the test suite with local emulator
#   make test-stage1-check # ... with the stage1 components
#   make lib-check        # runs the check in the lib with local emulator
############################################################################

.PHONY: test-all test lib-all check

OZTESTOPTS=-v
test:
	OZEMULATOR=`pwd`/emulator.exe; export OZEMULATOR; \
	cd $(TESTDIR) && \
	$(MAKE) check OZTESTOPTS="$(OZTESTOPTS)"

lib-all:
	$(MAKE) lib-check

lib-%:
	OZEMULATOR=`pwd`/emulator.exe && export OZEMULATOR; \
	cd $(LIBDIR) && \
	$(MAKE) $*

test-%:
	OZEMULATOR=`pwd`/emulator.exe && export OZEMULATOR; \
	cd $(TESTDIR) && \
	$(MAKE) $* OZTESTOPTS=$(OZTESTOPTS)

check-all: emulator.exe
	$(MAKE) test
	$(MAKE) lib-check


############################################################################
# RULES
############################################################################

include Makefile.rules

atoms.cc: atoms.perl
	$(PERL) $< -body > $@

atoms.hh: atoms.perl
	$(PERL) $< -header > $@

# should be after make in subdirs (see Makefiles.rules)

veryclean::
	-rm -f version.cc $(TARGETS) \
		*.exe *.map *.imp *.sym \
		$(CREATEDFILES) TAGS Makefile.deps

distclean::
	-rm -f OZCONF.h conf.h config.cache config.log config.status \
		Makefile.rules Makefile.vars Makefile makefile oztool.sh .gdbinit

#  Authors:
#    Michael Mehl (mehl@dfki.de)
# 
#  Contributors:
#    optional, Contributor's name (Contributor's email address)
# 
#  Copyright:
#    Michael Mehl (mehl@dfki.de)
# 
#  Last change:
#    $Date$ by $Author$
#    $Revision$
# 
#  This file is part of Mozart, an implementation 
#  of Oz 3:
#     $MOZARTURL$
# 
#  See the file "LICENSE" or
#     $LICENSEURL$
#  for information on usage and redistribution 
#  of this file, and for a DISCLAIMER OF ALL 
#  WARRANTIES.

SUBDIRS		= FDLib FSetLib
VPATH		= @srcdir@
OZDIR		= @srcdir@
export SHELL	= @SH@
LEX		= @LEX@
LFLAGS		= -8
YACC		= @YACC@
YFLAGS		= -d
MV		= @MV@
SED		= @SED@
ECHO		= @@ECHO@
OZINCDIR	= $(OZDIR)/../include
M4A		= -DOZINCDIR=$(OZINCDIR) -DOZSRCDIR=$(OZDIR)
M4		= @M4@ $(M4A)
M4_S		= @M4_S@ $(M4A)
export RM		= @RM@ -f
export CXX		= @CXX@
export LD		= @LD@
export DYNLD		= @DYNLD@
export RANLIB		= @RANLIB@
export AR		= @AR@

export INSTALL		= @INSTALL@
export INSTALL_DIR	= $(INSTALL) -m 775 -d
export INSTALL_BIN	= $(INSTALL) -m 555
export INSTALL_OTHER   = $(INSTALL) -m 444
export LIBS            = @LIBS@
export LDFLAGS		= @LDFLAGS@

export COPT		= @COPT@
export DEFS		= @DEFS@
export CWARN		= @CWARN@
export INCS		= -I. -I$(OZDIR) -I$(OZINCDIR)
export CFLAGS		= $(COPT) $(DEFS) $(INCS) $(CWARN) $(CUSR)
export CXXFLAGS	= $(CFLAGS)
export DEPEND		= @DEPEND@ $(DEFS) $(INCS)

TARGETS		= @TARGETS@

prefix		= @prefix@
platform	= @platform@
export platformdir	= $(prefix)/platform
export bindir		= $(platformdir)/$(platform)
export incdir		= $(prefix)/include

INSTRDEFS 	= $(OZINCDIR)/instrDefs.m4

#MOREWARNINGS  =   -Wall -pedantic-errors -W -Wtraditional -Wshadow \
#	-Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align \
#	-Wwrite-strings -Wconversion -Waggregate-return -Wstrict-prototypes \
#	-Wmissing-prototypes -Wmissing-declarations -Wredundant-decls \
#	-Wnested-externs -Winline -Woverloaded-virtual -Wsynth -Werror

WARNINGS = -Wall -W -Wpointer-arith -Wbad-function-cast -Wcast-qual \
	-Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations \
	-Wnested-externs -Wsynth -Wno-unused -Wno-reorder -Wno-uninitialized

CREATEDINCS = \
	instrtab.hh\
	opcodes.hh\
	optostr.hh\
	marshaler.hh\
	marshalcode.cc\
	marshalMsg.cc\
	register.hh

CREATEDSRCS = \
	scancode.cc\
	opcodes.cc\
	ozma-p.cc\
	ozma-s.cc\
	scanner.cc\
	parser.cc \
	version.cc\
	initffuns.cc

CREATEDFILES = $(CREATEDINCS) $(CREATEDSRCS)

PEANUTSFILE = peanuts.cc
PEANUTS = \
	am.cc\
	genvar.cc\
	indexing.cc\
	fdhook.cc\
	taskstk.cc\
	mem.cc\
	assemble.cc\
	error.cc\
	fdprofil.cc\
	statisti.cc\
	fdgenvar.cc\
	codearea.cc\
	debug.cc\
	lps.cc\
	solve.cc\
	variable.cc\
	thrqueue.cc\
	thrspool.cc\
	avar.cc\
	perdiovar.cc\
	lazyvar.cc\
	print.cc

CXXSRCS = \
	actor.cc\
	board.cc\
	thread.cc\
	dictionary.cc\
	stack.cc\
	susplist.cc\
	cpbag.cc\
	tagged.cc\
	value.cc\
	cont.cc\
	config.cc\
	trail.cc\
	types.cc\
	foreign.cc\
	gc.cc\
	compiler.cc\
	ofgenvar.cc\
	genhashtbl.cc\
	ozostream.cc\
	runtime.cc\
	unix.cc\
	tcl_tk.cc\
	metavar.cc\
	perdio.cc\
	urlc.cc\
	iso-ctype.cc\
	hashtbl.cc\
	os.cc\
	emulate.cc\
	builtins.cc\
	components.cc\
	network.cc\
	virtual.cc\
	comm.cc\
	marshaler.cc\
	liveness.cc

FDSRCS =\
	fdbuilti.cc\
	fdomn.cc\
	fdcore.cc\
	fdcd.cc\
	fdbvar.cc\
	fddist.cc 

CPISRCS =\
	cpi.cc\
	cpi_fd.cc\
	cpi_prop.cc\
	cpi_fs.cc\
	cpi_expect.cc\
	cpi_misc.cc\
	cpi_stream.cc\
	cpi_profile.cc

FSETSRCS =\
	fset.cc\
	fsetcore.cc\
	fsgenvar.cc

SRCS1 = $(FDSRCS) $(FSETSRCS) $(CPISRCS) $(CXXSRCS) @PEANUTS@ main.cc

SRCS = $(SRCS1) $(CREATEDSRCS)

OBJS = $(SRCS:.cc=.o)

.NOEXPORT: emulate.o @POGRAMNAME@ peanuts.o
.PHONY:	all subdirs win win-install first install install-bin install-inc \
	install-dir version depend tags clean+ clean realclean veryclean

all: subdirs $(TARGETS)

subdirs:
	for d in $(SUBDIRS); do (cd $$d; $(MAKE) all); done

win: ozlib.lnk $(CREATEDFILES)

win-install:
	$(INSTALL_BIN) ozemulator.exe $(bindir)

first: version $(CREATEDFILES) $(SRCS)

@PROGRAMNAME@: first $(OBJS)
	$(LD) $(LDFLAGS) $(LDOPT) -o $@ $(OBJS) $(LIBS)

@tmphack_programname@: first $(OBJS)
	tmp=/tmp/ozemu$$$$; \
	trap "$(RM) $$tmp; exit 1" 1 2 15; \
	 $(LD) $(LDFLAGS) $(LDOPT) -o $$tmp $(OBJS) $(LIBS) && \
	 echo 'moving ...' && \
	 rcp $$tmp @tmphack_host@:`pwd`/$@ && \
	 $(RM) $$tmp

install: install-dir install-bin install-inc
	for d in $(SUBDIRS); do (cd $$d; $(MAKE) install); done

install-bin: $(TARGETS)
	$(INSTALL_BIN) $(TARGETS) $(bindir)

install-inc:
	$(INSTALL_OTHER) $(OZDIR)/oz.h $(incdir)
	$(INSTALL_OTHER) $(OZDIR)/oz_cpi.hh $(incdir)

install-dir:
	if test ! -d $(platformdir) ; then $(INSTALL_DIR) $(platformdir) ; fi
	if test ! -d $(bindir); then $(INSTALL_DIR) $(bindir) ; fi
	if test ! -d $(incdir); then $(INSTALL_DIR) $(incdir) ; fi

version.cc: version 

emulate.cc:: register.hh

initffuns.cc oz.c: oz.h
	$(OZDIR)/makeffuns $(OZDIR)

version:
	$(SED) -e "s/HEREGOESDATE/`date '+%a %h, %d, 19%y \(%T\)'`/" \
	     -e "s/OZPLATFORM/$(platform)/" \
	     $(OZDIR)/version.sed > version.cc


depend: $(CREATEDFILES) $(SRCS)
	$(DEPEND) `for f in $(SRCS1); do echo $(OZDIR)/$$f; done` \
		$(CREATEDSRCS) >> Makefile
	for d in $(SUBDIRS); do (cd $$d; $(MAKE) depend); done

$(M4FILES): $(INSTRDEFS)

tags:	$(M4FILES) version.cc
	etags --regex='/OZ_C[^(]+([ 	]*\([^ 	,)]+\)/\1/' -l c++ \
	*c *h */*c */*h

clean+:	clean
	$(RM) $(TARGETS)

clean:
	$(RM) *.o *~  *.bak *.obj gmon.out  fetchedInstr.dump verb_out.txt
	for d in $(SUBDIRS); do (cd $$d; $(MAKE) clean); done

realclean: clean
	$(RM) version.cc scanner.cc parser.cc parser.hh $(TARGETS) \
		ozma-s.cc ozma-p.cc ozma.hh \
		ozlib.lnk *.exe *.map *.imp *.sym *.so \
		$(M4FILES) \
		$(CREATEDFILES) TAGS \
		conf.h Makefile config.cache config.log config.status
	for d in $(SUBDIRS); do (cd $$d; $(MAKE) realclean); done

veryclean: realclean

ozlib.lnk: oz.h
	grep FUNDECL oz.h | grep -v typedef | grep -v define | \
	sed -e 's/.*_FUNDECL(\([A-Za-z0-9_]*\).*/export _\1/' > $@

scanner.cc: scanner.ll
	$(LEX) $(LFLAGS) -Pxy -t $< > scanner.cc

parser.cc parser.hh: parser.yy
	$(YACC) $(YFLAGS) -p xy $<
	@$(MV) y.tab.c parser.cc
	@$(MV) y.tab.h parser.hh

# this special rule ensures that warnings issued in bison.simple
# are not treated as errors:
parser.o: parser.cc
	$(CXX) $(CXXFLAGS) -w -c $< -o $@

ozma-s.cc: ozma-s.ll
	$(LEX) $(LFLAGS) -Pozma -t $< > ozma-s.cc

ozma-p.cc ozma.hh: ozma-p.yy
	$(YACC) $(YFLAGS) -p ozma $<
	@$(MV) y.tab.c ozma-p.cc
	@$(MV) y.tab.h ozma.hh

ozma-p.o: ozma-p.cc
	$(CXX) $(CXXFLAGS) -w -c $< -o $@

ozma-s.ll: ozma-s.m4ll
	$(M4) $< > $@

ozma-p.yy: ozma-p.m4yy
	$(M4) $< > $@

#/usr/include/signal.h is broken on Linux:
#os.cc: In function `void osBlockSignals(int = 0)':
#os.cc:208: warning: assignment of negative value `-1' to `long unsigned int'
#os.o: os.cc
#	$(CXX) $(CXXFLAGS) -w -c $< -o $@

.SUFFIXES: .cc .m4cc .hh .m4hh .s .E .sed

.cc.s:
	$(CXX) $(CXXFLAGS) -S -o $@ $<

.cc.E:
	$(CXX) $(CXXFLAGS) -E -o $@ $<

.m4cc.cc:
	$(M4_S) $< > $@

.m4hh.hh:
	$(M4_S) $< > $@

@tmphack_target@:
	$(CXX) $(CXXFLAGS) -c -o /tmp/$$$$.o $< && \
		rcp /tmp/$$$$.o @tmphack_host@:`pwd`/$@; \
		rm -f /tmp/$$$$.o

marshaler.hh marshalMsg.cc: $(OZDIR)/msgFormat.m4
scancode.cc ozma-s.ll ozma-p.yy optostr.hh marshalcode.cc opcodes.hh opcodes.cc instrtab.hh: $(OZINCDIR)/instrDefs.m4



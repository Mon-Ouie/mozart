/*
 *  Authors:
 *    Tobias Mueller (tmueller@ps.uni-sb.de)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     $MOZARTURL$
 * 
 *  See the file "LICENSE" or
 *     $LICENSEURL$
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */

#ifndef __FDBVAR_ICC__
#define __FDBVAR_ICC__

#if defined(INTERFACE) && !defined(OUTLINE)
#pragma interface
#endif

inline
void GenBoolVariable::dispose(void) {
  suspList->disposeList();
  freeListDispose(this, sizeof(GenBoolVariable));
}


inline
void GenBoolVariable::becomesSmallIntAndPropagate(TaggedRef * trPtr, int e)
{
  if (isSmallInt(*trPtr)) return;
  propagate(*trPtr);
  doBind(trPtr, OZ_int(e));
  dispose();
}

inline
void GenBoolVariable::becomesSmallIntAndPropagate(TaggedRef * trPtr,
						  OZ_FiniteDomain & fd)
{
  becomesSmallIntAndPropagate(trPtr, fd.getSingleElem());
}


inline
void GenBoolVariable::installPropagators(GenFDVariable * glob_var,
					 Board * glob_home)
{
  for (int i = 0; i < fd_prop_any; i += 1)
    suspList= am.installPropagators(suspList,
				    glob_var->fdSuspList[i],
				    glob_home);
}


inline
Bool isGenBoolVar(TaggedRef term)
{
  GCDEBUG(term);
  return isCVar(term) && (tagged2CVar(term)->getType() == BoolVariable);
}

inline
Bool isGenBoolVar(TaggedRef term, TypeOfTerm tag)
{
  GCDEBUG(term);
  Assert(tag == tagTypeOf(term));
  return isCVar(tag) && (tagged2CVar(term)->getType() == BoolVariable);
}

inline
GenBoolVariable * tagged2GenBoolVar(TaggedRef term)
{
  GCDEBUG(term);
  return (GenBoolVariable *) tagged2CVar(term);
}

inline
void addSuspBoolVar(TaggedRef v, Thread * el)
{
  GenBoolVariable * bv = tagged2GenBoolVar(v);

  AddSuspToList(bv->suspList, el, bv->home);
}

#endif /* __FDBVAR_ICC__ */

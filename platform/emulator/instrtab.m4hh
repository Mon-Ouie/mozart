/*
 *  Authors:
 *    Ralf Scheidhauer (Ralf.Scheidhauer@ps.uni-sb.de)
 *
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 *
 *  Copyright:
 *    Organization or Person (Year(s))
 *
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 *
 *  This file is part of Mozart, an implementation
 *  of Oz 3:
 *     http://www.mozart-oz.org
 *
 *  See the file "LICENSE" or
 *     http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */

define(readArg,$1)
define(writeArg,$1)

define(instruction,
        `ifelse(numOfRegs($2,$3,$4),1,oneReg(TOUPPER($1)),
                numOfRegs($2,$3,$4),2,twoRegs(TOUPPER($1)),
                INSTR(TOUPPER($1)LBL))
')


define(oneReg,
        `INSTR($1XLBL)
         INSTR($1YLBL)
         INSTR($1GLBL)
')

define(twoRegs,
        `INSTR($1XXLBL)
         INSTR($1XYLBL)
         INSTR($1XGLBL)
         INSTR($1YXLBL)
         INSTR($1YYLBL)
         INSTR($1YGLBL)
         INSTR($1GXLBL)
         INSTR($1GYLBL)
         INSTR($1GGLBL)
')



#ifdef __GNUC__

#define INSTR(instr) && instr,
static void *instrTable[OZERROR+1] = {

#else

#define INSTR(instr) {                                  \
        __asm mov instrTable[eax], OFFSET instr         \
        __asm add eax,4                                 \
      }


static void *instrTable[OZERROR+1];

   _asm mov eax,0

#endif



  include(EMUDIR/instrDefs.m4)


#ifdef __GNUC__
0};
#else
#endif

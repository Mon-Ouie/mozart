/* -*-m4-*-
 *  Authors:
 *    Ralf Scheidhauer (Ralf.Scheidhauer@ps.uni-sb.de)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     http://www.mozart-oz.org
 * 
 *  See the file "LICENSE" or
 *     http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */

define(readArg,$1)
define(writeArg,$1)

define(instruction,
	`INSTR(TOUPPER($1))
')


#ifdef __GNUC__

#ifdef AS_CAN_INLINE_OPCODE_MAP

/* trick GCC into believing that bytecode may actually contain refs
   to the FAKE_... labels - therefore, that, not only are the bytecode
   instruction emulation blocks needed, but that can be reached from
   any DISPATCH point. */

#define INSTR(instr) && FAKE_##instr,
{
  static void* fakeInstrTable[OZERROR+1] = {
  include(EMUDIR/instrDefs.m4)
  0};
  globalFakeInstrTable = fakeInstrTable;
}
#undef INSTR

#if defined(ARCH_I486)
#define LOAD_LABEL(instr) \
asm("movl $TRUE_"#instr",%0" : "=m" (*ptr))
#elif defined(ARCH_SPARC)
#define LOAD_LABEL(instr) \
{ void*reg; asm("sethi %%hi(TRUE_"#instr"), %0\n\tor %0, %%lo(TRUE_"#instr"), %0" : "=r" (reg)); *ptr=reg; }
#elif defined(ARCH_PPC) || defined(ARCH_DARWIN)
{ void* reg; asm("lis %0, $TRUE_"#instr"@ha\n\taddi %0,%0,$TRUE_"#instr"@l" : "=r" (reg)); *ptr=reg; }
#else
#error this platform does not currently support the inline opcode map trick
#endif

#define INSTR(instr) LOAD_LABEL(instr); ++ptr;
static void* instrTable[OZERROR+1];
{
   void** ptr = instrTable;
   include(EMUDIR/instrDefs.m4)
}
#undef INSTR

#else /* AS_CAN_INLINE_OPCODE_MAP */

#define INSTR(instr) && TRUE_ ##instr,
static void *instrTable[OZERROR+1] = {
   include(EMUDIR/instrDefs.m4)
   0};
#undef INSTR

#endif

#else /* __GNUC__ */

#define INSTR(instr) {					\
	__asm mov instrTable[eax], OFFSET instr 	\
	__asm add eax,4					\
      }
static void *instrTable[OZERROR+1];
_asm mov eax,0
include(EMUDIR/instrDefs.m4)
#undef INSTR

#endif

#define yy_create_buffer xy_create_buffer
#define yy_delete_buffer xy_delete_buffer
#define yy_scan_buffer xy_scan_buffer
#define yy_scan_string xy_scan_string
#define yy_scan_bytes xy_scan_bytes
#define yy_flex_debug xy_flex_debug
#define yy_init_buffer xy_init_buffer
#define yy_flush_buffer xy_flush_buffer
#define yy_load_buffer_state xy_load_buffer_state
#define yy_switch_to_buffer xy_switch_to_buffer
#define yyin xyin
#define yyleng xyleng
#define yylex xylex
#define yyout xyout
#define yyrestart xyrestart
#define yytext xytext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *      if ( condition_holds )
 *              yyless( 5 );
 *      else
 *              do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                *yy_cp = yy_hold_char; \
                YY_RESTORE_YY_MORE_OFFSET \
                yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
                YY_DO_BEFORE_ACTION; /* set up yytext again */ \
                } \
        while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
        {
        FILE *yy_input_file;

        char *yy_ch_buf;                /* input buffer */
        char *yy_buf_pos;               /* current position in input buffer */

        /* Size of input buffer in bytes, not including room for EOB
         * characters.
         */
        yy_size_t yy_buf_size;

        /* Number of characters read into yy_ch_buf, not including EOB
         * characters.
         */
        int yy_n_chars;

        /* Whether we "own" the buffer - i.e., we know we created it,
         * and can realloc() it to grow it, and should free() it to
         * delete it.
         */
        int yy_is_our_buffer;

        /* Whether this is an "interactive" input source; if so, and
         * if we're using stdio for input, then we want to use getc()
         * instead of fread(), to make sure we stop fetching input after
         * each newline.
         */
        int yy_is_interactive;

        /* Whether we're considered to be at the beginning of a line.
         * If so, '^' rules will be active on the next match, otherwise
         * not.
         */
        int yy_at_bol;

        /* Whether to try to fill the input buffer when we reach the
         * end of it.
         */
        int yy_fill_buffer;

        int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
        /* When an EOF's been seen but there's still some text to process
         * then we mark the buffer as YY_EOF_PENDING, to indicate that we
         * shouldn't try reading from the input source any more.  We might
         * still have a bunch of tokens to match, though, because of
         * possible backing-up.
         *
         * When we actually see the EOF, we change the status to "new"
         * (via yyrestart()), so that the user can continue scanning by
         * just pointing yyin at a new input file.
         */
#define YY_BUFFER_EOF_PENDING 2
        };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_is_interactive = is_interactive; \
        }

#define yy_set_bol(at_bol) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_at_bol = at_bol; \
        }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
        yytext_ptr = yy_bp; \
        yyleng = (int) (yy_cp - yy_bp); \
        yy_hold_char = *yy_cp; \
        *yy_cp = '\0'; \
        yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 217
#define YY_END_OF_BUFFER 218
static yyconst short int yy_accept[655] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  218,  216,
      213,  214,  212,  216,  212,    1,  216,  216,   79,   78,
      212,   79,   90,   90,  212,   82,  212,   82,  205,  212,
      216,  216,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  212,   85,
       86,    5,    6,    7,    7,   23,   22,   24,   26,   25,
       27,    1,   26,   31,   30,   32,   31,   29,   31,   28,
       37,   36,   38,   33,   34,   35,   41,   40,   42,   41,

       39,   41,   45,   44,   46,   43,   45,   53,   52,   54,
       51,   53,   57,   56,   58,   55,   57,   49,   48,   50,
       47,   49,   61,   60,   62,   61,   59,   65,   64,   66,
       63,   63,   65,   82,   76,    0,  209,    0,    0,    1,
      211,    0,    0,  201,    0,    0,    0,   71,   88,    2,
       77,   92,   90,    0,    0,    0,   90,   83,   87,   73,
       84,   85,   74,   82,   82,   75,   86,  207,  205,   69,
      215,  215,  215,  215,  215,  215,  215,  215,  215,    0,
        0,  205,    0,  203,  201,  201,   98,  201,  201,  201,
      201,  201,  201,  200,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  143,  201,  147,  201,  201,  201,  201,
      201,  161,  163,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,   90,   90,    5,    4,    3,
        0,   29,    0,   28,   35,    0,   39,    0,   43,    0,
        0,   43,   51,    0,    0,   51,   55,    0,    0,   55,
       47,    0,    0,   47,    0,   59,    0,   59,   63,    0,
        0,   63,   63,   63,    0,    0,   73,   84,   85,   74,
        0,    0,  210,    0,    0,  210,    0,    0,  203,  202,
        0,    0,  202,   70,   91,   92,    0,   90,   90,   83,
       72,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,    0,    0,  206,  207,  206,  201,   99,
      201,  201,  201,  201,  201,  201,  201,  201,  116,   80,
      201,  126,  201,  201,  201,  201,  201,  199,  201,  139,
      144,  201,  148,  149,  201,  201,   80,  159,  162,  164,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  187,
      201,  201,  201,  201,  196,  201,   92,   90,    0,   90,
       29,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   63,   63,   68,    0,   72,    0,    0,    0,
        0,  209,    0,    0,    0,    0,    0,    0,  201,  204,
        0,    0,    0,  204,   89,   92,    0,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
        0,    0,    0,  208,    0,  205,  208,  201,  100,  102,
      201,  201,  201,  110,  201,  201,  117,   81,  118,  127,
      201,  130,  201,  133,  201,  137,  140,  201,  201,  150,
      201,  153,  155,  157,  160,  201,  201,  201,  171,  173,
      175,  201,  201,  201,  183,  185,  188,  189,  201,  201,
      195,  197,  198,   91,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  215,
       18,  215,  215,  215,  215,  215,   12,  215,  215,  215,
      215,  215,    0,    0,  201,  101,  103,  104,  201,  108,

      111,  201,  201,  119,  201,  201,  201,  201,  131,  132,
      134,  201,  138,  201,  201,  151,  154,  156,  158,  201,
      201,  201,  172,  174,  176,  177,  201,  201,  184,  186,
      190,  201,  191,   94,   93,    0,    0,    0,    0,    0,
      215,   19,  215,  215,   16,  215,  215,  215,  215,  215,
      215,   15,    0,    0,  201,  105,  106,  109,  201,  114,
      201,  122,  124,  128,   95,  201,  201,  145,  152,  165,
      167,  201,  178,  201,  201,  193,  192,    0,   14,  215,
      215,   17,   13,  215,  215,  215,    8,   96,  107,  112,
      115,  201,  123,  125,  129,  135,  141,  146,  166,  168,

      169,  179,  181,  194,   67,  215,  215,  215,  215,  215,
       97,  113,  120,  136,  142,  170,  180,  182,  215,  215,
      215,  215,  215,  121,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,   10,  215,  215,
      215,  215,    9,  215,  215,   11,  215,  215,  215,  215,
       21,  215,   20,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   31,   31,   33,   34,
       35,   35,   35,   35,   35,   35,   35,   35,   36,   35,
       35,   35,   37,   35,   35,   35,   35,   38,   35,   35,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   54,   70,   71,   72,   73,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       75,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   76,   74,   74,   74,
       74,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   74,   77,   77,   77,   77,   77,
       77,   77,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   74,   78,   78,   78,
       78,   78,   78,   78,   78
    } ;

static yyconst int yy_meta[80] =
    {   0,
        1,    1,    2,    1,    1,    3,    4,    4,    4,    5,
        5,    6,    4,    7,    4,    4,    8,    8,    9,   10,
       10,   10,   11,    4,    4,   12,   13,   14,    4,    4,
       15,   15,   15,   15,   16,   16,   16,   17,    4,    5,
       18,    4,   19,    5,   20,   20,   15,   15,   15,   20,
       16,   16,   16,   16,   16,   16,   16,   17,   16,   16,
       16,   17,   16,   17,   16,   17,   16,   17,   16,    4,
        4,    4,    8,    4,    4,    4,   21,   21,   22
    } ;

static yyconst short int yy_base[757] =
    {   0,
        0,    0,   77,   78,   80,   82,   84,   86,  105,    0,
      184,    0,  263,    0,  341,  417,  493,  569,  645,  721,
      797,  873,  949, 1026,  343,  348, 1561, 1560, 1585, 3553,
     3553, 3553, 1579,  343, 3553,    0, 1543,  344, 3553, 3553,
      378,   80,  371,  336,   74,  378,  384,  400, 1570, 1540,
      409,  308,  374, 1568,  385,  376,  419,  414,  428,  421,
      422,  355,  452,  444,  454,  435,  456,  348,  489, 3553,
     3553,    0, 3553, 1560, 1564, 3553, 3553, 3553, 3553, 3553,
     3553,    0, 1563, 3553, 3553, 3553,    0, 1558, 1104,  499,
     3553, 3553, 3553, 3553, 3553,    0, 3553, 3553, 3553,    0,

     1557, 1183, 3553, 3553, 3553,    0,   60, 3553, 3553, 3553,
        0,  402, 3553, 3553, 3553,    0,  448, 3553, 3553, 3553,
        0,  453, 3553, 3553, 3553,  350,    0, 3553, 3553, 3553,
      512,  518,  525,  536, 3553,  495, 3553, 1257, 1567,    0,
     3553,  544,  512, 1556, 1320, 1556,  565, 1548,  534, 3553,
     3553,  575,  596,  605,  557,    0,  611, 1541, 3553, 1547,
     3553, 3553, 3553, 1539, 3553, 3553, 3553, 3553, 1550, 3553,
        0, 1512,  357, 1488,  433,  294,  448, 1485, 1493,  571,
     1383, 1538, 1505, 3553, 1536,  488,  571,  577,  531,  504,
      493,  608,  597, 1535,  547,  609,  610,  618,  624,  580,

      587,  625,  627, 1521,  630, 1512,  631,  639,  632,  640,
      633, 1508,  642,  641,  649,  647,  644,  650,  653,  654,
      652,  655,  656,  660,  661,  698,  717,    0, 3553, 3553,
     1508, 1500, 1451,  725,    0, 1506, 1498, 1530,    0,  662,
      711, 3553,    0,  720,  747, 3553,    0,  730,  751, 3553,
        0,  736,  770, 3553,  701, 3553,  774,    0,  672,  706,
        0,  761,  805,  781,  722,    0,  830,  781, 1482,  816,
     1474,  737,  771,  839, 1604, 3553,  785,    0, 3553,  806,
      828, 1644, 1501, 3553, 1494,  844,  858,  793,    0, 3553,
     3553, 1461, 1447, 1461, 1451,  804, 1444, 1448, 1458, 1444,

     1440, 1449, 1453,  868, 1675,  828, 3553, 1488,  722, 3553,
      689,  804,  763,  842,  730,  776,  845,  870, 1487, 1486,
      851, 1485,  859,  871,  872,  873,  874, 1484,  875,  879,
     3553,  880, 3553, 1482,  885,  663,  884, 1477, 3553, 3553,
      882,  886,  887,  908,  890,  433,  901,  891,  902, 1476,
      903,  909,  916,  917, 1475,  910, 1001,  949,  955,  961,
     1475, 1474,  922,    0,  965,    0,  968,    0,  971,    0,
     1010,    0,  904,    0, 3553, 1478, 1014, 1447,  905,  913,
     1019, 3553, 1101, 1027, 1720, 1018,    0,  923, 1470, 1015,
     1104, 1024, 1760, 3553, 3553, 1040, 1044, 1421, 1424, 1419,

     1411, 1421, 1421, 1419, 1405, 1405, 1411, 1394, 1380, 1394,
     1115, 1791, 1012, 1056, 1132, 1430, 3553, 1045, 1428, 1427,
     1046, 1056, 1039, 1426, 1024, 1089, 3553, 3553, 1189, 3553,
     1087, 1425, 1058, 1424,  924, 1423, 3553, 1138, 1115, 3553,
     1148, 1422, 1420, 1419, 3553, 1143, 1154, 1126, 1418, 1414,
     1413, 1156, 1161, 1128, 1412, 1410, 3553, 1408, 1204, 1206,
     1407, 3553, 1406, 3553, 1136,    0, 1141,    0, 1199,    0,
     1208,    0, 1211,    0, 1383, 1217,    0, 1223,    0, 1358,
        0, 1365,  521, 1364, 1364, 1350,    0, 1355, 1343, 1372,
     1361, 1357, 1230,    0, 1222, 3553, 3553, 1394, 1223, 1390,

     3553, 1153, 1234, 3553, 1228, 1235, 1244, 1205, 3553, 1389,
     3553, 1214, 3553, 1229, 1253, 1388, 3553, 3553, 3553, 1262,
     1254, 1270, 3553, 3553, 3553, 1387, 1272, 1263, 3553, 3553,
     3553, 1274, 1386, 3553, 3553, 1369, 1269,    0, 1278,    0,
     1347,    0, 1350, 1345,    0, 1341, 1326, 1350, 1332, 1316,
     1329,    0, 1284,    0, 1269, 3553, 1368, 3553, 1264, 1367,
     1275, 1365, 1364, 1363, 3553, 1268, 1281, 1362, 3553, 1361,
     1360, 1280, 3553, 1284, 1297, 1359, 3553, 1341,    0, 1306,
     1322,    0,    0, 1296, 1298, 1308,    0, 1345, 3553, 1344,
     3553, 1296, 3553, 3553, 3553, 1343, 1342, 3553, 3553, 3553,

     1341, 1340, 1339, 3553, 3553, 1287, 1291, 1295, 1300, 1282,
     3553, 3553, 1332, 3553, 3553, 3553, 3553, 3553, 1290, 1278,
     1271, 1276, 1277, 3553, 1258, 1269, 1267, 1261, 1115, 1115,
     1089, 1089,  980,  992,  896,  897,  899,    0,  760,  737,
      651,  624,    0,  530,  524,    0,  514,  393,  298,   49,
        0,   22,    0, 3553, 1841, 1863, 1885, 1907, 1929, 1951,
     1973, 1995, 2017, 2039, 2061, 2083, 2104, 2121, 2130, 2150,
     2167, 2188, 2208, 2222, 2233, 2251, 2265, 2276, 2297, 2309,
     2330, 2342, 2363, 2375, 2396, 2417, 2429, 2450, 2472, 2494,
     2514, 2534, 2556, 2569, 2584, 2591, 2611, 2633, 2650, 2671,

     2691, 2705, 2716, 2734, 2748, 2759, 2780, 2799, 2810, 2831,
     2850, 2861, 2882, 2901, 2912, 2933, 2952, 2972, 2991, 3002,
     3014, 3034, 3056, 3078, 3100, 3121, 3134, 3154, 3175, 3188,
     3194, 3214, 3236, 3252, 3271, 3290, 3302, 3313, 3324, 3335,
     3346, 3364, 3375, 3393, 3411, 3422, 3433, 3444, 3455, 3466,
     3477, 3488, 3499, 3510, 3521, 3532
    } ;

static yyconst short int yy_def[757] =
    {   0,
      654,    1,  655,  655,  656,  656,  657,  657,  654,    9,
      654,   11,  654,   13,  658,  658,  659,  659,  660,  660,
      661,  661,  662,  662,  663,  663,    1,    1,  654,  654,
      654,  654,  654,  664,  654,  665,  666,  667,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  668,  654,
      669,  670,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  654,  654,
      654,  672,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  665,  654,  654,  654,  654,  673,  674,  674,  674,
      654,  654,  654,  654,  654,  675,  654,  654,  654,  676,

      677,  677,  654,  654,  654,  678,  679,  654,  654,  654,
      680,  681,  654,  654,  654,  682,  683,  654,  654,  654,
      684,  685,  654,  654,  654,  686,  687,  654,  654,  654,
      654,  654,  654,  688,  654,  689,  654,  690,  690,  665,
      654,  691,  692,  654,  693,  693,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  694,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  695,  654,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  697,
      698,  654,  698,  654,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  654,  654,  700,  654,  654,
      701,  702,  702,  702,  703,  704,  705,  705,  706,  707,
      708,  654,  709,  710,  711,  654,  712,  713,  714,  654,
      715,  716,  717,  654,  718,  654,  719,  720,  654,  654,
      721,  654,  654,  654,  722,  723,  722,  722,  654,  722,
      724,  722,  725,  726,  726,  654,  654,  727,  654,  728,
      729,  729,  654,  654,  654,  654,  654,  654,  730,  654,
      654,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  732,  732,  733,  654,  654,  734,  654,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      654,  734,  654,  734,  734,  734,  734,  734,  654,  654,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  654,  654,  654,  654,
      735,  736,  654,  737,  654,  738,  654,  739,  654,  740,
      654,  741,  654,  721,  654,  723,  722,  654,  724,  724,
      725,  654,  742,  726,  726,  654,  743,  728,  654,  728,
      744,  729,  729,  654,  654,  654,  654,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      732,  732,  733,  733,  745,  654,  654,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  654,  654,  734,  654,
      734,  734,  734,  734,  734,  734,  654,  734,  734,  654,
      734,  734,  734,  734,  654,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  654,  734,  734,  734,
      734,  654,  734,  654,  654,  746,  654,  747,  654,  748,
      654,  749,  654,  750,  654,  654,  751,  654,  752,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  654,  753,  734,  654,  654,  734,  734,  734,

      654,  734,  734,  654,  734,  734,  734,  734,  654,  734,
      654,  734,  654,  734,  734,  734,  654,  654,  654,  734,
      734,  734,  654,  654,  654,  734,  734,  734,  654,  654,
      654,  734,  734,  654,  654,  654,  654,  754,  654,  755,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  654,  756,  734,  654,  734,  654,  734,  734,
      734,  734,  734,  734,  654,  734,  734,  734,  654,  734,
      734,  734,  654,  734,  734,  734,  654,  654,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  734,  654,  734,
      654,  734,  654,  654,  654,  734,  734,  654,  654,  654,

      734,  734,  734,  654,  654,  731,  731,  731,  731,  731,
      654,  654,  734,  654,  654,  654,  654,  654,  731,  731,
      731,  731,  731,  654,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,    0,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,

      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654
    } ;

static yyconst short int yy_nxt[3633] =
    {   0,
       30,   31,   32,   31,   33,   34,   35,   35,   36,   37,
       38,   35,   35,   39,   40,   35,   40,   41,   42,   43,
       44,   44,   44,   45,   35,   46,   47,   48,   31,   35,
       49,   49,   49,   49,   49,   49,   49,   49,   50,   51,
       35,   35,   35,   52,   53,   54,   55,   56,   57,   58,
       54,   54,   59,   54,   54,   60,   61,   62,   63,   64,
       54,   65,   66,   67,   68,   54,   54,   54,   54,   35,
       35,   35,   69,   30,   70,   71,   49,   54,   30,   73,
       73,   77,   78,   77,   78,   80,   81,   80,   81,  653,
       74,   74,   82,  150,   82,   75,   75,  158,  151,  241,

      159,  652,   83,  242,   83,   84,   85,   86,   84,   84,
       84,   84,   84,   84,   84,   87,   84,   84,   84,   84,
       84,   88,   89,   88,   90,   90,   90,   90,   84,   84,
       84,   84,   84,   84,   84,   88,   88,   88,   88,   88,
       88,   88,   88,   84,   84,   84,   84,   88,   84,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   84,   84,   84,   88,   84,   84,
       84,   84,   84,   84,   91,   92,   93,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   94,   91,

       95,   91,   91,   96,   96,   96,   96,   91,   91,   91,
       91,   91,   91,   91,   96,   96,   96,   96,   96,   96,
       96,   96,   91,   91,   91,   91,   91,   91,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   97,   98,   99,   97,   97,   97,   97,
       97,   97,   97,  100,   97,   97,   97,   97,   97,  101,
      102,  101,  101,  101,  101,  101,   97,   97,   97,   97,
       97,   97,   97,  101,  101,  101,  101,  101,  101,  101,

      101,   97,   97,   97,   97,  101,   97,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,   97,   97,   97,  101,   97,   97,   97,   97,
       97,   97,  104,  105,  129,  130,  298,  181,  137,  129,
      130,  182,  299,  152,  144,  157,  157,  157,  157,  184,
      256,  651,  131,  132,  132,  132,  184,  131,  132,  132,
      132,  106,  106,  106,  106,  106,  106,  106,  106,  147,
      147,  147,  138,  145,  107,  184,  183,  184,  152,  257,
      153,  153,  153,  154,  160,  148,  184,  149,  149,  149,

      149,  161,  155,  162,  163,  225,  147,  161,  156,  164,
      165,  166,  293,  211,  294,  133,  155,  106,  104,  105,
      133,  139,  146,  161,  192,  184,  164,  167,  193,  188,
      184,  186,  184,  184,  194,  164,  189,  187,  156,  184,
      190,  245,  650,  191,  184,  246,  184,  106,  106,  106,
      106,  106,  106,  106,  106,  184,  172,  173,  198,  174,
      107,  175,  199,  184,  176,  184,  200,  184,  177,  207,
      209,  178,  201,  179,  195,  202,  196,  204,  203,  208,
      210,  218,  296,  219,  205,  206,  197,  249,  214,  220,
      297,  250,  253,  106,  109,  110,  254,  453,  216,  184,

      137,  212,  217,  221,  184,  215,  300,  222,  226,  227,
      227,  227,  301,  213,  223,  184,  233,  224,  234,  234,
      234,  234,  144,  111,  111,  111,  111,  111,  111,  111,
      111,  259,  259,  259,  138,  309,  112,  262,  262,  262,
      262,  266,  184,  260,  263,  264,  264,  264,  315,  261,
      316,  145,  267,  149,  149,  149,  149,  260,  184,  268,
      649,  269,  270,  277,  277,  277,  147,  147,  147,  111,
      109,  110,  648,  139,  271,  272,  288,  288,  647,  261,
      543,  278,  310,  544,  149,  149,  149,  149,  184,  314,
      146,  184,  285,  147,  286,  286,  286,  286,  184,  111,

      111,  111,  111,  111,  111,  111,  111,  287,  184,  321,
      181,  278,  112,  152,  182,  153,  153,  153,  154,  184,
      184,  184,  152,  287,  154,  154,  154,  154,  152,  184,
      157,  157,  157,  157,  311,  184,  184,  327,  184,  312,
      313,  184,  184,  184,  184,  111,  114,  115,  328,  183,
      184,  184,  184,  340,  317,  184,  322,  318,  184,  319,
      184,  184,  320,  184,  184,  184,  184,  184,  326,  323,
      324,  184,  184,  325,  184,  116,  116,  116,  116,  116,
      116,  116,  116,  329,  330,  335,  646,  337,  117,  332,
      341,  259,  259,  259,  347,  336,  338,  343,  334,  345,

      184,  241,  342,  351,  346,  242,  349,  344,  348,  350,
      353,  256,  645,  356,  443,  357,  352,  358,  358,  358,
      359,  116,  114,  115,  354,  373,  373,  266,  355,  155,
      363,  363,  363,  184,  357,  156,  360,  360,  360,  360,
      257,  184,  233,  155,  234,  234,  234,  234,  364,  375,
      419,  116,  116,  116,  116,  116,  116,  116,  116,  245,
      271,  272,  265,  246,  117,  156,  365,  365,  365,  249,
      367,  367,  367,  250,  184,  253,  382,  265,  364,  254,
      262,  262,  262,  262,  366,  418,  266,  184,  368,  369,
      369,  369,  423,  371,  371,  371,  644,  116,  119,  120,

      262,  262,  262,  262,  386,  386,  386,  370,  375,  421,
      383,  372,  288,  288,  366,  184,  389,  390,  368,  271,
      272,  266,  643,  424,  259,  259,  259,  121,  121,  121,
      121,  121,  121,  121,  121,  266,  260,  370,  283,  414,
      122,  372,  261,  375,  276,  391,  377,  392,  392,  392,
      260,  402,  420,  184,  271,  272,  184,  375,  384,  384,
      384,  403,  184,  286,  286,  286,  286,  415,  271,  272,
      184,  416,  261,  121,  119,  120,  287,  396,  396,  396,
      396,  184,  184,  184,  184,  184,  184,  411,  411,  411,
      437,  184,  287,  184,  422,  428,  184,  184,  184,  429,

      425,  184,  184,  121,  121,  121,  121,  121,  121,  121,
      121,  308,  184,  184,  184,  654,  122,  431,  435,  184,
      184,  184,  426,  373,  373,  438,  432,  184,  184,  441,
      397,  436,  444,  389,  433,  184,  434,  446,  439,  442,
      455,  465,  465,  465,  380,  265,  448,  642,  447,  121,
      124,  125,  452,  379,  449,  450,  641,  459,  454,  126,
      458,  456,  391,  640,  460,  461,  357,  451,  358,  358,
      358,  359,  357,  463,  359,  359,  359,  359,  357,  512,
      360,  360,  360,  360,  467,  467,  467,  469,  469,  469,
      471,  471,  471,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  464,  266,
      286,  286,  286,  286,  382,  389,  127,  124,  125,  473,
      473,  473,  276,  287,  283,  184,  126,  141,  141,  141,
      639,  375,  638,  143,  143,  143,  136,  136,  136,  287,
      184,  415,  271,  272,  391,  416,  184,  184,  383,  396,
      396,  396,  396,  396,  396,  396,  396,  184,  502,  184,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  415,  495,  498,  184,  416,

      184,  500,  499,  127,  232,  232,  510,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      476,  476,  476,  478,  478,  478,  184,  232,  232,  232,
      232,  232,  232,  232,  180,  180,  180,  184,  477,  184,
      637,  479,  232,  232,  232,  232,  503,  232,  508,  184,
      636,  493,  493,  493,  184,  240,  240,  240,  308,  184,
      244,  244,  244,  635,  184,  184,  634,  184,  477,  494,
      522,  479,  184,  232,  232,  232,  515,  232,  232,  232,
      232,  232,  232,  237,  237,  528,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  494,

      504,  514,  521,  516,  526,  520,  237,  237,  237,  237,
      237,  237,  237,  527,  559,  184,  184,  184,  248,  248,
      248,  237,  237,  237,  237,  184,  237,  252,  252,  252,
      255,  255,  255,  184,  184,  505,  537,  537,  537,  184,
      184,  506,  539,  539,  539,  184,  184,  507,  532,  553,
      553,  553,  237,  237,  237,  184,  237,  237,  237,  237,
      237,  237,  273,  533,  184,  184,  136,  136,  564,  566,
      555,  557,  561,  184,  184,  184,  274,  274,  274,  184,
      184,  184,  560,  184,  562,  184,  184,  567,  381,  381,
      381,  184,  184,  563,  275,  184,  136,  388,  388,  388,

      136,  136,  136,  413,  413,  413,  136,  184,  184,  633,
      570,  575,  590,  632,  136,  571,  568,  631,  136,  630,
      136,  576,  136,  629,  275,  143,  588,  628,  601,  143,
      280,  572,  602,  574,  627,  626,  596,  592,  625,  281,
      281,  281,  597,  624,  613,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  614,  612,  611,  282,  603,  143,
      610,  609,  608,  143,  143,  143,  607,  606,  605,  143,
      604,  600,  599,  598,  595,  594,  593,  143,  591,  589,
      587,  143,  586,  143,  585,  143,  584,  282,  180,  583,
      582,  581,  180,  180,  580,  579,  578,  577,  573,  569,

      565,  558,  304,  304,  304,  556,  552,  551,  550,  549,
      548,  547,  546,  545,  542,  541,  536,  535,  534,  531,
      305,  530,  180,  529,  525,  524,  306,  180,  180,  523,
      519,  518,  180,  517,  513,  511,  509,  501,  497,  496,
      180,  168,  492,  491,  180,  490,  180,  489,  180,  488,
      305,  232,  232,  487,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  486,  485,  484,
      483,  482,  481,  480,  232,  232,  232,  232,  232,  232,
      232,  184,  475,  265,  362,  361,  462,  457,  445,  232,
      232,  232,  232,  440,  232,  184,  430,  428,  427,  417,

      410,  409,  408,  407,  406,  405,  404,  401,  400,  399,
      398,  395,  394,  380,  378,  238,  362,  233,  361,  339,
      232,  232,  232,  333,  232,  232,  232,  232,  232,  232,
      237,  237,  331,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  184,  184,  308,  307,
      303,  302,  295,  237,  237,  237,  237,  237,  237,  237,
      292,  168,  161,  291,  290,  284,  283,  279,  237,  237,
      237,  237,  276,  237,  238,  233,  150,  230,  229,  184,
      170,  168,  142,  135,  654,  134,  134,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  237,

      237,  237,  654,  237,  237,  237,  237,  237,  237,  276,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  385,  385,  385,  385,  654,  654,  654,
      654,  654,  654,  654,  385,  385,  385,  385,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  385,  385,
      385,  385,  385,  385,  283,  654,  654,  654,  654,  654,
      654,  654,  654,  393,  393,  393,  393,  654,  654,  654,
      654,  654,  654,  654,  393,  393,  393,  393,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  393,  393,
      393,  393,  393,  393,  412,  412,  412,  412,  654,  654,

      654,  654,  654,  654,  654,  412,  412,  412,  412,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  308,  412,
      412,  412,  412,  412,  412,  276,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  136,
      136,  136,  136,  654,  654,  654,  654,  654,  654,  654,
      136,  136,  136,  136,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  136,  136,  136,  136,  136,  136,
      283,  654,  654,  654,  654,  654,  654,  654,  654,  143,
      143,  143,  143,  654,  654,  654,  654,  654,  654,  654,
      143,  143,  143,  143,  654,  654,  654,  654,  654,  654,

      654,  654,  654,  654,  143,  143,  143,  143,  143,  143,
      180,  180,  180,  180,  654,  654,  654,  654,  654,  654,
      654,  180,  180,  180,  180,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  308,  180,  180,  180,  180,  180,
      180,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  140,  654,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  169,  654,  654,  654,
      169,  169,  654,  654,  654,  169,  169,  169,  654,  169,
      169,  169,  171,  654,  171,  171,  171,  654,  654,  171,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  185,  654,  654,  654,  185,  185,  654,  654,
      654,  185,  185,  185,  654,  185,  185,  185,  228,  654,
      228,  228,  228,  228,  654,  228,  654,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  232,
      232,  232,  232,  654,  654,  654,  232,  232,  232,  654,
      232,  232,  235,  235,  654,  654,  654,  235,  235,  235,
      654,  654,  235,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  237,  237,  237,  237,  654,  654,  654,  237,
      237,  237,  654,  237,  237,  239,  239,  654,  654,  654,
      239,  239,  239,  654,  239,  239,  239,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  243,  243,
      654,  654,  654,  243,  243,  243,  654,  243,  243,  243,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  247,  247,  654,  654,  654,  247,  247,  247,  654,
      247,  247,  247,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  251,  251,  654,  654,  654,  251,
      251,  251,  654,  251,  251,  251,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  258,  258,
      654,  654,  654,  258,  258,  258,  654,  258,  258,  258,
      265,  654,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  654,  265,  265,  265,  654,  265,  265,
      265,  265,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  141,  654,  141,  654,
      654,  654,  654,  141,  654,  654,  654,  654,  654,  654,
      141,  654,  654,  141,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  289,  289,
      654,  654,  654,  289,  654,  654,  654,  654,  289,  169,
      654,  654,  654,  169,  169,  654,  654,  654,  169,  169,

      169,  654,  169,  169,  169,  171,  171,  171,  654,  654,
      171,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  185,  654,  654,  654,  185,
      185,  654,  654,  654,  185,  185,  185,  654,  185,  185,
      185,  228,  654,  228,  228,  228,  228,  654,  228,  654,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  232,  232,  232,  232,  654,  654,  654,  232,
      232,  232,  654,  232,  232,  235,  235,  654,  654,  654,
      235,  235,  235,  654,  654,  235,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  237,  237,  237,  237,  654,
      654,  654,  237,  237,  237,  654,  237,  237,  239,  239,
      654,  654,  654,  239,  239,  239,  654,  239,  239,  239,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,

      240,  240,  654,  240,  654,  654,  654,  654,  240,  654,
      654,  654,  654,  654,  654,  240,  654,  654,  240,  243,
      243,  654,  654,  654,  243,  243,  243,  654,  243,  243,
      243,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  654,  244,  654,  654,  654,  654,  244,
      654,  654,  654,  654,  654,  654,  244,  654,  654,  244,
      247,  247,  654,  654,  654,  247,  247,  247,  654,  247,
      247,  247,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  654,  248,  654,  654,  654,  654,
      248,  654,  654,  654,  654,  654,  654,  248,  654,  654,
      248,  251,  251,  654,  654,  654,  251,  251,  251,  654,
      251,  251,  251,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  654,  252,  654,  654,  654,
      654,  252,  654,  654,  654,  654,  654,  654,  252,  654,
      654,  252,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  654,  255,  654,  654,  654,  654,

      255,  654,  654,  654,  654,  654,  654,  255,  654,  654,
      255,  258,  258,  654,  654,  654,  258,  258,  258,  654,
      258,  258,  258,  374,  374,  654,  654,  654,  374,  654,
      654,  654,  654,  374,  265,  654,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  654,  265,  265,  265,  265,
      265,  654,  265,  265,  265,  265,  376,  376,  654,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  654,  379,  379,  379,  379,

      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  387,  387,  654,  654,  654,  387,  654,
      654,  654,  654,  387,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  289,  289,  654,

      654,  654,  289,  654,  654,  654,  654,  289,  171,  171,
      171,  654,  654,  171,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  185,  654,  654,
      654,  185,  185,  654,  654,  654,  185,  185,  185,  654,
      185,  185,  185,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  466,  466,  654,  654,  654,  466,  654,  654,  654,
      654,  466,  468,  468,  654,  654,  654,  468,  654,  654,
      654,  654,  468,  470,  470,  654,  654,  654,  470,  654,
      654,  654,  654,  470,  472,  472,  654,  654,  654,  472,
      654,  654,  654,  654,  472,  474,  474,  654,  654,  654,
      474,  654,  654,  654,  654,  474,  381,  654,  381,  654,
      654,  654,  654,  381,  654,  654,  654,  654,  654,  654,
      381,  654,  654,  381,  141,  141,  654,  654,  654,  141,
      654,  654,  654,  654,  141,  388,  654,  388,  654,  654,

      654,  654,  388,  654,  654,  654,  654,  654,  654,  388,
      654,  654,  388,  413,  654,  413,  654,  654,  654,  654,
      413,  654,  654,  654,  654,  654,  654,  413,  654,  654,
      413,  240,  240,  654,  654,  654,  240,  654,  654,  654,
      654,  240,  244,  244,  654,  654,  654,  244,  654,  654,
      654,  654,  244,  248,  248,  654,  654,  654,  248,  654,
      654,  654,  654,  248,  252,  252,  654,  654,  654,  252,
      654,  654,  654,  654,  252,  255,  255,  654,  654,  654,
      255,  654,  654,  654,  654,  255,  538,  538,  654,  654,
      654,  538,  654,  654,  654,  654,  538,  540,  540,  654,

      654,  654,  540,  654,  654,  654,  654,  540,  554,  554,
      654,  654,  654,  554,  654,  654,  654,  654,  554,  381,
      381,  654,  654,  654,  381,  654,  654,  654,  654,  381,
      388,  388,  654,  654,  654,  388,  654,  654,  654,  654,
      388,  413,  413,  654,  654,  654,  413,  654,  654,  654,
      654,  413,   29,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,

      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654
    } ;

static yyconst short int yy_chk[3633] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    5,    6,    6,    7,    7,    8,    8,  652,
        3,    4,    7,   42,    8,    3,    4,   45,   42,  107,

       45,  650,    7,  107,    8,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   15,   15,   25,   25,  176,   52,   34,   26,
       26,   52,  176,   44,   38,   44,   44,   44,   44,   68,
      126,  649,   25,   25,   25,   25,   62,   26,   26,   26,
       26,   15,   15,   15,   15,   15,   15,   15,   15,   41,
       41,   41,   34,   38,   15,   53,   52,   56,   43,  126,
       43,   43,   43,   43,   46,   41,   55,   41,   41,   41,

       41,   46,   43,   46,   46,   68,   41,   47,   43,   47,
       47,   47,  173,   62,  173,   25,   43,   15,   16,   16,
       26,   34,   38,   48,   56,   58,   48,   48,   56,   55,
       57,   53,   60,   61,   56,   51,   55,   53,   43,   59,
       55,  112,  648,   55,  346,  112,   66,   16,   16,   16,
       16,   16,   16,   16,   16,   64,   51,   51,   58,   51,
       16,   51,   58,   63,   51,   65,   58,   67,   51,   60,
       61,   51,   58,   51,   57,   58,   57,   59,   58,   60,
       61,   66,  175,   66,   59,   59,   57,  117,   64,   66,
      175,  117,  122,   16,   17,   17,  122,  346,   65,  186,

      136,   63,   65,   66,  191,   64,  177,   67,   69,   69,
       69,   69,  177,   63,   67,  190,   90,   67,   90,   90,
       90,   90,  143,   17,   17,   17,   17,   17,   17,   17,
       17,  131,  131,  131,  136,  186,   17,  132,  132,  132,
      132,  134,  189,  131,  133,  133,  133,  133,  190,  131,
      191,  143,  134,  149,  149,  149,  149,  131,  195,  134,
      647,  134,  134,  142,  142,  142,  147,  147,  147,   17,
       18,   18,  645,  136,  134,  134,  155,  155,  644,  131,
      483,  142,  187,  483,  147,  147,  147,  147,  188,  189,
      143,  200,  152,  147,  152,  152,  152,  152,  201,   18,

       18,   18,   18,   18,   18,   18,   18,  152,  193,  195,
      180,  142,   18,  153,  180,  153,  153,  153,  153,  192,
      196,  197,  154,  152,  154,  154,  154,  154,  157,  198,
      157,  157,  157,  157,  187,  199,  202,  200,  203,  188,
      188,  205,  207,  209,  211,   18,   19,   19,  201,  180,
      208,  210,  214,  213,  192,  217,  196,  192,  216,  193,
      215,  218,  193,  221,  219,  220,  222,  223,  199,  197,
      198,  224,  225,  198,  336,   19,   19,   19,   19,   19,
       19,   19,   19,  202,  203,  208,  642,  210,   19,  205,
      213,  259,  259,  259,  218,  209,  211,  215,  207,  216,

      311,  240,  214,  222,  217,  240,  220,  215,  219,  221,
      223,  255,  641,  225,  336,  226,  222,  226,  226,  226,
      226,   19,   20,   20,  224,  260,  260,  265,  224,  226,
      241,  241,  241,  309,  227,  226,  227,  227,  227,  227,
      255,  315,  234,  226,  234,  234,  234,  234,  241,  265,
      311,   20,   20,   20,   20,   20,   20,   20,   20,  244,
      265,  265,  272,  244,   20,  226,  245,  245,  245,  248,
      249,  249,  249,  248,  313,  252,  273,  272,  241,  252,
      262,  262,  262,  262,  245,  309,  268,  316,  249,  253,
      253,  253,  315,  257,  257,  257,  640,   20,   21,   21,

      264,  264,  264,  264,  277,  277,  277,  253,  268,  313,
      273,  257,  288,  288,  245,  312,  280,  280,  249,  268,
      268,  270,  639,  316,  263,  263,  263,   21,   21,   21,
       21,   21,   21,   21,   21,  267,  263,  253,  281,  306,
       21,  257,  263,  270,  274,  280,  267,  281,  281,  281,
      263,  296,  312,  314,  270,  270,  317,  267,  274,  274,
      274,  296,  321,  286,  286,  286,  286,  306,  267,  267,
      323,  306,  263,   21,   22,   22,  286,  287,  287,  287,
      287,  318,  324,  325,  326,  327,  329,  304,  304,  304,
      330,  332,  286,  341,  314,  337,  335,  342,  343,  321,

      317,  345,  348,   22,   22,   22,   22,   22,   22,   22,
       22,  304,  347,  349,  351,  380,   22,  323,  327,  344,
      352,  356,  318,  373,  373,  330,  324,  353,  354,  335,
      287,  329,  337,  388,  325,  435,  326,  341,  332,  335,
      348,  363,  363,  363,  379,  379,  343,  637,  342,   22,
       23,   23,  345,  380,  344,  344,  636,  352,  347,   23,
      351,  349,  388,  635,  353,  354,  358,  344,  358,  358,
      358,  358,  359,  356,  359,  359,  359,  359,  360,  435,
      360,  360,  360,  360,  365,  365,  365,  367,  367,  367,
      369,  369,  369,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  357,  377,
      357,  357,  357,  357,  381,  390,   23,   24,   24,  371,
      371,  371,  384,  357,  392,  425,   24,  386,  386,  386,
      634,  377,  633,  392,  392,  392,  384,  384,  384,  357,
      423,  413,  377,  377,  390,  413,  418,  421,  381,  396,
      396,  396,  396,  397,  397,  397,  397,  422,  425,  433,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  414,  418,  421,  431,  414,

      426,  423,  422,   24,   89,   89,  433,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
      383,  383,  383,  391,  391,  391,  439,   89,   89,   89,
       89,   89,   89,   89,  411,  411,  411,  448,  383,  454,
      632,  391,   89,   89,   89,   89,  426,   89,  431,  438,
      631,  415,  415,  415,  446,  465,  465,  465,  411,  441,
      467,  467,  467,  630,  502,  447,  629,  452,  383,  415,
      448,  391,  453,   89,   89,   89,  439,   89,   89,   89,
       89,   89,   89,  102,  102,  454,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  415,

      429,  438,  447,  441,  452,  446,  102,  102,  102,  102,
      102,  102,  102,  453,  502,  459,  508,  460,  469,  469,
      469,  102,  102,  102,  102,  512,  102,  471,  471,  471,
      473,  473,  473,  495,  499,  429,  476,  476,  476,  505,
      514,  429,  478,  478,  478,  503,  506,  429,  459,  493,
      493,  493,  102,  102,  102,  507,  102,  102,  102,  102,
      102,  102,  138,  460,  515,  521,  138,  138,  508,  512,
      495,  499,  505,  520,  528,  559,  138,  138,  138,  566,
      555,  522,  503,  527,  506,  532,  561,  514,  537,  537,
      537,  572,  567,  507,  138,  574,  138,  539,  539,  539,

      138,  138,  138,  553,  553,  553,  138,  592,  575,  628,
      520,  528,  559,  627,  138,  521,  515,  626,  138,  625,
      138,  532,  138,  623,  138,  145,  555,  622,  572,  145,
      145,  522,  574,  527,  621,  620,  566,  561,  619,  145,
      145,  145,  567,  613,  592,  610,  609,  608,  607,  606,
      603,  602,  601,  597,  596,  590,  588,  145,  575,  145,
      586,  585,  584,  145,  145,  145,  581,  580,  578,  145,
      576,  571,  570,  568,  564,  563,  562,  145,  560,  557,
      551,  145,  550,  145,  549,  145,  548,  145,  181,  547,
      546,  544,  181,  181,  543,  541,  536,  533,  526,  516,

      510,  500,  181,  181,  181,  498,  492,  491,  490,  489,
      488,  486,  485,  484,  482,  480,  475,  463,  461,  458,
      181,  456,  181,  455,  451,  450,  181,  181,  181,  449,
      444,  443,  181,  442,  436,  434,  432,  424,  420,  419,
      181,  416,  410,  409,  181,  408,  181,  407,  181,  406,
      181,  233,  233,  405,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  404,  403,  402,
      401,  400,  399,  398,  233,  233,  233,  233,  233,  233,
      233,  389,  378,  376,  362,  361,  355,  350,  338,  233,
      233,  233,  233,  334,  233,  328,  322,  320,  319,  308,

      303,  302,  301,  300,  299,  298,  297,  295,  294,  293,
      292,  285,  283,  271,  269,  237,  236,  232,  231,  212,
      233,  233,  233,  206,  233,  233,  233,  233,  233,  233,
      238,  238,  204,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  194,  185,  183,  182,
      179,  178,  174,  238,  238,  238,  238,  238,  238,  238,
      172,  169,  164,  160,  158,  148,  146,  144,  238,  238,
      238,  238,  139,  238,  101,   88,   83,   75,   74,   54,
       50,   49,   37,   33,   29,   28,   27,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  238,

      238,  238,    0,  238,  238,  238,  238,  238,  238,  275,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  275,  275,  275,  275,    0,    0,    0,
        0,    0,    0,    0,  275,  275,  275,  275,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  275,  275,
      275,  275,  275,  275,  282,    0,    0,    0,    0,    0,
        0,    0,    0,  282,  282,  282,  282,    0,    0,    0,
        0,    0,    0,    0,  282,  282,  282,  282,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  282,  282,
      282,  282,  282,  282,  305,  305,  305,  305,    0,    0,

        0,    0,    0,    0,    0,  305,  305,  305,  305,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  305,  305,
      305,  305,  305,  305,  305,  385,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  385,
      385,  385,  385,    0,    0,    0,    0,    0,    0,    0,
      385,  385,  385,  385,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  385,  385,  385,  385,  385,  385,
      393,    0,    0,    0,    0,    0,    0,    0,    0,  393,
      393,  393,  393,    0,    0,    0,    0,    0,    0,    0,
      393,  393,  393,  393,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  393,  393,  393,  393,  393,  393,
      412,  412,  412,  412,    0,    0,    0,    0,    0,    0,
        0,  412,  412,  412,  412,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  412,  412,  412,  412,  412,  412,
      412,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  657,  657,  657,  657,  657,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  665,    0,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  668,    0,    0,    0,
      668,  668,    0,    0,    0,  668,  668,  668,    0,  668,
      668,  668,  669,    0,  669,  669,  669,    0,    0,  669,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  671,    0,    0,    0,  671,  671,    0,    0,
        0,  671,  671,  671,    0,  671,  671,  671,  672,    0,
      672,  672,  672,  672,    0,  672,    0,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  674,
      674,  674,  674,    0,    0,    0,  674,  674,  674,    0,
      674,  674,  675,  675,    0,    0,    0,  675,  675,  675,
        0,    0,  675,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  677,  677,  677,  677,    0,    0,    0,  677,
      677,  677,    0,  677,  677,  678,  678,    0,    0,    0,
      678,  678,  678,    0,  678,  678,  678,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  680,  680,
        0,    0,    0,  680,  680,  680,    0,  680,  680,  680,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  682,  682,    0,    0,    0,  682,  682,  682,    0,
      682,  682,  682,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  684,  684,    0,    0,    0,  684,
      684,  684,    0,  684,  684,  684,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  687,  687,
        0,    0,    0,  687,  687,  687,    0,  687,  687,  687,
      688,    0,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,    0,  688,  688,  688,    0,  688,  688,
      688,  688,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  691,    0,  691,    0,
        0,    0,    0,  691,    0,    0,    0,    0,    0,    0,
      691,    0,    0,  691,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  694,  694,
        0,    0,    0,  694,    0,    0,    0,    0,  694,  695,
        0,    0,    0,  695,  695,    0,    0,    0,  695,  695,

      695,    0,  695,  695,  695,  696,  696,  696,    0,    0,
      696,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  699,    0,    0,    0,  699,
      699,    0,    0,    0,  699,  699,  699,    0,  699,  699,
      699,  700,    0,  700,  700,  700,  700,    0,  700,    0,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  701,  701,  701,  701,  701,  701,  701,

      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  702,  702,  702,  702,    0,    0,    0,  702,
      702,  702,    0,  702,  702,  703,  703,    0,    0,    0,
      703,  703,  703,    0,    0,  703,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  705,  705,  705,  705,    0,
        0,    0,  705,  705,  705,    0,  705,  705,  706,  706,
        0,    0,    0,  706,  706,  706,    0,  706,  706,  706,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,

      707,  708,    0,  708,    0,    0,    0,    0,  708,    0,
        0,    0,    0,    0,    0,  708,    0,    0,  708,  709,
      709,    0,    0,    0,  709,  709,  709,    0,  709,  709,
      709,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  711,    0,  711,    0,    0,    0,    0,  711,
        0,    0,    0,    0,    0,    0,  711,    0,    0,  711,
      712,  712,    0,    0,    0,  712,  712,  712,    0,  712,
      712,  712,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,

      713,  713,  713,  714,    0,  714,    0,    0,    0,    0,
      714,    0,    0,    0,    0,    0,    0,  714,    0,    0,
      714,  715,  715,    0,    0,    0,  715,  715,  715,    0,
      715,  715,  715,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  717,    0,  717,    0,    0,    0,
        0,  717,    0,    0,    0,    0,    0,    0,  717,    0,
        0,  717,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  719,    0,  719,    0,    0,    0,    0,

      719,    0,    0,    0,    0,    0,    0,  719,    0,    0,
      719,  720,  720,    0,    0,    0,  720,  720,  720,    0,
      720,  720,  720,  721,  721,    0,    0,    0,  721,    0,
        0,    0,    0,  721,  722,    0,  722,  722,  722,  722,
      722,  722,  722,  722,  722,    0,  722,  722,  722,  722,
      722,    0,  722,  722,  722,  722,  723,  723,    0,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,    0,  724,  724,  724,  724,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  727,  727,    0,    0,    0,  727,    0,
        0,    0,    0,  727,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  730,  730,    0,

        0,    0,  730,    0,    0,    0,    0,  730,  731,  731,
      731,    0,    0,  731,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  734,    0,    0,
        0,  734,  734,    0,    0,    0,  734,  734,  734,    0,
      734,  734,  734,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  737,  737,    0,    0,    0,  737,    0,    0,    0,
        0,  737,  738,  738,    0,    0,    0,  738,    0,    0,
        0,    0,  738,  739,  739,    0,    0,    0,  739,    0,
        0,    0,    0,  739,  740,  740,    0,    0,    0,  740,
        0,    0,    0,    0,  740,  741,  741,    0,    0,    0,
      741,    0,    0,    0,    0,  741,  742,    0,  742,    0,
        0,    0,    0,  742,    0,    0,    0,    0,    0,    0,
      742,    0,    0,  742,  743,  743,    0,    0,    0,  743,
        0,    0,    0,    0,  743,  744,    0,  744,    0,    0,

        0,    0,  744,    0,    0,    0,    0,    0,    0,  744,
        0,    0,  744,  745,    0,  745,    0,    0,    0,    0,
      745,    0,    0,    0,    0,    0,    0,  745,    0,    0,
      745,  746,  746,    0,    0,    0,  746,    0,    0,    0,
        0,  746,  747,  747,    0,    0,    0,  747,    0,    0,
        0,    0,  747,  748,  748,    0,    0,    0,  748,    0,
        0,    0,    0,  748,  749,  749,    0,    0,    0,  749,
        0,    0,    0,    0,  749,  750,  750,    0,    0,    0,
      750,    0,    0,    0,    0,  750,  751,  751,    0,    0,
        0,  751,    0,    0,    0,    0,  751,  752,  752,    0,

        0,    0,  752,    0,    0,    0,    0,  752,  753,  753,
        0,    0,    0,  753,    0,    0,    0,    0,  753,  754,
      754,    0,    0,    0,  754,    0,    0,    0,    0,  754,
      755,  755,    0,    0,    0,  755,    0,    0,    0,    0,
      755,  756,  756,    0,    0,    0,  756,    0,    0,    0,
        0,  756,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,

      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*
 *  Authors:
 *    Martin Henz <henz@iscs.nus.sg>
 *    Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 *  Copyright:
 *    Martin Henz and Leif Kornstaedt, 1996-1999
 *
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 *
 *  This file is part of Mozart, an implementation of Oz 3:
 *    http://www.mozart-oz.org
 *
 *  See the file "LICENSE" or
 *    http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */
#include <string.h>
#include <sys/stat.h>

#if !defined(__MINGW32__) && !defined(_MSC_VER)
#include <pwd.h>
#endif

#include "conf.h"
#include "base.hh"
#include "os.hh"
#include "dictionary.hh"
#include "am.hh"

#include "parser.hh"

void xyreportError(char *kind, char *message,
                   const char *file, int line, int column);
void xy_setScannerPrefix();
void xy_setParserExpect();

char xyFileName[100];
char xyhelpFileName[100];
OZ_Term xyFileNameAtom;

int xy_gumpSyntax, xy_allowDeprecated;
OZ_Term xy_errorMessages;

static int errorFlag;


//*******************
// THE INPUT ROUTINE
//*******************

int xylino;                             // current line number
char *xylastline;                       // remember where we have put the input

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size)   xy_input(buf, result, max_size)

static void xy_input(char *buf, int &result, const int max_size) {
  xylastline = buf;

  // read one line into buf
  int curpos = 0;
  int c = fgetc(xyin);
  while(curpos < max_size && c != EOF && c != OZEOF && c != '\n') {
    buf[curpos++] = c;
    if (curpos < max_size)
      c = fgetc(xyin);
  }

  if (c == EOF || c == OZEOF) {
    if (curpos > 0)   // did we read other chars than EOF?
      result = curpos;
    else
      result = YY_NULL;
  } else {
    if (curpos < max_size)
      buf[curpos++] = c;
    result = curpos;
  }
}


//****************
// OUTPUT OF FLEX
//****************

#undef YY_DECL
#define YY_DECL static int xymylex()


//*************************
// CONDITIONAL COMPILATION
// uses a stack of flags;
// \ifdef and \ifndef push
// \else toggles top
// \endif pops.
//*************************

static OzDictionary *defines;

#define CONDITIONALMAXDEPTH 1000

static int conditional[CONDITIONALMAXDEPTH];
static int conditional_p;       // points to top of stack
static int conditional_basep;   // points to bottom of stack

static void push_cond(int flag) {
  if (conditional_p < CONDITIONALMAXDEPTH - 1)
    conditional[++conditional_p] = flag;
  else
    xyreportError("macro directive limitation",
                  "conditionals nested too deep",
                  xyFileName,xylino,xycharno());
}

static void pop_cond() {
  if (conditional_p > conditional_basep)
    conditional_p--;
  else
    xyreportError("macro directive error",
                  "\\endif without previous corresponding \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
}

static void toggle_cond() {
  if (conditional_p > conditional_basep) {
    // toggle top of flag stack
    if (conditional[conditional_p])
      conditional[conditional_p] = 0;
    else
      conditional[conditional_p] = 1;
  } else
    xyreportError("macro directive error",
                  "\\else without previous corresponding \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
}

static int get_cond() {
  int i = conditional_p;
  while (i > conditional_basep)
    if (!conditional[i--])
      return 0;
  return 1;
}


//***********************
// STACK OF FILE ENTRIES
// for \insert
//***********************

class XyFileEntry {
public:
  YY_BUFFER_STATE buffer;
  OZ_Term fileNameAtom;
  int lino;
  int conditional_basep;
  XyFileEntry *previous;

  XyFileEntry(YY_BUFFER_STATE b, OZ_Term f, int l, int c, XyFileEntry *p):
      buffer(b), fileNameAtom(f), lino(l), conditional_basep(c), previous(p) {}
};

static XyFileEntry *bufferStack;

static void push_insert(FILE *filep, char *fileName) {
  bufferStack = new XyFileEntry(YY_CURRENT_BUFFER, xyFileNameAtom, xylino,
                                conditional_basep, bufferStack);
  strncpy(xyFileName, fileName, 99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(fileName);
  xyin = filep;
  BEGIN(INITIAL);
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  xylino = 1;
  conditional_basep = conditional_p;
}

static int pop_insert() {
  if (conditional_p > conditional_basep)
    xyreportError("macro directive error",
                  "unterminated \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
  errorFlag = 0;
  if (bufferStack != NULL) {
    fclose(xyin);
    xy_switch_to_buffer(bufferStack->buffer);
    xyFileNameAtom = bufferStack->fileNameAtom;
    const char *fileName = OZ_atomToC(xyFileNameAtom);
    strncpy(xyFileName, fileName, 99);
    xyFileName[99] = '\0';
    xylino = bufferStack->lino;
    conditional_basep = bufferStack->conditional_basep;
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
    return 0;
  } else
    return 1;
}


//**********
// COMMENTS
//**********

static int commentdepth;
static OZ_Term commentfile;
static int commentlino;
static int commentoffset;
static int commentlastmode;


//*********************
// FILE NAME EXPANSION
//*********************

static char *getHomeUser(char *user) {
#ifdef WINDOWS
  return NULL;
#else
  struct passwd *pwentry = getpwnam(user);
  return pwentry != NULL? pwentry->pw_dir: (char *) NULL;
#endif
}

static int isReadableFile(char *file) {
  struct stat buf;

  if (access(file, F_OK) < 0 || stat(file, &buf) < 0)
    return 0;

  return !S_ISDIR(buf.st_mode);
}

static char *checkAccess(char *file) {
  char *ret = new char[strlen(file) + 1 + 3];

  strcpy(ret, file);
  if (isReadableFile(ret))
    return ret;

  strcat(ret, ".oz");
  if (isReadableFile(ret))
    return ret;

  delete[] ret;
  return NULL;
}

static char *scExpndFileName(char *fileName, char *curfile) {
  for (int i = 0; fileName[i] != '\0'; i++)
    if (fileName[i] == '\\')
      fileName[i] = '/';

  // full pathname given?
  if (fileName[0] == '/' ||
#ifdef WINDOWS
      fileName[1] == ':' ||   // good old DOS filename like E:...
#endif
      !strncmp(fileName, "./", 2))
    return checkAccess(fileName);

  // expand "~"
  if (fileName[0] == '~') {
    char *userhome;
    int len = 0;
    if (fileName[1] == '/') {
      userhome = getenv("HOME");
      len = 2;
    } else {
      char *rest = strchr(fileName, '/');
      if (rest == NULL)
        userhome = NULL;
      else {
        len = (rest + 1) - fileName;
        rest[0] = '\0';
        userhome = getHomeUser(&fileName[1]);
        rest[0] = '/';
      }
    }
    if (userhome == NULL)
      return NULL;

    char *help = new char[strlen(userhome) + 1 + strlen(&fileName[len]) + 1];
    sprintf(help, "%s/%s", userhome, &fileName[len]);
    char *ret = checkAccess(help);
    delete[] help;

    return ret;
  }

  // search in "current" directory
  if (curfile != NULL) {
    int i = strlen(curfile);
    while (i != 0 && curfile[i - 1] != '/')   // i. e., the dir part of curfile
      i--;
    if (i != 0) {
      char *help = new char[i + strlen(fileName) + 1];
      strncpy(help, curfile, i);
      strcpy(&help[i], fileName);
      char *ret = checkAccess(help);
      delete[] help;

      if (ret != NULL)
        return ret;
    }
  }

  // search in OZPATH
  char *path = getenv("OZPATH");
  if (path == NULL)
    path = ".";

  while (path[0] != '\0') {
    int i;
    for (i = 0; path[i] != PathSeparator && path[i] != '\0'; i++);
    char *help = new char[i + 1 + strlen(fileName) + 1];
    strncpy(help, path, i);
    help[i] = '/';
    strcpy(&help[i + 1], fileName);
    char *ret = checkAccess(help);
    delete[] help;
    if (ret != NULL)
      return ret;
    if (path[i] == '\0')
      break;
    path = &path[i + 1];
  }

  return NULL;
}


//***************************
// TREATING STRINGS AND SUCH
//***************************

static void stripDot() {
  int i, j;
  for (i = 0; xytext[i] < '0' || xytext[i] > '9'; i++)
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
  for (j = 0; xytext[i] != '\0'; xytext[j++] = xytext[i++]);
  xytext[j] = '\0';
}

static void strip(char c) {
  if (xytext[0] == c) {
    int i = 1;
    while (xytext[i] != '\0') {
      xytext[i - 1] = xytext[i];
      i++;
    }
    xytext[i - 2] = '\0';
  }
}

static void stripRegex() {
  int i = 1;
  while (xytext[i] != '\0') {
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
    xytext[i - 1] = xytext[i];
    i++;
  }
  xytext[i - 2] = '\0';
}

static void transBody(char c, char *text, int &i, int &j) {
  int jstart = j;
  while (text[j] != c) {
    if (text[j] == '\n')
      xylino++;
    if (text[j] == '\\') {
      j++;
      switch (text[j]) {
      case 'a':
        text[i] = '\a';
        break;
      case 'b':
        text[i] = '\b';
        break;
      case 'f':
        text[i] = '\f';
        break;
      case 'n':
        text[i] = '\n';
        break;
      case 'r':
        text[i] = '\r';
        break;
      case 't':
        text[i] = '\t';
        break;
      case 'v':
        text[i] = '\v';
        break;
      case 'x':
      case 'X':
        { char hexstring[3];
          hexstring[0] = text[++j];
          hexstring[1] = text[++j];
          hexstring[2] = '\0';
          int hexnum = (int) strtol(hexstring, NULL, 16);
          if (hexnum == 0 && get_cond())
            xyreportError("lexical error",
                          "character in hexadecimal notation =< 0",
                          xyFileName,xylino,xycharno() + (j - jstart));
          text[i] = hexnum;
        }
        break;
      case '\\':
      case '`':
      case '\"':
      case '\'':
      case '&':
        text[i] = text[j];
        break;
      default:
        { char octstring[4];
          octstring[0] = text[j++];
          octstring[1] = text[j++];
          octstring[2] = text[j];
          octstring[3] = '\0';
          int octnum = (int) strtol(octstring, NULL, 8);
          if ((octnum == 0 || octnum > 255) && get_cond())
            xyreportError("lexical error",
                          "character in octal notation =< 0 or >= 256",
                          xyFileName,xylino,xycharno() + (j - jstart));
          text[i] = octnum & 0xFF;
        }
      }
    } else
      text[i] = text[j];
    i++;
    j++;
  }
}

static void stripTrans(char c) {
  if (xytext[0] == c) {
    int i = 0;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i] = '\0';
  }
}

static void trans(char c) {
  if (xytext[0] == c) {
    int i = 1;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i++] = c;
    xytext[i] = '\0';
  }
}

#define COMMENT 1

#define IGNOREDIRECTIVE 2
#define DIRECTIVE 3

#define LINE 4
#define SWITCHDIR 5
#define INSERT 6
#define DEFINE 7
#define IFDEF 8
#define IFNDEF 9
#define UNDEF 10

#define SCANNERPREFIX 11
#define PARSEREXPECT 12

#define LEX 13


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
        if ( yy_current_buffer->yy_is_interactive ) \
                { \
                int c = '*', n; \
                for ( n = 0; n < max_size && \
                             (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
                        buf[n] = (char) c; \
                if ( c == '\n' ) \
                        buf[n++] = (char) c; \
                if ( c == EOF && ferror( yyin ) ) \
                        YY_FATAL_ERROR( "input in flex scanner failed" ); \
                result = n; \
                } \
        else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
                  && ferror( yyin ) ) \
                YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
        YY_USER_ACTION

YY_DECL
        {
        register yy_state_type yy_current_state;
        register char *yy_cp, *yy_bp;
        register int yy_act;




        if ( yy_init )
                {
                yy_init = 0;

#ifdef YY_USER_INIT
                YY_USER_INIT;
#endif

                if ( ! yy_start )
                        yy_start = 1;   /* first start state */

                if ( ! yyin )
                        yyin = stdin;

                if ( ! yyout )
                        yyout = stdout;

                if ( ! yy_current_buffer )
                        yy_current_buffer =
                                yy_create_buffer( yyin, YY_BUF_SIZE );

                yy_load_buffer_state();
                }

        while ( 1 )             /* loops until end-of-file is reached */
                {
                yy_cp = yy_c_buf_p;

                /* Support of yytext. */
                *yy_cp = yy_hold_char;

                /* yy_bp points to the position in yy_ch_buf of the start of
                 * the current run.
                 */
                yy_bp = yy_cp;

                yy_current_state = yy_start;
yy_match:
                do
                        {
                        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
                        if ( yy_accept[yy_current_state] )
                                {
                                yy_last_accepting_state = yy_current_state;
                                yy_last_accepting_cpos = yy_cp;
                                }
                        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                                {
                                yy_current_state = (int) yy_def[yy_current_state];
                                if ( yy_current_state >= 655 )
                                        yy_c = yy_meta[(unsigned int) yy_c];
                                }
                        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                        ++yy_cp;
                        }
                while ( yy_base[yy_current_state] != 3553 );

yy_find_action:
                yy_act = yy_accept[yy_current_state];
                if ( yy_act == 0 )
                        { /* have to back up */
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        yy_act = yy_accept[yy_current_state];
                        }

                YY_DO_BEFORE_ACTION;


do_action:      /* This label is used only to access EOF actions. */


                switch ( yy_act )
        { /* beginning of action switch */
                        case 0: /* must back up */
                        /* undo the effects of YY_DO_BEFORE_ACTION */
                        *yy_cp = yy_hold_char;
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        goto yy_find_action;

case 1:
YY_RULE_SETUP
;
        YY_BREAK
case 2:
YY_RULE_SETUP
{ commentdepth = 1;
                                 commentfile = xyFileNameAtom;
                                 commentlino = xylino;
                                 commentoffset = xycharno();
                                 commentlastmode = YYSTATE;
                                 BEGIN(COMMENT);
                               }
        YY_BREAK
case 3:
YY_RULE_SETUP
{ commentdepth++; }
        YY_BREAK
case 4:
YY_RULE_SETUP
{ if (--commentdepth == 0)
                                   BEGIN(commentlastmode);
                               }
        YY_BREAK
case 5:
YY_RULE_SETUP
;
        YY_BREAK
case 6:
YY_RULE_SETUP
{ xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case 7:
YY_RULE_SETUP
;
        YY_BREAK
case YY_STATE_EOF(COMMENT):
{ if (get_cond()) {
                                   const char *file = OZ_atomToC(commentfile);
                                   xyreportError("lexical error",
                                                 "unterminated comment",
                                                 file,commentlino,commentoffset);
                                 }
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK
case 8:
YY_RULE_SETUP
{ BEGIN(SWITCHDIR); return T_SWITCH; }
        YY_BREAK
case 9:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_PUSHSWITCHES; }
        YY_BREAK
case 10:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_POPSWITCHES; }
        YY_BREAK
case 11:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_LOCALSWITCHES; }
        YY_BREAK
case 12:
YY_RULE_SETUP
{ if (get_cond()) BEGIN(LINE); }
        YY_BREAK
case 13:
YY_RULE_SETUP
{ BEGIN(INSERT); }
        YY_BREAK
case 14:
YY_RULE_SETUP
{ BEGIN(DEFINE); }
        YY_BREAK
case 15:
YY_RULE_SETUP
{ BEGIN(UNDEF); }
        YY_BREAK
case 16:
YY_RULE_SETUP
{ BEGIN(IFDEF); }
        YY_BREAK
case 17:
YY_RULE_SETUP
{ BEGIN(IFNDEF); }
        YY_BREAK
case 18:
YY_RULE_SETUP
{ toggle_cond();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 19:
YY_RULE_SETUP
{ pop_cond();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 20:
YY_RULE_SETUP
{ BEGIN(SCANNERPREFIX); }
        YY_BREAK
case 21:
YY_RULE_SETUP
{ BEGIN(PARSEREXPECT); }
        YY_BREAK

case 22:
YY_RULE_SETUP
;
        YY_BREAK
case 23:
YY_RULE_SETUP
;
        YY_BREAK
case 24:
YY_RULE_SETUP
{ BEGIN(INITIAL);
                                 xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case YY_STATE_EOF(IGNOREDIRECTIVE):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 25:
YY_RULE_SETUP
;
        YY_BREAK
case 26:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 27:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(DIRECTIVE):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 28:
YY_RULE_SETUP
{ xylino = atol(xytext) - 1; }
        YY_BREAK
case 29:
YY_RULE_SETUP
{ strip('\'');
                                 char *fullname = scExpndFileName(xytext,xyFileName);
                                 if (fullname != NULL) {
                                   strncpy(xyFileName, fullname, 99);
                                   delete[] fullname;
                                 } else
                                   strncpy(xyFileName, xytext, 99);
                                 xyFileName[99] = '\0';
                                 xyFileNameAtom = OZ_atom(xyFileName);
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 30:
YY_RULE_SETUP
;
        YY_BREAK
case 31:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 32:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(LINE):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 33:
YY_RULE_SETUP
{ return '+'; }
        YY_BREAK
case 34:
YY_RULE_SETUP
{ return '-'; }
        YY_BREAK
case 35:
YY_RULE_SETUP
{ return T_SWITCHNAME; }
        YY_BREAK
case 36:
YY_RULE_SETUP
;
        YY_BREAK
case 37:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 38:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(SWITCHDIR):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 39:
YY_RULE_SETUP
{ if (get_cond()) {
                                   strip('\'');
                                   char *fullname = scExpndFileName(xytext,xyFileName);
                                   if (fullname != NULL) {
                                     OZ_Term coord =
                                       OZ_mkTupleC("pos",3,xyFileNameAtom,
                                                   OZ_int(xylino),
                                                   OZ_int(xycharno()));
                                     xy_errorMessages =
                                       oz_cons(OZ_mkTupleC("logInsert",2,
                                                           OZ_atom(fullname),
                                                           coord),
                                               xy_errorMessages);
                                     FILE *filep = fopen(fullname, "r");
                                     push_insert(filep, fullname);
                                     delete[] fullname;
                                     BEGIN(INITIAL);
                                   } else {
                                     const char *s =
                                       "could not open file `";
                                     char *f = new char[strlen(s) + 1 +
                                                        strlen(xytext) + 2];
                                     strcpy(f,s);
                                     strcat(f,xytext);
                                     strcat(f,"'");
                                     xyreportError("macro directive error",f,
                                                   xyFileName,xylino,xycharno());
                                     delete[] f;
                                     BEGIN(DIRECTIVE);
                                   }
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 40:
YY_RULE_SETUP
;
        YY_BREAK
case 41:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 42:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(INSERT):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 43:
YY_RULE_SETUP
{ if (get_cond()) {
                                   trans('`');
                                   OZ_Term key = OZ_atom(xytext);
                                   defines->setArg(key, NameTrue);
                                   BEGIN(DIRECTIVE);
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 44:
YY_RULE_SETUP
;
        YY_BREAK
case 45:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 46:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(DEFINE):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 47:
YY_RULE_SETUP
{ if (get_cond()) {
                                   trans('`');
                                   defines->remove(OZ_atom(xytext));
                                   BEGIN(DIRECTIVE);
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 48:
YY_RULE_SETUP
;
        YY_BREAK
case 49:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 50:
YY_RULE_SETUP
{ if (errorFlag)
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(UNDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 51:
YY_RULE_SETUP
{ trans('`');
                                 OZ_Term key = OZ_atom(xytext);
                                 push_cond(OZ_isTrue(defines->member(key)));
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 52:
YY_RULE_SETUP
;
        YY_BREAK
case 53:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 54:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(IFDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 55:
YY_RULE_SETUP
{ trans('`');
                                 OZ_Term key = OZ_atom(xytext);
                                 push_cond(!OZ_isTrue(defines->member(key)));
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 56:
YY_RULE_SETUP
;
        YY_BREAK
case 57:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 58:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(IFNDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 59:
YY_RULE_SETUP
{ stripTrans('\'');
                                 xy_setScannerPrefix();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 60:
YY_RULE_SETUP
;
        YY_BREAK
case 61:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 62:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(SCANNERPREFIX):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 63:
YY_RULE_SETUP
{ xy_setParserExpect();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 64:
YY_RULE_SETUP
;
        YY_BREAK
case 65:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 66:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(PARSEREXPECT):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK

case 67:
YY_RULE_SETUP
{ BEGIN(INITIAL); return T_REGEX; }
        YY_BREAK
case 68:
YY_RULE_SETUP
{ BEGIN(INITIAL); stripRegex(); return T_REGEX; }
        YY_BREAK
case 69:
YY_RULE_SETUP
{ return T_CHOICE; }
        YY_BREAK
case 70:
YY_RULE_SETUP
{ return T_LDOTS; }
        YY_BREAK
case 71:
YY_RULE_SETUP
{ return T_2DOTS; }
        YY_BREAK
case 72:
YY_RULE_SETUP
{ return T_ITER; }
        YY_BREAK
case 73:
YY_RULE_SETUP
{ return T_OOASSIGN; }
        YY_BREAK
case 74:
YY_RULE_SETUP
{ return T_DEFAULT; }
        YY_BREAK
case 75:
YY_RULE_SETUP
{ return T_REDUCE; }
        YY_BREAK
case 76:
YY_RULE_SETUP
{ return T_DEREFF; }
        YY_BREAK
case 77:
YY_RULE_SETUP
{ return T_SEP; }
        YY_BREAK
case 78:
YY_RULE_SETUP
{ return T_ADD; }
        YY_BREAK
case 79:
YY_RULE_SETUP
{ return T_FDMUL; }
        YY_BREAK
case 80:
YY_RULE_SETUP
{ return T_OTHERMUL; }
        YY_BREAK
case 81:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OTHERMUL; }
        YY_BREAK
case 82:
YY_RULE_SETUP
{ return T_COMPARE; }
        YY_BREAK
case 83:
YY_RULE_SETUP
{ return T_FDIN; }
        YY_BREAK
case 84:
YY_RULE_SETUP
{ return T_FDCOMPARE; }
        YY_BREAK
case 85:
YY_RULE_SETUP
{ return T_LMACRO; }
        YY_BREAK
case 86:
YY_RULE_SETUP
{ return T_RMACRO; }
        YY_BREAK
case 87:
YY_RULE_SETUP
{ return T_DOTASSIGN; }
        YY_BREAK
case 88:
YY_RULE_SETUP
{ // Hack to avoid strange parsing of X.1.1:
                                 // If "." is followed by integer, then
                                 // a special token is returned.
                                 // If this rule would not be there, the
                                 // resulting tokens would be "X" "." "1.1",
                                 // where the last one is a float.
                                 // Caveat: Comments are not allowed
                                 //         between . and number.
                                 stripDot(); return T_DOTINT; }
        YY_BREAK
case 89:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ // Hack to avoid parsing error for a(b:1...):
                                 // If int is followed by ..., int is returned.
                                 // If this rule would not be there, the rule
                                 // for floats would match and an error would
                                 // occur.
                                 return T_OZINT; }
        YY_BREAK
case 90:
YY_RULE_SETUP
{ return T_OZINT; }
        YY_BREAK
case 91:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OZINT; }
        YY_BREAK
case 92:
YY_RULE_SETUP
{ return T_OZFLOAT; }
        YY_BREAK
case 93:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_UNIT_LABEL; }
        YY_BREAK
case 94:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_TRUE_LABEL; }
        YY_BREAK
case 95:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FALSE_LABEL; }
        YY_BREAK
case 96:
YY_RULE_SETUP
{ return T_andthen; }
        YY_BREAK
case 97:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_andthen; }
        YY_BREAK
case 98:
YY_RULE_SETUP
{ return T_at; }
        YY_BREAK
case 99:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_at; }
        YY_BREAK
case 100:
YY_RULE_SETUP
{ return T_attr; }
        YY_BREAK
case 101:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_attr; }
        YY_BREAK
case 102:
YY_RULE_SETUP
{ return T_case; }
        YY_BREAK
case 103:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_case; }
        YY_BREAK
case 104:
YY_RULE_SETUP
{ return T_catch; }
        YY_BREAK
case 105:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_catch; }
        YY_BREAK
case 106:
YY_RULE_SETUP
{ return T_choice; }
        YY_BREAK
case 107:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_choice; }
        YY_BREAK
case 108:
YY_RULE_SETUP
{ return T_class; }
        YY_BREAK
case 109:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_class; }
        YY_BREAK
case 110:
YY_RULE_SETUP
{ return T_cond; }
        YY_BREAK
case 111:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_cond; }
        YY_BREAK
case 112:
YY_RULE_SETUP
{ return T_declare; }
        YY_BREAK
case 113:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_declare; }
        YY_BREAK
case 114:
YY_RULE_SETUP
{ return T_define; }
        YY_BREAK
case 115:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_define; }
        YY_BREAK
case 116:
YY_RULE_SETUP
{ return T_dis; }
        YY_BREAK
case 117:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_dis; }
        YY_BREAK
case 118:
YY_RULE_SETUP
{ return T_else; }
        YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_else; }
        YY_BREAK
case 120:
YY_RULE_SETUP
{ return T_elsecase; }
        YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elsecase; }
        YY_BREAK
case 122:
YY_RULE_SETUP
{ return T_elseif; }
        YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseif; }
        YY_BREAK
case 124:
YY_RULE_SETUP
{ return T_elseof; }
        YY_BREAK
case 125:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseof; }
        YY_BREAK
case 126:
YY_RULE_SETUP
{ return T_end; }
        YY_BREAK
case 127:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_end; }
        YY_BREAK
case 128:
YY_RULE_SETUP
{ return T_export; }
        YY_BREAK
case 129:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_export; }
        YY_BREAK
case 130:
YY_RULE_SETUP
{ return T_fail; }
        YY_BREAK
case 131:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fail; }
        YY_BREAK
case 132:
YY_RULE_SETUP
{ return T_false; }
        YY_BREAK
case 133:
YY_RULE_SETUP
{ return T_feat; }
        YY_BREAK
case 134:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_feat; }
        YY_BREAK
case 135:
YY_RULE_SETUP
{ return T_finally; }
        YY_BREAK
case 136:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_finally; }
        YY_BREAK
case 137:
YY_RULE_SETUP
{ return T_from; }
        YY_BREAK
case 138:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_from; }
        YY_BREAK
case 139:
YY_RULE_SETUP
{ return T_fun; }
        YY_BREAK
case 140:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fun; }
        YY_BREAK
case 141:
YY_RULE_SETUP
{ return T_functor; }
        YY_BREAK
case 142:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_functor; }
        YY_BREAK
case 143:
YY_RULE_SETUP
{ return T_if; }
        YY_BREAK
case 144:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_if; }
        YY_BREAK
case 145:
YY_RULE_SETUP
{ return T_import; }
        YY_BREAK
case 146:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_import; }
        YY_BREAK
case 147:
YY_RULE_SETUP
{ return T_in; }
        YY_BREAK
case 148:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_in; }
        YY_BREAK
case 149:
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_OZATOM; }
        YY_BREAK
case 150:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_ATOM_LABEL; }
        YY_BREAK
case 151:
YY_RULE_SETUP
{ return T_local; }
        YY_BREAK
case 152:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_local; }
        YY_BREAK
case 153:
YY_RULE_SETUP
{ return T_lock; }
        YY_BREAK
case 154:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_lock; }
        YY_BREAK
case 155:
YY_RULE_SETUP
{ return T_meth; }
        YY_BREAK
case 156:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_meth; }
        YY_BREAK
case 157:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_OZATOM; }
        YY_BREAK
case 158:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_ATOM_LABEL; }
        YY_BREAK
case 159:
YY_RULE_SETUP
{ return T_not; }
        YY_BREAK
case 160:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_not; }
        YY_BREAK
case 161:
YY_RULE_SETUP
{ return T_of; }
        YY_BREAK
case 162:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_of; }
        YY_BREAK
case 163:
YY_RULE_SETUP
{ return T_or; }
        YY_BREAK
case 164:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_or; }
        YY_BREAK
case 165:
YY_RULE_SETUP
{ return T_orelse; }
        YY_BREAK
case 166:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_orelse; }
        YY_BREAK
case 167:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_OZATOM; }
        YY_BREAK
case 168:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_ATOM_LABEL; }
        YY_BREAK
case 169:
YY_RULE_SETUP
{ return T_prepare; }
        YY_BREAK
case 170:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prepare; }
        YY_BREAK
case 171:
YY_RULE_SETUP
{ return T_proc; }
        YY_BREAK
case 172:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_proc; }
        YY_BREAK
case 173:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_OZATOM; }
        YY_BREAK
case 174:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_ATOM_LABEL; }
        YY_BREAK
case 175:
YY_RULE_SETUP
{ return T_prop; }
        YY_BREAK
case 176:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prop; }
        YY_BREAK
case 177:
YY_RULE_SETUP
{ return T_raise; }
        YY_BREAK
case 178:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_raise; }
        YY_BREAK
case 179:
YY_RULE_SETUP
{ return T_require; }
        YY_BREAK
case 180:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_require; }
        YY_BREAK
case 181:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_OZATOM; }
        YY_BREAK
case 182:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_ATOM_LABEL; }
        YY_BREAK
case 183:
YY_RULE_SETUP
{ return T_self; }
        YY_BREAK
case 184:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_self; }
        YY_BREAK
case 185:
YY_RULE_SETUP
{ return T_skip; }
        YY_BREAK
case 186:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_skip; }
        YY_BREAK
case 187:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_OZATOM; }
        YY_BREAK
case 188:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_ATOM_LABEL; }
        YY_BREAK
case 189:
YY_RULE_SETUP
{ return T_then; }
        YY_BREAK
case 190:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_then; }
        YY_BREAK
case 191:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_OZATOM; }
        YY_BREAK
case 192:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_ATOM_LABEL; }
        YY_BREAK
case 193:
YY_RULE_SETUP
{ return T_thread; }
        YY_BREAK
case 194:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_thread; }
        YY_BREAK
case 195:
YY_RULE_SETUP
{ return T_true; }
        YY_BREAK
case 196:
YY_RULE_SETUP
{ return T_try; }
        YY_BREAK
case 197:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_try; }
        YY_BREAK
case 198:
YY_RULE_SETUP
{ return T_unit; }
        YY_BREAK
case 199:
YY_RULE_SETUP
{ return T_for; }
        YY_BREAK
case 200:
YY_RULE_SETUP
{ return T_do; }
        YY_BREAK
case 201:
YY_RULE_SETUP
{ stripTrans('\''); return T_OZATOM; }
        YY_BREAK
case 202:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_OZATOM;}
        YY_BREAK
case 203:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ stripTrans('\''); return T_ATOM_LABEL; }
        YY_BREAK
case 204:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_ATOM_LABEL;}
        YY_BREAK
case 205:
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE; }
        YY_BREAK
case 206:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
        YY_BREAK
case 207:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE_LABEL; }
        YY_BREAK
case 208:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
        YY_BREAK
case 209:
YY_RULE_SETUP
{ stripTrans('\"'); return T_STRING; }
        YY_BREAK
case 210:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal string syntax",xyFileName,xylino,xycharno()); return T_STRING;}
        YY_BREAK
case 211:
YY_RULE_SETUP
{ int i = 0;
                                 int j = 1;
                                 transBody(0, xytext, i, j);
                                 return T_AMPER;
                               }
        YY_BREAK
case 212:
YY_RULE_SETUP
{
                                 return xytext[0];
                               }
        YY_BREAK
case 213:
YY_RULE_SETUP
;
        YY_BREAK
case 214:
YY_RULE_SETUP
{ xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case 215:
YY_RULE_SETUP
{ if (get_cond())
                                   xyreportError("lexical error",
                                                 "unknown directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(IGNOREDIRECTIVE);
                               }
        YY_BREAK
case 216:
YY_RULE_SETUP
{ if (get_cond())
                                   xyreportError("lexical error",
                                                 "illegal character",
                                                 xyFileName,xylino,xycharno());
                               }
        YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEX):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK
case 217:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
        YY_BREAK

        case YY_END_OF_BUFFER:
                {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = yy_hold_char;
                YY_RESTORE_YY_MORE_OFFSET

                if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                        {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between yy_current_buffer and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        yy_n_chars = yy_current_buffer->yy_n_chars;
                        yy_current_buffer->yy_input_file = yyin;
                        yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                        }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        { /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state();

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans( yy_current_state );

                        yy_bp = yytext_ptr + YY_MORE_ADJ;

                        if ( yy_next_state )
                                {
                                /* Consume the NUL. */
                                yy_cp = ++yy_c_buf_p;
                                yy_current_state = yy_next_state;
                                goto yy_match;
                                }

                        else
                                {
                                yy_cp = yy_c_buf_p;
                                goto yy_find_action;
                                }
                        }

                else switch ( yy_get_next_buffer() )
                        {
                        case EOB_ACT_END_OF_FILE:
                                {
                                yy_did_buffer_switch_on_eof = 0;

                                if ( yywrap() )
                                        {
                                        /* Note: because we've taken care in
                                         * yy_get_next_buffer() to have set up
                                         * yytext, we can now set up
                                         * yy_c_buf_p so that if some total
                                         * hoser (like flex itself) wants to
                                         * call the scanner after we return the
                                         * YY_NULL, it'll still work - another
                                         * YY_NULL will get returned.
                                         */
                                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                        yy_act = YY_STATE_EOF(YY_START);
                                        goto do_action;
                                        }

                                else
                                        {
                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
                                        }
                                break;
                                }

                        case EOB_ACT_CONTINUE_SCAN:
                                yy_c_buf_p =
                                        yytext_ptr + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_match;

                        case EOB_ACT_LAST_MATCH:
                                yy_c_buf_p =
                                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                break;
                }

        default:
                YY_FATAL_ERROR(
                        "fatal flex scanner internal error--no action found" );
        } /* end of action switch */
                } /* end of scanning one token */
        } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *      EOB_ACT_LAST_MATCH -
 *      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *      EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
        {
        register char *dest = yy_current_buffer->yy_ch_buf;
        register char *source = yytext_ptr;
        register int number_to_move, i;
        int ret_val;

        if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
                YY_FATAL_ERROR(
                "fatal flex scanner internal error--end of buffer missed" );

        if ( yy_current_buffer->yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                yy_current_buffer->yy_n_chars = yy_n_chars = 0;

        else
                {
                int num_to_read =
                        yy_current_buffer->yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                        YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                        /* just a shorter name for the current buffer */
                        YY_BUFFER_STATE b = yy_current_buffer;

                        int yy_c_buf_p_offset =
                                (int) (yy_c_buf_p - b->yy_ch_buf);

                        if ( b->yy_is_our_buffer )
                                {
                                int new_size = b->yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->yy_buf_size += b->yy_buf_size / 8;
                                else
                                        b->yy_buf_size *= 2;

                                b->yy_ch_buf = (char *)
                                        /* Include room in for 2 EOB chars. */
                                        yy_flex_realloc( (void *) b->yy_ch_buf,
                                                         b->yy_buf_size + 2 );
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->yy_ch_buf = 0;

                        if ( ! b->yy_ch_buf )
                                YY_FATAL_ERROR(
                                "fatal error - scanner input buffer overflow" );

                        yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                        num_to_read = yy_current_buffer->yy_buf_size -
                                                number_to_move - 1;
#endif
                        }

                if ( num_to_read > YY_READ_BUF_SIZE )
                        num_to_read = YY_READ_BUF_SIZE;

                /* Read in more data. */
                YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                        yy_n_chars, num_to_read );

                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        if ( yy_n_chars == 0 )
                {
                if ( number_to_move == YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        yyrestart( yyin );
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        yy_current_buffer->yy_buffer_status =
                                YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        yy_n_chars += number_to_move;
        yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
        yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

        yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

        return ret_val;
        }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
        {
        register yy_state_type yy_current_state;
        register char *yy_cp;

        yy_current_state = yy_start;

        for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
                {
                register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 79);
                if ( yy_accept[yy_current_state] )
                        {
                        yy_last_accepting_state = yy_current_state;
                        yy_last_accepting_cpos = yy_cp;
                        }
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                        {
                        yy_current_state = (int) yy_def[yy_current_state];
                        if ( yy_current_state >= 655 )
                                yy_c = yy_meta[(unsigned int) yy_c];
                        }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                }

        return yy_current_state;
        }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
        {
        register int yy_is_jam;
        register char *yy_cp = yy_c_buf_p;

        register YY_CHAR yy_c = 79;
        if ( yy_accept[yy_current_state] )
                {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
                }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 655 )
                        yy_c = yy_meta[(unsigned int) yy_c];
                }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        yy_is_jam = (yy_current_state == 654);

        return yy_is_jam ? 0 : yy_current_state;
        }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
        {
        register char *yy_cp = yy_c_buf_p;

        /* undo effects of setting up yytext */
        *yy_cp = yy_hold_char;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                { /* need to shift things up to make room */
                /* +2 for EOB chars. */
                register int number_to_move = yy_n_chars + 2;
                register char *dest = &yy_current_buffer->yy_ch_buf[
                                        yy_current_buffer->yy_buf_size + 2];
                register char *source =
                                &yy_current_buffer->yy_ch_buf[number_to_move];

                while ( source > yy_current_buffer->yy_ch_buf )
                        *--dest = *--source;

                yy_cp += (int) (dest - source);
                yy_bp += (int) (dest - source);
                yy_current_buffer->yy_n_chars =
                        yy_n_chars = yy_current_buffer->yy_buf_size;

                if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                        YY_FATAL_ERROR( "flex scanner push-back overflow" );
                }

        *--yy_cp = (char) c;


        yytext_ptr = yy_bp;
        yy_hold_char = *yy_cp;
        yy_c_buf_p = yy_cp;
        }
#endif  /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
        {
        int c;

        *yy_c_buf_p = yy_hold_char;

        if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
                {
                /* yy_c_buf_p now points to the character we want to return.
                 * If this occurs *before* the EOB characters, then it's a
                 * valid NUL; if not, then we've hit the end of the buffer.
                 */
                if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        /* This was really a NUL. */
                        *yy_c_buf_p = '\0';

                else
                        { /* need more input */
                        int offset = yy_c_buf_p - yytext_ptr;
                        ++yy_c_buf_p;

                        switch ( yy_get_next_buffer() )
                                {
                                case EOB_ACT_LAST_MATCH:
                                        /* This happens because yy_g_n_b()
                                         * sees that we've accumulated a
                                         * token and flags that we need to
                                         * try matching the token before
                                         * proceeding.  But for input(),
                                         * there's no matching to consider.
                                         * So convert the EOB_ACT_LAST_MATCH
                                         * to EOB_ACT_END_OF_FILE.
                                         */

                                        /* Reset buffer status. */
                                        yyrestart( yyin );

                                        /* fall through */

                                case EOB_ACT_END_OF_FILE:
                                        {
                                        if ( yywrap() )
                                                return EOF;

                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
#ifdef __cplusplus
                                        return yyinput();
#else
                                        return input();
#endif
                                        }

                                case EOB_ACT_CONTINUE_SCAN:
                                        yy_c_buf_p = yytext_ptr + offset;
                                        break;
                                }
                        }
                }

        c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
        *yy_c_buf_p = '\0';     /* preserve yytext */
        yy_hold_char = *++yy_c_buf_p;


        return c;
        }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
        {
        if ( ! yy_current_buffer )
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_init_buffer( yy_current_buffer, input_file );
        yy_load_buffer_state();
        }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
        {
        if ( yy_current_buffer == new_buffer )
                return;

        if ( yy_current_buffer )
                {
                /* Flush out information for old buffer. */
                *yy_c_buf_p = yy_hold_char;
                yy_current_buffer->yy_buf_pos = yy_c_buf_p;
                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        yy_current_buffer = new_buffer;
        yy_load_buffer_state();

        /* We don't actually know whether we did this switch during
         * EOF (yywrap()) processing, but the only time this flag
         * is looked at is after yywrap() is called, so it's safe
         * to go ahead and always set it.
         */
        yy_did_buffer_switch_on_eof = 1;
        }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
        {
        yy_n_chars = yy_current_buffer->yy_n_chars;
        yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
        yyin = yy_current_buffer->yy_input_file;
        yy_hold_char = *yy_c_buf_p;
        }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
        {
        YY_BUFFER_STATE b;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_buf_size = size;

        /* yy_ch_buf has to be 2 characters longer than the size given because
         * we need to put in 2 end-of-buffer characters.
         */
        b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
        if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_is_our_buffer = 1;

        yy_init_buffer( b, file );

        return b;
        }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
        {
        if ( ! b )
                return;

        if ( b == yy_current_buffer )
                yy_current_buffer = (YY_BUFFER_STATE) 0;

        if ( b->yy_is_our_buffer )
                yy_flex_free( (void *) b->yy_ch_buf );

        yy_flex_free( (void *) b );
        }


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


        {
        yy_flush_buffer( b );

        b->yy_input_file = file;
        b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
        b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
        b->yy_is_interactive = 0;
#else
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
        }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

        {
        if ( ! b )
                return;

        b->yy_n_chars = 0;

        /* We always need two end-of-buffer characters.  The first causes
         * a transition to the end-of-buffer state.  The second causes
         * a jam in that state.
         */
        b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
        b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

        b->yy_buf_pos = &b->yy_ch_buf[0];

        b->yy_at_bol = 1;
        b->yy_buffer_status = YY_BUFFER_NEW;

        if ( b == yy_current_buffer )
                yy_load_buffer_state();
        }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
        {
        YY_BUFFER_STATE b;

        if ( size < 2 ||
             base[size-2] != YY_END_OF_BUFFER_CHAR ||
             base[size-1] != YY_END_OF_BUFFER_CHAR )
                /* They forgot to leave room for the EOB's. */
                return 0;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

        b->yy_buf_size = size - 2;      /* "- 2" to take care of EOB's */
        b->yy_buf_pos = b->yy_ch_buf = base;
        b->yy_is_our_buffer = 0;
        b->yy_input_file = 0;
        b->yy_n_chars = b->yy_buf_size;
        b->yy_is_interactive = 0;
        b->yy_at_bol = 1;
        b->yy_fill_buffer = 0;
        b->yy_buffer_status = YY_BUFFER_NEW;

        yy_switch_to_buffer( b );

        return b;
        }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
        {
        int len;
        for ( len = 0; yy_str[len]; ++len )
                ;

        return yy_scan_bytes( yy_str, len );
        }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
        {
        YY_BUFFER_STATE b;
        char *buf;
        yy_size_t n;
        int i;

        /* Get memory for full buffer, including space for trailing EOB's. */
        n = len + 2;
        buf = (char *) yy_flex_alloc( n );
        if ( ! buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

        for ( i = 0; i < len; ++i )
                buf[i] = bytes[i];

        buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

        b = yy_scan_buffer( buf, n );
        if ( ! b )
                YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

        /* It's okay to grow etc. this buffer, and we should throw it
         * away when we're done.
         */
        b->yy_is_our_buffer = 1;

        return b;
        }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
        {
        if ( yy_start_stack_ptr >= yy_start_stack_depth )
                {
                yy_size_t new_size;

                yy_start_stack_depth += YY_START_STACK_INCR;
                new_size = yy_start_stack_depth * sizeof( int );

                if ( ! yy_start_stack )
                        yy_start_stack = (int *) yy_flex_alloc( new_size );

                else
                        yy_start_stack = (int *) yy_flex_realloc(
                                        (void *) yy_start_stack, new_size );

                if ( ! yy_start_stack )
                        YY_FATAL_ERROR(
                        "out of memory expanding start-condition stack" );
                }

        yy_start_stack[yy_start_stack_ptr++] = YY_START;

        BEGIN(new_state);
        }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
        {
        if ( --yy_start_stack_ptr < 0 )
                YY_FATAL_ERROR( "start-condition stack underflow" );

        BEGIN(yy_start_stack[yy_start_stack_ptr]);
        }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
        {
        return yy_start_stack[yy_start_stack_ptr - 1];
        }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
        {
        (void) fprintf( stderr, "%s\n", msg );
        exit( YY_EXIT_FAILURE );
        }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                yytext[yyleng] = yy_hold_char; \
                yy_c_buf_p = yytext + n; \
                yy_hold_char = *yy_c_buf_p; \
                *yy_c_buf_p = '\0'; \
                yyleng = n; \
                } \
        while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
        {
        register int i;
        for ( i = 0; i < n; ++i )
                s1[i] = s2[i];
        }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
        {
        register int n;
        for ( n = 0; s[n]; ++n )
                ;

        return n;
        }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
        {
        return (void *) malloc( size );
        }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
        {
        /* The cast to (char *) in the following accommodates both
         * implementations that use char* generic pointers, and those
         * that use void* generic pointers.  It works with the latter
         * because both ANSI C and C++ allow castless assignment from
         * any pointer type to void*, and deal with argument conversions
         * as though doing an assignment.
         */
        return (void *) realloc( (char *) ptr, size );
        }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
        {
        free( ptr );
        }

#if YY_MAIN
int main()
        {
        yylex();
        return 0;
        }
#endif


static void xy_init(OZ_Term defines0) {
  xylino = 1;
  errorFlag = 0;

  bufferStack = NULL;

  defines = tagged2Dictionary(OZ_deref(defines0));
  conditional_p = 0;
  conditional_basep = 0;
  commentdepth = 0;

  BEGIN(INITIAL);
}

int xy_init_from_file(char *file, OZ_Term defines) {
  char *fullname = scExpndFileName(file, NULL);
  if (fullname == NULL)
    return 0;
  xy_errorMessages = oz_cons(OZ_mkTupleC("logInsert",1,OZ_atom(fullname)),
                             AtomNil);
  xyin = fopen(fullname, "r");
  if (xyin == NULL)
    return 0;
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  strncpy(xyFileName,fullname,99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  delete[] fullname;
  xy_init(defines);
  return 1;
}

void xy_init_from_string(char *str, OZ_Term defines) {
  xy_errorMessages = AtomNil;
  xyFileName[0] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  xyin = NULL;
  xy_scan_string(str);
  xylastline = YY_CURRENT_BUFFER->yy_ch_buf;
  xy_init(defines);
}

char *xy_expand_file_name(char *file) {
  return scExpndFileName(file, NULL);
}

void xy_exit() {
  xy_delete_buffer(YY_CURRENT_BUFFER);
  while (bufferStack != NULL) {
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
  }
  if (xyin)
    fclose(xyin);
}

int xylex() {
  int next = xymylex();
  if (get_cond() || next == 0 || next == ENDOFFILE)
    return next;
  else
    return xylex();
}

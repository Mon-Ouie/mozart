#define yy_create_buffer xy_create_buffer
#define yy_delete_buffer xy_delete_buffer
#define yy_scan_buffer xy_scan_buffer
#define yy_scan_string xy_scan_string
#define yy_scan_bytes xy_scan_bytes
#define yy_flex_debug xy_flex_debug
#define yy_init_buffer xy_init_buffer
#define yy_flush_buffer xy_flush_buffer
#define yy_load_buffer_state xy_load_buffer_state
#define yy_switch_to_buffer xy_switch_to_buffer
#define yyin xyin
#define yyleng xyleng
#define yylex xylex
#define yyout xyout
#define yyrestart xyrestart
#define yytext xytext

/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *      if ( condition_holds )
 *              yyless( 5 );
 *      else
 *              do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                *yy_cp = yy_hold_char; \
                YY_RESTORE_YY_MORE_OFFSET \
                yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
                YY_DO_BEFORE_ACTION; /* set up yytext again */ \
                } \
        while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
        {
        FILE *yy_input_file;

        char *yy_ch_buf;                /* input buffer */
        char *yy_buf_pos;               /* current position in input buffer */

        /* Size of input buffer in bytes, not including room for EOB
         * characters.
         */
        yy_size_t yy_buf_size;

        /* Number of characters read into yy_ch_buf, not including EOB
         * characters.
         */
        int yy_n_chars;

        /* Whether we "own" the buffer - i.e., we know we created it,
         * and can realloc() it to grow it, and should free() it to
         * delete it.
         */
        int yy_is_our_buffer;

        /* Whether this is an "interactive" input source; if so, and
         * if we're using stdio for input, then we want to use getc()
         * instead of fread(), to make sure we stop fetching input after
         * each newline.
         */
        int yy_is_interactive;

        /* Whether we're considered to be at the beginning of a line.
         * If so, '^' rules will be active on the next match, otherwise
         * not.
         */
        int yy_at_bol;

        /* Whether to try to fill the input buffer when we reach the
         * end of it.
         */
        int yy_fill_buffer;

        int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
        /* When an EOF's been seen but there's still some text to process
         * then we mark the buffer as YY_EOF_PENDING, to indicate that we
         * shouldn't try reading from the input source any more.  We might
         * still have a bunch of tokens to match, though, because of
         * possible backing-up.
         *
         * When we actually see the EOF, we change the status to "new"
         * (via yyrestart()), so that the user can continue scanning by
         * just pointing yyin at a new input file.
         */
#define YY_BUFFER_EOF_PENDING 2
        };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_is_interactive = is_interactive; \
        }

#define yy_set_bol(at_bol) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_at_bol = at_bol; \
        }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
        yytext_ptr = yy_bp; \
        yyleng = (int) (yy_cp - yy_bp); \
        yy_hold_char = *yy_cp; \
        *yy_cp = '\0'; \
        yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 221
#define YY_END_OF_BUFFER 222
static yyconst short int yy_accept[670] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  222,  220,
      217,  218,  216,  220,  216,    1,  220,  220,   79,   78,
      216,   79,   90,   90,  216,   82,  216,   82,  209,  216,
      220,  220,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  216,
       85,   86,    5,    6,    7,    7,   23,   22,   24,   26,
       25,   27,    1,   26,   31,   30,   32,   31,   29,   31,
       28,   37,   36,   38,   33,   34,   35,   41,   40,   42,

       41,   39,   41,   45,   44,   46,   43,   45,   53,   52,
       54,   51,   53,   57,   56,   58,   55,   57,   49,   48,
       50,   47,   49,   61,   60,   62,   61,   59,   65,   64,
       66,   63,   63,   65,   82,   76,    0,  213,    0,    0,
        1,  215,    0,    0,  205,    0,    0,    0,   71,   88,
       88,    2,   77,   92,   90,    0,    0,    0,   90,   83,
       87,   73,   84,   85,   74,   82,   82,   75,   86,  211,
      209,   69,  219,  219,  219,  219,  219,  219,  219,  219,
      219,    0,    0,  209,    0,  207,  205,  205,   98,  205,
      205,  205,  205,  205,  205,  118,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  147,  205,  151,  205,  205,
      205,  205,  205,  165,  167,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,   90,   90,
        5,    4,    3,    0,   29,    0,   28,   35,    0,   39,
        0,   43,    0,    0,   43,   51,    0,    0,   51,   55,
        0,    0,   55,   47,    0,    0,   47,    0,   59,    0,
       59,   63,    0,    0,   63,   63,   63,    0,    0,   73,
       84,   85,   74,    0,    0,  214,    0,    0,  214,    0,
        0,  207,  206,    0,    0,  206,   70,   88,    0,    0,
       88,   91,   92,    0,   90,   90,   83,   72,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
        0,    0,  210,  211,  210,  205,   99,  205,  205,  205,
      205,  205,  205,  205,  205,  116,   80,  119,  205,  128,
      205,  205,  205,  205,  205,  139,  205,  143,  148,  205,
      152,  153,  205,  205,   80,  163,  166,  168,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  191,  205,  205,
      205,  205,  200,  205,  205,   92,   90,    0,   90,   29,
       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   63,   63,   68,    0,   72,    0,    0,    0,    0,
      213,    0,    0,    0,    0,    0,    0,  205,  208,    0,

        0,    0,  208,   88,   88,   89,   92,    0,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,    0,    0,    0,  212,    0,  209,  212,  205,  100,
      102,  205,  205,  205,  110,  205,  205,  117,   81,  120,
      129,  205,  132,  205,  135,  205,  140,  141,  144,  205,
      205,  154,  205,  157,  159,  161,  164,  205,  205,  205,
      175,  177,  179,  205,  205,  205,  187,  189,  192,  193,
      205,  205,  199,  201,  202,  205,   91,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  219,   18,  219,  219,  219,  219,  219,   12,

      219,  219,  219,  219,  219,    0,    0,  205,  101,  103,
      104,  205,  108,  111,  205,  205,  121,  205,  205,  205,
      205,  133,  134,  136,  205,  142,  205,  205,  155,  158,
      160,  162,  205,  205,  205,  176,  178,  180,  181,  205,
      205,  188,  190,  194,  205,  195,   94,   93,  203,    0,
        0,    0,    0,    0,  219,   19,  219,  219,   16,  219,
      219,  219,  219,  219,  219,   15,    0,    0,  205,  105,
      106,  109,  205,  114,  205,  124,  126,  130,   95,  205,
      205,  149,  156,  169,  171,  205,  182,  205,  205,  197,
      196,  204,    0,   14,  219,  219,   17,   13,  219,  219,

      219,    8,   96,  107,  112,  115,  205,  125,  127,  131,
      137,  145,  150,  170,  172,  173,  183,  185,  198,   67,
      219,  219,  219,  219,  219,   97,  113,  122,  138,  146,
      174,  184,  186,  219,  219,  219,  219,  219,  123,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,   10,  219,  219,  219,  219,    9,  219,  219,
       11,  219,  219,  219,  219,   21,  219,   20,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,    4,   29,   30,   31,   30,   30,   32,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   35,   34,
       34,   34,   36,   34,   34,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   53,   69,   70,   71,   72,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       73,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   74,    1,    1,    1,
        1,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,    1,   75,   75,   75,   75,   75,
       75,   75,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,    1,   76,   76,   76,
       76,   76,   76,   76,   76
    } ;

static yyconst int yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    4,
        5,    6,    1,    7,    1,    1,    8,    8,    9,   10,
       10,   10,   11,    1,    1,   12,   13,   14,    1,   15,
       15,   15,   15,   16,   16,   16,   17,    1,    4,   18,
        1,   19,    4,   20,   20,   15,   15,   15,   20,   16,
       16,   16,   16,   16,   16,   16,   17,   16,   16,   16,
       17,   16,   17,   16,   17,   16,   17,   16,    1,    1,
        1,    8,    1,    1,   21,   21,   22
    } ;

static yyconst short int yy_base[771] =
    {   0,
        0,    0,   75,   76,   78,   80,   82,   84,  103,    0,
      180,    0,  257,    0,  333,  407,  481,  555,  629,  703,
      777,  851,  925, 1000,  335,  339, 1593, 1592, 1617, 3493,
     3493, 3493, 1611,  338, 3493,    0, 1569,  335, 3493, 3493,
      369,   78,  382,  327,   72,  358,  369,  390, 1595, 1566,
      404,  355,  366, 1593,  409,  368,  367,  413,  423,  433,
      446,  328,  387,  434,  457,  473,  435,  331,  458,  331,
     3493, 3493,    0, 3493, 1585, 1589, 3493, 3493, 3493, 3493,
     3493, 3493,    0, 1588, 3493, 3493, 3493,    0, 1583, 1076,
      508, 3493, 3493, 3493, 3493, 3493,    0, 3493, 3493, 3493,

        0, 1582, 1153, 3493, 3493, 3493,    0,   59, 3493, 3493,
     3493,    0,  449, 3493, 3493, 3493,    0,  459, 3493, 3493,
     3493,    0,  460, 3493, 3493, 3493,  451,    0, 3493, 3493,
     3493,  514,  517,  526,  526, 3493,  467, 3493, 1225, 1593,
        0, 3493,  540,  486, 1582, 1287, 1582,  580, 1574,  573,
      546, 3493, 3493,  591,  552,  599,  455,    0,  606, 1567,
     3493, 1573, 3493, 3493, 3493, 1565, 3493, 3493, 3493, 3493,
     1572, 3493,    0, 1535,  326, 1518,  451,  547,  577, 1515,
     1523,  594, 1349, 1567, 1535, 3493, 1565,  475,  508,  584,
      521,  389,  498,  596,  613, 1564,  594,  495,  585,  603,

      604,  622,  394,  624,  626, 1563,  631, 1562,  511,  638,
      637,  639,  640, 1561,  641,  655,  661,  642,  657,  658,
      656,  645,  664,  662,  668,  679,  673,  675,  730,  708,
        0, 3493, 3493, 1561, 1547, 1416,  736,    0, 1550, 1542,
     1493,    0,  537,  748, 3493,    0,  638,  751, 3493,    0,
      649,  761, 3493,    0,  656,  769, 3493,  685, 3493,  779,
        0,  692,  687,    0,  742,  802,  772,  738,    0,  820,
      823, 1527,  828, 1519,  675,  735,  821, 1565, 3493,  782,
        0, 3493,  833,  810, 1604, 1545, 3493,  843,  766,    0,
      853, 1538,  857,  870,  829,    0, 3493, 3493, 1506, 1492,

     1506, 1496,  685, 1489, 1493, 1503, 1489, 1485, 1494, 1498,
      875, 1634,  706, 3493, 1532,  772, 3493,  807,  748,  858,
      805,  743,  813,  843,  859, 1531, 1530, 3493,  887, 1529,
      888,  889,  890,  891,  894, 1528,  895,  897, 3493,  898,
     3493, 1527,  896,  902,  900, 1526, 3493, 3493,  903,  901,
      905,  948,  904,  933,  908,  910,  909, 1525,  943,  913,
      919,  950, 1523,  945,  984,  992,  998, 1005, 1011, 3493,
     3493,  912,    0,  984,    0, 1015,    0, 1021,    0, 1049,
        0,  903,    0, 3493, 1524, 1068, 1494,  890, 1035, 1073,
     3493, 1073, 1102, 1678, 1077,    0,  908, 1516, 1098, 1105,

     1109, 1717, 3493, 1052,    0, 3493, 1112, 1153, 1475, 1478,
     1473, 1465, 1475, 1469, 1467, 1466, 1469, 1476, 1460, 1447,
     1448, 1163, 1747,  898, 1100, 1166, 1476, 3493, 1144, 1472,
     1471, 1158, 1159,  937, 1470, 1177, 1185, 3493, 3493, 1186,
     3493, 1129, 1469, 1189, 1468, 1188, 3493, 1467, 3493, 1136,
     1190, 3493, 1195, 1466, 1465, 1464, 3493, 1192, 1200, 1196,
     1463, 1462, 1461, 1201, 1203, 1199, 1460, 1459, 3493, 1458,
     1208, 1202, 1457, 3493, 1456, 1205, 3493, 1245,    0, 1251,
        0, 1255,    0, 1258,    0, 1263,    0, 1434, 1274,    0,
     1279,    0, 1409,    0, 1416, 1059, 1415, 1415, 1401,    0,

     1406, 1394, 1422, 1407, 1403, 1282,    0, 1213, 3493, 3493,
     1439, 1269, 1438, 3493, 1245, 1275, 3493, 1277, 1279, 1293,
     1248, 3493, 1437, 3493, 1298, 3493, 1300, 1251, 1436, 3493,
     3493, 3493, 1301, 1303, 1304, 3493, 3493, 3493, 1435, 1306,
     1308, 3493, 3493, 3493, 1310, 1434, 3493, 3493, 1427, 1410,
     1313,    0, 1317,    0, 1389,    0, 1392, 1389,    0, 1385,
     1370, 1383, 1363, 1347, 1358,    0, 1325,    0, 1315, 3493,
     1396, 3493, 1313, 1395, 1317, 1393, 1392, 1391, 3493, 1307,
     1328, 1390, 3493, 1389, 1388, 1329, 3493, 1339, 1350, 1385,
     3493, 3493, 1368,    0, 1334, 1347,    0,    0, 1324, 1322,

     1332,    0, 1371, 3493, 1370, 3493, 1351, 3493, 3493, 3493,
     1369, 1368, 3493, 3493, 3493, 1366, 1364, 1362, 3493, 3493,
     1311, 1311, 1314, 1297, 1195, 3493, 3493, 1229, 3493, 3493,
     3493, 3493, 3493, 1191, 1177, 1156, 1167, 1170, 3493, 1149,
     1096, 1092, 1088, 1077, 1065, 1050,  979,  960,  969,  942,
      880,  792,    0,  776,  661,  637,  631,    0,  506,  441,
        0,  384,  379,  276,   48,    0,   21,    0, 3493, 1796,
     1818, 1840, 1862, 1884, 1906, 1928, 1950, 1972, 1994, 2016,
     2038, 2059, 2076, 2085, 2105, 2122, 2143, 2165, 2180, 2191,
     2211, 2226, 2237, 2258, 2270, 2291, 2303, 2324, 2336, 2357,

     2378, 2390, 2411, 2433, 2455, 2475, 2495, 2517, 2530, 2545,
     2552, 2572, 2594, 2611, 2632, 2654, 2669, 2680, 2700, 2715,
     2726, 2747, 2766, 2777, 2798, 2817, 2828, 2849, 2868, 2879,
     2900, 2919, 2939, 2958, 2969, 2981, 3001, 3023, 3045, 3067,
     3088, 3101, 3121, 3142, 3155, 3166, 3172, 3192, 3214, 3230,
     3242, 3253, 3264, 3275, 3286, 3304, 3315, 3333, 3351, 3362,
     3373, 3384, 3395, 3406, 3417, 3428, 3439, 3450, 3461, 3472
    } ;

static yyconst short int yy_def[771] =
    {   0,
      669,    1,  670,  670,  671,  671,  672,  672,  669,    9,
      669,   11,  669,   13,  673,  673,  674,  674,  675,  675,
      676,  676,  677,  677,  678,  678,    1,    1,  669,  669,
      669,  669,  669,  679,  669,  680,  681,  682,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  683,  669,
      684,  685,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  669,
      669,  669,  687,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  680,  669,  669,  669,  669,  688,  689,  689,
      689,  669,  669,  669,  669,  669,  690,  669,  669,  669,

      691,  692,  692,  669,  669,  669,  693,  694,  669,  669,
      669,  695,  696,  669,  669,  669,  697,  698,  669,  669,
      669,  699,  700,  669,  669,  669,  701,  702,  669,  669,
      669,  669,  669,  669,  703,  669,  704,  669,  705,  705,
      680,  669,  706,  707,  669,  708,  708,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  709,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      710,  669,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  712,  713,  669,  713,  669,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  669,  669,
      715,  669,  669,  716,  717,  717,  717,  718,  719,  720,
      720,  721,  722,  723,  669,  724,  725,  726,  669,  727,
      728,  729,  669,  730,  731,  732,  669,  733,  669,  734,
      735,  669,  669,  736,  669,  669,  669,  737,  738,  737,
      737,  669,  737,  739,  737,  740,  741,  741,  669,  669,
      742,  669,  743,  744,  744,  669,  669,  669,  669,  745,
      669,  669,  669,  669,  669,  746,  669,  669,  747,  747,

      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      748,  748,  749,  669,  669,  750,  669,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  669,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  669,  750,
      669,  750,  750,  750,  750,  750,  669,  669,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  669,  669,  669,  669,  669,
      669,  669,  751,  669,  752,  669,  753,  669,  754,  669,
      755,  669,  736,  669,  738,  737,  669,  739,  739,  740,
      669,  756,  741,  741,  669,  757,  743,  669,  743,  758,

      744,  744,  669,  669,  745,  669,  669,  669,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  748,  748,  749,  749,  759,  669,  669,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  669,  669,  750,
      669,  750,  750,  750,  750,  750,  669,  750,  669,  750,
      750,  669,  750,  750,  750,  750,  669,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  669,  750,
      750,  750,  750,  669,  750,  750,  669,  669,  760,  669,
      761,  669,  762,  669,  763,  669,  764,  669,  669,  765,
      669,  766,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  669,  767,  750,  669,  669,
      750,  750,  750,  669,  750,  750,  669,  750,  750,  750,
      750,  669,  750,  669,  750,  669,  750,  750,  750,  669,
      669,  669,  750,  750,  750,  669,  669,  669,  750,  750,
      750,  669,  669,  669,  750,  750,  669,  669,  750,  669,
      669,  768,  669,  769,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  669,  770,  750,  669,
      750,  669,  750,  750,  750,  750,  750,  750,  669,  750,
      750,  750,  669,  750,  750,  750,  669,  750,  750,  750,
      669,  669,  669,  747,  747,  747,  747,  747,  747,  747,

      747,  747,  750,  669,  750,  669,  750,  669,  669,  669,
      750,  750,  669,  669,  669,  750,  750,  750,  669,  669,
      747,  747,  747,  747,  747,  669,  669,  750,  669,  669,
      669,  669,  669,  747,  747,  747,  747,  747,  669,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,    0,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669
    } ;

static yyconst short int yy_nxt[3571] =
    {   0,
       30,   31,   32,   31,   33,   34,   35,   35,   36,   37,
       38,   35,   35,   39,   40,   35,   40,   41,   42,   43,
       44,   44,   44,   45,   35,   46,   47,   48,   35,   49,
       49,   49,   49,   49,   49,   49,   49,   50,   51,   35,
       35,   35,   52,   53,   54,   55,   56,   57,   58,   54,
       54,   59,   54,   54,   60,   61,   62,   63,   64,   54,
       65,   66,   67,   68,   54,   69,   54,   54,   35,   35,
       35,   70,   71,   72,   49,   54,   30,   74,   74,   78,
       79,   78,   79,   81,   82,   81,   82,  668,   75,   75,
       83,  152,   83,   76,   76,  160,  153,  244,  161,  667,

       84,  245,   84,   85,   86,   87,   85,   85,   85,   85,
       85,   85,   85,   88,   85,   85,   85,   85,   85,   89,
       90,   89,   91,   91,   91,   91,   85,   85,   85,   85,
       85,   85,   89,   89,   89,   89,   89,   89,   89,   89,
       85,   85,   85,   85,   89,   85,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   85,   85,   85,   89,   85,   85,   85,   85,   85,
       92,   93,   94,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   95,   92,   96,   92,   92,   97,

       97,   97,   97,   92,   92,   92,   92,   92,   92,   97,
       97,   97,   97,   97,   97,   97,   97,   92,   92,   92,
       92,   92,   92,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   98,   99,  100,
       98,   98,   98,   98,   98,   98,   98,  101,   98,   98,
       98,   98,   98,  102,  103,  102,  102,  102,  102,  102,
       98,   98,   98,   98,   98,   98,  102,  102,  102,  102,
      102,  102,  102,  102,   98,   98,   98,   98,  102,   98,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,   98,   98,   98,  102,   98,
       98,   98,   98,   98,  105,  106,  130,  131,  666,  186,
      130,  131,  186,  138,  154,  145,  159,  159,  159,  159,
      229,  230,  230,  230,  132,  133,  133,  133,  132,  133,
      133,  133,  107,  107,  107,  107,  107,  107,  107,  107,
      148,  148,  148,  146,  162,  108,  139,  186,  186,  186,
      300,  163,  301,  164,  165,  213,  149,  227,  150,  151,
      151,  151,  163,  183,  166,  167,  168,  184,  186,  154,

      186,  155,  155,  155,  156,  186,  134,  107,  105,  106,
      134,  147,  157,  163,  140,  194,  166,  169,  158,  195,
      186,  197,  188,  198,  186,  196,  157,  665,  189,  664,
      166,  185,  322,  199,  186,  214,  107,  107,  107,  107,
      107,  107,  107,  107,  186,  186,  186,  215,  158,  108,
      174,  175,  190,  176,  336,  177,  200,  186,  178,  191,
      201,  259,  179,  192,  202,  180,  193,  181,  186,  186,
      203,  206,  138,  204,  295,  295,  205,  216,  207,  208,
      209,  107,  110,  111,  186,  224,  186,  248,  663,  260,
      210,  249,  225,  211,  217,  226,  145,  252,  256,  303,

      218,  253,  257,  212,  219,  139,  186,  304,  228,  186,
      112,  112,  112,  112,  112,  112,  112,  112,  220,  317,
      221,  316,  186,  113,  146,  236,  222,  237,  237,  237,
      237,  269,  186,  262,  262,  262,  265,  265,  265,  265,
      223,  330,  270,  140,  263,  266,  267,  267,  267,  271,
      264,  272,  273,  662,  323,  112,  110,  111,  263,  280,
      280,  280,  147,  274,  275,  291,  291,  291,  291,  154,
      318,  155,  155,  155,  156,  244,  281,  342,  321,  245,
      264,  148,  148,  148,  112,  112,  112,  112,  112,  112,
      112,  112,  288,  288,  288,  186,  186,  113,  305,  150,

      151,  151,  151,  289,  306,  186,  281,  186,  292,  290,
      293,  293,  293,  293,  186,  186,  154,  289,  156,  156,
      156,  156,  294,  154,  186,  159,  159,  159,  159,  112,
      115,  116,  183,  186,  307,  186,  184,  186,  294,  290,
      308,  324,  186,  331,  325,  319,  320,  334,  186,  186,
      186,  186,  348,  186,  332,  329,  186,  333,  117,  117,
      117,  117,  117,  117,  117,  117,  186,  186,  186,  186,
      185,  118,  186,  186,  326,  186,  248,  327,  335,  186,
      249,  337,  338,  343,  186,  345,  186,  252,  349,  340,
      186,  253,  661,  353,  256,  259,  357,  660,  257,  344,

      268,  355,  346,  117,  115,  116,  382,  382,  351,  359,
      356,  262,  262,  262,  268,  350,  354,  425,  352,  659,
      358,  361,  360,  260,  364,  366,  365,  369,  369,  369,
      369,  413,  117,  117,  117,  117,  117,  117,  117,  117,
      391,  414,  362,  269,  426,  118,  363,  366,  427,  367,
      367,  367,  368,  236,  186,  237,  237,  237,  237,  186,
      157,  265,  265,  265,  265,  384,  158,  372,  372,  372,
      374,  374,  374,  392,  157,  274,  275,  117,  120,  121,
      376,  376,  376,  186,  373,  404,  404,  375,  378,  378,
      378,  265,  265,  265,  265,  431,  158,  377,  380,  380,

      380,  395,  395,  395,  434,  379,  122,  122,  122,  122,
      122,  122,  122,  122,  373,  381,  186,  375,  186,  123,
      286,  262,  262,  262,  186,  269,  279,  377,  269,  401,
      401,  401,  263,  269,  429,  379,  386,  658,  264,  657,
      393,  393,  393,  398,  399,  381,  263,  384,  295,  295,
      384,  122,  120,  121,  186,  384,  433,  274,  275,  435,
      274,  275,  288,  288,  288,  274,  275,  430,  264,  186,
      186,  400,  291,  291,  291,  291,  293,  293,  293,  293,
      122,  122,  122,  122,  122,  122,  122,  122,  294,  407,
      407,  407,  407,  123,  422,  422,  422,  436,  186,  186,

      186,  186,  186,  432,  294,  186,  186,  186,  449,  186,
      437,  439,  186,  186,  186,  186,  186,  315,  398,  186,
      186,  186,  382,  382,  186,  122,  125,  126,  389,  268,
      186,  478,  478,  478,  440,  127,  426,  446,  656,  453,
      427,  408,  450,  443,  186,  442,  400,  456,  186,  454,
      448,  444,  455,  445,  186,  451,  186,  458,  467,  186,
      471,  186,  459,  460,  466,  464,  472,  468,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  461,  462,  186,  465,  473,  513,  470,

      128,  125,  126,  480,  480,  480,  463,  475,  655,  477,
      127,  293,  293,  293,  293,  366,  654,  367,  367,  367,
      368,  653,  366,  294,  368,  368,  368,  368,  366,  652,
      369,  369,  369,  369,  482,  482,  482,  669,  476,  294,
      484,  484,  484,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  486,  486,
      486,  404,  404,  269,  388,  128,  235,  235,  391,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  489,  489,  489,  384,  142,  142,  142,  235,

      235,  235,  235,  235,  235,  274,  275,  279,  398,  490,
      651,  392,  650,  235,  235,  235,  235,  557,  235,  286,
      558,  137,  137,  137,  491,  491,  491,  649,  144,  144,
      144,  407,  407,  407,  407,  648,  400,  647,  426,  490,
      186,  492,  427,  646,  235,  235,  235,  186,  235,  235,
      235,  235,  235,  240,  240,  186,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  186,
      186,  492,  407,  407,  407,  407,  240,  240,  240,  240,
      240,  240,  182,  182,  182,  506,  506,  506,  186,  521,
      240,  240,  240,  240,  508,  240,  186,  517,  527,  186,

      186,  186,  507,  186,  512,  315,  186,  186,  511,  645,
      186,  186,  186,  186,  186,  644,  186,  643,  642,  186,
      515,  240,  240,  240,  186,  240,  240,  240,  240,  240,
      276,  518,  507,  641,  137,  137,  523,  519,  640,  535,
      639,  516,  525,  520,  277,  277,  277,  534,  539,  529,
      528,  545,  549,  533,  540,  541,  186,  638,  546,  186,
      569,  278,  186,  137,  243,  243,  243,  137,  137,  137,
      247,  247,  247,  137,  251,  251,  251,  255,  255,  255,
      186,  137,  258,  258,  258,  137,  186,  137,  186,  137,
      186,  278,  144,  551,  551,  551,  144,  283,  553,  553,

      553,  567,  567,  567,  186,  573,  284,  284,  284,  186,
      578,  186,  186,  582,  186,  186,  571,  186,  186,  186,
      575,  186,  574,  285,  186,  144,  186,  576,  186,  144,
      144,  144,  390,  390,  390,  144,  397,  397,  397,  186,
      186,  577,  637,  144,  424,  424,  424,  144,  584,  144,
      186,  144,  580,  285,  182,  589,  590,  581,  182,  182,
      605,  186,  186,  585,  586,  636,  588,  635,  311,  311,
      311,  603,  634,  633,  611,  632,  616,  631,  607,  630,
      629,  627,  626,  625,  624,  312,  617,  182,  612,  623,
      622,  313,  182,  182,  621,  620,  619,  182,  628,  615,

      614,  613,  610,  609,  608,  182,  606,  604,  602,  182,
      618,  182,  601,  182,  600,  312,  235,  235,  599,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  598,  597,  596,  595,  594,  593,  592,  235,
      235,  235,  235,  235,  235,  591,  587,  583,  579,  572,
      570,  566,  565,  235,  235,  235,  235,  564,  235,  563,
      562,  561,  560,  559,  556,  555,  550,  548,  547,  544,
      543,  542,  538,  537,  536,  532,  531,  530,  526,  524,
      522,  514,  510,  509,  235,  235,  235,  170,  235,  235,
      235,  235,  235,  240,  240,  505,  240,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  504,
      503,  502,  501,  500,  499,  498,  240,  240,  240,  240,
      240,  240,  497,  496,  495,  494,  493,  186,  488,  268,
      240,  240,  240,  240,  474,  240,  469,  457,  452,  447,
      441,  439,  438,  428,  421,  420,  419,  418,  417,  416,
      415,  412,  411,  410,  409,  406,  403,  389,  387,  241,
      371,  240,  240,  240,  236,  240,  240,  240,  240,  240,
      279,  370,  347,  341,  339,  328,  186,  315,  314,  310,
      309,  302,  299,  170,  394,  394,  394,  394,  163,  298,
      297,  287,  286,  282,  394,  394,  394,  394,  279,  241,

      236,  152,  233,  232,  186,  172,  170,  143,  394,  394,
      394,  394,  394,  394,  286,  136,  669,  135,  135,  669,
      669,  669,  669,  402,  402,  402,  402,  669,  669,  669,
      669,  669,  669,  402,  402,  402,  402,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  402,  402,  402,
      402,  402,  402,  423,  423,  423,  423,  669,  669,  669,
      669,  669,  669,  423,  423,  423,  423,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  315,  423,  423,  423,
      423,  423,  423,  279,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  137,  137,  137,

      137,  669,  669,  669,  669,  669,  669,  137,  137,  137,
      137,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  137,  137,  137,  137,  137,  137,  286,  669,  669,
      669,  669,  669,  669,  669,  669,  144,  144,  144,  144,
      669,  669,  669,  669,  669,  669,  144,  144,  144,  144,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      144,  144,  144,  144,  144,  144,  182,  182,  182,  182,
      669,  669,  669,  669,  669,  669,  182,  182,  182,  182,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  315,
      182,  182,  182,  182,  182,  182,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  109,  109,  109,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  141,  669,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  171,  669,  669,  669,  171,  171,  669,  669,  669,
      171,  171,  171,  669,  171,  171,  171,  173,  669,  173,

      173,  173,  669,  669,  173,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  187,  669,  669,
      669,  187,  187,  669,  669,  669,  187,  187,  187,  669,
      187,  187,  187,  231,  669,  231,  231,  231,  231,  669,
      231,  669,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  234,  669,  234,  234,  669,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  235,  235,  235,
      235,  669,  669,  669,  235,  235,  235,  669,  235,  235,

      238,  238,  669,  669,  669,  238,  238,  238,  669,  669,
      238,  239,  669,  239,  239,  669,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  240,  240,  240,  240,  669,  669,  669,
      240,  240,  240,  669,  240,  240,  242,  242,  669,  669,
      669,  242,  242,  242,  669,  242,  242,  242,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  246,
      246,  669,  669,  669,  246,  246,  246,  669,  246,  246,
      246,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  250,  250,  669,  669,  669,  250,  250,  250,
      669,  250,  250,  250,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  254,  254,  669,  669,  669,
      254,  254,  254,  669,  254,  254,  254,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  261,

      261,  669,  669,  669,  261,  261,  261,  669,  261,  261,
      261,  268,  669,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  669,  268,  268,  268,  669,  268,
      268,  268,  268,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  142,  142,  142,
      669,  669,  669,  669,  142,  669,  669,  669,  669,  669,
      669,  142,  669,  669,  142,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  296,
      296,  669,  669,  669,  296,  669,  669,  669,  669,  296,
      171,  669,  669,  669,  171,  171,  669,  669,  669,  171,
      171,  171,  669,  171,  171,  171,  173,  173,  173,  669,
      669,  173,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  187,  669,  669,  669,
      187,  187,  669,  669,  669,  187,  187,  187,  669,  187,
      187,  187,  231,  669,  231,  231,  231,  231,  669,  231,
      669,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  234,  669,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  235,  235,  235,  235,
      669,  669,  669,  235,  235,  235,  669,  235,  235,  238,
      238,  669,  669,  669,  238,  238,  238,  669,  669,  238,

      239,  669,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  240,  240,  240,  240,  669,  669,  669,  240,
      240,  240,  669,  240,  240,  242,  242,  669,  669,  669,
      242,  242,  242,  669,  242,  242,  242,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  669,  669,  669,  669,  243,  669,  669,  669,  669,
      669,  669,  243,  669,  669,  243,  246,  246,  669,  669,
      669,  246,  246,  246,  669,  246,  246,  246,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  669,  669,  669,  669,  247,  669,  669,  669,
      669,  669,  669,  247,  669,  669,  247,  250,  250,  669,
      669,  669,  250,  250,  250,  669,  250,  250,  250,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  669,  669,  669,  669,  251,  669,  669,
      669,  669,  669,  669,  251,  669,  669,  251,  254,  254,
      669,  669,  669,  254,  254,  254,  669,  254,  254,  254,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  669,  669,  669,  669,  255,  669,
      669,  669,  669,  669,  669,  255,  669,  669,  255,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  669,  669,  669,  669,  258,  669,  669,
      669,  669,  669,  669,  258,  669,  669,  258,  261,  261,
      669,  669,  669,  261,  261,  261,  669,  261,  261,  261,
      383,  383,  669,  669,  669,  383,  669,  669,  669,  669,

      383,  268,  669,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  669,  268,  268,  268,  268,  268,  669,  268,
      268,  268,  268,  385,  385,  669,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  669,  388,  388,  388,  388,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      396,  396,  669,  669,  669,  396,  669,  669,  669,  669,
      396,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  405,  405,  669,  669,  669,  405,
      669,  669,  669,  669,  405,  296,  296,  669,  669,  669,
      296,  669,  669,  669,  669,  296,  173,  173,  173,  669,
      669,  173,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  187,  669,  669,  669,  187,
      187,  669,  669,  669,  187,  187,  187,  669,  187,  187,
      187,  479,  479,  669,  669,  669,  479,  669,  669,  669,
      669,  479,  481,  481,  669,  669,  669,  481,  669,  669,
      669,  669,  481,  483,  483,  669,  669,  669,  483,  669,
      669,  669,  669,  483,  485,  485,  669,  669,  669,  485,
      669,  669,  669,  669,  485,  487,  487,  669,  669,  669,

      487,  669,  669,  669,  669,  487,  390,  390,  390,  669,
      669,  669,  669,  390,  669,  669,  669,  669,  669,  669,
      390,  669,  669,  390,  142,  142,  669,  669,  669,  142,
      669,  669,  669,  669,  142,  397,  397,  397,  669,  669,
      669,  669,  397,  669,  669,  669,  669,  669,  669,  397,
      669,  669,  397,  424,  424,  424,  669,  669,  669,  669,
      424,  669,  669,  669,  669,  669,  669,  424,  669,  669,
      424,  243,  243,  669,  669,  669,  243,  669,  669,  669,
      669,  243,  247,  247,  669,  669,  669,  247,  669,  669,
      669,  669,  247,  251,  251,  669,  669,  669,  251,  669,

      669,  669,  669,  251,  255,  255,  669,  669,  669,  255,
      669,  669,  669,  669,  255,  258,  258,  669,  669,  669,
      258,  669,  669,  669,  669,  258,  552,  552,  669,  669,
      669,  552,  669,  669,  669,  669,  552,  554,  554,  669,
      669,  669,  554,  669,  669,  669,  669,  554,  568,  568,
      669,  669,  669,  568,  669,  669,  669,  669,  568,  390,
      390,  669,  669,  669,  390,  669,  669,  669,  669,  390,
      397,  397,  669,  669,  669,  397,  669,  669,  669,  669,
      397,  424,  424,  669,  669,  669,  424,  669,  669,  669,
      669,  424,   29,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669
    } ;

static yyconst short int yy_chk[3571] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        5,    6,    6,    7,    7,    8,    8,  667,    3,    4,
        7,   42,    8,    3,    4,   45,   42,  108,   45,  665,

        7,  108,    8,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,   15,   25,   25,  664,   62,
       26,   26,   68,   34,   44,   38,   44,   44,   44,   44,
       70,   70,   70,   70,   25,   25,   25,   25,   26,   26,
       26,   26,   15,   15,   15,   15,   15,   15,   15,   15,
       41,   41,   41,   38,   46,   15,   34,   53,   57,   56,
      175,   46,  175,   46,   46,   62,   41,   68,   41,   41,
       41,   41,   47,   52,   47,   47,   47,   52,   63,   43,

      192,   43,   43,   43,   43,  203,   25,   15,   16,   16,
       26,   38,   43,   48,   34,   56,   48,   48,   43,   56,
       55,   57,   53,   57,   58,   56,   43,  663,   53,  662,
       51,   52,  192,   57,   59,   63,   16,   16,   16,   16,
       16,   16,   16,   16,   60,   64,   67,   63,   43,   16,
       51,   51,   55,   51,  203,   51,   58,   61,   51,   55,
       58,  127,   51,   55,   58,   51,   55,   51,   65,   69,
       58,   59,  137,   58,  157,  157,   58,   64,   59,   59,
       60,   16,   17,   17,   66,   67,  188,  113,  660,  127,
       60,  113,   67,   61,   64,   67,  144,  118,  123,  177,

       65,  118,  123,   61,   65,  137,  198,  177,   69,  193,
       17,   17,   17,   17,   17,   17,   17,   17,   66,  189,
       66,  188,  209,   17,  144,   91,   66,   91,   91,   91,
       91,  135,  191,  132,  132,  132,  133,  133,  133,  133,
       66,  198,  135,  137,  132,  134,  134,  134,  134,  135,
      132,  135,  135,  659,  193,   17,   18,   18,  132,  143,
      143,  143,  144,  135,  135,  151,  151,  151,  151,  155,
      189,  155,  155,  155,  155,  243,  143,  209,  191,  243,
      132,  148,  148,  148,   18,   18,   18,   18,   18,   18,
       18,   18,  150,  150,  150,  190,  199,   18,  178,  148,

      148,  148,  148,  150,  178,  197,  143,  194,  154,  150,
      154,  154,  154,  154,  200,  201,  156,  150,  156,  156,
      156,  156,  154,  159,  195,  159,  159,  159,  159,   18,
       19,   19,  182,  202,  179,  204,  182,  205,  154,  150,
      179,  194,  207,  199,  194,  190,  190,  201,  211,  210,
      212,  213,  215,  218,  200,  197,  222,  200,   19,   19,
       19,   19,   19,   19,   19,   19,  216,  221,  219,  220,
      182,   19,  217,  224,  195,  223,  247,  195,  202,  225,
      247,  204,  205,  210,  227,  212,  228,  251,  215,  207,
      226,  251,  657,  218,  255,  258,  222,  656,  255,  211,

      275,  220,  213,   19,   20,   20,  263,  263,  217,  224,
      221,  262,  262,  262,  275,  216,  219,  313,  217,  655,
      223,  225,  224,  258,  227,  230,  228,  230,  230,  230,
      230,  303,   20,   20,   20,   20,   20,   20,   20,   20,
      276,  303,  226,  268,  313,   20,  226,  229,  313,  229,
      229,  229,  229,  237,  322,  237,  237,  237,  237,  319,
      229,  265,  265,  265,  265,  268,  229,  244,  244,  244,
      248,  248,  248,  276,  229,  268,  268,   20,   21,   21,
      252,  252,  252,  316,  244,  289,  289,  248,  256,  256,
      256,  267,  267,  267,  267,  319,  229,  252,  260,  260,

      260,  280,  280,  280,  322,  256,   21,   21,   21,   21,
       21,   21,   21,   21,  244,  260,  321,  248,  318,   21,
      284,  266,  266,  266,  323,  270,  277,  252,  271,  284,
      284,  284,  266,  273,  316,  256,  270,  654,  266,  652,
      277,  277,  277,  283,  283,  260,  266,  270,  295,  295,
      271,   21,   22,   22,  324,  273,  321,  270,  270,  323,
      271,  271,  288,  288,  288,  273,  273,  318,  266,  320,
      325,  283,  291,  291,  291,  291,  293,  293,  293,  293,
       22,   22,   22,   22,   22,   22,   22,   22,  293,  294,
      294,  294,  294,   22,  311,  311,  311,  324,  329,  331,

      332,  333,  334,  320,  293,  335,  337,  343,  338,  340,
      325,  345,  350,  344,  349,  353,  351,  311,  397,  355,
      357,  356,  382,  382,  360,   22,   23,   23,  388,  388,
      361,  372,  372,  372,  329,   23,  424,  335,  651,  343,
      424,  294,  338,  332,  354,  331,  397,  345,  434,  343,
      337,  333,  344,  334,  359,  340,  364,  349,  356,  352,
      360,  362,  350,  351,  355,  353,  361,  357,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  352,  352,  365,  354,  362,  434,  359,

       23,   24,   24,  374,  374,  374,  352,  364,  650,  366,
       24,  366,  366,  366,  366,  367,  649,  367,  367,  367,
      367,  648,  368,  366,  368,  368,  368,  368,  369,  647,
      369,  369,  369,  369,  376,  376,  376,  389,  365,  366,
      378,  378,  378,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  380,  380,
      380,  404,  404,  386,  389,   24,   90,   90,  390,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  392,  392,  392,  386,  395,  395,  395,   90,

       90,   90,   90,   90,   90,  386,  386,  393,  399,  392,
      646,  390,  645,   90,   90,   90,   90,  496,   90,  401,
      496,  393,  393,  393,  400,  400,  400,  644,  401,  401,
      401,  407,  407,  407,  407,  643,  399,  642,  425,  392,
      442,  400,  425,  641,   90,   90,   90,  450,   90,   90,
       90,   90,   90,  103,  103,  429,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  432,
      433,  400,  408,  408,  408,  408,  103,  103,  103,  103,
      103,  103,  422,  422,  422,  426,  426,  426,  436,  442,
      103,  103,  103,  103,  429,  103,  437,  440,  450,  446,

      444,  451,  426,  458,  433,  422,  453,  460,  432,  640,
      466,  459,  464,  472,  465,  638,  476,  637,  636,  471,
      436,  103,  103,  103,  508,  103,  103,  103,  103,  103,
      139,  440,  426,  635,  139,  139,  444,  440,  634,  460,
      628,  437,  446,  440,  139,  139,  139,  459,  464,  453,
      451,  471,  476,  458,  465,  466,  515,  625,  472,  521,
      508,  139,  528,  139,  478,  478,  478,  139,  139,  139,
      480,  480,  480,  139,  482,  482,  482,  484,  484,  484,
      512,  139,  486,  486,  486,  139,  516,  139,  518,  139,
      519,  139,  146,  489,  489,  489,  146,  146,  491,  491,

      491,  506,  506,  506,  520,  515,  146,  146,  146,  525,
      521,  527,  533,  528,  534,  535,  512,  540,  580,  541,
      518,  545,  516,  146,  573,  146,  569,  519,  575,  146,
      146,  146,  551,  551,  551,  146,  553,  553,  553,  581,
      586,  520,  624,  146,  567,  567,  567,  146,  533,  146,
      588,  146,  525,  146,  183,  541,  545,  527,  183,  183,
      573,  589,  607,  534,  535,  623,  540,  622,  183,  183,
      183,  569,  621,  618,  580,  617,  586,  616,  575,  612,
      611,  605,  603,  601,  600,  183,  588,  183,  581,  599,
      596,  183,  183,  183,  595,  593,  590,  183,  607,  585,

      584,  582,  578,  577,  576,  183,  574,  571,  565,  183,
      589,  183,  564,  183,  563,  183,  236,  236,  562,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  561,  560,  558,  557,  555,  550,  549,  236,
      236,  236,  236,  236,  236,  546,  539,  529,  523,  513,
      511,  505,  504,  236,  236,  236,  236,  503,  236,  502,
      501,  499,  498,  497,  495,  493,  488,  475,  473,  470,
      468,  467,  463,  462,  461,  456,  455,  454,  448,  445,
      443,  435,  431,  430,  236,  236,  236,  427,  236,  236,
      236,  236,  236,  241,  241,  421,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  420,
      419,  418,  417,  416,  415,  414,  241,  241,  241,  241,
      241,  241,  413,  412,  411,  410,  409,  398,  387,  385,
      241,  241,  241,  241,  363,  241,  358,  346,  342,  336,
      330,  327,  326,  315,  310,  309,  308,  307,  306,  305,
      304,  302,  301,  300,  299,  292,  286,  274,  272,  240,
      239,  241,  241,  241,  235,  241,  241,  241,  241,  241,
      278,  234,  214,  208,  206,  196,  187,  185,  184,  181,
      180,  176,  174,  171,  278,  278,  278,  278,  166,  162,
      160,  149,  147,  145,  278,  278,  278,  278,  140,  102,

       89,   84,   76,   75,   54,   50,   49,   37,  278,  278,
      278,  278,  278,  278,  285,   33,   29,   28,   27,    0,
        0,    0,    0,  285,  285,  285,  285,    0,    0,    0,
        0,    0,    0,  285,  285,  285,  285,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  285,  285,  285,
      285,  285,  285,  312,  312,  312,  312,    0,    0,    0,
        0,    0,    0,  312,  312,  312,  312,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  312,  312,  312,  312,
      312,  312,  312,  394,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  394,  394,  394,

      394,    0,    0,    0,    0,    0,    0,  394,  394,  394,
      394,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  394,  394,  394,  394,  394,  394,  402,    0,    0,
        0,    0,    0,    0,    0,    0,  402,  402,  402,  402,
        0,    0,    0,    0,    0,    0,  402,  402,  402,  402,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      402,  402,  402,  402,  402,  402,  423,  423,  423,  423,
        0,    0,    0,    0,    0,    0,  423,  423,  423,  423,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  423,
      423,  423,  423,  423,  423,  423,  670,  670,  670,  670,

      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  680,    0,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  683,    0,    0,    0,  683,  683,    0,    0,    0,
      683,  683,  683,    0,  683,  683,  683,  684,    0,  684,

      684,  684,    0,    0,  684,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  686,    0,    0,
        0,  686,  686,    0,    0,    0,  686,  686,  686,    0,
      686,  686,  686,  687,    0,  687,  687,  687,  687,    0,
      687,    0,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  688,    0,  688,  688,    0,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  689,  689,  689,
      689,    0,    0,    0,  689,  689,  689,    0,  689,  689,

      690,  690,    0,    0,    0,  690,  690,  690,    0,    0,
      690,  691,    0,  691,  691,    0,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  692,  692,  692,  692,    0,    0,    0,
      692,  692,  692,    0,  692,  692,  693,  693,    0,    0,
        0,  693,  693,  693,    0,  693,  693,  693,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  695,
      695,    0,    0,    0,  695,  695,  695,    0,  695,  695,
      695,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  697,  697,    0,    0,    0,  697,  697,  697,
        0,  697,  697,  697,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  699,  699,    0,    0,    0,
      699,  699,  699,    0,  699,  699,  699,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  702,

      702,    0,    0,    0,  702,  702,  702,    0,  702,  702,
      702,  703,    0,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,    0,  703,  703,  703,    0,  703,
      703,  703,  703,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  706,  706,  706,
        0,    0,    0,    0,  706,    0,    0,    0,    0,    0,
        0,  706,    0,    0,  706,  707,  707,  707,  707,  707,

      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  709,
      709,    0,    0,    0,  709,    0,    0,    0,    0,  709,
      710,    0,    0,    0,  710,  710,    0,    0,    0,  710,
      710,  710,    0,  710,  710,  710,  711,  711,  711,    0,
        0,  711,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  713,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  714,    0,    0,    0,
      714,  714,    0,    0,    0,  714,  714,  714,    0,  714,
      714,  714,  715,    0,  715,  715,  715,  715,    0,  715,
        0,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  716,    0,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  717,  717,  717,  717,
        0,    0,    0,  717,  717,  717,    0,  717,  717,  718,
      718,    0,    0,    0,  718,  718,  718,    0,    0,  718,

      719,    0,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,    0,    0,    0,  720,
      720,  720,    0,  720,  720,  721,  721,    0,    0,    0,
      721,  721,  721,    0,  721,  721,  721,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  723,  723,
      723,    0,    0,    0,    0,  723,    0,    0,    0,    0,
        0,    0,  723,    0,    0,  723,  724,  724,    0,    0,
        0,  724,  724,  724,    0,  724,  724,  724,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  726,
      726,  726,    0,    0,    0,    0,  726,    0,    0,    0,
        0,    0,    0,  726,    0,    0,  726,  727,  727,    0,
        0,    0,  727,  727,  727,    0,  727,  727,  727,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      729,  729,  729,    0,    0,    0,    0,  729,    0,    0,
        0,    0,    0,    0,  729,    0,    0,  729,  730,  730,
        0,    0,    0,  730,  730,  730,    0,  730,  730,  730,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  732,  732,  732,    0,    0,    0,    0,  732,    0,
        0,    0,    0,    0,    0,  732,    0,    0,  732,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      734,  734,  734,    0,    0,    0,    0,  734,    0,    0,
        0,    0,    0,    0,  734,    0,    0,  734,  735,  735,
        0,    0,    0,  735,  735,  735,    0,  735,  735,  735,
      736,  736,    0,    0,    0,  736,    0,    0,    0,    0,

      736,  737,    0,  737,  737,  737,  737,  737,  737,  737,
      737,  737,    0,  737,  737,  737,  737,  737,    0,  737,
      737,  737,  737,  738,  738,    0,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,    0,  739,  739,  739,  739,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      742,  742,    0,    0,    0,  742,    0,    0,    0,    0,
      742,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  745,  745,    0,    0,    0,  745,
        0,    0,    0,    0,  745,  746,  746,    0,    0,    0,
      746,    0,    0,    0,    0,  746,  747,  747,  747,    0,
        0,  747,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  750,    0,    0,    0,  750,
      750,    0,    0,    0,  750,  750,  750,    0,  750,  750,
      750,  751,  751,    0,    0,    0,  751,    0,    0,    0,
        0,  751,  752,  752,    0,    0,    0,  752,    0,    0,
        0,    0,  752,  753,  753,    0,    0,    0,  753,    0,
        0,    0,    0,  753,  754,  754,    0,    0,    0,  754,
        0,    0,    0,    0,  754,  755,  755,    0,    0,    0,

      755,    0,    0,    0,    0,  755,  756,  756,  756,    0,
        0,    0,    0,  756,    0,    0,    0,    0,    0,    0,
      756,    0,    0,  756,  757,  757,    0,    0,    0,  757,
        0,    0,    0,    0,  757,  758,  758,  758,    0,    0,
        0,    0,  758,    0,    0,    0,    0,    0,    0,  758,
        0,    0,  758,  759,  759,  759,    0,    0,    0,    0,
      759,    0,    0,    0,    0,    0,    0,  759,    0,    0,
      759,  760,  760,    0,    0,    0,  760,    0,    0,    0,
        0,  760,  761,  761,    0,    0,    0,  761,    0,    0,
        0,    0,  761,  762,  762,    0,    0,    0,  762,    0,

        0,    0,    0,  762,  763,  763,    0,    0,    0,  763,
        0,    0,    0,    0,  763,  764,  764,    0,    0,    0,
      764,    0,    0,    0,    0,  764,  765,  765,    0,    0,
        0,  765,    0,    0,    0,    0,  765,  766,  766,    0,
        0,    0,  766,    0,    0,    0,    0,  766,  767,  767,
        0,    0,    0,  767,    0,    0,    0,    0,  767,  768,
      768,    0,    0,    0,  768,    0,    0,    0,    0,  768,
      769,  769,    0,    0,    0,  769,    0,    0,    0,    0,
      769,  770,  770,    0,    0,    0,  770,    0,    0,    0,
        0,  770,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*
 *  Authors:
 *    Martin Henz <henz@iscs.nus.sg>
 *    Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 *  Copyright:
 *    Martin Henz and Leif Kornstaedt, 1996-2002
 *
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 *
 *  This file is part of Mozart, an implementation of Oz 3:
 *    http://www.mozart-oz.org
 *
 *  See the file "LICENSE" or
 *    http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */
#include <string.h>
#include <sys/stat.h>

#if !defined(__MINGW32__) && !defined(_MSC_VER)
#include <pwd.h>
#endif

#include "conf.h"
#include "base.hh"
#include "os.hh"
#include "dictionary.hh"
#include "am.hh"

#include "parser.hh"

void xyreportError(const char *kind, const char *message,
                   const char *file, int line, int column);
void xy_setScannerPrefix();
void xy_setParserExpect();

static const int maxFileNameSize = 256;
char xyFileName[maxFileNameSize];
char xyhelpFileName[maxFileNameSize];
OZ_Term xyFileNameAtom;

int xy_gumpSyntax, xy_allowDeprecated, xy_allowWhileLoop;
OZ_Term xy_errorMessages;

static int errorFlag;


//*******************
// THE INPUT ROUTINE
//*******************

int xylino;                             // current line number
char *xylastline;                       // remember where we have put the input

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size)   xy_input(buf, result, max_size)

static void xy_input(char *buf, int &result, const int max_size) {
  xylastline = buf;

  // read one line into buf
  int curpos = 0;
  int c = fgetc(xyin);
  while(curpos < max_size && c != EOF && c != OZEOF && c != '\n') {
    buf[curpos++] = c;
    if (curpos < max_size)
      c = fgetc(xyin);
  }

  if (c == EOF || c == OZEOF) {
    if (curpos > 0)   // did we read other chars than EOF?
      result = curpos;
    else
      result = YY_NULL;
  } else {
    if (curpos < max_size)
      buf[curpos++] = c;
    result = curpos;
  }
}


//****************
// OUTPUT OF FLEX
//****************

#undef YY_DECL
#define YY_DECL static int xymylex()


//*************************
// CONDITIONAL COMPILATION
// uses a stack of flags;
// \ifdef and \ifndef push
// \else toggles top
// \endif pops.
//*************************

static OzDictionary *defines;

#define CONDITIONALMAXDEPTH 1000

static int conditional[CONDITIONALMAXDEPTH];
static int conditional_p;       // points to top of stack
static int conditional_basep;   // points to bottom of stack

static void push_cond(int flag) {
  if (conditional_p < CONDITIONALMAXDEPTH - 1)
    conditional[++conditional_p] = flag;
  else
    xyreportError("macro directive limitation",
                  "conditionals nested too deep",
                  xyFileName,xylino,xycharno());
}

static void pop_cond() {
  if (conditional_p > conditional_basep)
    conditional_p--;
  else
    xyreportError("macro directive error",
                  "\\endif without previous corresponding \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
}

static void toggle_cond() {
  if (conditional_p > conditional_basep) {
    // toggle top of flag stack
    if (conditional[conditional_p])
      conditional[conditional_p] = 0;
    else
      conditional[conditional_p] = 1;
  } else
    xyreportError("macro directive error",
                  "\\else without previous corresponding \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
}

static int get_cond() {
  int i = conditional_p;
  while (i > conditional_basep)
    if (!conditional[i--])
      return 0;
  return 1;
}


//***********************
// STACK OF FILE ENTRIES
// for \insert
//***********************

class XyFileEntry {
public:
  YY_BUFFER_STATE buffer;
  OZ_Term fileNameAtom;
  int lino;
  int conditional_basep;
  XyFileEntry *previous;

  XyFileEntry(YY_BUFFER_STATE b, OZ_Term f, int l, int c, XyFileEntry *p):
      buffer(b), fileNameAtom(f), lino(l), conditional_basep(c), previous(p) {}
};

static XyFileEntry *bufferStack;

static void push_insert(FILE *filep, char *fileName) {
  bufferStack = new XyFileEntry(YY_CURRENT_BUFFER, xyFileNameAtom, xylino,
                                conditional_basep, bufferStack);
  strncpy(xyFileName, fileName, maxFileNameSize - 1);
  xyFileName[maxFileNameSize - 1] = '\0';
  xyFileNameAtom = OZ_atom(fileName);
  xyin = filep;
  BEGIN(0); /*INITIAL isn't yet defined so we use the synonym 0.*/
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  xylino = 1;
  conditional_basep = conditional_p;
}

static int pop_insert() {
  if (conditional_p > conditional_basep)
    xyreportError("macro directive error",
                  "unterminated \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
  errorFlag = 0;
  if (bufferStack != NULL) {
    fclose(xyin);
    xy_switch_to_buffer(bufferStack->buffer);
    xyFileNameAtom = bufferStack->fileNameAtom;
    const char *fileName = OZ_atomToC(xyFileNameAtom);
    strncpy(xyFileName, fileName, maxFileNameSize - 1);
    xyFileName[maxFileNameSize - 1] = '\0';
    xylino = bufferStack->lino;
    conditional_basep = bufferStack->conditional_basep;
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
    return 0;
  } else
    return 1;
}


//**********
// COMMENTS
//**********

static int commentdepth;
static OZ_Term commentfile;
static int commentlino;
static int commentoffset;
static int commentlastmode;


//*********************
// FILE NAME EXPANSION
//*********************

static char *getHomeUser(char *user) {
#ifdef WINDOWS
  return NULL;
#else
  struct passwd *pwentry = getpwnam(user);
  return pwentry != NULL? pwentry->pw_dir: (char *) NULL;
#endif
}

static int isReadableFile(char *file) {
  struct stat buf;

  if (access(file, F_OK) < 0 || stat(file, &buf) < 0)
    return 0;

  return !S_ISDIR(buf.st_mode);
}

static char *checkAccess(char *file) {
  char *ret = new char[strlen(file) + 1 + 3];

  strcpy(ret, file);
  if (isReadableFile(ret))
    return ret;

  strcat(ret, ".oz");
  if (isReadableFile(ret))
    return ret;

  delete[] ret;
  return NULL;
}

static char *scExpndFileName(char *fileName, char *curfile) {
  for (int i = 0; fileName[i] != '\0'; i++)
    if (fileName[i] == '\\')
      fileName[i] = '/';

  // full pathname given?
  if (fileName[0] == '/' ||
#ifdef WINDOWS
      (fileName[0] != '\0' && fileName[1] == ':') ||
      // good old DOS filename like E:...
#endif
      !strncmp(fileName, "./", 2))
    return checkAccess(fileName);

  // expand "~"
  if (fileName[0] == '~') {
    char *userhome;
    int len = 0;
    if (fileName[1] == '/') {
      userhome = osgetenv("HOME");
      len = 2;
    } else {
      char *rest = strchr(fileName, '/');
      if (rest == NULL)
        userhome = NULL;
      else {
        len = (rest + 1) - fileName;
        rest[0] = '\0';
        userhome = getHomeUser(&fileName[1]);
        rest[0] = '/';
      }
    }
    if (userhome == NULL)
      return NULL;

    char *help = new char[strlen(userhome) + 1 + strlen(&fileName[len]) + 1];
    sprintf(help, "%s/%s", userhome, &fileName[len]);
    char *ret = checkAccess(help);
    delete[] help;

    return ret;
  }

  // search in "current" directory
  if (curfile != NULL) {
    int i = strlen(curfile);
    while (i != 0 && curfile[i - 1] != '/')   // i. e., the dir part of curfile
      i--;
    if (i != 0) {
      char *help = new char[i + strlen(fileName) + 1];
      strncpy(help, curfile, i);
      strcpy(&help[i], fileName);
      char *ret = checkAccess(help);
      delete[] help;

      if (ret != NULL)
        return ret;
    }
  }

  // search in OZPATH
  const char *path = osgetenv("OZPATH");
  if (path == NULL)
    path = ".";

  while (path[0] != '\0') {
    int i;
    for (i = 0; path[i] != PathSeparator && path[i] != '\0'; i++);
    char *help = new char[i + 1 + strlen(fileName) + 1];
    strncpy(help, path, i);
    help[i] = '/';
    strcpy(&help[i + 1], fileName);
    char *ret = checkAccess(help);
    delete[] help;
    if (ret != NULL)
      return ret;
    if (path[i] == '\0')
      break;
    path = &path[i + 1];
  }

  return NULL;
}


//***************************
// TREATING STRINGS AND SUCH
//***************************

static void stripDot() {
  int i, j;
  for (i = 0; xytext[i] < '0' || xytext[i] > '9'; i++)
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
  for (j = 0; xytext[i] != '\0'; xytext[j++] = xytext[i++]);
  xytext[j] = '\0';
}

static void strip(char c) {
  if (xytext[0] == c) {
    int i = 1;
    while (xytext[i] != '\0') {
      xytext[i - 1] = xytext[i];
      i++;
    }
    xytext[i - 2] = '\0';
  }
}

static void stripRegex() {
  int i = 1;
  while (xytext[i] != '\0') {
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
    xytext[i - 1] = xytext[i];
    i++;
  }
  xytext[i - 2] = '\0';
}

static void transBody(char c, char *text, int &i, int &j) {
  int jstart = j;
  while (text[j] != c) {
    if (text[j] == '\n')
      xylino++;
    if (text[j] == '\\') {
      j++;
      switch (text[j]) {
      case 'a':
        text[i] = '\a';
        break;
      case 'b':
        text[i] = '\b';
        break;
      case 'f':
        text[i] = '\f';
        break;
      case 'n':
        text[i] = '\n';
        break;
      case 'r':
        text[i] = '\r';
        break;
      case 't':
        text[i] = '\t';
        break;
      case 'v':
        text[i] = '\v';
        break;
      case 'x':
      case 'X':
        { char hexstring[3];
          hexstring[0] = text[++j];
          hexstring[1] = text[++j];
          hexstring[2] = '\0';
          int hexnum = (int) strtol(hexstring, NULL, 16);
          if (hexnum == 0 && get_cond())
            xyreportError("lexical error",
                          "character in hexadecimal notation =< 0",
                          xyFileName,xylino,xycharno() + (j - jstart));
          text[i] = hexnum;
        }
        break;
      case '\\':
      case '`':
      case '\"':
      case '\'':
      case '&':
        text[i] = text[j];
        break;
      default:
        { char octstring[4];
          octstring[0] = text[j++];
          octstring[1] = text[j++];
          octstring[2] = text[j];
          octstring[3] = '\0';
          int octnum = (int) strtol(octstring, NULL, 8);
          if ((octnum == 0 || octnum > 255) && get_cond())
            xyreportError("lexical error",
                          "character in octal notation =< 0 or >= 256",
                          xyFileName,xylino,xycharno() + (j - jstart));
          text[i] = octnum & 0xFF;
        }
      }
    } else
      text[i] = text[j];
    i++;
    j++;
  }
}

static void stripTrans(char c) {
  if (xytext[0] == c) {
    int i = 0;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i] = '\0';
  }
}

static void trans(char c) {
  if (xytext[0] == c) {
    int i = 1;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i++] = c;
    xytext[i] = '\0';
  }
}

#define COMMENT 1

#define IGNOREDIRECTIVE 2
#define DIRECTIVE 3

#define LINE 4
#define SWITCHDIR 5
#define INSERT 6
#define DEFINE 7
#define IFDEF 8
#define IFNDEF 9
#define UNDEF 10

#define SCANNERPREFIX 11
#define PARSEREXPECT 12

#define LEX 13


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
        if ( yy_current_buffer->yy_is_interactive ) \
                { \
                int c = '*', n; \
                for ( n = 0; n < max_size && \
                             (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
                        buf[n] = (char) c; \
                if ( c == '\n' ) \
                        buf[n++] = (char) c; \
                if ( c == EOF && ferror( yyin ) ) \
                        YY_FATAL_ERROR( "input in flex scanner failed" ); \
                result = n; \
                } \
        else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
                  && ferror( yyin ) ) \
                YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
        YY_USER_ACTION

YY_DECL
        {
        register yy_state_type yy_current_state;
        register char *yy_cp = NULL, *yy_bp = NULL;
        register int yy_act;




        if ( yy_init )
                {
                yy_init = 0;

#ifdef YY_USER_INIT
                YY_USER_INIT;
#endif

                if ( ! yy_start )
                        yy_start = 1;   /* first start state */

                if ( ! yyin )
                        yyin = stdin;

                if ( ! yyout )
                        yyout = stdout;

                if ( ! yy_current_buffer )
                        yy_current_buffer =
                                yy_create_buffer( yyin, YY_BUF_SIZE );

                yy_load_buffer_state();
                }

        while ( 1 )             /* loops until end-of-file is reached */
                {
                yy_cp = yy_c_buf_p;

                /* Support of yytext. */
                *yy_cp = yy_hold_char;

                /* yy_bp points to the position in yy_ch_buf of the start of
                 * the current run.
                 */
                yy_bp = yy_cp;

                yy_current_state = yy_start;
yy_match:
                do
                        {
                        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
                        if ( yy_accept[yy_current_state] )
                                {
                                yy_last_accepting_state = yy_current_state;
                                yy_last_accepting_cpos = yy_cp;
                                }
                        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                                {
                                yy_current_state = (int) yy_def[yy_current_state];
                                if ( yy_current_state >= 670 )
                                        yy_c = yy_meta[(unsigned int) yy_c];
                                }
                        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                        ++yy_cp;
                        }
                while ( yy_base[yy_current_state] != 3493 );

yy_find_action:
                yy_act = yy_accept[yy_current_state];
                if ( yy_act == 0 )
                        { /* have to back up */
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        yy_act = yy_accept[yy_current_state];
                        }

                YY_DO_BEFORE_ACTION;


do_action:      /* This label is used only to access EOF actions. */


                switch ( yy_act )
        { /* beginning of action switch */
                        case 0: /* must back up */
                        /* undo the effects of YY_DO_BEFORE_ACTION */
                        *yy_cp = yy_hold_char;
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        goto yy_find_action;

case 1:
YY_RULE_SETUP
;
        YY_BREAK
case 2:
YY_RULE_SETUP
{ commentdepth = 1;
                                 commentfile = xyFileNameAtom;
                                 commentlino = xylino;
                                 commentoffset = xycharno();
                                 commentlastmode = YYSTATE;
                                 BEGIN(COMMENT);
                               }
        YY_BREAK
case 3:
YY_RULE_SETUP
{ commentdepth++; }
        YY_BREAK
case 4:
YY_RULE_SETUP
{ if (--commentdepth == 0)
                                   BEGIN(commentlastmode);
                               }
        YY_BREAK
case 5:
YY_RULE_SETUP
;
        YY_BREAK
case 6:
YY_RULE_SETUP
{ xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case 7:
YY_RULE_SETUP
;
        YY_BREAK
case YY_STATE_EOF(COMMENT):
{ if (get_cond()) {
                                   const char *file = OZ_atomToC(commentfile);
                                   xyreportError("lexical error",
                                                 "unterminated comment",
                                                 file,commentlino,commentoffset);
                                 }
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK
case 8:
YY_RULE_SETUP
{ BEGIN(SWITCHDIR); return T_SWITCH; }
        YY_BREAK
case 9:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_PUSHSWITCHES; }
        YY_BREAK
case 10:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_POPSWITCHES; }
        YY_BREAK
case 11:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_LOCALSWITCHES; }
        YY_BREAK
case 12:
YY_RULE_SETUP
{ if (get_cond()) BEGIN(LINE); }
        YY_BREAK
case 13:
YY_RULE_SETUP
{ BEGIN(INSERT); }
        YY_BREAK
case 14:
YY_RULE_SETUP
{ BEGIN(DEFINE); }
        YY_BREAK
case 15:
YY_RULE_SETUP
{ BEGIN(UNDEF); }
        YY_BREAK
case 16:
YY_RULE_SETUP
{ BEGIN(IFDEF); }
        YY_BREAK
case 17:
YY_RULE_SETUP
{ BEGIN(IFNDEF); }
        YY_BREAK
case 18:
YY_RULE_SETUP
{ toggle_cond();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 19:
YY_RULE_SETUP
{ pop_cond();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 20:
YY_RULE_SETUP
{ BEGIN(SCANNERPREFIX); }
        YY_BREAK
case 21:
YY_RULE_SETUP
{ BEGIN(PARSEREXPECT); }
        YY_BREAK

case 22:
YY_RULE_SETUP
;
        YY_BREAK
case 23:
YY_RULE_SETUP
;
        YY_BREAK
case 24:
YY_RULE_SETUP
{ BEGIN(INITIAL);
                                 xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case YY_STATE_EOF(IGNOREDIRECTIVE):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 25:
YY_RULE_SETUP
;
        YY_BREAK
case 26:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 27:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(DIRECTIVE):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 28:
YY_RULE_SETUP
{ xylino = atol(xytext) - 1; }
        YY_BREAK
case 29:
YY_RULE_SETUP
{ strip('\'');
                                 char *fullname = scExpndFileName(xytext,xyFileName);
                                 if (fullname != NULL) {
                                   strncpy(xyFileName, fullname, maxFileNameSize - 1);
                                   delete[] fullname;
                                 } else
                                   strncpy(xyFileName, xytext, maxFileNameSize - 1);
                                 xyFileName[maxFileNameSize - 1] = '\0';
                                 xyFileNameAtom = OZ_atom(xyFileName);
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 30:
YY_RULE_SETUP
;
        YY_BREAK
case 31:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 32:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(LINE):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 33:
YY_RULE_SETUP
{ return '+'; }
        YY_BREAK
case 34:
YY_RULE_SETUP
{ return '-'; }
        YY_BREAK
case 35:
YY_RULE_SETUP
{ return T_SWITCHNAME; }
        YY_BREAK
case 36:
YY_RULE_SETUP
;
        YY_BREAK
case 37:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 38:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(SWITCHDIR):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 39:
YY_RULE_SETUP
{ if (get_cond()) {
                                   strip('\'');
                                   char *fullname = scExpndFileName(xytext,xyFileName);
                                   if (fullname != NULL) {
                                     OZ_Term coord =
                                       OZ_mkTupleC("pos",3,xyFileNameAtom,
                                                   OZ_int(xylino),
                                                   OZ_int(xycharno()));
                                     xy_errorMessages =
                                       oz_cons(OZ_mkTupleC("logInsert",2,
                                                           OZ_atom(fullname),
                                                           coord),
                                               xy_errorMessages);
                                     FILE *filep = fopen(fullname, "r");
                                     push_insert(filep, fullname);
                                     delete[] fullname;
                                     BEGIN(INITIAL);
                                   } else {
                                     const char *s =
                                       "could not open file `";
                                     char *f = new char[strlen(s) + 1 +
                                                        strlen(xytext) + 2];
                                     strcpy(f,s);
                                     strcat(f,xytext);
                                     strcat(f,"'");
                                     xyreportError("macro directive error",f,
                                                   xyFileName,xylino,xycharno());
                                     delete[] f;
                                     BEGIN(DIRECTIVE);
                                   }
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 40:
YY_RULE_SETUP
;
        YY_BREAK
case 41:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 42:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(INSERT):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 43:
YY_RULE_SETUP
{ if (get_cond()) {
                                   trans('`');
                                   OZ_Term key = OZ_atom(xytext);
                                   defines->setArg(key, NameTrue);
                                   BEGIN(DIRECTIVE);
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 44:
YY_RULE_SETUP
;
        YY_BREAK
case 45:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 46:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(DEFINE):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 47:
YY_RULE_SETUP
{ if (get_cond()) {
                                   trans('`');
                                   defines->remove(OZ_atom(xytext));
                                   BEGIN(DIRECTIVE);
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 48:
YY_RULE_SETUP
;
        YY_BREAK
case 49:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 50:
YY_RULE_SETUP
{ if (errorFlag)
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(UNDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 51:
YY_RULE_SETUP
{ trans('`');
                                 OZ_Term key = OZ_atom(xytext);
                                 push_cond(OZ_isTrue(defines->member(key)));
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 52:
YY_RULE_SETUP
;
        YY_BREAK
case 53:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 54:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(IFDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 55:
YY_RULE_SETUP
{ trans('`');
                                 OZ_Term key = OZ_atom(xytext);
                                 push_cond(!OZ_isTrue(defines->member(key)));
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 56:
YY_RULE_SETUP
;
        YY_BREAK
case 57:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 58:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(IFNDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 59:
YY_RULE_SETUP
{ stripTrans('\'');
                                 xy_setScannerPrefix();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 60:
YY_RULE_SETUP
;
        YY_BREAK
case 61:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 62:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(SCANNERPREFIX):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 63:
YY_RULE_SETUP
{ xy_setParserExpect();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 64:
YY_RULE_SETUP
;
        YY_BREAK
case 65:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 66:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(PARSEREXPECT):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK

case 67:
YY_RULE_SETUP
{ BEGIN(INITIAL); return T_REGEX; }
        YY_BREAK
case 68:
YY_RULE_SETUP
{ BEGIN(INITIAL); stripRegex(); return T_REGEX; }
        YY_BREAK
case 69:
YY_RULE_SETUP
{ return T_CHOICE; }
        YY_BREAK
case 70:
YY_RULE_SETUP
{ return T_LDOTS; }
        YY_BREAK
case 71:
YY_RULE_SETUP
{ return T_2DOTS; }
        YY_BREAK
case 72:
YY_RULE_SETUP
{ return T_ITER; }
        YY_BREAK
case 73:
YY_RULE_SETUP
{ return T_OOASSIGN; }
        YY_BREAK
case 74:
YY_RULE_SETUP
{ return T_DEFAULT; }
        YY_BREAK
case 75:
YY_RULE_SETUP
{ return T_REDUCE; }
        YY_BREAK
case 76:
YY_RULE_SETUP
{ return T_DEREFF; }
        YY_BREAK
case 77:
YY_RULE_SETUP
{ return T_SEP; }
        YY_BREAK
case 78:
YY_RULE_SETUP
{ return T_ADD; }
        YY_BREAK
case 79:
YY_RULE_SETUP
{ return T_FDMUL; }
        YY_BREAK
case 80:
YY_RULE_SETUP
{ return T_OTHERMUL; }
        YY_BREAK
case 81:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OTHERMUL; }
        YY_BREAK
case 82:
YY_RULE_SETUP
{ return T_COMPARE; }
        YY_BREAK
case 83:
YY_RULE_SETUP
{ return T_FDIN; }
        YY_BREAK
case 84:
YY_RULE_SETUP
{ return T_FDCOMPARE; }
        YY_BREAK
case 85:
YY_RULE_SETUP
{ return T_LMACRO; }
        YY_BREAK
case 86:
YY_RULE_SETUP
{ return T_RMACRO; }
        YY_BREAK
case 87:
YY_RULE_SETUP
{ return T_COLONEQUALS; }
        YY_BREAK
case 88:
YY_RULE_SETUP
{ // Hack to avoid strange parsing of X.1.1:
                                 // If "." is followed by integer, then
                                 // a special token is returned.
                                 // If this rule would not be there, the
                                 // resulting tokens would be "X" "." "1.1",
                                 // where the last one is a float.
                                 // Caveat: Comments are not allowed
                                 //         between . and number.
                                 stripDot(); return T_DOTINT; }
        YY_BREAK
case 89:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ // Hack to avoid parsing error for a(b:1...):
                                 // If int is followed by ..., int is returned.
                                 // If this rule would not be there, the rule
                                 // for floats would match and an error would
                                 // occur.
                                 return T_OZINT; }
        YY_BREAK
case 90:
YY_RULE_SETUP
{ return T_OZINT; }
        YY_BREAK
case 91:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OZINT; }
        YY_BREAK
case 92:
YY_RULE_SETUP
{ return T_OZFLOAT; }
        YY_BREAK
case 93:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_UNIT_LABEL; }
        YY_BREAK
case 94:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_TRUE_LABEL; }
        YY_BREAK
case 95:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FALSE_LABEL; }
        YY_BREAK
case 96:
YY_RULE_SETUP
{ return T_andthen; }
        YY_BREAK
case 97:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_andthen; }
        YY_BREAK
case 98:
YY_RULE_SETUP
{ return T_at; }
        YY_BREAK
case 99:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_at; }
        YY_BREAK
case 100:
YY_RULE_SETUP
{ return T_attr; }
        YY_BREAK
case 101:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_attr; }
        YY_BREAK
case 102:
YY_RULE_SETUP
{ return T_case; }
        YY_BREAK
case 103:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_case; }
        YY_BREAK
case 104:
YY_RULE_SETUP
{ return T_catch; }
        YY_BREAK
case 105:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_catch; }
        YY_BREAK
case 106:
YY_RULE_SETUP
{ return T_choice; }
        YY_BREAK
case 107:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_choice; }
        YY_BREAK
case 108:
YY_RULE_SETUP
{ return T_class; }
        YY_BREAK
case 109:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_class; }
        YY_BREAK
case 110:
YY_RULE_SETUP
{ return T_cond; }
        YY_BREAK
case 111:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_cond; }
        YY_BREAK
case 112:
YY_RULE_SETUP
{ return T_declare; }
        YY_BREAK
case 113:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_declare; }
        YY_BREAK
case 114:
YY_RULE_SETUP
{ return T_define; }
        YY_BREAK
case 115:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_define; }
        YY_BREAK
case 116:
YY_RULE_SETUP
{ return T_dis; }
        YY_BREAK
case 117:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_dis; }
        YY_BREAK
case 118:
YY_RULE_SETUP
{ return T_do; }
        YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_do; }
        YY_BREAK
case 120:
YY_RULE_SETUP
{ return T_else; }
        YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_else; }
        YY_BREAK
case 122:
YY_RULE_SETUP
{ return T_elsecase; }
        YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elsecase; }
        YY_BREAK
case 124:
YY_RULE_SETUP
{ return T_elseif; }
        YY_BREAK
case 125:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseif; }
        YY_BREAK
case 126:
YY_RULE_SETUP
{ return T_elseof; }
        YY_BREAK
case 127:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseof; }
        YY_BREAK
case 128:
YY_RULE_SETUP
{ return T_end; }
        YY_BREAK
case 129:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_end; }
        YY_BREAK
case 130:
YY_RULE_SETUP
{ return T_export; }
        YY_BREAK
case 131:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_export; }
        YY_BREAK
case 132:
YY_RULE_SETUP
{ return T_fail; }
        YY_BREAK
case 133:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fail; }
        YY_BREAK
case 134:
YY_RULE_SETUP
{ return T_false; }
        YY_BREAK
case 135:
YY_RULE_SETUP
{ return T_feat; }
        YY_BREAK
case 136:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_feat; }
        YY_BREAK
case 137:
YY_RULE_SETUP
{ return T_finally; }
        YY_BREAK
case 138:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_finally; }
        YY_BREAK
case 139:
YY_RULE_SETUP
{ return T_FOR; }
        YY_BREAK
case 140:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FOR; }
        YY_BREAK
case 141:
YY_RULE_SETUP
{ return T_from; }
        YY_BREAK
case 142:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_from; }
        YY_BREAK
case 143:
YY_RULE_SETUP
{ return T_fun; }
        YY_BREAK
case 144:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fun; }
        YY_BREAK
case 145:
YY_RULE_SETUP
{ return T_functor; }
        YY_BREAK
case 146:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_functor; }
        YY_BREAK
case 147:
YY_RULE_SETUP
{ return T_if; }
        YY_BREAK
case 148:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_if; }
        YY_BREAK
case 149:
YY_RULE_SETUP
{ return T_import; }
        YY_BREAK
case 150:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_import; }
        YY_BREAK
case 151:
YY_RULE_SETUP
{ return T_in; }
        YY_BREAK
case 152:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_in; }
        YY_BREAK
case 153:
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_OZATOM; }
        YY_BREAK
case 154:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_ATOM_LABEL; }
        YY_BREAK
case 155:
YY_RULE_SETUP
{ return T_local; }
        YY_BREAK
case 156:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_local; }
        YY_BREAK
case 157:
YY_RULE_SETUP
{ return T_lock; }
        YY_BREAK
case 158:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_lock; }
        YY_BREAK
case 159:
YY_RULE_SETUP
{ return T_meth; }
        YY_BREAK
case 160:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_meth; }
        YY_BREAK
case 161:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_OZATOM; }
        YY_BREAK
case 162:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_ATOM_LABEL; }
        YY_BREAK
case 163:
YY_RULE_SETUP
{ return T_not; }
        YY_BREAK
case 164:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_not; }
        YY_BREAK
case 165:
YY_RULE_SETUP
{ return T_of; }
        YY_BREAK
case 166:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_of; }
        YY_BREAK
case 167:
YY_RULE_SETUP
{ return T_or; }
        YY_BREAK
case 168:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_or; }
        YY_BREAK
case 169:
YY_RULE_SETUP
{ return T_orelse; }
        YY_BREAK
case 170:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_orelse; }
        YY_BREAK
case 171:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_OZATOM; }
        YY_BREAK
case 172:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_ATOM_LABEL; }
        YY_BREAK
case 173:
YY_RULE_SETUP
{ return T_prepare; }
        YY_BREAK
case 174:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prepare; }
        YY_BREAK
case 175:
YY_RULE_SETUP
{ return T_proc; }
        YY_BREAK
case 176:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_proc; }
        YY_BREAK
case 177:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_OZATOM; }
        YY_BREAK
case 178:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_ATOM_LABEL; }
        YY_BREAK
case 179:
YY_RULE_SETUP
{ return T_prop; }
        YY_BREAK
case 180:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prop; }
        YY_BREAK
case 181:
YY_RULE_SETUP
{ return T_raise; }
        YY_BREAK
case 182:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_raise; }
        YY_BREAK
case 183:
YY_RULE_SETUP
{ return T_require; }
        YY_BREAK
case 184:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_require; }
        YY_BREAK
case 185:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_OZATOM; }
        YY_BREAK
case 186:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_ATOM_LABEL; }
        YY_BREAK
case 187:
YY_RULE_SETUP
{ return T_self; }
        YY_BREAK
case 188:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_self; }
        YY_BREAK
case 189:
YY_RULE_SETUP
{ return T_skip; }
        YY_BREAK
case 190:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_skip; }
        YY_BREAK
case 191:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_OZATOM; }
        YY_BREAK
case 192:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_ATOM_LABEL; }
        YY_BREAK
case 193:
YY_RULE_SETUP
{ return T_then; }
        YY_BREAK
case 194:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_then; }
        YY_BREAK
case 195:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_OZATOM; }
        YY_BREAK
case 196:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_ATOM_LABEL; }
        YY_BREAK
case 197:
YY_RULE_SETUP
{ return T_thread; }
        YY_BREAK
case 198:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_thread; }
        YY_BREAK
case 199:
YY_RULE_SETUP
{ return T_true; }
        YY_BREAK
case 200:
YY_RULE_SETUP
{ return T_try; }
        YY_BREAK
case 201:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_try; }
        YY_BREAK
case 202:
YY_RULE_SETUP
{ return T_unit; }
        YY_BREAK
case 203:
YY_RULE_SETUP
{ return xy_allowWhileLoop? T_while: T_OZATOM; }
        YY_BREAK
case 204:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_allowWhileLoop? T_while: T_ATOM_LABEL; }
        YY_BREAK
case 205:
YY_RULE_SETUP
{ stripTrans('\''); return T_OZATOM; }
        YY_BREAK
case 206:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_OZATOM;}
        YY_BREAK
case 207:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ stripTrans('\''); return T_ATOM_LABEL; }
        YY_BREAK
case 208:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_ATOM_LABEL;}
        YY_BREAK
case 209:
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE; }
        YY_BREAK
case 210:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
        YY_BREAK
case 211:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE_LABEL; }
        YY_BREAK
case 212:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
        YY_BREAK
case 213:
YY_RULE_SETUP
{ stripTrans('\"'); return T_STRING; }
        YY_BREAK
case 214:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal string syntax",xyFileName,xylino,xycharno()); return T_STRING;}
        YY_BREAK
case 215:
YY_RULE_SETUP
{ int i = 0;
                                 int j = 1;
                                 transBody(0, xytext, i, j);
                                 return T_AMPER;
                               }
        YY_BREAK
case 216:
YY_RULE_SETUP
{
                                 return xytext[0];
                               }
        YY_BREAK
case 217:
YY_RULE_SETUP
;
        YY_BREAK
case 218:
YY_RULE_SETUP
{ xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case 219:
YY_RULE_SETUP
{ if (get_cond())
                                   xyreportError("lexical error",
                                                 "unknown directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(IGNOREDIRECTIVE);
                               }
        YY_BREAK
case 220:
YY_RULE_SETUP
{ if (get_cond())
                                   xyreportError("lexical error",
                                                 "illegal character",
                                                 xyFileName,xylino,xycharno());
                               }
        YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEX):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK
case 221:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
        YY_BREAK

        case YY_END_OF_BUFFER:
                {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = yy_hold_char;
                YY_RESTORE_YY_MORE_OFFSET

                if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                        {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between yy_current_buffer and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        yy_n_chars = yy_current_buffer->yy_n_chars;
                        yy_current_buffer->yy_input_file = yyin;
                        yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                        }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        { /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state();

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans( yy_current_state );

                        yy_bp = yytext_ptr + YY_MORE_ADJ;

                        if ( yy_next_state )
                                {
                                /* Consume the NUL. */
                                yy_cp = ++yy_c_buf_p;
                                yy_current_state = yy_next_state;
                                goto yy_match;
                                }

                        else
                                {
                                yy_cp = yy_c_buf_p;
                                goto yy_find_action;
                                }
                        }

                else switch ( yy_get_next_buffer() )
                        {
                        case EOB_ACT_END_OF_FILE:
                                {
                                yy_did_buffer_switch_on_eof = 0;

                                if ( yywrap() )
                                        {
                                        /* Note: because we've taken care in
                                         * yy_get_next_buffer() to have set up
                                         * yytext, we can now set up
                                         * yy_c_buf_p so that if some total
                                         * hoser (like flex itself) wants to
                                         * call the scanner after we return the
                                         * YY_NULL, it'll still work - another
                                         * YY_NULL will get returned.
                                         */
                                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                        yy_act = YY_STATE_EOF(YY_START);
                                        goto do_action;
                                        }

                                else
                                        {
                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
                                        }
                                break;
                                }

                        case EOB_ACT_CONTINUE_SCAN:
                                yy_c_buf_p =
                                        yytext_ptr + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_match;

                        case EOB_ACT_LAST_MATCH:
                                yy_c_buf_p =
                                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                break;
                }

        default:
                YY_FATAL_ERROR(
                        "fatal flex scanner internal error--no action found" );
        } /* end of action switch */
                } /* end of scanning one token */
        } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *      EOB_ACT_LAST_MATCH -
 *      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *      EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
        {
        register char *dest = yy_current_buffer->yy_ch_buf;
        register char *source = yytext_ptr;
        register int number_to_move, i;
        int ret_val;

        if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
                YY_FATAL_ERROR(
                "fatal flex scanner internal error--end of buffer missed" );

        if ( yy_current_buffer->yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                yy_current_buffer->yy_n_chars = yy_n_chars = 0;

        else
                {
                int num_to_read =
                        yy_current_buffer->yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                        YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                        /* just a shorter name for the current buffer */
                        YY_BUFFER_STATE b = yy_current_buffer;

                        int yy_c_buf_p_offset =
                                (int) (yy_c_buf_p - b->yy_ch_buf);

                        if ( b->yy_is_our_buffer )
                                {
                                int new_size = b->yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->yy_buf_size += b->yy_buf_size / 8;
                                else
                                        b->yy_buf_size *= 2;

                                b->yy_ch_buf = (char *)
                                        /* Include room in for 2 EOB chars. */
                                        yy_flex_realloc( (void *) b->yy_ch_buf,
                                                         b->yy_buf_size + 2 );
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->yy_ch_buf = 0;

                        if ( ! b->yy_ch_buf )
                                YY_FATAL_ERROR(
                                "fatal error - scanner input buffer overflow" );

                        yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                        num_to_read = yy_current_buffer->yy_buf_size -
                                                number_to_move - 1;
#endif
                        }

                if ( num_to_read > YY_READ_BUF_SIZE )
                        num_to_read = YY_READ_BUF_SIZE;

                /* Read in more data. */
                YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                        yy_n_chars, num_to_read );

                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        if ( yy_n_chars == 0 )
                {
                if ( number_to_move == YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        yyrestart( yyin );
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        yy_current_buffer->yy_buffer_status =
                                YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        yy_n_chars += number_to_move;
        yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
        yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

        yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

        return ret_val;
        }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
        {
        register yy_state_type yy_current_state;
        register char *yy_cp;

        yy_current_state = yy_start;

        for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
                {
                register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 77);
                if ( yy_accept[yy_current_state] )
                        {
                        yy_last_accepting_state = yy_current_state;
                        yy_last_accepting_cpos = yy_cp;
                        }
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                        {
                        yy_current_state = (int) yy_def[yy_current_state];
                        if ( yy_current_state >= 670 )
                                yy_c = yy_meta[(unsigned int) yy_c];
                        }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                }

        return yy_current_state;
        }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
        {
        register int yy_is_jam;
        register char *yy_cp = yy_c_buf_p;

        register YY_CHAR yy_c = 77;
        if ( yy_accept[yy_current_state] )
                {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
                }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 670 )
                        yy_c = yy_meta[(unsigned int) yy_c];
                }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        yy_is_jam = (yy_current_state == 669);

        return yy_is_jam ? 0 : yy_current_state;
        }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
        {
        register char *yy_cp = yy_c_buf_p;

        /* undo effects of setting up yytext */
        *yy_cp = yy_hold_char;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                { /* need to shift things up to make room */
                /* +2 for EOB chars. */
                register int number_to_move = yy_n_chars + 2;
                register char *dest = &yy_current_buffer->yy_ch_buf[
                                        yy_current_buffer->yy_buf_size + 2];
                register char *source =
                                &yy_current_buffer->yy_ch_buf[number_to_move];

                while ( source > yy_current_buffer->yy_ch_buf )
                        *--dest = *--source;

                yy_cp += (int) (dest - source);
                yy_bp += (int) (dest - source);
                yy_current_buffer->yy_n_chars =
                        yy_n_chars = yy_current_buffer->yy_buf_size;

                if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                        YY_FATAL_ERROR( "flex scanner push-back overflow" );
                }

        *--yy_cp = (char) c;


        yytext_ptr = yy_bp;
        yy_hold_char = *yy_cp;
        yy_c_buf_p = yy_cp;
        }
#endif  /* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
        {
        int c;

        *yy_c_buf_p = yy_hold_char;

        if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
                {
                /* yy_c_buf_p now points to the character we want to return.
                 * If this occurs *before* the EOB characters, then it's a
                 * valid NUL; if not, then we've hit the end of the buffer.
                 */
                if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        /* This was really a NUL. */
                        *yy_c_buf_p = '\0';

                else
                        { /* need more input */
                        int offset = yy_c_buf_p - yytext_ptr;
                        ++yy_c_buf_p;

                        switch ( yy_get_next_buffer() )
                                {
                                case EOB_ACT_LAST_MATCH:
                                        /* This happens because yy_g_n_b()
                                         * sees that we've accumulated a
                                         * token and flags that we need to
                                         * try matching the token before
                                         * proceeding.  But for input(),
                                         * there's no matching to consider.
                                         * So convert the EOB_ACT_LAST_MATCH
                                         * to EOB_ACT_END_OF_FILE.
                                         */

                                        /* Reset buffer status. */
                                        yyrestart( yyin );

                                        /* fall through */

                                case EOB_ACT_END_OF_FILE:
                                        {
                                        if ( yywrap() )
                                                return EOF;

                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
#ifdef __cplusplus
                                        return yyinput();
#else
                                        return input();
#endif
                                        }

                                case EOB_ACT_CONTINUE_SCAN:
                                        yy_c_buf_p = yytext_ptr + offset;
                                        break;
                                }
                        }
                }

        c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
        *yy_c_buf_p = '\0';     /* preserve yytext */
        yy_hold_char = *++yy_c_buf_p;


        return c;
        }
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
        {
        if ( ! yy_current_buffer )
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_init_buffer( yy_current_buffer, input_file );
        yy_load_buffer_state();
        }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
        {
        if ( yy_current_buffer == new_buffer )
                return;

        if ( yy_current_buffer )
                {
                /* Flush out information for old buffer. */
                *yy_c_buf_p = yy_hold_char;
                yy_current_buffer->yy_buf_pos = yy_c_buf_p;
                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        yy_current_buffer = new_buffer;
        yy_load_buffer_state();

        /* We don't actually know whether we did this switch during
         * EOF (yywrap()) processing, but the only time this flag
         * is looked at is after yywrap() is called, so it's safe
         * to go ahead and always set it.
         */
        yy_did_buffer_switch_on_eof = 1;
        }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
        {
        yy_n_chars = yy_current_buffer->yy_n_chars;
        yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
        yyin = yy_current_buffer->yy_input_file;
        yy_hold_char = *yy_c_buf_p;
        }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
        {
        YY_BUFFER_STATE b;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_buf_size = size;

        /* yy_ch_buf has to be 2 characters longer than the size given because
         * we need to put in 2 end-of-buffer characters.
         */
        b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
        if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_is_our_buffer = 1;

        yy_init_buffer( b, file );

        return b;
        }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
        {
        if ( ! b )
                return;

        if ( b == yy_current_buffer )
                yy_current_buffer = (YY_BUFFER_STATE) 0;

        if ( b->yy_is_our_buffer )
                yy_flex_free( (void *) b->yy_ch_buf );

        yy_flex_free( (void *) b );
        }



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


        {
        yy_flush_buffer( b );

        b->yy_input_file = file;
        b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
        b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
        b->yy_is_interactive = 0;
#else
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
        }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

        {
        if ( ! b )
                return;

        b->yy_n_chars = 0;

        /* We always need two end-of-buffer characters.  The first causes
         * a transition to the end-of-buffer state.  The second causes
         * a jam in that state.
         */
        b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
        b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

        b->yy_buf_pos = &b->yy_ch_buf[0];

        b->yy_at_bol = 1;
        b->yy_buffer_status = YY_BUFFER_NEW;

        if ( b == yy_current_buffer )
                yy_load_buffer_state();
        }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
        {
        YY_BUFFER_STATE b;

        if ( size < 2 ||
             base[size-2] != YY_END_OF_BUFFER_CHAR ||
             base[size-1] != YY_END_OF_BUFFER_CHAR )
                /* They forgot to leave room for the EOB's. */
                return 0;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

        b->yy_buf_size = size - 2;      /* "- 2" to take care of EOB's */
        b->yy_buf_pos = b->yy_ch_buf = base;
        b->yy_is_our_buffer = 0;
        b->yy_input_file = 0;
        b->yy_n_chars = b->yy_buf_size;
        b->yy_is_interactive = 0;
        b->yy_at_bol = 1;
        b->yy_fill_buffer = 0;
        b->yy_buffer_status = YY_BUFFER_NEW;

        yy_switch_to_buffer( b );

        return b;
        }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
        {
        int len;
        for ( len = 0; yy_str[len]; ++len )
                ;

        return yy_scan_bytes( yy_str, len );
        }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
        {
        YY_BUFFER_STATE b;
        char *buf;
        yy_size_t n;
        int i;

        /* Get memory for full buffer, including space for trailing EOB's. */
        n = len + 2;
        buf = (char *) yy_flex_alloc( n );
        if ( ! buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

        for ( i = 0; i < len; ++i )
                buf[i] = bytes[i];

        buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

        b = yy_scan_buffer( buf, n );
        if ( ! b )
                YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

        /* It's okay to grow etc. this buffer, and we should throw it
         * away when we're done.
         */
        b->yy_is_our_buffer = 1;

        return b;
        }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
        {
        if ( yy_start_stack_ptr >= yy_start_stack_depth )
                {
                yy_size_t new_size;

                yy_start_stack_depth += YY_START_STACK_INCR;
                new_size = yy_start_stack_depth * sizeof( int );

                if ( ! yy_start_stack )
                        yy_start_stack = (int *) yy_flex_alloc( new_size );

                else
                        yy_start_stack = (int *) yy_flex_realloc(
                                        (void *) yy_start_stack, new_size );

                if ( ! yy_start_stack )
                        YY_FATAL_ERROR(
                        "out of memory expanding start-condition stack" );
                }

        yy_start_stack[yy_start_stack_ptr++] = YY_START;

        BEGIN(new_state);
        }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
        {
        if ( --yy_start_stack_ptr < 0 )
                YY_FATAL_ERROR( "start-condition stack underflow" );

        BEGIN(yy_start_stack[yy_start_stack_ptr]);
        }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
        {
        return yy_start_stack[yy_start_stack_ptr - 1];
        }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
        {
        (void) fprintf( stderr, "%s\n", msg );
        exit( YY_EXIT_FAILURE );
        }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                yytext[yyleng] = yy_hold_char; \
                yy_c_buf_p = yytext + n; \
                yy_hold_char = *yy_c_buf_p; \
                *yy_c_buf_p = '\0'; \
                yyleng = n; \
                } \
        while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
        {
        register int i;
        for ( i = 0; i < n; ++i )
                s1[i] = s2[i];
        }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
        {
        register int n;
        for ( n = 0; s[n]; ++n )
                ;

        return n;
        }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
        {
        return (void *) malloc( size );
        }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
        {
        /* The cast to (char *) in the following accommodates both
         * implementations that use char* generic pointers, and those
         * that use void* generic pointers.  It works with the latter
         * because both ANSI C and C++ allow castless assignment from
         * any pointer type to void*, and deal with argument conversions
         * as though doing an assignment.
         */
        return (void *) realloc( (char *) ptr, size );
        }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
        {
        free( ptr );
        }

#if YY_MAIN
int main()
        {
        yylex();
        return 0;
        }
#endif


static void xy_init(OZ_Term defines0) {
  xylino = 1;
  errorFlag = 0;

  bufferStack = NULL;

  defines = tagged2Dictionary(OZ_deref(defines0));
  conditional_p = 0;
  conditional_basep = 0;
  commentdepth = 0;

  BEGIN(INITIAL);
}

int xy_init_from_file(char *file, OZ_Term defines) {
  char *fullname = scExpndFileName(file, NULL);
  if (fullname == NULL)
    return 0;
  xy_errorMessages = oz_cons(OZ_mkTupleC("logInsert",1,OZ_atom(fullname)),
                             AtomNil);
  xyin = fopen(fullname, "r");
  if (xyin == NULL)
    return 0;
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  strncpy(xyFileName,fullname,maxFileNameSize - 1);
  xyFileName[maxFileNameSize - 1] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  delete[] fullname;
  xy_init(defines);
  return 1;
}

void xy_init_from_string(char *str, OZ_Term defines) {
  xy_errorMessages = AtomNil;
  xyFileName[0] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  xyin = NULL;
  xy_scan_string(str);
  xylastline = YY_CURRENT_BUFFER->yy_ch_buf;
  xy_init(defines);
}

char *xy_expand_file_name(char *file) {
  return scExpndFileName(file, NULL);
}

void xy_exit() {
  xy_delete_buffer(YY_CURRENT_BUFFER);
  while (bufferStack != NULL) {
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
  }
  if (xyin)
    fclose(xyin);
}

int xylex() {
  int next = xymylex();
  if (get_cond() || next == 0 || next == T_ENDOFFILE)
    return next;
  else
    return xylex();
}

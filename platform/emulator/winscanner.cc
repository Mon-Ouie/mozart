#define yy_create_buffer xy_create_buffer
#define yy_delete_buffer xy_delete_buffer
#define yy_scan_buffer xy_scan_buffer
#define yy_scan_string xy_scan_string
#define yy_scan_bytes xy_scan_bytes
#define yy_flex_debug xy_flex_debug
#define yy_init_buffer xy_init_buffer
#define yy_flush_buffer xy_flush_buffer
#define yy_load_buffer_state xy_load_buffer_state
#define yy_switch_to_buffer xy_switch_to_buffer
#define yyin xyin
#define yyleng xyleng
#define yylex xylex
#define yyout xyout
#define yyrestart xyrestart
#define yytext xytext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *      if ( condition_holds )
 *              yyless( 5 );
 *      else
 *              do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                *yy_cp = yy_hold_char; \
                YY_RESTORE_YY_MORE_OFFSET \
                yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
                YY_DO_BEFORE_ACTION; /* set up yytext again */ \
                } \
        while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
        {
        FILE *yy_input_file;

        char *yy_ch_buf;                /* input buffer */
        char *yy_buf_pos;               /* current position in input buffer */

        /* Size of input buffer in bytes, not including room for EOB
         * characters.
         */
        yy_size_t yy_buf_size;

        /* Number of characters read into yy_ch_buf, not including EOB
         * characters.
         */
        int yy_n_chars;

        /* Whether we "own" the buffer - i.e., we know we created it,
         * and can realloc() it to grow it, and should free() it to
         * delete it.
         */
        int yy_is_our_buffer;

        /* Whether this is an "interactive" input source; if so, and
         * if we're using stdio for input, then we want to use getc()
         * instead of fread(), to make sure we stop fetching input after
         * each newline.
         */
        int yy_is_interactive;

        /* Whether we're considered to be at the beginning of a line.
         * If so, '^' rules will be active on the next match, otherwise
         * not.
         */
        int yy_at_bol;

        /* Whether to try to fill the input buffer when we reach the
         * end of it.
         */
        int yy_fill_buffer;

        int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
        /* When an EOF's been seen but there's still some text to process
         * then we mark the buffer as YY_EOF_PENDING, to indicate that we
         * shouldn't try reading from the input source any more.  We might
         * still have a bunch of tokens to match, though, because of
         * possible backing-up.
         *
         * When we actually see the EOF, we change the status to "new"
         * (via yyrestart()), so that the user can continue scanning by
         * just pointing yyin at a new input file.
         */
#define YY_BUFFER_EOF_PENDING 2
        };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_is_interactive = is_interactive; \
        }

#define yy_set_bol(at_bol) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_at_bol = at_bol; \
        }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
        yytext_ptr = yy_bp; \
        yyleng = (int) (yy_cp - yy_bp); \
        yy_hold_char = *yy_cp; \
        *yy_cp = '\0'; \
        yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 212
#define YY_END_OF_BUFFER 213
static yyconst short int yy_accept[650] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  213,  211,
      208,  209,  207,  211,  207,    1,  211,  211,   77,   76,
      207,   77,   87,   87,  207,   80,  207,   80,  200,  207,
      211,  211,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  207,   83,
       84,    5,    6,    7,    7,   23,   22,   24,   26,   25,
       27,    1,   26,   31,   30,   32,   31,   29,   31,   28,
       37,   36,   38,   33,   34,   35,   41,   40,   42,   41,

       39,   41,   45,   44,   46,   43,   45,   53,   52,   54,
       51,   53,   57,   56,   58,   55,   57,   49,   48,   50,
       47,   49,   61,   60,   62,   61,   59,   65,   64,   66,
       63,   63,   65,   80,   74,    0,  204,    0,    0,    1,
      206,    0,    0,  196,    0,    0,    0,    0,   85,    2,
       75,   88,   87,    0,    0,    0,   87,   81,   71,   82,
       83,   72,   80,   80,   73,   84,  202,  200,   69,  210,
      210,  210,  210,  210,  210,  210,  210,  210,    0,    0,
      200,    0,  198,  196,  196,   94,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,

      139,  196,  143,  196,  196,  196,  196,  196,  157,  159,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,   87,   87,    5,    4,    3,    0,   29,    0,
       28,   35,    0,   39,    0,   43,    0,    0,   43,   51,
        0,    0,   51,   55,    0,    0,   55,   47,    0,    0,
       47,    0,   59,    0,   59,   63,    0,    0,   63,   63,
       63,    0,    0,   71,   82,   83,   72,    0,    0,  205,
        0,    0,  205,    0,    0,  198,  197,    0,    0,  197,
       70,    0,   88,    0,   87,   87,   81,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,    0,

        0,  201,  202,  201,  196,   95,  196,  196,  196,  196,
      196,  196,  196,  196,  112,   78,  196,  122,  196,  196,
      196,  196,  196,  196,  135,  140,  196,  144,  145,  196,
      196,  196,   78,  155,  158,  160,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  183,  196,  196,  196,  196,
      192,  196,   88,   87,    0,   87,   29,   39,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   63,   63,
       68,    0,    0,    0,    0,    0,  204,    0,    0,    0,
        0,    0,    0,  196,  199,    0,    0,    0,  199,   86,
       88,    0,  210,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  210,  210,  210,    0,    0,    0,  203,    0,
      200,  203,  196,   96,   98,  196,  196,  196,  106,  196,
      196,  113,   79,  114,  123,  196,  126,  196,  129,  196,
      133,  136,  196,  196,  146,  196,  149,  195,  151,  153,
      156,  196,  196,  196,  167,  169,  171,  196,  196,  196,
      179,  181,  184,  185,  196,  196,  191,  193,  194,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  210,   18,  210,  210,  210,  210,
      210,   12,  210,  210,  210,  210,  210,    0,    0,  196,
       97,   99,  100,  196,  104,  107,  196,  196,  115,  196,

      196,  196,  196,  127,  128,  130,  196,  134,  196,  196,
      147,  150,  152,  154,  196,  196,  196,  168,  170,  172,
      173,  196,  196,  180,  182,  186,  196,  187,   90,   89,
        0,    0,    0,    0,    0,  210,   19,  210,  210,   16,
      210,  210,  210,  210,  210,  210,   15,    0,    0,  196,
      101,  102,  105,  196,  110,  196,  118,  120,  124,   91,
      196,  196,  141,  148,  161,  163,  196,  174,  196,  196,
      189,  188,    0,   14,  210,  210,   17,   13,  210,  210,
      210,    8,   92,  103,  108,  111,  196,  119,  121,  125,
      131,  137,  142,  162,  164,  165,  175,  177,  190,   67,

      210,  210,  210,  210,  210,   93,  109,  116,  132,  138,
      166,  176,  178,  210,  210,  210,  210,  210,  117,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,   10,  210,  210,  210,  210,    9,  210,  210,
       11,  210,  210,  210,  210,   21,  210,   20,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   31,   31,   33,   34,
       35,   35,   35,   35,   35,   35,   35,   35,   36,   35,
       35,   35,   37,   35,   35,   35,   35,   38,   35,   35,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   54,   70,   71,   72,   73,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       74,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   75,   25,   25,   25,
       25,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   25,   76,   76,   76,   76,   76,
       76,   76,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   25,   77,   77,   77,
       77,   77,   77,   77,   77
    } ;

static yyconst int yy_meta[79] =
    {   0,
        1,    1,    2,    1,    1,    3,    4,    4,    4,    5,
        5,    6,    4,    7,    4,    4,    8,    8,    9,   10,
       10,   10,   11,    4,    4,   12,   13,   14,    4,    4,
       15,   15,   15,   15,   16,   16,   16,   17,    4,    5,
       18,    4,   19,    5,   20,   20,   15,   15,   15,   20,
       16,   16,   16,   16,   16,   16,   16,   17,   16,   16,
       16,   17,   16,   17,   16,   17,   16,   17,   16,    4,
        4,    4,    8,    4,    4,   21,   21,   22
    } ;

static yyconst short int yy_base[752] =
    {   0,
        0,    0,   76,   77,   79,   81,   83,   85,  104,    0,
      182,    0,  260,    0,  337,  412,  487,  562,  637,  712,
      787,  862,  937, 1013,  339,  343, 1544, 1543, 1568, 3535,
     3535, 3535, 1562,  342, 3535,    0, 1526,  339, 3535, 3535,
      374,   79,  386,  331, 1541,  363,   73,  374, 1552, 1522,
      404,  344,  335, 1550,  374,  388,  371,  413,  422,  379,
      424,  346,  373,  439,  447,  458,  409,  428,  477, 3535,
     3535,    0, 3535, 1542, 1546, 3535, 3535, 3535, 3535, 3535,
     3535,    0, 1545, 3535, 3535, 3535,    0, 1540, 1090,  488,
     3535, 3535, 3535, 3535, 3535,    0, 3535, 3535, 3535,    0,

     1538, 1168, 3535, 3535, 3535,    0,  437, 3535, 3535, 3535,
        0,  447, 3535, 3535, 3535,    0,  472, 3535, 3535, 3535,
        0,  486, 3535, 3535, 3535,  454,    0, 3535, 3535, 3535,
      512,  515,  519,  542, 3535,  436, 3535, 1241, 1545,    0,
     3535,  533,  506, 1538, 1304, 1538,  587, 1530,  552, 3535,
     3535,  597,  565,  603,  323,    0,  611, 1523, 3535, 3535,
     3535, 3535, 1522, 3535, 3535, 3535, 3535, 1533, 3535,    0,
     1495,  299, 1471,  424,  490,  486, 1468, 1476,  601, 1367,
     1521, 1488, 3535, 1519,  481,  399,  540,  503,  483,  544,
      564,  593,  549,  565,  567,  610,  616,  624,  625,  630,

     1518,  623, 1504,  492,  631,  580,  637,  635, 1496,  638,
      636,  642,  639,  641,  648,  491,  643,  645,  646,  355,
      640,  653,  719,  698,    0, 3535, 3535, 1493, 1485, 1435,
      704,    0, 1491, 1483, 1513,    0,  636,  690, 3535,    0,
      660,  714, 3535,    0,  689,  733, 3535,    0,  719,  740,
     3535,  683, 3535,  746,    0,  710,  749,    0,  752,  759,
      772,  770,    0,  798,  800, 1467,  805, 1459,  636,  777,
      826, 1586, 3535,  814,    0, 3535,  801,  831, 1626, 1486,
     3535, 1479,  834,  838,  765,    0, 3535, 1446, 1432, 1446,
     1436,  509, 1429, 1433, 1443, 1429, 1425, 1434, 1438,  848,

     1657,  831, 3535, 1473,  674, 3535,  655,  817,  752,  837,
      818,  838,  860,  850, 1472, 1471,  861, 1470,  862,  864,
      865,  866,  652,  867,  868, 3535,  870, 3535, 1469,  872,
      873,  879,  876, 1468, 3535, 3535,  889,  890,  875,  895,
      893,  892,  896,  765,  877, 1466,  900,  897,  901,  902,
     1461,  906,  987,  941,  951,  957, 1461, 1460,  945,    0,
      991,    0,  997,    0, 1001,    0, 1005,    0,  782,    0,
     3535, 1464, 1433,  882, 1042,  920, 3535, 1017, 1022, 1702,
     1009,    0,  936, 1456,  941, 1087, 1029, 1742, 3535, 3535,
     1012, 1066, 1414, 1417, 1405, 1397, 1407, 1407, 1405, 1404,

     1407, 1401, 1382, 1368, 1381, 1091, 1773,  756,  892, 1118,
     1416, 3535, 1041, 1415, 1414, 1072, 1098, 1124, 1412, 1109,
     1130, 3535, 3535, 1173, 3535, 1129, 1411, 1110, 1410, 1115,
     1409, 3535, 1125, 1137, 3535, 1134, 1408, 1407, 1406, 1404,
     3535, 1138, 1114, 1188, 1403, 1402, 1398, 1192, 1201, 1145,
     1397, 1396, 3535, 1394, 1190, 1199, 1392, 3535, 1391, 1026,
        0, 1131,    0, 1194,    0, 1197,    0, 1201,    0, 1368,
     1207,    0, 1228,    0, 1343,    0, 1350,  881, 1349, 1349,
     1335,    0, 1340, 1328, 1357, 1346, 1342, 1238,    0, 1218,
     3535, 3535, 1379, 1219, 1378, 3535, 1193, 1222, 3535, 1224,

     1225, 1244, 1212, 3535, 1374, 3535, 1241, 3535, 1213, 1252,
     1373, 3535, 3535, 3535, 1253, 1258, 1261, 3535, 3535, 3535,
     1372, 1265, 1262, 3535, 3535, 3535, 1270, 1371, 3535, 3535,
     1354, 1268,    0, 1308,    0, 1332,    0, 1335, 1332,    0,
     1326, 1311, 1337, 1318, 1302, 1315,    0, 1311,    0, 1254,
     3535, 1353, 3535, 1268, 1352, 1271, 1351, 1349, 1348, 3535,
     1266, 1281, 1347, 3535, 1346, 1345, 1272, 3535, 1288, 1283,
     1344, 3535, 1327,    0, 1291, 1307,    0,    0, 1284, 1283,
     1293,    0, 1329, 3535, 1328, 3535, 1289, 3535, 3535, 3535,
     1327, 1324, 3535, 3535, 3535, 1310, 1307, 1301, 3535, 3535,

     1245, 1248, 1251, 1251, 1232, 3535, 3535, 1280, 3535, 3535,
     3535, 3535, 3535, 1157, 1100, 1084, 1095, 1097, 3535, 1081,
     1084, 1081, 1074, 1005, 1007,  992, 1000,  978,  919,  881,
      874,  870,    0,  753,  747,  645,  626,    0,  529,  521,
        0,  455,  435,  292,   50,    0,   21,    0, 3535, 1823,
     1845, 1867, 1889, 1911, 1933, 1955, 1977, 1999, 2021, 2043,
     2065, 2086, 2103, 2112, 2132, 2149, 2170, 2190, 2204, 2215,
     2233, 2247, 2258, 2279, 2291, 2312, 2324, 2345, 2357, 2378,
     2399, 2411, 2432, 2454, 2476, 2496, 2516, 2538, 2551, 2566,
     2573, 2593, 2615, 2632, 2653, 2673, 2687, 2698, 2716, 2730,

     2741, 2762, 2781, 2792, 2813, 2832, 2843, 2864, 2883, 2894,
     2915, 2934, 2954, 2973, 2984, 2996, 3016, 3038, 3060, 3082,
     3103, 3116, 3136, 3157, 3170, 3176, 3196, 3218, 3234, 3253,
     3272, 3284, 3295, 3306, 3317, 3328, 3346, 3357, 3375, 3393,
     3404, 3415, 3426, 3437, 3448, 3459, 3470, 3481, 3492, 3503,
     3514
    } ;

static yyconst short int yy_def[752] =
    {   0,
      649,    1,  650,  650,  651,  651,  652,  652,  649,    9,
      649,   11,  649,   13,  653,  653,  654,  654,  655,  655,
      656,  656,  657,  657,  658,  658,    1,    1,  649,  649,
      649,  649,  649,  659,  649,  660,  661,  662,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  663,  649,
      664,  665,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  649,  649,
      649,  667,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  660,  649,  649,  649,  649,  668,  669,  669,  669,
      649,  649,  649,  649,  649,  670,  649,  649,  649,  671,

      672,  672,  649,  649,  649,  673,  674,  649,  649,  649,
      675,  676,  649,  649,  649,  677,  678,  649,  649,  649,
      679,  680,  649,  649,  649,  681,  682,  649,  649,  649,
      649,  649,  649,  683,  649,  684,  649,  685,  685,  660,
      649,  686,  687,  649,  688,  688,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  689,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  690,  649,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  692,  693,
      649,  693,  649,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  649,  649,  695,  649,  649,  696,  697,  697,
      697,  698,  699,  700,  700,  701,  702,  703,  649,  704,
      705,  706,  649,  707,  708,  709,  649,  710,  711,  712,
      649,  713,  649,  714,  715,  649,  649,  716,  649,  649,
      649,  717,  718,  717,  717,  649,  717,  719,  717,  720,
      721,  721,  649,  649,  722,  649,  723,  724,  724,  649,
      649,  649,  649,  649,  649,  725,  649,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  727,

      727,  728,  649,  649,  729,  649,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  649,  729,  649,  729,  729,
      729,  729,  729,  729,  649,  649,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  649,  649,  649,  649,  730,  731,  649,  732,
      649,  733,  649,  734,  649,  735,  649,  736,  649,  716,
      649,  718,  649,  719,  719,  720,  649,  737,  721,  721,
      649,  738,  723,  649,  723,  739,  724,  724,  649,  649,
      649,  649,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726,  727,  727,  728,  728,  740,
      649,  649,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  649,  649,  729,  649,  729,  729,  729,  729,  729,
      729,  649,  729,  729,  649,  729,  729,  729,  729,  729,
      649,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  649,  729,  729,  729,  729,  649,  729,  649,
      741,  649,  742,  649,  743,  649,  744,  649,  745,  649,
      649,  746,  649,  747,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  649,  748,  729,
      649,  649,  729,  729,  729,  649,  729,  729,  649,  729,

      729,  729,  729,  649,  729,  649,  729,  649,  729,  729,
      729,  649,  649,  649,  729,  729,  729,  649,  649,  649,
      729,  729,  729,  649,  649,  649,  729,  729,  649,  649,
      649,  649,  749,  649,  750,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  649,  751,  729,
      649,  729,  649,  729,  729,  729,  729,  729,  729,  649,
      729,  729,  729,  649,  729,  729,  729,  649,  729,  729,
      729,  649,  649,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  729,  649,  729,  649,  729,  649,  649,  649,
      729,  729,  649,  649,  649,  729,  729,  729,  649,  649,

      726,  726,  726,  726,  726,  649,  649,  729,  649,  649,
      649,  649,  649,  726,  726,  726,  726,  726,  649,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,    0,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649
    } ;

static yyconst short int yy_nxt[3614] =
    {   0,
       30,   31,   32,   31,   33,   34,   35,   35,   36,   37,
       38,   35,   35,   39,   40,   35,   40,   41,   42,   43,
       44,   44,   44,   45,   30,   46,   47,   48,   31,   35,
       49,   49,   49,   49,   49,   49,   49,   49,   50,   51,
       35,   35,   35,   52,   53,   54,   55,   56,   57,   58,
       54,   54,   59,   54,   54,   60,   61,   62,   63,   64,
       54,   65,   66,   67,   68,   54,   54,   54,   54,   35,
       35,   35,   69,   70,   71,   49,   54,   30,   73,   73,
       77,   78,   77,   78,   80,   81,   80,   81,  648,   74,
       74,   82,  150,   82,   75,   75,  160,  151,  163,  164,

      165,   83,  647,   83,   84,   85,   86,   84,   84,   84,
       84,   84,   84,   84,   87,   84,   84,   84,   84,   84,
       88,   89,   88,   90,   90,   90,   90,   84,   84,   84,
       84,   84,   84,   84,   88,   88,   88,   88,   88,   88,
       88,   88,   84,   84,   84,   84,   88,   84,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   84,   84,   84,   88,   84,   84,   84,
       84,   84,   91,   92,   93,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   94,   91,   95,   91,

       91,   96,   96,   96,   96,   91,   91,   91,   91,   91,
       91,   91,   96,   96,   96,   96,   96,   96,   96,   96,
       91,   91,   91,   91,   91,   91,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       97,   98,   99,   97,   97,   97,   97,   97,   97,   97,
      100,   97,   97,   97,   97,   97,  101,  102,  101,  101,
      101,  101,  101,   97,   97,   97,   97,   97,   97,   97,
      101,  101,  101,  101,  101,  101,  101,  101,   97,   97,

       97,   97,  101,   97,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,   97,
       97,   97,  101,   97,   97,   97,   97,   97,  104,  105,
      129,  130,  285,  285,  129,  130,  183,  137,  152,  144,
      157,  157,  157,  157,  289,  646,  290,  183,  131,  132,
      132,  132,  131,  132,  132,  132,  183,  106,  106,  106,
      106,  106,  106,  106,  106,  147,  147,  147,  145,  159,
      107,  138,  183,  180,  183,  183,  160,  181,  161,  162,
      183,  148,  185,  149,  149,  149,  149,  160,  186,  183,

      163,  166,  147,  152,  208,  153,  153,  153,  154,  349,
      306,  133,  106,  104,  105,  133,  146,  155,  187,  139,
      183,  182,  209,  156,  183,  188,  193,  204,  194,  189,
      163,  155,  190,  183,  210,  183,  191,  205,  195,  183,
      192,  137,  106,  106,  106,  106,  106,  106,  106,  106,
      183,  171,  172,  156,  173,  107,  174,  196,  183,  175,
      219,  197,  307,  176,  253,  198,  177,  220,  178,  183,
      221,  201,  206,  292,  199,  138,  238,  200,  202,  203,
      239,  293,  207,  211,  645,  222,  242,  106,  109,  110,
      243,  213,  183,  254,  183,  214,  223,  224,  224,  224,

      212,  644,  183,  183,  215,  230,  216,  231,  231,  231,
      231,  246,  217,  139,  183,  247,  144,  111,  111,  111,
      111,  111,  111,  111,  111,  250,  218,  311,  305,  251,
      112,  256,  256,  256,  259,  259,  259,  259,  260,  261,
      261,  261,  294,  257,  296,  145,  344,  263,  295,  258,
      297,  183,  274,  274,  274,  183,  397,  257,  264,  329,
      183,  310,  111,  109,  110,  265,  398,  266,  267,  643,
      275,  149,  149,  149,  149,  183,  183,  642,  183,  258,
      268,  269,  152,  146,  153,  153,  153,  154,  147,  147,
      147,  183,  111,  111,  111,  111,  111,  111,  111,  111,

      275,  312,  308,  309,  183,  112,  149,  149,  149,  149,
      313,  317,  318,  314,  282,  147,  283,  283,  283,  283,
      152,  183,  154,  154,  154,  154,  319,  183,  152,  284,
      157,  157,  157,  157,  183,  183,  183,  111,  114,  115,
      180,  183,  183,  332,  181,  284,  183,  183,  183,  336,
      183,  183,  183,  183,  183,  315,  183,  183,  316,  183,
      322,  262,  320,  183,  183,  321,  183,  116,  116,  116,
      116,  116,  116,  116,  116,  238,  262,  330,  182,  239,
      117,  323,  327,  324,  333,  183,  337,  325,  641,  331,
      339,  341,  343,  253,  347,  345,  430,  338,  334,  242,

      340,  342,  346,  243,  350,  352,  640,  348,  351,  359,
      359,  359,  116,  114,  115,  353,  414,  356,  356,  356,
      356,  230,  254,  231,  231,  231,  231,  360,  246,  256,
      256,  256,  247,  361,  361,  361,  353,  413,  354,  354,
      354,  355,  116,  116,  116,  116,  116,  116,  116,  116,
      155,  362,  363,  363,  363,  117,  156,  360,  250,  365,
      365,  365,  251,  183,  155,  367,  367,  367,  369,  369,
      364,  259,  259,  259,  259,  263,  183,  366,  256,  256,
      256,  362,  377,  368,  285,  285,  156,  116,  119,  120,
      257,  259,  259,  259,  259,  410,  258,  371,  416,  411,

      364,  369,  369,  263,  257,  263,  639,  366,  268,  269,
      263,  384,  385,  368,  451,  638,  378,  121,  121,  121,
      121,  121,  121,  121,  121,  371,  258,  371,  183,  183,
      122,  273,  371,  381,  381,  381,  268,  269,  268,  269,
      386,  280,  409,  268,  269,  379,  379,  379,  183,  183,
      387,  387,  387,  283,  283,  283,  283,  391,  391,  391,
      391,  183,  121,  119,  120,  415,  284,  406,  406,  406,
      410,  183,  183,  183,  411,  183,  183,  183,  183,  432,
      418,  183,  284,  183,  183,  419,  183,  423,  183,  417,
      183,  304,  121,  121,  121,  121,  121,  121,  121,  121,

      183,  183,  421,  183,  183,  122,  183,  183,  183,  424,
      392,  183,  183,  183,  433,  420,  436,  183,  637,  427,
      426,  375,  262,  431,  440,  377,  437,  428,  434,  429,
      439,  410,  438,  636,  444,  411,  452,  121,  124,  125,
      538,  445,  446,  539,  442,  455,  384,  126,  635,  456,
      457,  384,  443,  450,  447,  448,  449,  454,  353,  378,
      354,  354,  354,  355,  460,  460,  460,  634,  353,  459,
      355,  355,  355,  355,  353,  386,  356,  356,  356,  356,
      386,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  283,  283,  283,  283,
      462,  462,  462,  127,  124,  125,  464,  464,  464,  284,
      466,  466,  466,  126,  468,  468,  468,  273,  141,  141,
      141,  391,  391,  391,  391,  284,  471,  471,  471,  280,
      633,  136,  136,  136,  649,  237,  237,  237,  143,  143,
      143,  632,  183,  631,  472,  630,  629,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  374,  183,  472,  391,  391,  391,  391,  127,
      229,  229,  490,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  473,  473,  473,  183,
      179,  179,  179,  229,  229,  229,  229,  229,  229,  229,
      183,  183,  628,  493,  474,  183,  183,  627,  229,  229,
      229,  229,  626,  229,  304,  183,  183,  488,  488,  488,
      183,  183,  625,  624,  494,  183,  623,  622,  183,  183,
      241,  241,  241,  497,  474,  489,  183,  621,  505,  229,
      229,  229,  516,  229,  229,  229,  229,  229,  234,  234,
      507,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  499,  489,  495,  498,  509,  511,
      503,  234,  234,  234,  234,  234,  234,  234,  510,  183,

      515,  183,  523,  183,  183,  620,  234,  234,  234,  234,
      183,  234,  183,  245,  245,  245,  249,  249,  249,  500,
      252,  252,  252,  183,  183,  501,  532,  532,  532,  183,
      183,  502,  517,  183,  527,  183,  183,  234,  234,  234,
      521,  234,  234,  234,  234,  234,  270,  534,  534,  534,
      136,  136,  183,  522,  554,  183,  528,  548,  548,  548,
      271,  271,  271,  183,  183,  183,  550,  552,  556,  183,
      555,  562,  183,  183,  557,  559,  183,  183,  272,  183,
      136,  183,  183,  183,  136,  136,  136,  376,  376,  376,
      136,  619,  183,  558,  183,  618,  561,  617,  136,  183,

      183,  565,  136,  616,  136,  615,  136,  614,  272,  143,
      570,  583,  613,  143,  277,  563,  585,  571,  612,  566,
      596,  611,  567,  278,  278,  278,  569,  383,  383,  383,
      408,  408,  408,  587,  591,  610,  597,  608,  609,  607,
      606,  279,  592,  143,  598,  605,  604,  143,  143,  143,
      603,  602,  601,  143,  600,  599,  595,  594,  593,  590,
      589,  143,  588,  586,  584,  143,  582,  143,  581,  143,
      580,  279,  179,  579,  578,  577,  179,  179,  576,  575,
      574,  573,  572,  568,  564,  560,  300,  300,  300,  553,
      551,  547,  546,  545,  544,  543,  542,  541,  540,  537,

      536,  531,  530,  529,  301,  526,  179,  525,  524,  520,
      302,  179,  179,  519,  518,  514,  179,  513,  183,  512,
      508,  506,  504,  496,  179,  492,  491,  167,  179,  487,
      179,  486,  179,  485,  301,  229,  229,  484,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  483,  482,  481,  480,  479,  478,  477,  229,  229,
      229,  229,  229,  229,  229,  476,  475,  183,  470,  262,
      358,  357,  458,  229,  229,  229,  229,  453,  229,  441,
      435,  425,  423,  422,  412,  405,  404,  403,  402,  401,
      400,  399,  396,  395,  394,  393,  390,  389,  375,  373,

      235,  358,  230,  357,  229,  229,  229,  335,  229,  229,
      229,  229,  229,  234,  234,  328,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  326,
      183,  304,  303,  299,  298,  291,  234,  234,  234,  234,
      234,  234,  234,  288,  167,  160,  287,  281,  280,  276,
      273,  234,  234,  234,  234,  235,  234,  230,  150,  227,
      226,  183,  169,  167,  158,  142,  135,  649,  134,  134,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  234,  234,  234,  649,  234,  234,  234,  234,
      234,  273,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  380,  380,  380,  380,  649,
      649,  649,  649,  649,  649,  649,  380,  380,  380,  380,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      380,  380,  380,  380,  380,  380,  280,  649,  649,  649,
      649,  649,  649,  649,  649,  388,  388,  388,  388,  649,
      649,  649,  649,  649,  649,  649,  388,  388,  388,  388,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      388,  388,  388,  388,  388,  388,  407,  407,  407,  407,
      649,  649,  649,  649,  649,  649,  649,  407,  407,  407,
      407,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      304,  407,  407,  407,  407,  407,  407,  273,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  136,  136,  136,  136,  649,  649,  649,  649,  649,
      649,  649,  136,  136,  136,  136,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  136,  136,  136,  136,
      136,  136,  280,  649,  649,  649,  649,  649,  649,  649,
      649,  143,  143,  143,  143,  649,  649,  649,  649,  649,
      649,  649,  143,  143,  143,  143,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  143,  143,  143,  143,
      143,  143,  179,  179,  179,  179,  649,  649,  649,  649,

      649,  649,  649,  179,  179,  179,  179,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  304,  179,  179,  179,
      179,  179,  179,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  140,  649,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  168,  649,
      649,  649,  168,  168,  649,  649,  649,  168,  168,  168,
      649,  168,  168,  168,  170,  649,  170,  170,  170,  649,
      649,  170,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  184,  649,  649,  649,  184,  184,
      649,  649,  649,  184,  184,  184,  649,  184,  184,  184,
      225,  649,  225,  225,  225,  225,  649,  225,  649,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  229,  229,  229,  229,  649,  649,  649,  229,  229,
      229,  649,  229,  229,  232,  232,  649,  649,  649,  232,
      232,  232,  649,  649,  232,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  234,  234,  234,  234,  649,  649,
      649,  234,  234,  234,  649,  234,  234,  236,  236,  649,
      649,  649,  236,  236,  236,  649,  236,  236,  236,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      240,  240,  649,  649,  649,  240,  240,  240,  649,  240,
      240,  240,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  244,  244,  649,  649,  649,  244,  244,
      244,  649,  244,  244,  244,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  248,  248,  649,  649,
      649,  248,  248,  248,  649,  248,  248,  248,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      255,  255,  649,  649,  649,  255,  255,  255,  649,  255,
      255,  255,  262,  649,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  649,  262,  262,  262,  649,
      262,  262,  262,  262,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  141,  649,

      141,  649,  649,  649,  649,  141,  649,  649,  649,  649,
      649,  649,  141,  649,  649,  141,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      286,  286,  649,  649,  649,  286,  649,  649,  649,  649,
      286,  168,  649,  649,  649,  168,  168,  649,  649,  649,
      168,  168,  168,  649,  168,  168,  168,  170,  170,  170,
      649,  649,  170,  179,  179,  179,  179,  179,  179,  179,

      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  184,  649,  649,
      649,  184,  184,  649,  649,  649,  184,  184,  184,  649,
      184,  184,  184,  225,  649,  225,  225,  225,  225,  649,
      225,  649,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  229,  229,  229,  229,  649,  649,

      649,  229,  229,  229,  649,  229,  229,  232,  232,  649,
      649,  649,  232,  232,  232,  649,  649,  232,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  234,  234,  234,
      234,  649,  649,  649,  234,  234,  234,  649,  234,  234,
      236,  236,  649,  649,  649,  236,  236,  236,  649,  236,
      236,  236,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  649,  237,  649,  649,  649,  649,
      237,  649,  649,  649,  649,  649,  649,  237,  649,  649,

      237,  240,  240,  649,  649,  649,  240,  240,  240,  649,
      240,  240,  240,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  649,  241,  649,  649,  649,
      649,  241,  649,  649,  649,  649,  649,  649,  241,  649,
      649,  241,  244,  244,  649,  649,  649,  244,  244,  244,
      649,  244,  244,  244,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  649,  245,  649,  649,
      649,  649,  245,  649,  649,  649,  649,  649,  649,  245,

      649,  649,  245,  248,  248,  649,  649,  649,  248,  248,
      248,  649,  248,  248,  248,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  649,  249,  649,
      649,  649,  649,  249,  649,  649,  649,  649,  649,  649,
      249,  649,  649,  249,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  649,  252,  649,  649,
      649,  649,  252,  649,  649,  649,  649,  649,  649,  252,
      649,  649,  252,  255,  255,  649,  649,  649,  255,  255,

      255,  649,  255,  255,  255,  370,  370,  649,  649,  649,
      370,  649,  649,  649,  649,  370,  262,  649,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  649,  262,  262,
      262,  262,  262,  649,  262,  262,  262,  262,  372,  372,
      649,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  649,  374,  374,
      374,  374,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  382,  382,  649,  649,  649,
      382,  649,  649,  649,  649,  382,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  286,
      286,  649,  649,  649,  286,  649,  649,  649,  649,  286,
      170,  170,  170,  649,  649,  170,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  184,
      649,  649,  649,  184,  184,  649,  649,  649,  184,  184,
      184,  649,  184,  184,  184,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  461,  461,  649,  649,  649,  461,  649,

      649,  649,  649,  461,  463,  463,  649,  649,  649,  463,
      649,  649,  649,  649,  463,  465,  465,  649,  649,  649,
      465,  649,  649,  649,  649,  465,  467,  467,  649,  649,
      649,  467,  649,  649,  649,  649,  467,  469,  469,  649,
      649,  649,  469,  649,  649,  649,  649,  469,  376,  649,
      376,  649,  649,  649,  649,  376,  649,  649,  649,  649,
      649,  649,  376,  649,  649,  376,  141,  141,  649,  649,
      649,  141,  649,  649,  649,  649,  141,  383,  649,  383,
      649,  649,  649,  649,  383,  649,  649,  649,  649,  649,
      649,  383,  649,  649,  383,  408,  649,  408,  649,  649,

      649,  649,  408,  649,  649,  649,  649,  649,  649,  408,
      649,  649,  408,  237,  237,  649,  649,  649,  237,  649,
      649,  649,  649,  237,  241,  241,  649,  649,  649,  241,
      649,  649,  649,  649,  241,  245,  245,  649,  649,  649,
      245,  649,  649,  649,  649,  245,  249,  249,  649,  649,
      649,  249,  649,  649,  649,  649,  249,  252,  252,  649,
      649,  649,  252,  649,  649,  649,  649,  252,  533,  533,
      649,  649,  649,  533,  649,  649,  649,  649,  533,  535,
      535,  649,  649,  649,  535,  649,  649,  649,  649,  535,
      549,  549,  649,  649,  649,  549,  649,  649,  649,  649,

      549,  376,  376,  649,  649,  649,  376,  649,  649,  649,
      649,  376,  383,  383,  649,  649,  649,  383,  649,  649,
      649,  649,  383,  408,  408,  649,  649,  649,  408,  649,
      649,  649,  649,  408,   29,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649
    } ;

static yyconst short int yy_chk[3614] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        5,    5,    6,    6,    7,    7,    8,    8,  647,    3,
        4,    7,   42,    8,    3,    4,   47,   42,   47,   47,

       47,    7,  645,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   15,   15,
       25,   25,  155,  155,   26,   26,   53,   34,   44,   38,
       44,   44,   44,   44,  172,  644,  172,   62,   25,   25,
       25,   25,   26,   26,   26,   26,  220,   15,   15,   15,
       15,   15,   15,   15,   15,   41,   41,   41,   38,   46,
       15,   34,   57,   52,   63,   55,   46,   52,   46,   46,
       60,   41,   53,   41,   41,   41,   41,   48,   53,   56,

       48,   48,   41,   43,   62,   43,   43,   43,   43,  220,
      186,   25,   15,   16,   16,   26,   38,   43,   55,   34,
       67,   52,   63,   43,   58,   55,   57,   60,   57,   55,
       51,   43,   55,   59,   63,   61,   56,   60,   57,   68,
       56,  136,   16,   16,   16,   16,   16,   16,   16,   16,
       64,   51,   51,   43,   51,   16,   51,   58,   65,   51,
       67,   58,  186,   51,  126,   58,   51,   67,   51,   66,
       67,   59,   61,  174,   58,  136,  107,   58,   59,   59,
      107,  174,   61,   64,  643,   68,  112,   16,   17,   17,
      112,   65,  185,  126,  189,   65,   69,   69,   69,   69,

       64,  642,  216,  204,   66,   90,   66,   90,   90,   90,
       90,  117,   66,  136,  188,  117,  143,   17,   17,   17,
       17,   17,   17,   17,   17,  122,   66,  189,  185,  122,
       17,  131,  131,  131,  132,  132,  132,  132,  133,  133,
      133,  133,  175,  131,  176,  143,  216,  134,  175,  131,
      176,  187,  142,  142,  142,  190,  292,  131,  134,  204,
      193,  188,   17,   18,   18,  134,  292,  134,  134,  640,
      142,  149,  149,  149,  149,  191,  194,  639,  195,  131,
      134,  134,  153,  143,  153,  153,  153,  153,  147,  147,
      147,  206,   18,   18,   18,   18,   18,   18,   18,   18,

      142,  190,  187,  187,  192,   18,  147,  147,  147,  147,
      191,  193,  194,  191,  152,  147,  152,  152,  152,  152,
      154,  196,  154,  154,  154,  154,  195,  197,  157,  152,
      157,  157,  157,  157,  202,  198,  199,   18,   19,   19,
      179,  200,  205,  206,  179,  152,  208,  211,  207,  210,
      213,  221,  214,  212,  217,  192,  218,  219,  192,  215,
      197,  269,  196,  323,  222,  196,  307,   19,   19,   19,
       19,   19,   19,   19,   19,  237,  269,  205,  179,  237,
       19,  198,  202,  199,  207,  305,  210,  200,  637,  205,
      212,  213,  215,  252,  219,  217,  323,  211,  208,  241,

      212,  214,  218,  241,  221,  222,  636,  219,  221,  238,
      238,  238,   19,   20,   20,  224,  307,  224,  224,  224,
      224,  231,  252,  231,  231,  231,  231,  238,  245,  256,
      256,  256,  245,  242,  242,  242,  223,  305,  223,  223,
      223,  223,   20,   20,   20,   20,   20,   20,   20,   20,
      223,  242,  246,  246,  246,   20,  223,  238,  249,  250,
      250,  250,  249,  309,  223,  254,  254,  254,  257,  257,
      246,  259,  259,  259,  259,  262,  344,  250,  260,  260,
      260,  242,  270,  254,  285,  285,  223,   20,   21,   21,
      260,  261,  261,  261,  261,  408,  260,  262,  309,  408,

      246,  369,  369,  264,  260,  265,  635,  250,  262,  262,
      267,  277,  277,  254,  344,  634,  270,   21,   21,   21,
       21,   21,   21,   21,   21,  264,  260,  265,  308,  311,
       21,  271,  267,  274,  274,  274,  264,  264,  265,  265,
      277,  278,  302,  267,  267,  271,  271,  271,  310,  312,
      278,  278,  278,  283,  283,  283,  283,  284,  284,  284,
      284,  314,   21,   22,   22,  308,  283,  300,  300,  300,
      302,  313,  317,  319,  302,  320,  321,  322,  324,  325,
      311,  327,  283,  330,  331,  312,  339,  333,  345,  310,
      332,  300,   22,   22,   22,   22,   22,   22,   22,   22,

      337,  338,  314,  342,  341,   22,  340,  343,  348,  317,
      284,  347,  349,  350,  325,  313,  330,  352,  632,  320,
      319,  374,  374,  324,  333,  376,  330,  321,  327,  322,
      332,  409,  331,  631,  339,  409,  345,   22,   23,   23,
      478,  340,  340,  478,  337,  348,  383,   23,  630,  349,
      350,  385,  338,  343,  340,  341,  342,  347,  354,  376,
      354,  354,  354,  354,  359,  359,  359,  629,  355,  352,
      355,  355,  355,  355,  356,  383,  356,  356,  356,  356,
      385,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,  353,  353,  353,  353,
      361,  361,  361,   23,   24,   24,  363,  363,  363,  353,
      365,  365,  365,   24,  367,  367,  367,  379,  381,  381,
      381,  391,  391,  391,  391,  353,  378,  378,  378,  387,
      628,  379,  379,  379,  375,  460,  460,  460,  387,  387,
      387,  627,  413,  626,  378,  625,  624,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  375,  416,  378,  392,  392,  392,  392,   24,
       89,   89,  413,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,  386,  386,  386,  417,
      406,  406,  406,   89,   89,   89,   89,   89,   89,   89,
      420,  428,  623,  416,  386,  443,  430,  622,   89,   89,
       89,   89,  621,   89,  406,  418,  433,  410,  410,  410,
      426,  421,  620,  618,  417,  436,  617,  616,  434,  442,
      462,  462,  462,  420,  386,  410,  450,  615,  428,   89,
       89,   89,  443,   89,   89,   89,   89,   89,  102,  102,
      430,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  424,  410,  418,  421,  433,  436,
      426,  102,  102,  102,  102,  102,  102,  102,  434,  444,

      442,  455,  450,  448,  497,  614,  102,  102,  102,  102,
      456,  102,  449,  464,  464,  464,  466,  466,  466,  424,
      468,  468,  468,  503,  509,  424,  471,  471,  471,  490,
      494,  424,  444,  498,  455,  500,  501,  102,  102,  102,
      448,  102,  102,  102,  102,  102,  138,  473,  473,  473,
      138,  138,  507,  449,  497,  502,  456,  488,  488,  488,
      138,  138,  138,  510,  515,  550,  490,  494,  500,  516,
      498,  509,  517,  523,  501,  503,  522,  561,  138,  554,
      138,  527,  556,  567,  138,  138,  138,  532,  532,  532,
      138,  608,  562,  502,  570,  605,  507,  604,  138,  569,

      587,  515,  138,  603,  138,  602,  138,  601,  138,  145,
      523,  550,  598,  145,  145,  510,  554,  527,  597,  516,
      567,  596,  517,  145,  145,  145,  522,  534,  534,  534,
      548,  548,  548,  556,  561,  592,  569,  587,  591,  585,
      583,  145,  562,  145,  570,  581,  580,  145,  145,  145,
      579,  576,  575,  145,  573,  571,  566,  565,  563,  559,
      558,  145,  557,  555,  552,  145,  546,  145,  545,  145,
      544,  145,  180,  543,  542,  541,  180,  180,  539,  538,
      536,  531,  528,  521,  511,  505,  180,  180,  180,  495,
      493,  487,  486,  485,  484,  483,  481,  480,  479,  477,

      475,  470,  459,  457,  180,  454,  180,  452,  451,  447,
      180,  180,  180,  446,  445,  440,  180,  439,  438,  437,
      431,  429,  427,  419,  180,  415,  414,  411,  180,  405,
      180,  404,  180,  403,  180,  230,  230,  402,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  401,  400,  399,  398,  397,  396,  395,  230,  230,
      230,  230,  230,  230,  230,  394,  393,  384,  373,  372,
      358,  357,  351,  230,  230,  230,  230,  346,  230,  334,
      329,  318,  316,  315,  304,  299,  298,  297,  296,  295,
      294,  293,  291,  290,  289,  288,  282,  280,  268,  266,

      234,  233,  229,  228,  230,  230,  230,  209,  230,  230,
      230,  230,  230,  235,  235,  203,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  201,
      184,  182,  181,  178,  177,  173,  235,  235,  235,  235,
      235,  235,  235,  171,  168,  163,  158,  148,  146,  144,
      139,  235,  235,  235,  235,  101,  235,   88,   83,   75,
       74,   54,   50,   49,   45,   37,   33,   29,   28,   27,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  235,  235,  235,    0,  235,  235,  235,  235,
      235,  272,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  272,  272,  272,  272,    0,
        0,    0,    0,    0,    0,    0,  272,  272,  272,  272,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      272,  272,  272,  272,  272,  272,  279,    0,    0,    0,
        0,    0,    0,    0,    0,  279,  279,  279,  279,    0,
        0,    0,    0,    0,    0,    0,  279,  279,  279,  279,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      279,  279,  279,  279,  279,  279,  301,  301,  301,  301,
        0,    0,    0,    0,    0,    0,    0,  301,  301,  301,
      301,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      301,  301,  301,  301,  301,  301,  301,  380,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  380,  380,  380,  380,    0,    0,    0,    0,    0,
        0,    0,  380,  380,  380,  380,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  380,  380,  380,  380,
      380,  380,  388,    0,    0,    0,    0,    0,    0,    0,
        0,  388,  388,  388,  388,    0,    0,    0,    0,    0,
        0,    0,  388,  388,  388,  388,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  388,  388,  388,  388,
      388,  388,  407,  407,  407,  407,    0,    0,    0,    0,

        0,    0,    0,  407,  407,  407,  407,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  407,  407,  407,  407,
      407,  407,  407,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,

      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  660,    0,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  662,  662,  663,    0,
        0,    0,  663,  663,    0,    0,    0,  663,  663,  663,
        0,  663,  663,  663,  664,    0,  664,  664,  664,    0,
        0,  664,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  666,    0,    0,    0,  666,  666,
        0,    0,    0,  666,  666,  666,    0,  666,  666,  666,
      667,    0,  667,  667,  667,  667,    0,  667,    0,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  668,  668,  668,  668,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  669,  669,  669,  669,    0,    0,    0,  669,  669,
      669,    0,  669,  669,  670,  670,    0,    0,    0,  670,
      670,  670,    0,    0,  670,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  672,  672,  672,  672,    0,    0,
        0,  672,  672,  672,    0,  672,  672,  673,  673,    0,
        0,    0,  673,  673,  673,    0,  673,  673,  673,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      675,  675,    0,    0,    0,  675,  675,  675,    0,  675,
      675,  675,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  677,  677,    0,    0,    0,  677,  677,
      677,    0,  677,  677,  677,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  679,  679,    0,    0,
        0,  679,  679,  679,    0,  679,  679,  679,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      682,  682,    0,    0,    0,  682,  682,  682,    0,  682,
      682,  682,  683,    0,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,    0,  683,  683,  683,    0,
      683,  683,  683,  683,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  686,    0,

      686,    0,    0,    0,    0,  686,    0,    0,    0,    0,
        0,    0,  686,    0,    0,  686,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      689,  689,    0,    0,    0,  689,    0,    0,    0,    0,
      689,  690,    0,    0,    0,  690,  690,    0,    0,    0,
      690,  690,  690,    0,  690,  690,  690,  691,  691,  691,
        0,    0,  691,  692,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  694,    0,    0,
        0,  694,  694,    0,    0,    0,  694,  694,  694,    0,
      694,  694,  694,  695,    0,  695,  695,  695,  695,    0,
      695,    0,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  697,  697,  697,  697,    0,    0,

        0,  697,  697,  697,    0,  697,  697,  698,  698,    0,
        0,    0,  698,  698,  698,    0,    0,  698,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  700,  700,  700,
      700,    0,    0,    0,  700,  700,  700,    0,  700,  700,
      701,  701,    0,    0,    0,  701,  701,  701,    0,  701,
      701,  701,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  703,    0,  703,    0,    0,    0,    0,
      703,    0,    0,    0,    0,    0,    0,  703,    0,    0,

      703,  704,  704,    0,    0,    0,  704,  704,  704,    0,
      704,  704,  704,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  706,    0,  706,    0,    0,    0,
        0,  706,    0,    0,    0,    0,    0,    0,  706,    0,
        0,  706,  707,  707,    0,    0,    0,  707,  707,  707,
        0,  707,  707,  707,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  709,    0,  709,    0,    0,
        0,    0,  709,    0,    0,    0,    0,    0,    0,  709,

        0,    0,  709,  710,  710,    0,    0,    0,  710,  710,
      710,    0,  710,  710,  710,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  712,    0,  712,    0,
        0,    0,    0,  712,    0,    0,    0,    0,    0,    0,
      712,    0,    0,  712,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  714,    0,  714,    0,    0,
        0,    0,  714,    0,    0,    0,    0,    0,    0,  714,
        0,    0,  714,  715,  715,    0,    0,    0,  715,  715,

      715,    0,  715,  715,  715,  716,  716,    0,    0,    0,
      716,    0,    0,    0,    0,  716,  717,    0,  717,  717,
      717,  717,  717,  717,  717,  717,  717,    0,  717,  717,
      717,  717,  717,    0,  717,  717,  717,  717,  718,  718,
        0,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,    0,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,

      720,  720,  720,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  722,  722,    0,    0,    0,
      722,    0,    0,    0,    0,  722,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  725,
      725,    0,    0,    0,  725,    0,    0,    0,    0,  725,
      726,  726,  726,    0,    0,  726,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  729,
        0,    0,    0,  729,  729,    0,    0,    0,  729,  729,
      729,    0,  729,  729,  729,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  732,  732,    0,    0,    0,  732,    0,

        0,    0,    0,  732,  733,  733,    0,    0,    0,  733,
        0,    0,    0,    0,  733,  734,  734,    0,    0,    0,
      734,    0,    0,    0,    0,  734,  735,  735,    0,    0,
        0,  735,    0,    0,    0,    0,  735,  736,  736,    0,
        0,    0,  736,    0,    0,    0,    0,  736,  737,    0,
      737,    0,    0,    0,    0,  737,    0,    0,    0,    0,
        0,    0,  737,    0,    0,  737,  738,  738,    0,    0,
        0,  738,    0,    0,    0,    0,  738,  739,    0,  739,
        0,    0,    0,    0,  739,    0,    0,    0,    0,    0,
        0,  739,    0,    0,  739,  740,    0,  740,    0,    0,

        0,    0,  740,    0,    0,    0,    0,    0,    0,  740,
        0,    0,  740,  741,  741,    0,    0,    0,  741,    0,
        0,    0,    0,  741,  742,  742,    0,    0,    0,  742,
        0,    0,    0,    0,  742,  743,  743,    0,    0,    0,
      743,    0,    0,    0,    0,  743,  744,  744,    0,    0,
        0,  744,    0,    0,    0,    0,  744,  745,  745,    0,
        0,    0,  745,    0,    0,    0,    0,  745,  746,  746,
        0,    0,    0,  746,    0,    0,    0,    0,  746,  747,
      747,    0,    0,    0,  747,    0,    0,    0,    0,  747,
      748,  748,    0,    0,    0,  748,    0,    0,    0,    0,

      748,  749,  749,    0,    0,    0,  749,    0,    0,    0,
        0,  749,  750,  750,    0,    0,    0,  750,    0,    0,
        0,    0,  750,  751,  751,    0,    0,    0,  751,    0,
        0,    0,    0,  751,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*
 *  Authors:
 *    Martin Henz <henz@iscs.nus.sg>
 *    Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 *  Copyright:
 *    Martin Henz and Leif Kornstaedt, 1996-1999
 *
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 *
 *  This file is part of Mozart, an implementation of Oz 3:
 *    http://www.mozart-oz.org
 *
 *  See the file "LICENSE" or
 *    http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */
#include <string.h>
#include <sys/stat.h>

#if !defined(__MINGW32__) && !defined(_MSC_VER)
#include <pwd.h>
#endif

#include "conf.h"
#include "base.hh"
#include "os.hh"
#include "dictionary.hh"
#include "am.hh"

#include "parser.hh"

void xyreportError(char *kind, char *message,
                   const char *file, int line, int column);
void xy_setScannerPrefix();
void xy_setParserExpect();

char xyFileName[100];
char xyhelpFileName[100];
OZ_Term xyFileNameAtom;

int xy_gumpSyntax, xy_allowDeprecated;
OZ_Term xy_errorMessages;

static int errorFlag;


//*******************
// THE INPUT ROUTINE
//*******************

int xylino;                             // current line number
char *xylastline;                       // remember where we have put the input

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size)   xy_input(buf, result, max_size)

static void xy_input(char *buf, int &result, const int max_size) {
  xylastline = buf;

  // read one line into buf
  int curpos = 0;
  int c = fgetc(xyin);
  while(curpos < max_size && c != EOF && c != OZEOF && c != '\n') {
    buf[curpos++] = c;
    if (curpos < max_size)
      c = fgetc(xyin);
  }

  if (c == EOF || c == OZEOF) {
    if (curpos > 0)   // did we read other chars than EOF?
      result = curpos;
    else
      result = YY_NULL;
  } else {
    if (curpos < max_size)
      buf[curpos++] = c;
    result = curpos;
  }
}


//****************
// OUTPUT OF FLEX
//****************

#undef YY_DECL
#define YY_DECL static int xymylex()


//*************************
// CONDITIONAL COMPILATION
// uses a stack of flags;
// \ifdef and \ifndef push
// \else toggles top
// \endif pops.
//*************************

static OzDictionary *defines;

#define CONDITIONALMAXDEPTH 1000

static int conditional[CONDITIONALMAXDEPTH];
static int conditional_p;       // points to top of stack
static int conditional_basep;   // points to bottom of stack

static void push_cond(int flag) {
  if (conditional_p < CONDITIONALMAXDEPTH - 1)
    conditional[++conditional_p] = flag;
  else
    xyreportError("macro directive limitation",
                  "conditionals nested too deep",
                  xyFileName,xylino,xycharno());
}

static void pop_cond() {
  if (conditional_p > conditional_basep)
    conditional_p--;
  else
    xyreportError("macro directive error",
                  "\\endif without previous corresponding \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
}

static void toggle_cond() {
  if (conditional_p > conditional_basep) {
    // toggle top of flag stack
    if (conditional[conditional_p])
      conditional[conditional_p] = 0;
    else
      conditional[conditional_p] = 1;
  } else
    xyreportError("macro directive error",
                  "\\else without previous corresponding \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
}

static int get_cond() {
  int i = conditional_p;
  while (i > conditional_basep)
    if (!conditional[i--])
      return 0;
  return 1;
}


//***********************
// STACK OF FILE ENTRIES
// for \insert
//***********************

class XyFileEntry {
public:
  YY_BUFFER_STATE buffer;
  OZ_Term fileNameAtom;
  int lino;
  int conditional_basep;
  XyFileEntry *previous;

  XyFileEntry(YY_BUFFER_STATE b, OZ_Term f, int l, int c, XyFileEntry *p):
      buffer(b), fileNameAtom(f), lino(l), conditional_basep(c), previous(p) {}
};

static XyFileEntry *bufferStack;

static void push_insert(FILE *filep, char *fileName) {
  bufferStack = new XyFileEntry(YY_CURRENT_BUFFER, xyFileNameAtom, xylino,
                                conditional_basep, bufferStack);
  strncpy(xyFileName, fileName, 99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(fileName);
  xyin = filep;
  BEGIN(INITIAL);
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  xylino = 1;
  conditional_basep = conditional_p;
}

static int pop_insert() {
  if (conditional_p > conditional_basep)
    xyreportError("macro directive error",
                  "unterminated \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
  errorFlag = 0;
  if (bufferStack != NULL) {
    fclose(xyin);
    xy_switch_to_buffer(bufferStack->buffer);
    xyFileNameAtom = bufferStack->fileNameAtom;
    const char *fileName = OZ_atomToC(xyFileNameAtom);
    strncpy(xyFileName, fileName, 99);
    xyFileName[99] = '\0';
    xylino = bufferStack->lino;
    conditional_basep = bufferStack->conditional_basep;
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
    return 0;
  } else
    return 1;
}


//**********
// COMMENTS
//**********

static int commentdepth;
static OZ_Term commentfile;
static int commentlino;
static int commentoffset;
static int commentlastmode;


//*********************
// FILE NAME EXPANSION
//*********************

static char *getHomeUser(char *user) {
#ifdef WINDOWS
  return NULL;
#else
  struct passwd *pwentry = getpwnam(user);
  return pwentry != NULL? pwentry->pw_dir: (char *) NULL;
#endif
}

static int isReadableFile(char *file) {
  struct stat buf;

  if (access(file, F_OK) < 0 || stat(file, &buf) < 0)
    return 0;

  return !S_ISDIR(buf.st_mode);
}

static char *checkAccess(char *file) {
  char *ret = new char[strlen(file) + 1 + 3];

  strcpy(ret, file);
  if (isReadableFile(ret))
    return ret;

  strcat(ret, ".oz");
  if (isReadableFile(ret))
    return ret;

  delete[] ret;
  return NULL;
}

static char *scExpndFileName(char *fileName, char *curfile) {
  // full pathname given?
  if (fileName[0] == '/' ||
#ifdef WINDOWS
      fileName[1] == ':' ||   // good old DOS filename like E:...
#endif
      !strncmp(fileName, "./", 2))
    return checkAccess(fileName);

  // expand "~"
  if (fileName[0] == '~') {
    char *userhome;
    int len = 0;
    if (fileName[1] == '/') {
      userhome = getenv("HOME");
      len = 2;
    } else {
      char *rest = strchr(fileName, '/');
      if (rest == NULL)
        userhome = NULL;
      else {
        len = (rest + 1) - fileName;
        rest[0] = '\0';
        userhome = getHomeUser(&fileName[1]);
        rest[0] = '/';
      }
    }
    if (userhome == NULL)
      return NULL;

    char *help = new char[strlen(userhome) + 1 + strlen(&fileName[len]) + 1];
    sprintf(help, "%s/%s", userhome, &fileName[len]);
    char *ret = checkAccess(help);
    delete[] help;

    return ret;
  }

  // search in "current" directory
  if (curfile != NULL) {
    int i = strlen(curfile);
    while (i != 0 && curfile[i - 1] != '/')   // i. e., the dir part of curfile
      i--;
    if (i != 0) {
      char *help = new char[i + strlen(fileName) + 1];
      strncpy(help, curfile, i);
      strcpy(&help[i], fileName);
      char *ret = checkAccess(help);
      delete[] help;

      if (ret != NULL)
        return ret;
    }
  }

  // search in OZPATH
  char *path = getenv("OZPATH");
  if (path == NULL)
    path = ".";

  while (path[0] != '\0') {
    int i;
    for (i = 0; path[i] != PathSeparator && path[i] != '\0'; i++);
    char *help = new char[i + 1 + strlen(fileName) + 1];
    strncpy(help, path, i);
    help[i] = '/';
    strcpy(&help[i + 1], fileName);
    char *ret = checkAccess(help);
    delete[] help;
    if (ret != NULL)
      return ret;
    if (path[i] == '\0')
      break;
    path = &path[i + 1];
  }

  return NULL;
}


//***************************
// TREATING STRINGS AND SUCH
//***************************

static void stripDot() {
  int i, j;
  for (i = 0; xytext[i] < '0' || xytext[i] > '9'; i++)
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
  for (j = 0; xytext[i] != '\0'; xytext[j++] = xytext[i++]);
  xytext[j] = '\0';
}

static void strip(char c) {
  if (xytext[0] == c) {
    int i = 1;
    while (xytext[i] != '\0') {
      xytext[i - 1] = xytext[i];
      i++;
    }
    xytext[i - 2] = '\0';
  }
}

static void stripRegex() {
  int i = 1;
  while (xytext[i] != '\0') {
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
    xytext[i - 1] = xytext[i];
    i++;
  }
  xytext[i - 2] = '\0';
}

static void transBody(char c, char *text, int &i, int &j) {
  int jstart = j;
  while (text[j] != c) {
    if (text[j] == '\n')
      xylino++;
    if (text[j] == '\\') {
      j++;
      switch (text[j]) {
      case 'a':
        text[i] = '\a';
        break;
      case 'b':
        text[i] = '\b';
        break;
      case 'f':
        text[i] = '\f';
        break;
      case 'n':
        text[i] = '\n';
        break;
      case 'r':
        text[i] = '\r';
        break;
      case 't':
        text[i] = '\t';
        break;
      case 'v':
        text[i] = '\v';
        break;
      case 'x':
      case 'X':
        { char hexstring[3];
          hexstring[0] = text[++j];
          hexstring[1] = text[++j];
          hexstring[2] = '\0';
          int hexnum = (int) strtol(hexstring, NULL, 16);
          if (hexnum == 0 && get_cond())
            xyreportError("lexical error",
                          "character in hexadecimal notation =< 0",
                          xyFileName,xylino,xycharno() + (j - jstart));
          text[i] = hexnum;
        }
        break;
      case '\\':
      case '`':
      case '\"':
      case '\'':
      case '&':
        text[i] = text[j];
        break;
      default:
        { char octstring[4];
          octstring[0] = text[j++];
          octstring[1] = text[j++];
          octstring[2] = text[j];
          octstring[3] = '\0';
          int octnum = (int) strtol(octstring, NULL, 8);
          if ((octnum == 0 || octnum > 255) && get_cond())
            xyreportError("lexical error",
                          "character in octal notation =< 0 or >= 256",
                          xyFileName,xylino,xycharno() + (j - jstart));
          text[i] = octnum & 0xFF;
        }
      }
    } else
      text[i] = text[j];
    i++;
    j++;
  }
}

static void stripTrans(char c) {
  if (xytext[0] == c) {
    int i = 0;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i] = '\0';
  }
}

static void trans(char c) {
  if (xytext[0] == c) {
    int i = 1;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i++] = c;
    xytext[i] = '\0';
  }
}

#define COMMENT 1

#define IGNOREDIRECTIVE 2
#define DIRECTIVE 3

#define LINE 4
#define SWITCHDIR 5
#define INSERT 6
#define DEFINE 7
#define IFDEF 8
#define IFNDEF 9
#define UNDEF 10

#define SCANNERPREFIX 11
#define PARSEREXPECT 12

#define LEX 13


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
        if ( yy_current_buffer->yy_is_interactive ) \
                { \
                int c = '*', n; \
                for ( n = 0; n < max_size && \
                             (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
                        buf[n] = (char) c; \
                if ( c == '\n' ) \
                        buf[n++] = (char) c; \
                if ( c == EOF && ferror( yyin ) ) \
                        YY_FATAL_ERROR( "input in flex scanner failed" ); \
                result = n; \
                } \
        else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
                  && ferror( yyin ) ) \
                YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
        YY_USER_ACTION

YY_DECL
        {
        register yy_state_type yy_current_state;
        register char *yy_cp, *yy_bp;
        register int yy_act;




        if ( yy_init )
                {
                yy_init = 0;

#ifdef YY_USER_INIT
                YY_USER_INIT;
#endif

                if ( ! yy_start )
                        yy_start = 1;   /* first start state */

                if ( ! yyin )
                        yyin = stdin;

                if ( ! yyout )
                        yyout = stdout;

                if ( ! yy_current_buffer )
                        yy_current_buffer =
                                yy_create_buffer( yyin, YY_BUF_SIZE );

                yy_load_buffer_state();
                }

        while ( 1 )             /* loops until end-of-file is reached */
                {
                yy_cp = yy_c_buf_p;

                /* Support of yytext. */
                *yy_cp = yy_hold_char;

                /* yy_bp points to the position in yy_ch_buf of the start of
                 * the current run.
                 */
                yy_bp = yy_cp;

                yy_current_state = yy_start;
yy_match:
                do
                        {
                        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
                        if ( yy_accept[yy_current_state] )
                                {
                                yy_last_accepting_state = yy_current_state;
                                yy_last_accepting_cpos = yy_cp;
                                }
                        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                                {
                                yy_current_state = (int) yy_def[yy_current_state];
                                if ( yy_current_state >= 650 )
                                        yy_c = yy_meta[(unsigned int) yy_c];
                                }
                        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                        ++yy_cp;
                        }
                while ( yy_base[yy_current_state] != 3535 );

yy_find_action:
                yy_act = yy_accept[yy_current_state];
                if ( yy_act == 0 )
                        { /* have to back up */
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        yy_act = yy_accept[yy_current_state];
                        }

                YY_DO_BEFORE_ACTION;


do_action:      /* This label is used only to access EOF actions. */


                switch ( yy_act )
        { /* beginning of action switch */
                        case 0: /* must back up */
                        /* undo the effects of YY_DO_BEFORE_ACTION */
                        *yy_cp = yy_hold_char;
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        goto yy_find_action;

case 1:
YY_RULE_SETUP
;
        YY_BREAK
case 2:
YY_RULE_SETUP
{ commentdepth = 1;
                                 commentfile = xyFileNameAtom;
                                 commentlino = xylino;
                                 commentoffset = xycharno();
                                 commentlastmode = YYSTATE;
                                 BEGIN(COMMENT);
                               }
        YY_BREAK
case 3:
YY_RULE_SETUP
{ commentdepth++; }
        YY_BREAK
case 4:
YY_RULE_SETUP
{ if (--commentdepth == 0)
                                   BEGIN(commentlastmode);
                               }
        YY_BREAK
case 5:
YY_RULE_SETUP
;
        YY_BREAK
case 6:
YY_RULE_SETUP
{ xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case 7:
YY_RULE_SETUP
;
        YY_BREAK
case YY_STATE_EOF(COMMENT):
{ if (get_cond()) {
                                   const char *file = OZ_atomToC(commentfile);
                                   xyreportError("lexical error",
                                                 "unterminated comment",
                                                 file,commentlino,commentoffset);
                                 }
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK
case 8:
YY_RULE_SETUP
{ BEGIN(SWITCHDIR); return T_SWITCH; }
        YY_BREAK
case 9:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_PUSHSWITCHES; }
        YY_BREAK
case 10:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_POPSWITCHES; }
        YY_BREAK
case 11:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_LOCALSWITCHES; }
        YY_BREAK
case 12:
YY_RULE_SETUP
{ if (get_cond()) BEGIN(LINE); }
        YY_BREAK
case 13:
YY_RULE_SETUP
{ BEGIN(INSERT); }
        YY_BREAK
case 14:
YY_RULE_SETUP
{ BEGIN(DEFINE); }
        YY_BREAK
case 15:
YY_RULE_SETUP
{ BEGIN(UNDEF); }
        YY_BREAK
case 16:
YY_RULE_SETUP
{ BEGIN(IFDEF); }
        YY_BREAK
case 17:
YY_RULE_SETUP
{ BEGIN(IFNDEF); }
        YY_BREAK
case 18:
YY_RULE_SETUP
{ toggle_cond();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 19:
YY_RULE_SETUP
{ pop_cond();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 20:
YY_RULE_SETUP
{ BEGIN(SCANNERPREFIX); }
        YY_BREAK
case 21:
YY_RULE_SETUP
{ BEGIN(PARSEREXPECT); }
        YY_BREAK

case 22:
YY_RULE_SETUP
;
        YY_BREAK
case 23:
YY_RULE_SETUP
;
        YY_BREAK
case 24:
YY_RULE_SETUP
{ BEGIN(INITIAL);
                                 xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case YY_STATE_EOF(IGNOREDIRECTIVE):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 25:
YY_RULE_SETUP
;
        YY_BREAK
case 26:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 27:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(DIRECTIVE):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 28:
YY_RULE_SETUP
{ xylino = atol(xytext) - 1; }
        YY_BREAK
case 29:
YY_RULE_SETUP
{ strip('\'');
                                 char *fullname = scExpndFileName(xytext,xyFileName);
                                 if (fullname != NULL) {
                                   strncpy(xyFileName, fullname, 99);
                                   delete[] fullname;
                                 } else
                                   strncpy(xyFileName, xytext, 99);
                                 xyFileName[99] = '\0';
                                 xyFileNameAtom = OZ_atom(xyFileName);
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 30:
YY_RULE_SETUP
;
        YY_BREAK
case 31:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 32:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(LINE):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 33:
YY_RULE_SETUP
{ return '+'; }
        YY_BREAK
case 34:
YY_RULE_SETUP
{ return '-'; }
        YY_BREAK
case 35:
YY_RULE_SETUP
{ return T_SWITCHNAME; }
        YY_BREAK
case 36:
YY_RULE_SETUP
;
        YY_BREAK
case 37:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 38:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(SWITCHDIR):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 39:
YY_RULE_SETUP
{ if (get_cond()) {
                                   strip('\'');
                                   char *fullname = scExpndFileName(xytext,xyFileName);
                                   if (fullname != NULL) {
                                     OZ_Term coord =
                                       OZ_mkTupleC("pos",3,xyFileNameAtom,
                                                   OZ_int(xylino),
                                                   OZ_int(xycharno()));
                                     xy_errorMessages =
                                       oz_cons(OZ_mkTupleC("logInsert",2,
                                                           OZ_atom(fullname),
                                                           coord),
                                               xy_errorMessages);
                                     FILE *filep = fopen(fullname, "r");
                                     push_insert(filep, fullname);
                                     delete[] fullname;
                                     BEGIN(INITIAL);
                                   } else {
                                     const char *s =
                                       "could not open file `";
                                     char *f = new char[strlen(s) + 1 +
                                                        strlen(xytext) + 2];
                                     strcpy(f,s);
                                     strcat(f,xytext);
                                     strcat(f,"'");
                                     xyreportError("macro directive error",f,
                                                   xyFileName,xylino,xycharno());
                                     delete[] f;
                                     BEGIN(DIRECTIVE);
                                   }
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 40:
YY_RULE_SETUP
;
        YY_BREAK
case 41:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 42:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(INSERT):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 43:
YY_RULE_SETUP
{ if (get_cond()) {
                                   trans('`');
                                   OZ_Term key = OZ_atom(xytext);
                                   defines->setArg(key, NameTrue);
                                   BEGIN(DIRECTIVE);
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 44:
YY_RULE_SETUP
;
        YY_BREAK
case 45:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 46:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(DEFINE):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 47:
YY_RULE_SETUP
{ if (get_cond()) {
                                   trans('`');
                                   defines->remove(OZ_atom(xytext));
                                   BEGIN(DIRECTIVE);
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 48:
YY_RULE_SETUP
;
        YY_BREAK
case 49:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 50:
YY_RULE_SETUP
{ if (errorFlag)
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(UNDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 51:
YY_RULE_SETUP
{ trans('`');
                                 OZ_Term key = OZ_atom(xytext);
                                 push_cond(OZ_isTrue(defines->member(key)));
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 52:
YY_RULE_SETUP
;
        YY_BREAK
case 53:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 54:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(IFDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 55:
YY_RULE_SETUP
{ trans('`');
                                 OZ_Term key = OZ_atom(xytext);
                                 push_cond(!OZ_isTrue(defines->member(key)));
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 56:
YY_RULE_SETUP
;
        YY_BREAK
case 57:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 58:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(IFNDEF):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 59:
YY_RULE_SETUP
{ stripTrans('\'');
                                 xy_setScannerPrefix();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 60:
YY_RULE_SETUP
;
        YY_BREAK
case 61:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 62:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(SCANNERPREFIX):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK


case 63:
YY_RULE_SETUP
{ xy_setParserExpect();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 64:
YY_RULE_SETUP
;
        YY_BREAK
case 65:
YY_RULE_SETUP
{ errorFlag = 1; }
        YY_BREAK
case 66:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(PARSEREXPECT):
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK

case 67:
YY_RULE_SETUP
{ BEGIN(INITIAL); return T_REGEX; }
        YY_BREAK
case 68:
YY_RULE_SETUP
{ BEGIN(INITIAL); stripRegex(); return T_REGEX; }
        YY_BREAK
case 69:
YY_RULE_SETUP
{ return T_CHOICE; }
        YY_BREAK
case 70:
YY_RULE_SETUP
{ return T_LDOTS; }
        YY_BREAK
case 71:
YY_RULE_SETUP
{ return T_OOASSIGN; }
        YY_BREAK
case 72:
YY_RULE_SETUP
{ return T_DEFAULT; }
        YY_BREAK
case 73:
YY_RULE_SETUP
{ return T_REDUCE; }
        YY_BREAK
case 74:
YY_RULE_SETUP
{ return T_DEREFF; }
        YY_BREAK
case 75:
YY_RULE_SETUP
{ return T_SEP; }
        YY_BREAK
case 76:
YY_RULE_SETUP
{ return T_ADD; }
        YY_BREAK
case 77:
YY_RULE_SETUP
{ return T_FDMUL; }
        YY_BREAK
case 78:
YY_RULE_SETUP
{ return T_OTHERMUL; }
        YY_BREAK
case 79:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OTHERMUL; }
        YY_BREAK
case 80:
YY_RULE_SETUP
{ return T_COMPARE; }
        YY_BREAK
case 81:
YY_RULE_SETUP
{ return T_FDIN; }
        YY_BREAK
case 82:
YY_RULE_SETUP
{ return T_FDCOMPARE; }
        YY_BREAK
case 83:
YY_RULE_SETUP
{ return T_LMACRO; }
        YY_BREAK
case 84:
YY_RULE_SETUP
{ return T_RMACRO; }
        YY_BREAK
case 85:
YY_RULE_SETUP
{ // Hack to avoid strange parsing of X.1.1:
                                 // If "." is followed by integer, then
                                 // a special token is returned.
                                 // If this rule would not be there, the
                                 // resulting tokens would be "X" "." "1.1",
                                 // where the last one is a float.
                                 // Caveat: Comments are not allowed
                                 //         between . and number.
                                 stripDot(); return T_DOTINT; }
        YY_BREAK
case 86:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ // Hack to avoid parsing error for a(b:1...):
                                 // If int is followed by ..., int is returned.
                                 // If this rule would not be there, the rule
                                 // for floats would match and an error would
                                 // occur.
                                 return T_OZINT; }
        YY_BREAK
case 87:
YY_RULE_SETUP
{ return T_OZINT; }
        YY_BREAK
case 88:
YY_RULE_SETUP
{ return T_OZFLOAT; }
        YY_BREAK
case 89:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_UNIT_LABEL; }
        YY_BREAK
case 90:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_TRUE_LABEL; }
        YY_BREAK
case 91:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FALSE_LABEL; }
        YY_BREAK
case 92:
YY_RULE_SETUP
{ return T_andthen; }
        YY_BREAK
case 93:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_andthen; }
        YY_BREAK
case 94:
YY_RULE_SETUP
{ return T_at; }
        YY_BREAK
case 95:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_at; }
        YY_BREAK
case 96:
YY_RULE_SETUP
{ return T_attr; }
        YY_BREAK
case 97:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_attr; }
        YY_BREAK
case 98:
YY_RULE_SETUP
{ return T_case; }
        YY_BREAK
case 99:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_case; }
        YY_BREAK
case 100:
YY_RULE_SETUP
{ return T_catch; }
        YY_BREAK
case 101:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_catch; }
        YY_BREAK
case 102:
YY_RULE_SETUP
{ return T_choice; }
        YY_BREAK
case 103:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_choice; }
        YY_BREAK
case 104:
YY_RULE_SETUP
{ return T_class; }
        YY_BREAK
case 105:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_class; }
        YY_BREAK
case 106:
YY_RULE_SETUP
{ return T_cond; }
        YY_BREAK
case 107:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_cond; }
        YY_BREAK
case 108:
YY_RULE_SETUP
{ return T_declare; }
        YY_BREAK
case 109:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_declare; }
        YY_BREAK
case 110:
YY_RULE_SETUP
{ return T_define; }
        YY_BREAK
case 111:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_define; }
        YY_BREAK
case 112:
YY_RULE_SETUP
{ return T_dis; }
        YY_BREAK
case 113:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_dis; }
        YY_BREAK
case 114:
YY_RULE_SETUP
{ return T_else; }
        YY_BREAK
case 115:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_else; }
        YY_BREAK
case 116:
YY_RULE_SETUP
{ return T_elsecase; }
        YY_BREAK
case 117:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elsecase; }
        YY_BREAK
case 118:
YY_RULE_SETUP
{ return T_elseif; }
        YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseif; }
        YY_BREAK
case 120:
YY_RULE_SETUP
{ return T_elseof; }
        YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseof; }
        YY_BREAK
case 122:
YY_RULE_SETUP
{ return T_end; }
        YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_end; }
        YY_BREAK
case 124:
YY_RULE_SETUP
{ return T_export; }
        YY_BREAK
case 125:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_export; }
        YY_BREAK
case 126:
YY_RULE_SETUP
{ return T_fail; }
        YY_BREAK
case 127:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fail; }
        YY_BREAK
case 128:
YY_RULE_SETUP
{ return T_false; }
        YY_BREAK
case 129:
YY_RULE_SETUP
{ return T_feat; }
        YY_BREAK
case 130:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_feat; }
        YY_BREAK
case 131:
YY_RULE_SETUP
{ return T_finally; }
        YY_BREAK
case 132:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_finally; }
        YY_BREAK
case 133:
YY_RULE_SETUP
{ return T_from; }
        YY_BREAK
case 134:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_from; }
        YY_BREAK
case 135:
YY_RULE_SETUP
{ return T_fun; }
        YY_BREAK
case 136:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fun; }
        YY_BREAK
case 137:
YY_RULE_SETUP
{ return T_functor; }
        YY_BREAK
case 138:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_functor; }
        YY_BREAK
case 139:
YY_RULE_SETUP
{ return T_if; }
        YY_BREAK
case 140:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_if; }
        YY_BREAK
case 141:
YY_RULE_SETUP
{ return T_import; }
        YY_BREAK
case 142:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_import; }
        YY_BREAK
case 143:
YY_RULE_SETUP
{ return T_in; }
        YY_BREAK
case 144:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_in; }
        YY_BREAK
case 145:
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_OZATOM; }
        YY_BREAK
case 146:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_ATOM_LABEL; }
        YY_BREAK
case 147:
YY_RULE_SETUP
{ return T_local; }
        YY_BREAK
case 148:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_local; }
        YY_BREAK
case 149:
YY_RULE_SETUP
{ return T_lock; }
        YY_BREAK
case 150:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_lock; }
        YY_BREAK
case 151:
YY_RULE_SETUP
{ return T_meth; }
        YY_BREAK
case 152:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_meth; }
        YY_BREAK
case 153:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_OZATOM; }
        YY_BREAK
case 154:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_ATOM_LABEL; }
        YY_BREAK
case 155:
YY_RULE_SETUP
{ return T_not; }
        YY_BREAK
case 156:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_not; }
        YY_BREAK
case 157:
YY_RULE_SETUP
{ return T_of; }
        YY_BREAK
case 158:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_of; }
        YY_BREAK
case 159:
YY_RULE_SETUP
{ return T_or; }
        YY_BREAK
case 160:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_or; }
        YY_BREAK
case 161:
YY_RULE_SETUP
{ return T_orelse; }
        YY_BREAK
case 162:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_orelse; }
        YY_BREAK
case 163:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_OZATOM; }
        YY_BREAK
case 164:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_ATOM_LABEL; }
        YY_BREAK
case 165:
YY_RULE_SETUP
{ return T_prepare; }
        YY_BREAK
case 166:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prepare; }
        YY_BREAK
case 167:
YY_RULE_SETUP
{ return T_proc; }
        YY_BREAK
case 168:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_proc; }
        YY_BREAK
case 169:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_OZATOM; }
        YY_BREAK
case 170:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_ATOM_LABEL; }
        YY_BREAK
case 171:
YY_RULE_SETUP
{ return T_prop; }
        YY_BREAK
case 172:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prop; }
        YY_BREAK
case 173:
YY_RULE_SETUP
{ return T_raise; }
        YY_BREAK
case 174:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_raise; }
        YY_BREAK
case 175:
YY_RULE_SETUP
{ return T_require; }
        YY_BREAK
case 176:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_require; }
        YY_BREAK
case 177:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_OZATOM; }
        YY_BREAK
case 178:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_ATOM_LABEL; }
        YY_BREAK
case 179:
YY_RULE_SETUP
{ return T_self; }
        YY_BREAK
case 180:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_self; }
        YY_BREAK
case 181:
YY_RULE_SETUP
{ return T_skip; }
        YY_BREAK
case 182:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_skip; }
        YY_BREAK
case 183:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_OZATOM; }
        YY_BREAK
case 184:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_ATOM_LABEL; }
        YY_BREAK
case 185:
YY_RULE_SETUP
{ return T_then; }
        YY_BREAK
case 186:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_then; }
        YY_BREAK
case 187:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_OZATOM; }
        YY_BREAK
case 188:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_ATOM_LABEL; }
        YY_BREAK
case 189:
YY_RULE_SETUP
{ return T_thread; }
        YY_BREAK
case 190:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_thread; }
        YY_BREAK
case 191:
YY_RULE_SETUP
{ return T_true; }
        YY_BREAK
case 192:
YY_RULE_SETUP
{ return T_try; }
        YY_BREAK
case 193:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_try; }
        YY_BREAK
case 194:
YY_RULE_SETUP
{ return T_unit; }
        YY_BREAK
case 195:
YY_RULE_SETUP
{ return T_loop; }
        YY_BREAK
case 196:
YY_RULE_SETUP
{ stripTrans('\''); return T_OZATOM; }
        YY_BREAK
case 197:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_OZATOM;}
        YY_BREAK
case 198:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ stripTrans('\''); return T_ATOM_LABEL; }
        YY_BREAK
case 199:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_ATOM_LABEL;}
        YY_BREAK
case 200:
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE; }
        YY_BREAK
case 201:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
        YY_BREAK
case 202:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE_LABEL; }
        YY_BREAK
case 203:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
        YY_BREAK
case 204:
YY_RULE_SETUP
{ stripTrans('\"'); return T_STRING; }
        YY_BREAK
case 205:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal string syntax",xyFileName,xylino,xycharno()); return T_STRING;}
        YY_BREAK
case 206:
YY_RULE_SETUP
{ int i = 0;
                                 int j = 1;
                                 transBody(0, xytext, i, j);
                                 return T_AMPER;
                               }
        YY_BREAK
case 207:
YY_RULE_SETUP
{
                                 return xytext[0];
                               }
        YY_BREAK
case 208:
YY_RULE_SETUP
;
        YY_BREAK
case 209:
YY_RULE_SETUP
{ xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case 210:
YY_RULE_SETUP
{ if (get_cond())
                                   xyreportError("lexical error",
                                                 "unknown directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(IGNOREDIRECTIVE);
                               }
        YY_BREAK
case 211:
YY_RULE_SETUP
{ if (get_cond())
                                   xyreportError("lexical error",
                                                 "illegal character",
                                                 xyFileName,xylino,xycharno());
                               }
        YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEX):
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return T_ENDOFFILE;
                               }
        YY_BREAK
case 212:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
        YY_BREAK

        case YY_END_OF_BUFFER:
                {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = yy_hold_char;
                YY_RESTORE_YY_MORE_OFFSET

                if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                        {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between yy_current_buffer and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        yy_n_chars = yy_current_buffer->yy_n_chars;
                        yy_current_buffer->yy_input_file = yyin;
                        yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                        }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        { /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state();

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans( yy_current_state );

                        yy_bp = yytext_ptr + YY_MORE_ADJ;

                        if ( yy_next_state )
                                {
                                /* Consume the NUL. */
                                yy_cp = ++yy_c_buf_p;
                                yy_current_state = yy_next_state;
                                goto yy_match;
                                }

                        else
                                {
                                yy_cp = yy_c_buf_p;
                                goto yy_find_action;
                                }
                        }

                else switch ( yy_get_next_buffer() )
                        {
                        case EOB_ACT_END_OF_FILE:
                                {
                                yy_did_buffer_switch_on_eof = 0;

                                if ( yywrap() )
                                        {
                                        /* Note: because we've taken care in
                                         * yy_get_next_buffer() to have set up
                                         * yytext, we can now set up
                                         * yy_c_buf_p so that if some total
                                         * hoser (like flex itself) wants to
                                         * call the scanner after we return the
                                         * YY_NULL, it'll still work - another
                                         * YY_NULL will get returned.
                                         */
                                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                        yy_act = YY_STATE_EOF(YY_START);
                                        goto do_action;
                                        }

                                else
                                        {
                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
                                        }
                                break;
                                }

                        case EOB_ACT_CONTINUE_SCAN:
                                yy_c_buf_p =
                                        yytext_ptr + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_match;

                        case EOB_ACT_LAST_MATCH:
                                yy_c_buf_p =
                                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                break;
                }

        default:
                YY_FATAL_ERROR(
                        "fatal flex scanner internal error--no action found" );
        } /* end of action switch */
                } /* end of scanning one token */
        } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *      EOB_ACT_LAST_MATCH -
 *      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *      EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
        {
        register char *dest = yy_current_buffer->yy_ch_buf;
        register char *source = yytext_ptr;
        register int number_to_move, i;
        int ret_val;

        if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
                YY_FATAL_ERROR(
                "fatal flex scanner internal error--end of buffer missed" );

        if ( yy_current_buffer->yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                yy_current_buffer->yy_n_chars = yy_n_chars = 0;

        else
                {
                int num_to_read =
                        yy_current_buffer->yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                        YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                        /* just a shorter name for the current buffer */
                        YY_BUFFER_STATE b = yy_current_buffer;

                        int yy_c_buf_p_offset =
                                (int) (yy_c_buf_p - b->yy_ch_buf);

                        if ( b->yy_is_our_buffer )
                                {
                                int new_size = b->yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->yy_buf_size += b->yy_buf_size / 8;
                                else
                                        b->yy_buf_size *= 2;

                                b->yy_ch_buf = (char *)
                                        /* Include room in for 2 EOB chars. */
                                        yy_flex_realloc( (void *) b->yy_ch_buf,
                                                         b->yy_buf_size + 2 );
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->yy_ch_buf = 0;

                        if ( ! b->yy_ch_buf )
                                YY_FATAL_ERROR(
                                "fatal error - scanner input buffer overflow" );

                        yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                        num_to_read = yy_current_buffer->yy_buf_size -
                                                number_to_move - 1;
#endif
                        }

                if ( num_to_read > YY_READ_BUF_SIZE )
                        num_to_read = YY_READ_BUF_SIZE;

                /* Read in more data. */
                YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                        yy_n_chars, num_to_read );

                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        if ( yy_n_chars == 0 )
                {
                if ( number_to_move == YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        yyrestart( yyin );
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        yy_current_buffer->yy_buffer_status =
                                YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        yy_n_chars += number_to_move;
        yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
        yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

        yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

        return ret_val;
        }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
        {
        register yy_state_type yy_current_state;
        register char *yy_cp;

        yy_current_state = yy_start;

        for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
                {
                register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 78);
                if ( yy_accept[yy_current_state] )
                        {
                        yy_last_accepting_state = yy_current_state;
                        yy_last_accepting_cpos = yy_cp;
                        }
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                        {
                        yy_current_state = (int) yy_def[yy_current_state];
                        if ( yy_current_state >= 650 )
                                yy_c = yy_meta[(unsigned int) yy_c];
                        }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                }

        return yy_current_state;
        }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
        {
        register int yy_is_jam;
        register char *yy_cp = yy_c_buf_p;

        register YY_CHAR yy_c = 78;
        if ( yy_accept[yy_current_state] )
                {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
                }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 650 )
                        yy_c = yy_meta[(unsigned int) yy_c];
                }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        yy_is_jam = (yy_current_state == 649);

        return yy_is_jam ? 0 : yy_current_state;
        }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
        {
        register char *yy_cp = yy_c_buf_p;

        /* undo effects of setting up yytext */
        *yy_cp = yy_hold_char;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                { /* need to shift things up to make room */
                /* +2 for EOB chars. */
                register int number_to_move = yy_n_chars + 2;
                register char *dest = &yy_current_buffer->yy_ch_buf[
                                        yy_current_buffer->yy_buf_size + 2];
                register char *source =
                                &yy_current_buffer->yy_ch_buf[number_to_move];

                while ( source > yy_current_buffer->yy_ch_buf )
                        *--dest = *--source;

                yy_cp += (int) (dest - source);
                yy_bp += (int) (dest - source);
                yy_current_buffer->yy_n_chars =
                        yy_n_chars = yy_current_buffer->yy_buf_size;

                if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                        YY_FATAL_ERROR( "flex scanner push-back overflow" );
                }

        *--yy_cp = (char) c;


        yytext_ptr = yy_bp;
        yy_hold_char = *yy_cp;
        yy_c_buf_p = yy_cp;
        }
#endif  /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
        {
        int c;

        *yy_c_buf_p = yy_hold_char;

        if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
                {
                /* yy_c_buf_p now points to the character we want to return.
                 * If this occurs *before* the EOB characters, then it's a
                 * valid NUL; if not, then we've hit the end of the buffer.
                 */
                if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        /* This was really a NUL. */
                        *yy_c_buf_p = '\0';

                else
                        { /* need more input */
                        int offset = yy_c_buf_p - yytext_ptr;
                        ++yy_c_buf_p;

                        switch ( yy_get_next_buffer() )
                                {
                                case EOB_ACT_LAST_MATCH:
                                        /* This happens because yy_g_n_b()
                                         * sees that we've accumulated a
                                         * token and flags that we need to
                                         * try matching the token before
                                         * proceeding.  But for input(),
                                         * there's no matching to consider.
                                         * So convert the EOB_ACT_LAST_MATCH
                                         * to EOB_ACT_END_OF_FILE.
                                         */

                                        /* Reset buffer status. */
                                        yyrestart( yyin );

                                        /* fall through */

                                case EOB_ACT_END_OF_FILE:
                                        {
                                        if ( yywrap() )
                                                return EOF;

                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
#ifdef __cplusplus
                                        return yyinput();
#else
                                        return input();
#endif
                                        }

                                case EOB_ACT_CONTINUE_SCAN:
                                        yy_c_buf_p = yytext_ptr + offset;
                                        break;
                                }
                        }
                }

        c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
        *yy_c_buf_p = '\0';     /* preserve yytext */
        yy_hold_char = *++yy_c_buf_p;


        return c;
        }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
        {
        if ( ! yy_current_buffer )
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_init_buffer( yy_current_buffer, input_file );
        yy_load_buffer_state();
        }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
        {
        if ( yy_current_buffer == new_buffer )
                return;

        if ( yy_current_buffer )
                {
                /* Flush out information for old buffer. */
                *yy_c_buf_p = yy_hold_char;
                yy_current_buffer->yy_buf_pos = yy_c_buf_p;
                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        yy_current_buffer = new_buffer;
        yy_load_buffer_state();

        /* We don't actually know whether we did this switch during
         * EOF (yywrap()) processing, but the only time this flag
         * is looked at is after yywrap() is called, so it's safe
         * to go ahead and always set it.
         */
        yy_did_buffer_switch_on_eof = 1;
        }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
        {
        yy_n_chars = yy_current_buffer->yy_n_chars;
        yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
        yyin = yy_current_buffer->yy_input_file;
        yy_hold_char = *yy_c_buf_p;
        }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
        {
        YY_BUFFER_STATE b;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_buf_size = size;

        /* yy_ch_buf has to be 2 characters longer than the size given because
         * we need to put in 2 end-of-buffer characters.
         */
        b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
        if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_is_our_buffer = 1;

        yy_init_buffer( b, file );

        return b;
        }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
        {
        if ( ! b )
                return;

        if ( b == yy_current_buffer )
                yy_current_buffer = (YY_BUFFER_STATE) 0;

        if ( b->yy_is_our_buffer )
                yy_flex_free( (void *) b->yy_ch_buf );

        yy_flex_free( (void *) b );
        }


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


        {
        yy_flush_buffer( b );

        b->yy_input_file = file;
        b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
        b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
        b->yy_is_interactive = 0;
#else
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
        }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

        {
        if ( ! b )
                return;

        b->yy_n_chars = 0;

        /* We always need two end-of-buffer characters.  The first causes
         * a transition to the end-of-buffer state.  The second causes
         * a jam in that state.
         */
        b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
        b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

        b->yy_buf_pos = &b->yy_ch_buf[0];

        b->yy_at_bol = 1;
        b->yy_buffer_status = YY_BUFFER_NEW;

        if ( b == yy_current_buffer )
                yy_load_buffer_state();
        }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
        {
        YY_BUFFER_STATE b;

        if ( size < 2 ||
             base[size-2] != YY_END_OF_BUFFER_CHAR ||
             base[size-1] != YY_END_OF_BUFFER_CHAR )
                /* They forgot to leave room for the EOB's. */
                return 0;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

        b->yy_buf_size = size - 2;      /* "- 2" to take care of EOB's */
        b->yy_buf_pos = b->yy_ch_buf = base;
        b->yy_is_our_buffer = 0;
        b->yy_input_file = 0;
        b->yy_n_chars = b->yy_buf_size;
        b->yy_is_interactive = 0;
        b->yy_at_bol = 1;
        b->yy_fill_buffer = 0;
        b->yy_buffer_status = YY_BUFFER_NEW;

        yy_switch_to_buffer( b );

        return b;
        }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
        {
        int len;
        for ( len = 0; yy_str[len]; ++len )
                ;

        return yy_scan_bytes( yy_str, len );
        }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
        {
        YY_BUFFER_STATE b;
        char *buf;
        yy_size_t n;
        int i;

        /* Get memory for full buffer, including space for trailing EOB's. */
        n = len + 2;
        buf = (char *) yy_flex_alloc( n );
        if ( ! buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

        for ( i = 0; i < len; ++i )
                buf[i] = bytes[i];

        buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

        b = yy_scan_buffer( buf, n );
        if ( ! b )
                YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

        /* It's okay to grow etc. this buffer, and we should throw it
         * away when we're done.
         */
        b->yy_is_our_buffer = 1;

        return b;
        }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
        {
        if ( yy_start_stack_ptr >= yy_start_stack_depth )
                {
                yy_size_t new_size;

                yy_start_stack_depth += YY_START_STACK_INCR;
                new_size = yy_start_stack_depth * sizeof( int );

                if ( ! yy_start_stack )
                        yy_start_stack = (int *) yy_flex_alloc( new_size );

                else
                        yy_start_stack = (int *) yy_flex_realloc(
                                        (void *) yy_start_stack, new_size );

                if ( ! yy_start_stack )
                        YY_FATAL_ERROR(
                        "out of memory expanding start-condition stack" );
                }

        yy_start_stack[yy_start_stack_ptr++] = YY_START;

        BEGIN(new_state);
        }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
        {
        if ( --yy_start_stack_ptr < 0 )
                YY_FATAL_ERROR( "start-condition stack underflow" );

        BEGIN(yy_start_stack[yy_start_stack_ptr]);
        }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
        {
        return yy_start_stack[yy_start_stack_ptr - 1];
        }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
        {
        (void) fprintf( stderr, "%s\n", msg );
        exit( YY_EXIT_FAILURE );
        }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                yytext[yyleng] = yy_hold_char; \
                yy_c_buf_p = yytext + n; \
                yy_hold_char = *yy_c_buf_p; \
                *yy_c_buf_p = '\0'; \
                yyleng = n; \
                } \
        while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
        {
        register int i;
        for ( i = 0; i < n; ++i )
                s1[i] = s2[i];
        }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
        {
        register int n;
        for ( n = 0; s[n]; ++n )
                ;

        return n;
        }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
        {
        return (void *) malloc( size );
        }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
        {
        /* The cast to (char *) in the following accommodates both
         * implementations that use char* generic pointers, and those
         * that use void* generic pointers.  It works with the latter
         * because both ANSI C and C++ allow castless assignment from
         * any pointer type to void*, and deal with argument conversions
         * as though doing an assignment.
         */
        return (void *) realloc( (char *) ptr, size );
        }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
        {
        free( ptr );
        }

#if YY_MAIN
int main()
        {
        yylex();
        return 0;
        }
#endif


static void xy_init(OZ_Term defines0) {
  xylino = 1;
  errorFlag = 0;

  bufferStack = NULL;

  defines = tagged2Dictionary(OZ_deref(defines0));
  conditional_p = 0;
  conditional_basep = 0;
  commentdepth = 0;

  BEGIN(INITIAL);
}

int xy_init_from_file(char *file, OZ_Term defines) {
  char *fullname = scExpndFileName(file, NULL);
  if (fullname == NULL)
    return 0;
  xy_errorMessages = oz_cons(OZ_mkTupleC("logInsert",1,OZ_atom(fullname)),
                             AtomNil);
  xyin = fopen(fullname, "r");
  if (xyin == NULL)
    return 0;
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  strncpy(xyFileName,fullname,99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  delete[] fullname;
  xy_init(defines);
  return 1;
}

void xy_init_from_string(char *str, OZ_Term defines) {
  xy_errorMessages = AtomNil;
  xyFileName[0] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  xyin = NULL;
  xy_scan_string(str);
  xylastline = YY_CURRENT_BUFFER->yy_ch_buf;
  xy_init(defines);
}

char *xy_expand_file_name(char *file) {
  return scExpndFileName(file, NULL);
}

void xy_exit() {
  xy_delete_buffer(YY_CURRENT_BUFFER);
  while (bufferStack != NULL) {
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
  }
  if (xyin)
    fclose(xyin);
}

int xylex() {
  int next = xymylex();
  if (get_cond() || next == 0 || next == ENDOFFILE)
    return next;
  else
    return xylex();
}

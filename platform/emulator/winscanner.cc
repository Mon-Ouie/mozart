#define yy_create_buffer xy_create_buffer
#define yy_delete_buffer xy_delete_buffer
#define yy_scan_buffer xy_scan_buffer
#define yy_scan_string xy_scan_string
#define yy_scan_bytes xy_scan_bytes
#define yy_flex_debug xy_flex_debug
#define yy_init_buffer xy_init_buffer
#define yy_flush_buffer xy_flush_buffer
#define yy_load_buffer_state xy_load_buffer_state
#define yy_switch_to_buffer xy_switch_to_buffer
#define yyin xyin
#define yyleng xyleng
#define yylex xylex
#define yyout xyout
#define yyrestart xyrestart
#define yytext xytext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 221
#define YY_END_OF_BUFFER 222
static yyconst short int yy_accept[660] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  222,  220,
      217,  218,  216,  220,  216,    1,  220,  220,   79,   78,
      216,   79,   90,   90,  216,   82,  216,   82,  209,  216,
      220,  220,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  216,   85,
       86,    5,    6,    7,    7,   23,   22,   24,   26,   25,
       27,    1,   26,   31,   30,   32,   31,   29,   31,   28,
       37,   36,   38,   33,   34,   35,   41,   40,   42,   41,

       39,   41,   45,   44,   46,   43,   45,   53,   52,   54,
       51,   53,   57,   56,   58,   55,   57,   49,   48,   50,
       47,   49,   61,   60,   62,   61,   59,   65,   64,   66,
       63,   63,   65,   82,   76,    0,  213,    0,    0,    1,
      215,    0,    0,  205,    0,    0,    0,   71,   88,    2,
       77,   92,   90,    0,    0,    0,   90,   83,   87,   73,
       84,   85,   74,   82,   82,   75,   86,  211,  209,   69,
      219,  219,  219,  219,  219,  219,  219,  219,  219,    0,
        0,  209,    0,  207,  205,  205,   98,  205,  205,  205,
      205,  205,  205,  118,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  149,  205,  153,  205,  205,  205,  205,
      205,  167,  169,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,   90,   90,    5,    4,    3,
        0,   29,    0,   28,   35,    0,   39,    0,   43,    0,
        0,   43,   51,    0,    0,   51,   55,    0,    0,   55,
       47,    0,    0,   47,    0,   59,    0,   59,   63,    0,
        0,   63,   63,   63,    0,    0,   73,   84,   85,   74,
        0,    0,  214,    0,    0,  214,    0,    0,  207,  206,
        0,    0,  206,   70,   91,   92,    0,   90,   90,   83,
       72,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,    0,    0,  210,  211,  210,  205,   99,
      205,  205,  205,  205,  205,  205,  205,  205,  116,   80,
      119,  205,  128,  205,  205,  205,  205,  205,  139,  205,
      145,  150,  205,  154,  155,  205,  205,  205,   80,  165,
      168,  170,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  193,  205,  205,  205,  205,  202,  205,   92,   90,
        0,   90,   29,   39,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   63,   63,   68,    0,   72,    0,
        0,    0,    0,  213,    0,    0,    0,    0,    0,    0,
      205,  208,    0,    0,    0,  208,   89,   92,    0,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,    0,    0,    0,  212,    0,  209,  212,  205,
      100,  102,  205,  205,  205,  110,  205,  205,  117,   81,
      120,  129,  205,  132,  205,  135,  205,  140,  143,  146,
      205,  205,  156,  205,  159,  141,  161,  163,  166,  205,
      205,  205,  177,  179,  181,  205,  205,  205,  189,  191,
      194,  195,  205,  205,  201,  203,  204,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  219,   18,  219,  219,  219,  219,  219,
       12,  219,  219,  219,  219,  219,    0,    0,  205,  101,

      103,  104,  205,  108,  111,  205,  205,  121,  205,  205,
      205,  205,  133,  134,  136,  205,  144,  205,  205,  157,
      160,  142,  162,  164,  205,  205,  205,  178,  180,  182,
      183,  205,  205,  190,  192,  196,  205,  197,   94,   93,
        0,    0,    0,    0,    0,  219,   19,  219,  219,   16,
      219,  219,  219,  219,  219,  219,   15,    0,    0,  205,
      105,  106,  109,  205,  114,  205,  124,  126,  130,   95,
      205,  205,  151,  158,  171,  173,  205,  184,  205,  205,
      199,  198,    0,   14,  219,  219,   17,   13,  219,  219,
      219,    8,   96,  107,  112,  115,  205,  125,  127,  131,

      137,  147,  152,  172,  174,  175,  185,  187,  200,   67,
      219,  219,  219,  219,  219,   97,  113,  122,  138,  148,
      176,  186,  188,  219,  219,  219,  219,  219,  123,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,   10,  219,  219,  219,  219,    9,  219,  219,
       11,  219,  219,  219,  219,   21,  219,   20,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,    4,   29,   30,   31,   30,   30,   32,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   35,   34,
       34,   34,   36,   34,   34,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   53,   69,   70,   71,   72,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       73,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   74,    1,    1,    1,
        1,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,    1,   75,   75,   75,   75,   75,
       75,   75,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,    1,   76,   76,   76,
       76,   76,   76,   76,   76
    } ;

static yyconst int yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    4,
        5,    6,    1,    7,    1,    1,    8,    8,    9,   10,
       10,   10,   11,    1,    1,   12,   13,   14,    1,   15,
       15,   15,   15,   16,   16,   16,   17,    1,    4,   18,
        1,   19,    4,   20,   20,   15,   15,   15,   20,   16,
       16,   16,   16,   16,   16,   16,   17,   16,   16,   16,
       17,   16,   17,   16,   17,   16,   17,   16,    1,    1,
        1,    8,    1,    1,   21,   21,   22
    } ;

static yyconst short int yy_base[760] =
    {   0,
        0,    0,   75,   76,   78,   80,   82,   84,  103,    0,
      180,    0,  257,    0,  333,  407,  481,  555,  629,  703,
      777,  851,  925, 1000,  335,  339, 1555, 1554, 1579, 3482,
     3482, 3482, 1573,  338, 3482,    0, 1538,  335, 3482, 3482,
      369,   78,  382,  327,   72,  358,  369,  390, 1564, 1535,
      404,  355,  366, 1562,  409,  368,  367,  413,  423,  433,
      446,  328,  387,  434,  457,  473,  435,  331,  331, 3482,
     3482,    0, 3482, 1554, 1558, 3482, 3482, 3482, 3482, 3482,
     3482,    0, 1551, 3482, 3482, 3482,    0, 1543, 1076,  508,
     3482, 3482, 3482, 3482, 3482,    0, 3482, 3482, 3482,    0,

     1542, 1153, 3482, 3482, 3482,    0,   59, 3482, 3482, 3482,
        0,  449, 3482, 3482, 3482,    0,  459, 3482, 3482, 3482,
        0,  460, 3482, 3482, 3482,  451,    0, 3482, 3482, 3482,
      514,  486,  517,  526, 3482,  483, 3482, 1225, 1553,    0,
     3482,  526,  522, 1546, 1287, 1546,  574, 1538,  546, 3482,
     3482,  552,  583,  589,  455,    0,  595, 1531, 3482, 1537,
     3482, 3482, 3482, 1529, 3482, 3482, 3482, 3482, 1540, 3482,
        0, 1503,  326, 1486,  505,  497,  544, 1483, 1491,  580,
     1349, 1535, 1503, 3482, 1533,  532,  508,  571,  568,  389,
      416,  602,  608, 1532,  609,  627,  570,  623,  443,  485,

      615,  610,  612, 1531,  624, 1530,  458,  631,  616,  633,
      625, 1529,  634,  626,  637,  629,  630,  640,  638,  642,
      635,  655,  632,  643,  644,  727,  679,    0, 3482, 3482,
     1529, 1521, 1416,  692,    0, 1527, 1519, 1493,    0,  678,
      704, 3482,    0,  679,  707, 3482,    0,  680,  731, 3482,
        0,  716,  755, 3482,  614, 3482,  762,    0,  710,  688,
        0,  740,  795,  765,  763,    0,  817,  767, 1503,  797,
     1491,  716,  652,  821, 1565, 3482,  745,    0, 3482,  785,
      817, 1604, 1517, 3482, 1510,  826,  843,  769,    0, 3482,
     3482, 1478, 1464, 1478, 1468,  453, 1461, 1459, 1469, 1455,

     1451, 1460, 1464,  847, 1634,  818, 3482, 1498,  758, 3482,
      819,  745,  708,  792,  788,  848,  821,  807, 1484, 1476,
     3482,  858, 1472,  839,  859,  860,  861,  863, 1471,  865,
      866, 3482,  867, 3482, 1470,  879,  880,  881,  886, 1469,
     3482, 3482,  887,  884,  888,  891,  889,  877,  686,  769,
      890, 1468,  896,  892,  897,  904, 1467,  893,  976,  937,
      943,  992, 3482, 3482,  897,    0,  909,    0,  984,    0,
      996,    0,  999,    0,  890,    0, 3482, 1472,  994, 1442,
      904, 1031,  929, 3482, 1005, 1017, 1678, 1008,    0,  909,
     1464,  956, 1073, 1086, 1717, 3482, 3482, 1100, 1104, 1423,

     1426, 1421, 1413, 1423, 1423, 1421, 1420, 1423, 1430, 1414,
     1401, 1415, 1053, 1747,  992,  997, 1150, 1450, 3482, 1058,
     1449, 1448, 1067,  995, 1086, 1446, 1087, 1099, 3482, 3482,
     1161, 3482,  901, 1441, 1126, 1440, 1057, 3482, 1439, 3482,
     1120, 1123, 3482, 1121, 1438, 1437, 1436, 1435, 3482, 1124,
     1127, 1176, 1434, 1427, 1426, 1173, 1185, 1132, 1425, 1424,
     3482, 1423, 1188, 1183, 1422, 3482, 1421, 3482, 1108,    0,
     1121,    0, 1181,    0, 1184,    0, 1188,    0, 1386, 1194,
        0, 1221,    0, 1358,    0, 1364, 1075, 1362, 1361, 1347,
        0, 1352, 1339, 1368, 1357, 1353, 1228,    0, 1186, 3482,

     3482, 1389, 1206, 1388, 3482, 1178, 1213, 3482, 1200, 1226,
     1240, 1221, 3482, 1387, 3482, 1239, 3482, 1199, 1241, 1385,
     3482, 3482, 3482, 3482, 1243, 1244, 1251, 3482, 3482, 3482,
     1384, 1253, 1247, 3482, 3482, 3482, 1254, 1383, 3482, 3482,
     1363, 1251,    0, 1256,    0, 1342,    0, 1345, 1341,    0,
     1336, 1321, 1347, 1330, 1315, 1329,    0, 1259,    0, 1246,
     3482, 1367, 3482, 1248, 1366, 1255, 1365, 1364, 1363, 3482,
     1271, 1273, 1362, 3482, 1361, 1360, 1275, 3482, 1287, 1288,
     1356, 3482, 1339,    0, 1305, 1321,    0,    0, 1298, 1300,
     1310,    0, 1349, 3482, 1346, 3482, 1290, 3482, 3482, 3482,

     1345, 1344, 3482, 3482, 3482, 1341, 1339, 1335, 3482, 3482,
     1284, 1288, 1291, 1296, 1278, 3482, 3482, 1328, 3482, 3482,
     3482, 3482, 3482, 1289, 1276, 1266, 1277, 1281, 3482, 1264,
     1274, 1275, 1272, 1268, 1270, 1255, 1264, 1251, 1263, 1243,
     1247, 1151,    0, 1051,  984,  948,  892,    0,  592,  475,
        0,  384,  357,  276,   48,    0,   21,    0, 3482, 1796,
     1818, 1840, 1862, 1884, 1906, 1928, 1950, 1972, 1994, 2016,
     2038, 2059, 2076, 2085, 2105, 2122, 2143, 2165, 2180, 2191,
     2211, 2226, 2237, 2258, 2270, 2291, 2303, 2324, 2336, 2357,
     2378, 2390, 2411, 2433, 2455, 2475, 2495, 2517, 2530, 2545,

     2552, 2572, 2594, 2611, 2632, 2654, 2669, 2680, 2700, 2715,
     2726, 2747, 2766, 2777, 2798, 2817, 2828, 2849, 2868, 2879,
     2900, 2919, 2939, 2958, 2969, 2981, 3001, 3023, 3045, 3067,
     3088, 3101, 3121, 3142, 3155, 3161, 3181, 3203, 3219, 3231,
     3242, 3253, 3264, 3275, 3293, 3304, 3322, 3340, 3351, 3362,
     3373, 3384, 3395, 3406, 3417, 3428, 3439, 3450, 3461
    } ;

static yyconst short int yy_def[760] =
    {   0,
      659,    1,  660,  660,  661,  661,  662,  662,  659,    9,
      659,   11,  659,   13,  663,  663,  664,  664,  665,  665,
      666,  666,  667,  667,  668,  668,    1,    1,  659,  659,
      659,  659,  659,  669,  659,  670,  671,  672,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  673,  659,
      674,  675,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  659,  659,
      659,  677,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  670,  659,  659,  659,  659,  678,  679,  679,  679,
      659,  659,  659,  659,  659,  680,  659,  659,  659,  681,

      682,  682,  659,  659,  659,  683,  684,  659,  659,  659,
      685,  686,  659,  659,  659,  687,  688,  659,  659,  659,
      689,  690,  659,  659,  659,  691,  692,  659,  659,  659,
      659,  659,  659,  693,  659,  694,  659,  695,  695,  670,
      659,  696,  697,  659,  698,  698,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  699,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  700,  659,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  702,
      703,  659,  703,  659,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,

      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  659,  659,  705,  659,  659,
      706,  707,  707,  707,  708,  709,  710,  710,  711,  712,
      713,  659,  714,  715,  716,  659,  717,  718,  719,  659,
      720,  721,  722,  659,  723,  659,  724,  725,  659,  659,
      726,  659,  659,  659,  727,  728,  727,  727,  659,  727,
      729,  727,  730,  731,  731,  659,  659,  732,  659,  733,
      734,  734,  659,  659,  659,  659,  659,  659,  735,  659,
      659,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  737,  737,  738,  659,  659,  739,  659,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      659,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  659,  739,  659,  739,  739,  739,  739,  739,  739,
      659,  659,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  659,  659,
      659,  659,  659,  659,  659,  740,  659,  741,  659,  742,
      659,  743,  659,  744,  659,  726,  659,  728,  727,  659,
      729,  729,  730,  659,  745,  731,  731,  659,  746,  733,
      659,  733,  747,  734,  734,  659,  659,  659,  659,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  737,  737,  738,  738,  748,  659,  659,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  659,  659,
      739,  659,  739,  739,  739,  739,  739,  659,  739,  659,
      739,  739,  659,  739,  739,  739,  739,  739,  659,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      659,  739,  739,  739,  739,  659,  739,  659,  659,  749,
      659,  750,  659,  751,  659,  752,  659,  753,  659,  659,
      754,  659,  755,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  659,  756,  739,  659,

      659,  739,  739,  739,  659,  739,  739,  659,  739,  739,
      739,  739,  659,  739,  659,  739,  659,  739,  739,  739,
      659,  659,  659,  659,  739,  739,  739,  659,  659,  659,
      739,  739,  739,  659,  659,  659,  739,  739,  659,  659,
      659,  659,  757,  659,  758,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  659,  759,  739,
      659,  739,  659,  739,  739,  739,  739,  739,  739,  659,
      739,  739,  739,  659,  739,  739,  739,  659,  739,  739,
      739,  659,  659,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  739,  659,  739,  659,  739,  659,  659,  659,

      739,  739,  659,  659,  659,  739,  739,  739,  659,  659,
      736,  736,  736,  736,  736,  659,  659,  739,  659,  659,
      659,  659,  659,  736,  736,  736,  736,  736,  659,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,    0,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659
    } ;

static yyconst short int yy_nxt[3560] =
    {   0,
       30,   31,   32,   31,   33,   34,   35,   35,   36,   37,
       38,   35,   35,   39,   40,   35,   40,   41,   42,   43,
       44,   44,   44,   45,   35,   46,   47,   48,   35,   49,
       49,   49,   49,   49,   49,   49,   49,   50,   51,   35,
       35,   35,   52,   53,   54,   55,   56,   57,   58,   54,
       54,   59,   54,   54,   60,   61,   62,   63,   64,   54,
       65,   66,   67,   68,   54,   54,   54,   54,   35,   35,
       35,   69,   70,   71,   49,   54,   30,   73,   73,   77,
       78,   77,   78,   80,   81,   80,   81,  658,   74,   74,
       82,  150,   82,   75,   75,  158,  151,  241,  159,  657,

       83,  242,   83,   84,   85,   86,   84,   84,   84,   84,
       84,   84,   84,   87,   84,   84,   84,   84,   84,   88,
       89,   88,   90,   90,   90,   90,   84,   84,   84,   84,
       84,   84,   88,   88,   88,   88,   88,   88,   88,   88,
       84,   84,   84,   84,   88,   84,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   84,   84,   84,   88,   84,   84,   84,   84,   84,
       91,   92,   93,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   94,   91,   95,   91,   91,   96,

       96,   96,   96,   91,   91,   91,   91,   91,   91,   96,
       96,   96,   96,   96,   96,   96,   96,   91,   91,   91,
       91,   91,   91,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   97,   98,   99,
       97,   97,   97,   97,   97,   97,   97,  100,   97,   97,
       97,   97,   97,  101,  102,  101,  101,  101,  101,  101,
       97,   97,   97,   97,   97,   97,  101,  101,  101,  101,
      101,  101,  101,  101,   97,   97,   97,   97,  101,   97,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,   97,   97,   97,  101,   97,
       97,   97,   97,   97,  104,  105,  129,  130,  656,  184,
      129,  130,  184,  137,  152,  144,  157,  157,  157,  157,
      226,  227,  227,  227,  131,  132,  132,  132,  131,  132,
      132,  132,  106,  106,  106,  106,  106,  106,  106,  106,
      147,  147,  147,  145,  160,  107,  138,  184,  184,  184,
      293,  161,  294,  162,  163,  211,  148,  225,  149,  149,
      149,  149,  161,  181,  164,  165,  166,  182,  184,  152,

      184,  153,  153,  153,  154,  655,  133,  106,  104,  105,
      133,  146,  155,  161,  139,  192,  164,  167,  156,  193,
      184,  195,  186,  196,  184,  194,  155,  184,  187,  654,
      164,  183,  315,  197,  184,  212,  106,  106,  106,  106,
      106,  106,  106,  106,  184,  184,  184,  213,  156,  107,
      172,  173,  188,  174,  184,  175,  198,  184,  176,  189,
      199,  256,  177,  190,  200,  178,  191,  179,  184,  184,
      201,  204,  316,  202,  288,  288,  203,  214,  205,  206,
      207,  106,  109,  110,  184,  222,  327,  245,  137,  257,
      208,  246,  223,  209,  215,  224,  184,  249,  253,  404,

      216,  250,  254,  210,  217,  262,  262,  262,  262,  405,
      111,  111,  111,  111,  111,  111,  111,  111,  218,  310,
      219,  138,  653,  112,  335,  233,  220,  234,  234,  234,
      234,  266,  144,  259,  259,  259,  263,  264,  264,  264,
      221,  328,  267,  184,  260,  277,  277,  277,  298,  268,
      261,  269,  270,  296,  299,  111,  109,  110,  260,  139,
      145,  297,  278,  271,  272,  149,  149,  149,  149,  285,
      311,  286,  286,  286,  286,  147,  147,  147,  309,  184,
      261,  184,  184,  287,  111,  111,  111,  111,  111,  111,
      111,  111,  278,  149,  149,  149,  149,  112,  146,  287,

      152,  300,  153,  153,  153,  154,  152,  301,  154,  154,
      154,  154,  152,  184,  157,  157,  157,  157,  181,  184,
      184,  184,  182,  184,  256,  314,  184,  184,  324,  111,
      114,  115,  312,  313,  184,  184,  184,  184,  184,  652,
      184,  184,  184,  184,  184,  342,  184,  317,  184,  184,
      318,  184,  257,  184,  184,  184,  183,  384,  116,  116,
      116,  116,  116,  116,  116,  116,  184,  330,  331,  319,
      322,  117,  320,  323,  325,  329,  336,  326,  338,  339,
      347,  343,  333,  349,  345,  355,  344,  340,  337,  348,
      385,  352,  350,  351,  346,  358,  359,  184,  362,  362,

      362,  362,  353,  116,  114,  115,  356,  375,  375,  233,
      357,  234,  234,  234,  234,  354,  241,  245,  249,  184,
      242,  246,  250,  365,  365,  365,  367,  367,  367,  259,
      259,  259,  116,  116,  116,  116,  116,  116,  116,  116,
      366,  265,  458,  368,  359,  117,  360,  360,  360,  361,
      369,  369,  369,  423,  253,  265,  184,  155,  254,  262,
      262,  262,  262,  156,  388,  388,  388,  370,  266,  184,
      366,  155,  266,  368,  371,  371,  371,  116,  119,  120,
      184,  373,  373,  373,  262,  262,  262,  262,  288,  288,
      377,  372,  422,  156,  377,  391,  392,  370,  374,  184,

      271,  272,  266,  184,  271,  272,  121,  121,  121,  121,
      121,  121,  121,  121,  259,  259,  259,  459,  184,  122,
      420,  372,  266,  393,  377,  260,  276,  283,  374,  416,
      184,  261,  184,  379,  271,  272,  394,  394,  394,  260,
      386,  386,  386,  424,  377,  286,  286,  286,  286,  425,
      184,  121,  119,  120,  271,  272,  417,  287,  428,  184,
      418,  261,  398,  398,  398,  398,  413,  413,  413,  184,
      184,  184,  184,  287,  184,  427,  184,  440,  184,  421,
      121,  121,  121,  121,  121,  121,  121,  121,  184,  308,
      184,  184,  184,  122,  426,  184,  433,  430,  184,  184,

      184,  184,  184,  184,  184,  431,  437,  184,  184,  375,
      375,  441,  184,  434,  399,  184,  469,  469,  469,  391,
      439,  435,  444,  436,  442,  121,  124,  125,  471,  471,
      471,  447,  445,  448,  384,  126,  453,  454,  446,  463,
      457,  450,  382,  265,  464,  451,  452,  393,  460,  455,
      456,  465,  462,  651,  359,  467,  360,  360,  360,  361,
      359,  512,  361,  361,  361,  361,  391,  385,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  468,  393,  286,  286,  286,  286,  266,

      127,  124,  125,  473,  473,  473,  184,  287,  650,  359,
      126,  362,  362,  362,  362,  475,  475,  475,  477,  477,
      477,  377,  276,  287,  480,  480,  480,  141,  141,  141,
      417,  271,  272,  659,  418,  417,  136,  136,  136,  418,
      503,  481,  649,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  184,  184,
      381,  481,  180,  180,  180,  127,  232,  232,  184,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  482,  482,  482,  308,  283,  184,  184,  232,

      232,  232,  232,  232,  232,  143,  143,  143,  499,  483,
      184,  516,  648,  232,  232,  232,  232,  502,  232,  398,
      398,  398,  398,  398,  398,  398,  398,  240,  240,  240,
      506,  184,  184,  548,  184,  184,  549,  184,  184,  483,
      244,  244,  244,  184,  232,  232,  232,  504,  232,  232,
      232,  232,  232,  237,  237,  507,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  497,
      497,  497,  508,  514,  526,  520,  237,  237,  237,  237,
      237,  237,  518,  519,  184,  525,  498,  184,  533,  184,
      237,  237,  237,  237,  184,  237,  184,  184,  647,  184,

      248,  248,  248,  252,  252,  252,  509,  255,  255,  255,
      184,  184,  510,  542,  542,  542,  498,  184,  511,  527,
      531,  237,  237,  237,  184,  237,  237,  237,  237,  237,
      273,  537,  184,  560,  136,  136,  532,  184,  564,  538,
      544,  544,  544,  566,  274,  274,  274,  558,  558,  558,
      184,  184,  184,  562,  184,  184,  572,  184,  184,  184,
      565,  275,  184,  136,  184,  184,  184,  136,  136,  136,
      383,  383,  383,  136,  567,  390,  390,  390,  415,  415,
      415,  136,  184,  569,  184,  136,  184,  136,  568,  136,
      575,  275,  143,  571,  580,  595,  143,  280,  184,  184,

      581,  184,  593,  573,  576,  646,  281,  281,  281,  645,
      644,  577,  643,  579,  642,  641,  597,  640,  639,  638,
      637,  636,  606,  282,  635,  143,  634,  633,  632,  143,
      143,  143,  631,  602,  607,  143,  630,  618,  601,  629,
      628,  627,  626,  143,  625,  624,  623,  143,  608,  143,
      622,  143,  621,  282,  180,  620,  619,  617,  180,  180,
      616,  615,  614,  613,  612,  611,  610,  609,  304,  304,
      304,  605,  604,  603,  600,  599,  598,  596,  594,  592,
      591,  590,  589,  588,  587,  305,  586,  180,  585,  584,
      583,  306,  180,  180,  582,  578,  574,  180,  570,  563,

      561,  557,  556,  555,  554,  180,  553,  552,  551,  180,
      550,  180,  547,  180,  546,  305,  232,  232,  541,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  540,  539,  536,  535,  534,  530,  529,  232,
      232,  232,  232,  232,  232,  528,  524,  523,  522,  521,
      517,  515,  513,  232,  232,  232,  232,  505,  232,  501,
      500,  168,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  184,  479,  265,  466,  461,
      449,  443,  438,  432,  232,  232,  232,  430,  232,  232,
      232,  232,  232,  237,  237,  429,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  419,
      412,  411,  410,  409,  408,  407,  237,  237,  237,  237,
      237,  237,  406,  403,  402,  401,  400,  397,  396,  382,
      237,  237,  237,  237,  380,  237,  238,  364,  233,  363,
      341,  334,  332,  321,  184,  308,  307,  303,  302,  295,
      292,  168,  161,  291,  290,  284,  283,  279,  276,  238,
      233,  237,  237,  237,  150,  237,  237,  237,  237,  237,
      276,  230,  229,  184,  170,  168,  142,  135,  659,  134,
      134,  659,  659,  659,  387,  387,  387,  387,  659,  659,
      659,  659,  659,  659,  387,  387,  387,  387,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  387,  387,
      387,  387,  387,  387,  283,  659,  659,  659,  659,  659,
      659,  659,  659,  395,  395,  395,  395,  659,  659,  659,
      659,  659,  659,  395,  395,  395,  395,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  395,  395,  395,
      395,  395,  395,  414,  414,  414,  414,  659,  659,  659,
      659,  659,  659,  414,  414,  414,  414,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  308,  414,  414,  414,
      414,  414,  414,  276,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  136,  136,  136,

      136,  659,  659,  659,  659,  659,  659,  136,  136,  136,
      136,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  136,  136,  136,  136,  136,  136,  283,  659,  659,
      659,  659,  659,  659,  659,  659,  143,  143,  143,  143,
      659,  659,  659,  659,  659,  659,  143,  143,  143,  143,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      143,  143,  143,  143,  143,  143,  180,  180,  180,  180,
      659,  659,  659,  659,  659,  659,  180,  180,  180,  180,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  308,
      180,  180,  180,  180,  180,  180,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  140,  659,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  169,  659,  659,  659,  169,  169,  659,  659,  659,
      169,  169,  169,  659,  169,  169,  169,  171,  659,  171,

      171,  171,  659,  659,  171,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  185,  659,  659,
      659,  185,  185,  659,  659,  659,  185,  185,  185,  659,
      185,  185,  185,  228,  659,  228,  228,  228,  228,  659,
      228,  659,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  231,  659,  231,  231,  659,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  232,  232,  232,
      232,  659,  659,  659,  232,  232,  232,  659,  232,  232,

      235,  235,  659,  659,  659,  235,  235,  235,  659,  659,
      235,  236,  659,  236,  236,  659,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  237,  237,  237,  237,  659,  659,  659,
      237,  237,  237,  659,  237,  237,  239,  239,  659,  659,
      659,  239,  239,  239,  659,  239,  239,  239,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  243,
      243,  659,  659,  659,  243,  243,  243,  659,  243,  243,
      243,  244,  244,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  247,  247,  659,  659,  659,  247,  247,  247,
      659,  247,  247,  247,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  251,  251,  659,  659,  659,
      251,  251,  251,  659,  251,  251,  251,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  258,

      258,  659,  659,  659,  258,  258,  258,  659,  258,  258,
      258,  265,  659,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  659,  265,  265,  265,  659,  265,
      265,  265,  265,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  141,  141,  141,
      659,  659,  659,  659,  141,  659,  659,  659,  659,  659,
      659,  141,  659,  659,  141,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  289,
      289,  659,  659,  659,  289,  659,  659,  659,  659,  289,
      169,  659,  659,  659,  169,  169,  659,  659,  659,  169,
      169,  169,  659,  169,  169,  169,  171,  171,  171,  659,
      659,  171,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  185,  659,  659,  659,
      185,  185,  659,  659,  659,  185,  185,  185,  659,  185,
      185,  185,  228,  659,  228,  228,  228,  228,  659,  228,
      659,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  231,  659,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  232,  232,  232,  232,
      659,  659,  659,  232,  232,  232,  659,  232,  232,  235,
      235,  659,  659,  659,  235,  235,  235,  659,  659,  235,

      236,  659,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  237,  237,  237,  237,  659,  659,  659,  237,
      237,  237,  659,  237,  237,  239,  239,  659,  659,  659,
      239,  239,  239,  659,  239,  239,  239,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  659,  659,  659,  659,  240,  659,  659,  659,  659,
      659,  659,  240,  659,  659,  240,  243,  243,  659,  659,
      659,  243,  243,  243,  659,  243,  243,  243,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  659,  659,  659,  659,  244,  659,  659,  659,
      659,  659,  659,  244,  659,  659,  244,  247,  247,  659,
      659,  659,  247,  247,  247,  659,  247,  247,  247,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  659,  659,  659,  659,  248,  659,  659,
      659,  659,  659,  659,  248,  659,  659,  248,  251,  251,
      659,  659,  659,  251,  251,  251,  659,  251,  251,  251,

      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  659,  659,  659,  659,  252,  659,
      659,  659,  659,  659,  659,  252,  659,  659,  252,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  659,  659,  659,  659,  255,  659,  659,
      659,  659,  659,  659,  255,  659,  659,  255,  258,  258,
      659,  659,  659,  258,  258,  258,  659,  258,  258,  258,
      376,  376,  659,  659,  659,  376,  659,  659,  659,  659,

      376,  265,  659,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  659,  265,  265,  265,  265,  265,  659,  265,
      265,  265,  265,  378,  378,  659,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  659,  381,  381,  381,  381,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      389,  389,  659,  659,  659,  389,  659,  659,  659,  659,
      389,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  289,  289,  659,  659,  659,  289,
      659,  659,  659,  659,  289,  171,  171,  171,  659,  659,
      171,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  185,  659,  659,  659,  185,  185,
      659,  659,  659,  185,  185,  185,  659,  185,  185,  185,
      470,  470,  659,  659,  659,  470,  659,  659,  659,  659,
      470,  472,  472,  659,  659,  659,  472,  659,  659,  659,
      659,  472,  474,  474,  659,  659,  659,  474,  659,  659,
      659,  659,  474,  476,  476,  659,  659,  659,  476,  659,
      659,  659,  659,  476,  478,  478,  659,  659,  659,  478,
      659,  659,  659,  659,  478,  383,  383,  383,  659,  659,

      659,  659,  383,  659,  659,  659,  659,  659,  659,  383,
      659,  659,  383,  141,  141,  659,  659,  659,  141,  659,
      659,  659,  659,  141,  390,  390,  390,  659,  659,  659,
      659,  390,  659,  659,  659,  659,  659,  659,  390,  659,
      659,  390,  415,  415,  415,  659,  659,  659,  659,  415,
      659,  659,  659,  659,  659,  659,  415,  659,  659,  415,
      240,  240,  659,  659,  659,  240,  659,  659,  659,  659,
      240,  244,  244,  659,  659,  659,  244,  659,  659,  659,
      659,  244,  248,  248,  659,  659,  659,  248,  659,  659,
      659,  659,  248,  252,  252,  659,  659,  659,  252,  659,

      659,  659,  659,  252,  255,  255,  659,  659,  659,  255,
      659,  659,  659,  659,  255,  543,  543,  659,  659,  659,
      543,  659,  659,  659,  659,  543,  545,  545,  659,  659,
      659,  545,  659,  659,  659,  659,  545,  559,  559,  659,
      659,  659,  559,  659,  659,  659,  659,  559,  383,  383,
      659,  659,  659,  383,  659,  659,  659,  659,  383,  390,
      390,  659,  659,  659,  390,  659,  659,  659,  659,  390,
      415,  415,  659,  659,  659,  415,  659,  659,  659,  659,
      415,   29,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659
    } ;

static yyconst short int yy_chk[3560] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        5,    6,    6,    7,    7,    8,    8,  657,    3,    4,
        7,   42,    8,    3,    4,   45,   42,  107,   45,  655,

        7,  107,    8,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,   15,   25,   25,  654,   62,
       26,   26,   68,   34,   44,   38,   44,   44,   44,   44,
       69,   69,   69,   69,   25,   25,   25,   25,   26,   26,
       26,   26,   15,   15,   15,   15,   15,   15,   15,   15,
       41,   41,   41,   38,   46,   15,   34,   53,   57,   56,
      173,   46,  173,   46,   46,   62,   41,   68,   41,   41,
       41,   41,   47,   52,   47,   47,   47,   52,   63,   43,

      190,   43,   43,   43,   43,  653,   25,   15,   16,   16,
       26,   38,   43,   48,   34,   56,   48,   48,   43,   56,
       55,   57,   53,   57,   58,   56,   43,  191,   53,  652,
       51,   52,  190,   57,   59,   63,   16,   16,   16,   16,
       16,   16,   16,   16,   60,   64,   67,   63,   43,   16,
       51,   51,   55,   51,  199,   51,   58,   61,   51,   55,
       58,  126,   51,   55,   58,   51,   55,   51,   65,  207,
       58,   59,  191,   58,  155,  155,   58,   64,   59,   59,
       60,   16,   17,   17,   66,   67,  199,  112,  136,  126,
       60,  112,   67,   61,   64,   67,  200,  117,  122,  296,

       65,  117,  122,   61,   65,  132,  132,  132,  132,  296,
       17,   17,   17,   17,   17,   17,   17,   17,   66,  187,
       66,  136,  650,   17,  207,   90,   66,   90,   90,   90,
       90,  134,  143,  131,  131,  131,  133,  133,  133,  133,
       66,  200,  134,  186,  131,  142,  142,  142,  176,  134,
      131,  134,  134,  175,  176,   17,   18,   18,  131,  136,
      143,  175,  142,  134,  134,  149,  149,  149,  149,  152,
      187,  152,  152,  152,  152,  147,  147,  147,  186,  189,
      131,  197,  188,  152,   18,   18,   18,   18,   18,   18,
       18,   18,  142,  147,  147,  147,  147,   18,  143,  152,

      153,  177,  153,  153,  153,  153,  154,  177,  154,  154,
      154,  154,  157,  192,  157,  157,  157,  157,  180,  193,
      195,  202,  180,  203,  255,  189,  201,  209,  197,   18,
       19,   19,  188,  188,  198,  205,  211,  214,  196,  649,
      216,  217,  208,  223,  210,  213,  221,  192,  215,  219,
      192,  218,  255,  220,  224,  225,  180,  273,   19,   19,
       19,   19,   19,   19,   19,   19,  222,  202,  203,  193,
      195,   19,  193,  196,  198,  201,  208,  198,  209,  210,
      216,  213,  205,  218,  215,  223,  214,  211,  208,  217,
      273,  221,  219,  220,  215,  225,  227,  349,  227,  227,

      227,  227,  222,   19,   20,   20,  224,  260,  260,  234,
      224,  234,  234,  234,  234,  222,  240,  244,  248,  313,
      240,  244,  248,  241,  241,  241,  245,  245,  245,  259,
      259,  259,   20,   20,   20,   20,   20,   20,   20,   20,
      241,  272,  349,  245,  226,   20,  226,  226,  226,  226,
      249,  249,  249,  313,  252,  272,  312,  226,  252,  262,
      262,  262,  262,  226,  277,  277,  277,  249,  265,  309,
      241,  226,  268,  245,  253,  253,  253,   20,   21,   21,
      350,  257,  257,  257,  264,  264,  264,  264,  288,  288,
      265,  253,  312,  226,  268,  280,  280,  249,  257,  315,

      265,  265,  270,  314,  268,  268,   21,   21,   21,   21,
       21,   21,   21,   21,  263,  263,  263,  350,  318,   21,
      309,  253,  267,  280,  270,  263,  274,  281,  257,  306,
      311,  263,  317,  267,  270,  270,  281,  281,  281,  263,
      274,  274,  274,  314,  267,  286,  286,  286,  286,  315,
      324,   21,   22,   22,  267,  267,  306,  286,  318,  316,
      306,  263,  287,  287,  287,  287,  304,  304,  304,  322,
      325,  326,  327,  286,  328,  317,  330,  331,  333,  311,
       22,   22,   22,   22,   22,   22,   22,   22,  348,  304,
      336,  337,  338,   22,  316,  344,  324,  339,  343,  345,

      347,  351,  346,  354,  358,  322,  328,  353,  355,  375,
      375,  331,  433,  325,  287,  356,  365,  365,  365,  390,
      330,  326,  336,  327,  333,   22,   23,   23,  367,  367,
      367,  338,  336,  339,  383,   23,  346,  346,  337,  354,
      348,  343,  381,  381,  355,  344,  345,  390,  351,  346,
      347,  356,  353,  647,  360,  358,  360,  360,  360,  360,
      361,  433,  361,  361,  361,  361,  392,  383,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  359,  392,  359,  359,  359,  359,  379,

       23,   24,   24,  369,  369,  369,  424,  359,  646,  362,
       24,  362,  362,  362,  362,  371,  371,  371,  373,  373,
      373,  379,  386,  359,  385,  385,  385,  388,  388,  388,
      415,  379,  379,  382,  415,  416,  386,  386,  386,  416,
      424,  385,  645,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  437,  420,
      382,  385,  413,  413,  413,   24,   89,   89,  423,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,  393,  393,  393,  413,  394,  425,  427,   89,

       89,   89,   89,   89,   89,  394,  394,  394,  420,  393,
      428,  437,  644,   89,   89,   89,   89,  423,   89,  398,
      398,  398,  398,  399,  399,  399,  399,  469,  469,  469,
      427,  441,  444,  487,  442,  450,  487,  435,  451,  393,
      471,  471,  471,  458,   89,   89,   89,  425,   89,   89,
       89,   89,   89,  102,  102,  428,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  417,
      417,  417,  431,  435,  451,  444,  102,  102,  102,  102,
      102,  102,  441,  442,  456,  450,  417,  452,  458,  506,
      102,  102,  102,  102,  464,  102,  457,  499,  642,  463,

      473,  473,  473,  475,  475,  475,  431,  477,  477,  477,
      518,  509,  431,  480,  480,  480,  417,  503,  431,  452,
      456,  102,  102,  102,  507,  102,  102,  102,  102,  102,
      138,  463,  512,  499,  138,  138,  457,  510,  506,  464,
      482,  482,  482,  509,  138,  138,  138,  497,  497,  497,
      516,  511,  519,  503,  525,  526,  518,  560,  533,  564,
      507,  138,  527,  138,  532,  537,  566,  138,  138,  138,
      542,  542,  542,  138,  510,  544,  544,  544,  558,  558,
      558,  138,  571,  512,  572,  138,  577,  138,  511,  138,
      525,  138,  145,  516,  533,  564,  145,  145,  579,  580,

      537,  597,  560,  519,  526,  641,  145,  145,  145,  640,
      639,  527,  638,  532,  637,  636,  566,  635,  634,  633,
      632,  631,  577,  145,  630,  145,  628,  627,  626,  145,
      145,  145,  625,  572,  579,  145,  624,  597,  571,  618,
      615,  614,  613,  145,  612,  611,  608,  145,  580,  145,
      607,  145,  606,  145,  181,  602,  601,  595,  181,  181,
      593,  591,  590,  589,  586,  585,  583,  581,  181,  181,
      181,  576,  575,  573,  569,  568,  567,  565,  562,  556,
      555,  554,  553,  552,  551,  181,  549,  181,  548,  546,
      541,  181,  181,  181,  538,  531,  520,  181,  514,  504,

      502,  496,  495,  494,  493,  181,  492,  490,  489,  181,
      488,  181,  486,  181,  484,  181,  233,  233,  479,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  467,  465,  462,  460,  459,  455,  454,  233,
      233,  233,  233,  233,  233,  453,  448,  447,  446,  445,
      439,  436,  434,  233,  233,  233,  233,  426,  233,  422,
      421,  418,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  391,  380,  378,  357,  352,
      340,  335,  329,  323,  233,  233,  233,  320,  233,  233,
      233,  233,  233,  238,  238,  319,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  308,
      303,  302,  301,  300,  299,  298,  238,  238,  238,  238,
      238,  238,  297,  295,  294,  293,  292,  285,  283,  271,
      238,  238,  238,  238,  269,  238,  237,  236,  232,  231,
      212,  206,  204,  194,  185,  183,  182,  179,  178,  174,
      172,  169,  164,  160,  158,  148,  146,  144,  139,  101,
       88,  238,  238,  238,   83,  238,  238,  238,  238,  238,
      275,   75,   74,   54,   50,   49,   37,   33,   29,   28,
       27,    0,    0,    0,  275,  275,  275,  275,    0,    0,
        0,    0,    0,    0,  275,  275,  275,  275,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  275,  275,
      275,  275,  275,  275,  282,    0,    0,    0,    0,    0,
        0,    0,    0,  282,  282,  282,  282,    0,    0,    0,
        0,    0,    0,  282,  282,  282,  282,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  282,  282,  282,
      282,  282,  282,  305,  305,  305,  305,    0,    0,    0,
        0,    0,    0,  305,  305,  305,  305,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  305,  305,  305,  305,
      305,  305,  305,  387,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  387,  387,  387,

      387,    0,    0,    0,    0,    0,    0,  387,  387,  387,
      387,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  387,  387,  387,  387,  387,  387,  395,    0,    0,
        0,    0,    0,    0,    0,    0,  395,  395,  395,  395,
        0,    0,    0,    0,    0,    0,  395,  395,  395,  395,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      395,  395,  395,  395,  395,  395,  414,  414,  414,  414,
        0,    0,    0,    0,    0,    0,  414,  414,  414,  414,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  414,
      414,  414,  414,  414,  414,  414,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  664,  664,  664,  664,  664,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  670,    0,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  673,    0,    0,    0,  673,  673,    0,    0,    0,
      673,  673,  673,    0,  673,  673,  673,  674,    0,  674,

      674,  674,    0,    0,  674,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  676,    0,    0,
        0,  676,  676,    0,    0,    0,  676,  676,  676,    0,
      676,  676,  676,  677,    0,  677,  677,  677,  677,    0,
      677,    0,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  678,    0,  678,  678,    0,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  679,  679,  679,
      679,    0,    0,    0,  679,  679,  679,    0,  679,  679,

      680,  680,    0,    0,    0,  680,  680,  680,    0,    0,
      680,  681,    0,  681,  681,    0,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  682,  682,  682,  682,    0,    0,    0,
      682,  682,  682,    0,  682,  682,  683,  683,    0,    0,
        0,  683,  683,  683,    0,  683,  683,  683,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  685,
      685,    0,    0,    0,  685,  685,  685,    0,  685,  685,
      685,  686,  686,  686,  686,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  687,  687,    0,    0,    0,  687,  687,  687,
        0,  687,  687,  687,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  689,  689,    0,    0,    0,
      689,  689,  689,    0,  689,  689,  689,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  692,

      692,    0,    0,    0,  692,  692,  692,    0,  692,  692,
      692,  693,    0,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,    0,  693,  693,  693,    0,  693,
      693,  693,  693,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  696,  696,  696,
        0,    0,    0,    0,  696,    0,    0,    0,    0,    0,
        0,  696,    0,    0,  696,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  699,
      699,    0,    0,    0,  699,    0,    0,    0,    0,  699,
      700,    0,    0,    0,  700,  700,    0,    0,    0,  700,
      700,  700,    0,  700,  700,  700,  701,  701,  701,    0,
        0,  701,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  704,    0,    0,    0,
      704,  704,    0,    0,    0,  704,  704,  704,    0,  704,
      704,  704,  705,    0,  705,  705,  705,  705,    0,  705,
        0,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  706,    0,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  707,  707,  707,  707,
        0,    0,    0,  707,  707,  707,    0,  707,  707,  708,
      708,    0,    0,    0,  708,  708,  708,    0,    0,  708,

      709,    0,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  710,  710,  710,  710,    0,    0,    0,  710,
      710,  710,    0,  710,  710,  711,  711,    0,    0,    0,
      711,  711,  711,    0,  711,  711,  711,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  713,  713,
      713,    0,    0,    0,    0,  713,    0,    0,    0,    0,
        0,    0,  713,    0,    0,  713,  714,  714,    0,    0,
        0,  714,  714,  714,    0,  714,  714,  714,  715,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  716,
      716,  716,    0,    0,    0,    0,  716,    0,    0,    0,
        0,    0,    0,  716,    0,    0,  716,  717,  717,    0,
        0,    0,  717,  717,  717,    0,  717,  717,  717,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      719,  719,  719,    0,    0,    0,    0,  719,    0,    0,
        0,    0,    0,    0,  719,    0,    0,  719,  720,  720,
        0,    0,    0,  720,  720,  720,    0,  720,  720,  720,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  722,  722,  722,    0,    0,    0,    0,  722,    0,
        0,    0,    0,    0,    0,  722,    0,    0,  722,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      724,  724,  724,    0,    0,    0,    0,  724,    0,    0,
        0,    0,    0,    0,  724,    0,    0,  724,  725,  725,
        0,    0,    0,  725,  725,  725,    0,  725,  725,  725,
      726,  726,    0,    0,    0,  726,    0,    0,    0,    0,

      726,  727,    0,  727,  727,  727,  727,  727,  727,  727,
      727,  727,    0,  727,  727,  727,  727,  727,    0,  727,
      727,  727,  727,  728,  728,    0,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,    0,  729,  729,  729,  729,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      732,  732,    0,    0,    0,  732,    0,    0,    0,    0,
      732,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  735,  735,    0,    0,    0,  735,
        0,    0,    0,    0,  735,  736,  736,  736,    0,    0,
      736,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  739,    0,    0,    0,  739,  739,
        0,    0,    0,  739,  739,  739,    0,  739,  739,  739,
      740,  740,    0,    0,    0,  740,    0,    0,    0,    0,
      740,  741,  741,    0,    0,    0,  741,    0,    0,    0,
        0,  741,  742,  742,    0,    0,    0,  742,    0,    0,
        0,    0,  742,  743,  743,    0,    0,    0,  743,    0,
        0,    0,    0,  743,  744,  744,    0,    0,    0,  744,
        0,    0,    0,    0,  744,  745,  745,  745,    0,    0,

        0,    0,  745,    0,    0,    0,    0,    0,    0,  745,
        0,    0,  745,  746,  746,    0,    0,    0,  746,    0,
        0,    0,    0,  746,  747,  747,  747,    0,    0,    0,
        0,  747,    0,    0,    0,    0,    0,    0,  747,    0,
        0,  747,  748,  748,  748,    0,    0,    0,    0,  748,
        0,    0,    0,    0,    0,    0,  748,    0,    0,  748,
      749,  749,    0,    0,    0,  749,    0,    0,    0,    0,
      749,  750,  750,    0,    0,    0,  750,    0,    0,    0,
        0,  750,  751,  751,    0,    0,    0,  751,    0,    0,
        0,    0,  751,  752,  752,    0,    0,    0,  752,    0,

        0,    0,    0,  752,  753,  753,    0,    0,    0,  753,
        0,    0,    0,    0,  753,  754,  754,    0,    0,    0,
      754,    0,    0,    0,    0,  754,  755,  755,    0,    0,
        0,  755,    0,    0,    0,    0,  755,  756,  756,    0,
        0,    0,  756,    0,    0,    0,    0,  756,  757,  757,
        0,    0,    0,  757,    0,    0,    0,    0,  757,  758,
      758,    0,    0,    0,  758,    0,    0,    0,    0,  758,
      759,  759,    0,    0,    0,  759,    0,    0,    0,    0,
      759,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*
 *  Authors:
 *    Martin Henz <henz@iscs.nus.sg>
 *    Leif Kornstaedt <kornstae@ps.uni-sb.de>
 * 
 *  Copyright:
 *    Martin Henz and Leif Kornstaedt, 1996-1999
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation of Oz 3:
 *    http://www.mozart-oz.org
 * 
 *  See the file "LICENSE" or
 *    http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */
#include <string.h>
#include <sys/stat.h>

#if !defined(__MINGW32__) && !defined(_MSC_VER)
#include <pwd.h>
#endif

#include "conf.h"
#include "base.hh"
#include "os.hh"
#include "dictionary.hh"
#include "am.hh"

#include "parser.hh"

void xyreportError(char *kind, char *message,
		   const char *file, int line, int column);
void xy_setScannerPrefix();
void xy_setParserExpect();

char xyFileName[100];
char xyhelpFileName[100];
OZ_Term xyFileNameAtom;

int xy_gumpSyntax, xy_allowDeprecated;
OZ_Term xy_errorMessages;

static int errorFlag;


//*******************
// THE INPUT ROUTINE
//*******************

int xylino;                             // current line number
char *xylastline;                       // remember where we have put the input

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size)   xy_input(buf, result, max_size)

static void xy_input(char *buf, int &result, const int max_size) {
  xylastline = buf;

  // read one line into buf
  int curpos = 0;
  int c = fgetc(xyin);
  while(curpos < max_size && c != EOF && c != OZEOF && c != '\n') {
    buf[curpos++] = c;
    if (curpos < max_size)
      c = fgetc(xyin);
  }

  if (c == EOF || c == OZEOF) {
    if (curpos > 0)   // did we read other chars than EOF?
      result = curpos;
    else
      result = YY_NULL;
  } else {
    if (curpos < max_size)
      buf[curpos++] = c;
    result = curpos;
  }
}


//****************
// OUTPUT OF FLEX
//****************

#undef YY_DECL
#define YY_DECL static int xymylex()


//*************************
// CONDITIONAL COMPILATION
// uses a stack of flags;
// \ifdef and \ifndef push
// \else toggles top
// \endif pops.
//*************************

static OzDictionary *defines;

#define CONDITIONALMAXDEPTH 1000

static int conditional[CONDITIONALMAXDEPTH];
static int conditional_p;       // points to top of stack
static int conditional_basep;   // points to bottom of stack

static void push_cond(int flag) {
  if (conditional_p < CONDITIONALMAXDEPTH - 1)
    conditional[++conditional_p] = flag;
  else
    xyreportError("macro directive limitation",
		  "conditionals nested too deep",
		  xyFileName,xylino,xycharno());
}

static void pop_cond() {
  if (conditional_p > conditional_basep)
    conditional_p--;
  else
    xyreportError("macro directive error",
		  "\\endif without previous corresponding \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
}

static void toggle_cond() {
  if (conditional_p > conditional_basep) {
    // toggle top of flag stack
    if (conditional[conditional_p])
      conditional[conditional_p] = 0;
    else
      conditional[conditional_p] = 1;
  } else
    xyreportError("macro directive error",
		  "\\else without previous corresponding \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
}

static int get_cond() {
  int i = conditional_p;
  while (i > conditional_basep)
    if (!conditional[i--])
      return 0;
  return 1;
}


//***********************
// STACK OF FILE ENTRIES
// for \insert
//***********************

class XyFileEntry {
public:
  YY_BUFFER_STATE buffer;
  OZ_Term fileNameAtom;
  int lino;
  int conditional_basep;
  XyFileEntry *previous;

  XyFileEntry(YY_BUFFER_STATE b, OZ_Term f, int l, int c, XyFileEntry *p):
      buffer(b), fileNameAtom(f), lino(l), conditional_basep(c), previous(p) {}
};

static XyFileEntry *bufferStack;

static void push_insert(FILE *filep, char *fileName) {
  bufferStack = new XyFileEntry(YY_CURRENT_BUFFER, xyFileNameAtom, xylino,
				conditional_basep, bufferStack);
  strncpy(xyFileName, fileName, 99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(fileName);
  xyin = filep;
  BEGIN(INITIAL);
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  xylino = 1;
  conditional_basep = conditional_p;
}

static int pop_insert() {
  if (conditional_p > conditional_basep)
    xyreportError("macro directive error",
		  "unterminated \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
  errorFlag = 0;
  if (bufferStack != NULL) {
    fclose(xyin);
    xy_switch_to_buffer(bufferStack->buffer);
    xyFileNameAtom = bufferStack->fileNameAtom;
    const char *fileName = OZ_atomToC(xyFileNameAtom);
    strncpy(xyFileName, fileName, 99);
    xyFileName[99] = '\0';
    xylino = bufferStack->lino;
    conditional_basep = bufferStack->conditional_basep;
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
    return 0;
  } else
    return 1;
}


//**********
// COMMENTS
//**********

static int commentdepth;
static OZ_Term commentfile;
static int commentlino;
static int commentoffset;
static int commentlastmode;


//*********************
// FILE NAME EXPANSION
//*********************

static char *getHomeUser(char *user) {
#ifdef WINDOWS
  return NULL;
#else
  struct passwd *pwentry = getpwnam(user);
  return pwentry != NULL? pwentry->pw_dir: (char *) NULL;
#endif
}

static int isReadableFile(char *file) {
  struct stat buf;

  if (access(file, F_OK) < 0 || stat(file, &buf) < 0)
    return 0;

  return !S_ISDIR(buf.st_mode);
}

static char *checkAccess(char *file) {
  char *ret = new char[strlen(file) + 1 + 3];

  strcpy(ret, file);
  if (isReadableFile(ret))
    return ret;

  strcat(ret, ".oz");
  if (isReadableFile(ret))
    return ret;

  delete[] ret;
  return NULL;
}

static char *scExpndFileName(char *fileName, char *curfile) {
  for (int i = 0; fileName[i] != '\0'; i++)
    if (fileName[i] == '\\')
      fileName[i] = '/';

  // full pathname given?
  if (fileName[0] == '/' ||
#ifdef WINDOWS
      (fileName[0] != '\0' && fileName[1] == ':') ||
      // good old DOS filename like E:...
#endif
      !strncmp(fileName, "./", 2))
    return checkAccess(fileName);

  // expand "~"
  if (fileName[0] == '~') {
    char *userhome;
    int len = 0;
    if (fileName[1] == '/') {
      userhome = osgetenv("HOME");
      len = 2;
    } else {
      char *rest = strchr(fileName, '/');
      if (rest == NULL)
	userhome = NULL;
      else {
	len = (rest + 1) - fileName;
	rest[0] = '\0';
	userhome = getHomeUser(&fileName[1]);
	rest[0] = '/';
      }
    }
    if (userhome == NULL)
      return NULL;

    char *help = new char[strlen(userhome) + 1 + strlen(&fileName[len]) + 1];
    sprintf(help, "%s/%s", userhome, &fileName[len]);
    char *ret = checkAccess(help);
    delete[] help;

    return ret;
  }

  // search in "current" directory
  if (curfile != NULL) {
    int i = strlen(curfile);
    while (i != 0 && curfile[i - 1] != '/')   // i. e., the dir part of curfile
      i--;
    if (i != 0) {
      char *help = new char[i + strlen(fileName) + 1];
      strncpy(help, curfile, i);
      strcpy(&help[i], fileName);
      char *ret = checkAccess(help);
      delete[] help;

      if (ret != NULL)
	return ret;
    }
  }

  // search in OZPATH
  char *path = osgetenv("OZPATH");
  if (path == NULL)
    path = ".";

  while (path[0] != '\0') {
    int i;
    for (i = 0; path[i] != PathSeparator && path[i] != '\0'; i++);
    char *help = new char[i + 1 + strlen(fileName) + 1];
    strncpy(help, path, i);
    help[i] = '/';
    strcpy(&help[i + 1], fileName);
    char *ret = checkAccess(help);
    delete[] help;
    if (ret != NULL)
      return ret;
    if (path[i] == '\0')
      break;
    path = &path[i + 1];
  }

  return NULL;
}


//***************************
// TREATING STRINGS AND SUCH
//***************************

static void stripDot() {
  int i, j;
  for (i = 0; xytext[i] < '0' || xytext[i] > '9'; i++)
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
  for (j = 0; xytext[i] != '\0'; xytext[j++] = xytext[i++]);
  xytext[j] = '\0';
}

static void strip(char c) {
  if (xytext[0] == c) {
    int i = 1;
    while (xytext[i] != '\0') {
      xytext[i - 1] = xytext[i];
      i++;
    }
    xytext[i - 2] = '\0';
  }
}

static void stripRegex() {
  int i = 1;
  while (xytext[i] != '\0') {
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
    xytext[i - 1] = xytext[i];
    i++;
  }
  xytext[i - 2] = '\0';
}

static void transBody(char c, char *text, int &i, int &j) {
  int jstart = j;
  while (text[j] != c) {
    if (text[j] == '\n')
      xylino++;
    if (text[j] == '\\') {
      j++;
      switch (text[j]) {
      case 'a':
	text[i] = '\a';
	break;
      case 'b':
	text[i] = '\b';
	break;
      case 'f':
	text[i] = '\f';
	break;
      case 'n':
	text[i] = '\n';
	break;
      case 'r':
	text[i] = '\r';
	break;
      case 't':
	text[i] = '\t';
	break;
      case 'v':
	text[i] = '\v';
	break;
      case 'x':
      case 'X':
	{ char hexstring[3];
	  hexstring[0] = text[++j];
	  hexstring[1] = text[++j];
	  hexstring[2] = '\0';
	  int hexnum = (int) strtol(hexstring, NULL, 16);
	  if (hexnum == 0 && get_cond())
	    xyreportError("lexical error",
			  "character in hexadecimal notation =< 0",
			  xyFileName,xylino,xycharno() + (j - jstart));
	  text[i] = hexnum;
	}
	break;
      case '\\':
      case '`':
      case '\"':
      case '\'':
      case '&':
	text[i] = text[j];
	break;
      default:
	{ char octstring[4];
	  octstring[0] = text[j++];
	  octstring[1] = text[j++];
	  octstring[2] = text[j];
	  octstring[3] = '\0';
	  int octnum = (int) strtol(octstring, NULL, 8);
	  if ((octnum == 0 || octnum > 255) && get_cond())
	    xyreportError("lexical error",
			  "character in octal notation =< 0 or >= 256",
			  xyFileName,xylino,xycharno() + (j - jstart));
	  text[i] = octnum & 0xFF;
	}
      }
    } else
      text[i] = text[j];
    i++;
    j++;
  }
}

static void stripTrans(char c) {
  if (xytext[0] == c) {
    int i = 0;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i] = '\0';
  }
}

static void trans(char c) {
  if (xytext[0] == c) {
    int i = 1;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i++] = c;
    xytext[i] = '\0';
  }
}

#define COMMENT 1

#define IGNOREDIRECTIVE 2
#define DIRECTIVE 3

#define LINE 4
#define SWITCHDIR 5
#define INSERT 6
#define DEFINE 7
#define IFDEF 8
#define IFNDEF 9
#define UNDEF 10

#define SCANNERPREFIX 11
#define PARSEREXPECT 12

#define LEX 13


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 660 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3482 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
;
	YY_BREAK
case 2:
YY_RULE_SETUP
{ commentdepth = 1;
				 commentfile = xyFileNameAtom;
				 commentlino = xylino;
				 commentoffset = xycharno();
				 commentlastmode = YYSTATE;
				 BEGIN(COMMENT);
			       }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ commentdepth++; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ if (--commentdepth == 0)
				   BEGIN(commentlastmode);
			       }
	YY_BREAK
case 5:
YY_RULE_SETUP
;
	YY_BREAK
case 6:
YY_RULE_SETUP
{ xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case 7:
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{ if (get_cond()) {
				   const char *file = OZ_atomToC(commentfile);
				   xyreportError("lexical error",
						 "unterminated comment",
						 file,commentlino,commentoffset);
				 }
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ BEGIN(SWITCHDIR); return T_SWITCH; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_PUSHSWITCHES; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_POPSWITCHES; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_LOCALSWITCHES; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ if (get_cond()) BEGIN(LINE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ BEGIN(INSERT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ BEGIN(DEFINE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ BEGIN(UNDEF); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ BEGIN(IFDEF); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ BEGIN(IFNDEF); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ toggle_cond();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ pop_cond();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ BEGIN(SCANNERPREFIX); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ BEGIN(PARSEREXPECT); }
	YY_BREAK

case 22:
YY_RULE_SETUP
;
	YY_BREAK
case 23:
YY_RULE_SETUP
;
	YY_BREAK
case 24:
YY_RULE_SETUP
{ BEGIN(INITIAL);
				 xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case YY_STATE_EOF(IGNOREDIRECTIVE):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 25:
YY_RULE_SETUP
;
	YY_BREAK
case 26:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(DIRECTIVE):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 28:
YY_RULE_SETUP
{ xylino = atol(xytext) - 1; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ strip('\'');
				 char *fullname = scExpndFileName(xytext,xyFileName);
				 if (fullname != NULL) {
				   strncpy(xyFileName, fullname, 99);
				   delete[] fullname;
				 } else
				   strncpy(xyFileName, xytext, 99);
				 xyFileName[99] = '\0';
				 xyFileNameAtom = OZ_atom(xyFileName);
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 30:
YY_RULE_SETUP
;
	YY_BREAK
case 31:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(LINE):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 33:
YY_RULE_SETUP
{ return '+'; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return '-'; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return T_SWITCHNAME; }
	YY_BREAK
case 36:
YY_RULE_SETUP
;
	YY_BREAK
case 37:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(SWITCHDIR):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 39:
YY_RULE_SETUP
{ if (get_cond()) {
				   strip('\'');
				   char *fullname = scExpndFileName(xytext,xyFileName);
				   if (fullname != NULL) {
				     OZ_Term coord =
				       OZ_mkTupleC("pos",3,xyFileNameAtom,
						   OZ_int(xylino),
						   OZ_int(xycharno()));
				     xy_errorMessages =
				       oz_cons(OZ_mkTupleC("logInsert",2,
							   OZ_atom(fullname),
							   coord),
					       xy_errorMessages);
				     FILE *filep = fopen(fullname, "r");
				     push_insert(filep, fullname);
				     delete[] fullname;
				     BEGIN(INITIAL);
				   } else {
				     const char *s =
				       "could not open file `";
				     char *f = new char[strlen(s) + 1 +
							strlen(xytext) + 2];
				     strcpy(f,s);
				     strcat(f,xytext);
				     strcat(f,"'");
				     xyreportError("macro directive error",f,
						   xyFileName,xylino,xycharno());
				     delete[] f;
				     BEGIN(DIRECTIVE);
				   }
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 40:
YY_RULE_SETUP
;
	YY_BREAK
case 41:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(INSERT):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 43:
YY_RULE_SETUP
{ if (get_cond()) {
				   trans('`');
				   OZ_Term key = OZ_atom(xytext);
				   defines->setArg(key, NameTrue);
				   BEGIN(DIRECTIVE);
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 44:
YY_RULE_SETUP
;
	YY_BREAK
case 45:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(DEFINE):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 47:
YY_RULE_SETUP
{ if (get_cond()) {
				   trans('`');
				   defines->remove(OZ_atom(xytext));
				   BEGIN(DIRECTIVE);
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 48:
YY_RULE_SETUP
;
	YY_BREAK
case 49:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ if (errorFlag)
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(UNDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 51:
YY_RULE_SETUP
{ trans('`');
				 OZ_Term key = OZ_atom(xytext);
				 push_cond(OZ_isTrue(defines->member(key)));
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 52:
YY_RULE_SETUP
;
	YY_BREAK
case 53:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(IFDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 55:
YY_RULE_SETUP
{ trans('`');
				 OZ_Term key = OZ_atom(xytext);
				 push_cond(!OZ_isTrue(defines->member(key)));
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 56:
YY_RULE_SETUP
;
	YY_BREAK
case 57:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(IFNDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 59:
YY_RULE_SETUP
{ stripTrans('\'');
				 xy_setScannerPrefix();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 60:
YY_RULE_SETUP
;
	YY_BREAK
case 61:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(SCANNERPREFIX):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 63:
YY_RULE_SETUP
{ xy_setParserExpect();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 64:
YY_RULE_SETUP
;
	YY_BREAK
case 65:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(PARSEREXPECT):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 67:
YY_RULE_SETUP
{ BEGIN(INITIAL); return T_REGEX; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ BEGIN(INITIAL); stripRegex(); return T_REGEX; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return T_CHOICE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return T_LDOTS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return T_2DOTS; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return T_ITER; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return T_OOASSIGN; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return T_DEFAULT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return T_REDUCE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return T_DEREFF; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return T_SEP; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return T_ADD; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return T_FDMUL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return T_OTHERMUL; }
	YY_BREAK
case 81:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OTHERMUL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return T_COMPARE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return T_FDIN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ return T_FDCOMPARE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ return T_LMACRO; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ return T_RMACRO; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ return T_DOTASSIGN; }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ // Hack to avoid strange parsing of X.1.1:
				 // If "." is followed by integer, then
				 // a special token is returned.
				 // If this rule would not be there, the
				 // resulting tokens would be "X" "." "1.1",
				 // where the last one is a float.
				 // Caveat: Comments are not allowed
				 //         between . and number.
				 stripDot(); return T_DOTINT; }
	YY_BREAK
case 89:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ // Hack to avoid parsing error for a(b:1...):
				 // If int is followed by ..., int is returned.
				 // If this rule would not be there, the rule
				 // for floats would match and an error would
				 // occur.
				 return T_OZINT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ return T_OZINT; }
	YY_BREAK
case 91:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OZINT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ return T_OZFLOAT; }
	YY_BREAK
case 93:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_UNIT_LABEL; }
	YY_BREAK
case 94:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_TRUE_LABEL; }
	YY_BREAK
case 95:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FALSE_LABEL; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ return T_andthen; }
	YY_BREAK
case 97:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_andthen; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ return T_at; }
	YY_BREAK
case 99:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_at; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ return T_attr; }
	YY_BREAK
case 101:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_attr; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ return T_case; }
	YY_BREAK
case 103:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_case; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ return T_catch; }
	YY_BREAK
case 105:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_catch; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ return T_choice; }
	YY_BREAK
case 107:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_choice; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ return T_class; }
	YY_BREAK
case 109:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_class; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ return T_cond; }
	YY_BREAK
case 111:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_cond; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ return T_declare; }
	YY_BREAK
case 113:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_declare; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ return T_define; }
	YY_BREAK
case 115:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_define; }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ return T_dis; }
	YY_BREAK
case 117:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_dis; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ return T_do; }
	YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_do; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ return T_else; }
	YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_else; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ return T_elsecase; }
	YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elsecase; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ return T_elseif; }
	YY_BREAK
case 125:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseif; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ return T_elseof; }
	YY_BREAK
case 127:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseof; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ return T_end; }
	YY_BREAK
case 129:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_end; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ return T_export; }
	YY_BREAK
case 131:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_export; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ return T_fail; }
	YY_BREAK
case 133:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fail; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return T_false; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ return T_feat; }
	YY_BREAK
case 136:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_feat; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return T_finally; }
	YY_BREAK
case 138:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_finally; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ return T_for; }
	YY_BREAK
case 140:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_for; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return T_FOR; }
	YY_BREAK
case 142:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FOR; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ return T_from; }
	YY_BREAK
case 144:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_from; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ return T_fun; }
	YY_BREAK
case 146:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fun; }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ return T_functor; }
	YY_BREAK
case 148:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_functor; }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ return T_if; }
	YY_BREAK
case 150:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_if; }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ return T_import; }
	YY_BREAK
case 152:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_import; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ return T_in; }
	YY_BREAK
case 154:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_in; }
	YY_BREAK
case 155:
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_OZATOM; }
	YY_BREAK
case 156:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_ATOM_LABEL; }
	YY_BREAK
case 157:
YY_RULE_SETUP
{ return T_local; }
	YY_BREAK
case 158:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_local; }
	YY_BREAK
case 159:
YY_RULE_SETUP
{ return T_lock; }
	YY_BREAK
case 160:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_lock; }
	YY_BREAK
case 161:
YY_RULE_SETUP
{ return T_meth; }
	YY_BREAK
case 162:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_meth; }
	YY_BREAK
case 163:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_OZATOM; }
	YY_BREAK
case 164:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_ATOM_LABEL; }
	YY_BREAK
case 165:
YY_RULE_SETUP
{ return T_not; }
	YY_BREAK
case 166:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_not; }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ return T_of; }
	YY_BREAK
case 168:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_of; }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ return T_or; }
	YY_BREAK
case 170:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_or; }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ return T_orelse; }
	YY_BREAK
case 172:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_orelse; }
	YY_BREAK
case 173:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_OZATOM; }
	YY_BREAK
case 174:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_ATOM_LABEL; }
	YY_BREAK
case 175:
YY_RULE_SETUP
{ return T_prepare; }
	YY_BREAK
case 176:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prepare; }
	YY_BREAK
case 177:
YY_RULE_SETUP
{ return T_proc; }
	YY_BREAK
case 178:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_proc; }
	YY_BREAK
case 179:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_OZATOM; }
	YY_BREAK
case 180:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_ATOM_LABEL; }
	YY_BREAK
case 181:
YY_RULE_SETUP
{ return T_prop; }
	YY_BREAK
case 182:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prop; }
	YY_BREAK
case 183:
YY_RULE_SETUP
{ return T_raise; }
	YY_BREAK
case 184:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_raise; }
	YY_BREAK
case 185:
YY_RULE_SETUP
{ return T_require; }
	YY_BREAK
case 186:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_require; }
	YY_BREAK
case 187:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_OZATOM; }
	YY_BREAK
case 188:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_ATOM_LABEL; }
	YY_BREAK
case 189:
YY_RULE_SETUP
{ return T_self; }
	YY_BREAK
case 190:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_self; }
	YY_BREAK
case 191:
YY_RULE_SETUP
{ return T_skip; }
	YY_BREAK
case 192:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_skip; }
	YY_BREAK
case 193:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_OZATOM; }
	YY_BREAK
case 194:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_ATOM_LABEL; }
	YY_BREAK
case 195:
YY_RULE_SETUP
{ return T_then; }
	YY_BREAK
case 196:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_then; }
	YY_BREAK
case 197:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_OZATOM; }
	YY_BREAK
case 198:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_ATOM_LABEL; }
	YY_BREAK
case 199:
YY_RULE_SETUP
{ return T_thread; }
	YY_BREAK
case 200:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_thread; }
	YY_BREAK
case 201:
YY_RULE_SETUP
{ return T_true; }
	YY_BREAK
case 202:
YY_RULE_SETUP
{ return T_try; }
	YY_BREAK
case 203:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_try; }
	YY_BREAK
case 204:
YY_RULE_SETUP
{ return T_unit; }
	YY_BREAK
case 205:
YY_RULE_SETUP
{ stripTrans('\''); return T_OZATOM; }
	YY_BREAK
case 206:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_OZATOM;}
	YY_BREAK
case 207:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ stripTrans('\''); return T_ATOM_LABEL; }
	YY_BREAK
case 208:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_ATOM_LABEL;}
	YY_BREAK
case 209:
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
	YY_BREAK
case 211:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE_LABEL; }
	YY_BREAK
case 212:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
	YY_BREAK
case 213:
YY_RULE_SETUP
{ stripTrans('\"'); return T_STRING; }
	YY_BREAK
case 214:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal string syntax",xyFileName,xylino,xycharno()); return T_STRING;}
	YY_BREAK
case 215:
YY_RULE_SETUP
{ int i = 0;
				 int j = 1;
				 transBody(0, xytext, i, j);
				 return T_AMPER;
			       }
	YY_BREAK
case 216:
YY_RULE_SETUP
{
				 return xytext[0];
			       }
	YY_BREAK
case 217:
YY_RULE_SETUP
;
	YY_BREAK
case 218:
YY_RULE_SETUP
{ xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case 219:
YY_RULE_SETUP
{ if (get_cond())
				   xyreportError("lexical error",
						 "unknown directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(IGNOREDIRECTIVE);
			       }
	YY_BREAK
case 220:
YY_RULE_SETUP
{ if (get_cond())
				   xyreportError("lexical error",
						 "illegal character",
						 xyFileName,xylino,xycharno());
			       }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEX):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK
case 221:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 77);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 660 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 77;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 660 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 659);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


static void xy_init(OZ_Term defines0) {
  xylino = 1;
  errorFlag = 0;

  bufferStack = NULL;

  defines = tagged2Dictionary(OZ_deref(defines0));
  conditional_p = 0;
  conditional_basep = 0;
  commentdepth = 0;

  BEGIN(INITIAL);
}

int xy_init_from_file(char *file, OZ_Term defines) {
  char *fullname = scExpndFileName(file, NULL);
  if (fullname == NULL)
    return 0;
  xy_errorMessages = oz_cons(OZ_mkTupleC("logInsert",1,OZ_atom(fullname)),
			     AtomNil);
  xyin = fopen(fullname, "r");
  if (xyin == NULL)
    return 0;
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  strncpy(xyFileName,fullname,99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  delete[] fullname;
  xy_init(defines);
  return 1;
}

void xy_init_from_string(char *str, OZ_Term defines) {
  xy_errorMessages = AtomNil;
  xyFileName[0] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  xyin = NULL;
  xy_scan_string(str);
  xylastline = YY_CURRENT_BUFFER->yy_ch_buf;
  xy_init(defines);
}

char *xy_expand_file_name(char *file) {
  return scExpndFileName(file, NULL);
}

void xy_exit() {
  xy_delete_buffer(YY_CURRENT_BUFFER);
  while (bufferStack != NULL) {
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
  }
  if (xyin)
    fclose(xyin);
}

int xylex() {
  int next = xymylex();
  if (get_cond() || next == 0 || next == T_ENDOFFILE)
    return next;
  else
    return xylex();
}

#define yy_create_buffer xy_create_buffer
#define yy_delete_buffer xy_delete_buffer
#define yy_scan_buffer xy_scan_buffer
#define yy_scan_string xy_scan_string
#define yy_scan_bytes xy_scan_bytes
#define yy_flex_debug xy_flex_debug
#define yy_init_buffer xy_init_buffer
#define yy_flush_buffer xy_flush_buffer
#define yy_load_buffer_state xy_load_buffer_state
#define yy_switch_to_buffer xy_switch_to_buffer
#define yyin xyin
#define yyleng xyleng
#define yylex xylex
#define yyout xyout
#define yyrestart xyrestart
#define yytext xytext

#line 19 "scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *      if ( condition_holds )
 *              yyless( 5 );
 *      else
 *              do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                *yy_cp = yy_hold_char; \
                YY_RESTORE_YY_MORE_OFFSET \
                yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
                YY_DO_BEFORE_ACTION; /* set up yytext again */ \
                } \
        while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
        {
        FILE *yy_input_file;

        char *yy_ch_buf;                /* input buffer */
        char *yy_buf_pos;               /* current position in input buffer */

        /* Size of input buffer in bytes, not including room for EOB
         * characters.
         */
        yy_size_t yy_buf_size;

        /* Number of characters read into yy_ch_buf, not including EOB
         * characters.
         */
        int yy_n_chars;

        /* Whether we "own" the buffer - i.e., we know we created it,
         * and can realloc() it to grow it, and should free() it to
         * delete it.
         */
        int yy_is_our_buffer;

        /* Whether this is an "interactive" input source; if so, and
         * if we're using stdio for input, then we want to use getc()
         * instead of fread(), to make sure we stop fetching input after
         * each newline.
         */
        int yy_is_interactive;

        /* Whether we're considered to be at the beginning of a line.
         * If so, '^' rules will be active on the next match, otherwise
         * not.
         */
        int yy_at_bol;

        /* Whether to try to fill the input buffer when we reach the
         * end of it.
         */
        int yy_fill_buffer;

        int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
        /* When an EOF's been seen but there's still some text to process
         * then we mark the buffer as YY_EOF_PENDING, to indicate that we
         * shouldn't try reading from the input source any more.  We might
         * still have a bunch of tokens to match, though, because of
         * possible backing-up.
         *
         * When we actually see the EOF, we change the status to "new"
         * (via yyrestart()), so that the user can continue scanning by
         * just pointing yyin at a new input file.
         */
#define YY_BUFFER_EOF_PENDING 2
        };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_is_interactive = is_interactive; \
        }

#define yy_set_bol(at_bol) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_at_bol = at_bol; \
        }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
        yytext_ptr = yy_bp; \
        yyleng = (int) (yy_cp - yy_bp); \
        yy_hold_char = *yy_cp; \
        *yy_cp = '\0'; \
        yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 213
#define YY_END_OF_BUFFER 214
static yyconst short int yy_accept[652] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  214,  212,
      209,  210,  208,  212,  208,    1,  212,  212,   77,   76,
      208,   77,   85,   85,  208,   80,  208,   80,  201,  208,
      212,  212,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  208,
        5,    6,    7,    7,   23,   22,   24,   26,   25,   27,
        1,   26,   31,   30,   32,   31,   29,   31,   28,   37,
       36,   38,   33,   34,   35,   41,   40,   42,   41,   39,

       41,   45,   44,   46,   43,   45,   53,   52,   54,   51,
       53,   57,   56,   58,   55,   57,   49,   48,   50,   47,
       49,   61,   60,   62,   61,   59,   65,   64,   66,   63,
       63,   65,   80,   74,    0,  205,    0,    0,    1,  207,
        0,    0,  197,    0,    0,    0,    0,   83,    2,   75,
       86,   85,    0,    0,    0,   85,   81,   71,   82,   72,
       80,   80,   73,  203,  201,   69,  211,  211,  211,  211,
      211,  211,  211,  211,  211,    0,    0,  201,    0,  199,
      197,  197,   92,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  139,  197,  143,

      197,  197,  197,  197,  197,  157,  159,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
       85,   85,    5,    4,    3,    0,   29,    0,   28,   35,
        0,   39,    0,   43,    0,    0,   43,   51,    0,    0,
       51,   55,    0,    0,   55,   47,    0,    0,   47,    0,
       59,    0,   59,   63,    0,    0,   63,   63,   63,    0,
        0,   71,   82,    0,   72,    0,    0,  206,    0,    0,
      206,    0,    0,  199,  198,    0,    0,  198,   70,    0,
       86,    0,   85,   85,   81,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,    0,    0,  202,

      203,  202,  197,   93,  197,  197,  197,  197,  197,  197,
      197,  197,  112,   78,  197,  122,  197,  197,  197,  197,
      197,  197,  135,  140,  197,  144,  145,  197,  197,   78,
      155,  158,  160,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  183,  197,  197,  197,  197,  192,  197,  197,
       86,   85,    0,   85,   29,   39,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   63,   63,   68,    0,
        0,    0,    0,    0,  205,    0,    0,    0,    0,    0,
        0,  197,  200,    0,    0,    0,  200,   84,   86,    0,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,    0,    0,    0,  204,    0,  201,  204,
      197,   94,   96,  197,  197,  197,  104,  197,  197,  113,
       79,  114,  123,  197,  126,  197,  129,  197,  133,  136,
      197,  197,  146,  197,  149,  151,  153,  156,  197,  197,
      197,  167,  169,  171,  197,  197,  197,  179,  181,  184,
      185,  197,  197,  191,  193,  194,  195,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  211,   18,  211,  211,  211,  211,  211,   12,
      211,  211,  211,  211,  211,    0,    0,  197,   95,   97,
       98,  197,  102,  105,  197,  197,  197,  115,  197,  197,

      197,  197,  127,  128,  130,  197,  134,  197,  197,  147,
      150,  152,  154,  197,  197,  197,  168,  170,  172,  173,
      197,  197,  180,  182,  186,  197,  187,   88,   87,  196,
        0,    0,    0,    0,    0,  211,   19,  211,  211,   16,
      211,  211,  211,  211,  211,  211,   15,    0,    0,  197,
       99,  100,  103,  106,  197,  110,  197,  118,  120,  124,
       89,  197,  197,  141,  148,  161,  163,  197,  174,  197,
      197,  189,  188,    0,   14,  211,  211,   17,   13,  211,
      211,  211,    8,   90,  101,  107,  108,  111,  197,  119,
      121,  125,  131,  137,  142,  162,  164,  165,  175,  177,

      190,   67,  211,  211,  211,  211,  211,   91,  109,  116,
      132,  138,  166,  176,  178,  211,  211,  211,  211,  211,
      117,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,   10,  211,  211,  211,  211,    9,
      211,  211,   11,  211,  211,  211,  211,   21,  211,   20,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   31,   31,   33,   34,
       35,   35,   35,   35,   35,   35,   35,   35,   36,   35,
       35,   35,   37,   35,   35,   35,   35,   38,   35,   35,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   54,   70,   71,   72,   73,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   25,   74,   74,   74,   74,   74,
       74,   74,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   25,   75,   75,   75,
       75,   75,   75,   75,   75
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    1,    2,    1,    1,    3,    4,    4,    4,    5,
        5,    6,    4,    7,    4,    4,    8,    8,    9,   10,
       10,   10,   11,    4,    4,   12,   13,   14,    4,    4,
       15,   15,   15,   15,   16,   16,   16,   17,    4,    5,
       18,    4,   19,    5,   20,   20,   15,   15,   15,   20,
       16,   16,   16,   16,   16,   16,   16,   17,   16,   16,
       16,   17,   16,   17,   16,   17,   16,   17,   16,    4,
        4,    4,    8,   21,   21,   22
    } ;

static yyconst short int yy_base[754] =
    {   0,
        0,    0,   74,   75,   77,   79,   81,   83,  102,    0,
      178,    0,  254,    0,  329,  402,  475,  548,  621,  694,
      767,  840,  913,  987,  333,  348, 1542, 1541, 1566, 3499,
     3499, 3499, 1560,  332, 3499,    0, 1524,  334, 3499, 3499,
      373,   77,  427,  319, 1539,  361,   71,  319, 1550, 1520,
      363,  304,  367, 1548,  408,  369,  374,  417,  431,  340,
      395,  397,  401,  412,  449,  468,  440,  429,  345,  463,
        0, 3499, 1540, 1544, 3499, 3499, 3499, 3499, 3499, 3499,
        0, 1543, 3499, 3499, 3499,    0, 1534, 1062,  504, 3499,
     3499, 3499, 3499, 3499,    0, 3499, 3499, 3499,    0, 1530,

     1138, 3499, 3499, 3499,    0,  343, 3499, 3499, 3499,    0,
      357, 3499, 3499, 3499,    0,  428, 3499, 3499, 3499,    0,
      431, 3499, 3499, 3499,  480,    0, 3499, 3499, 3499,  508,
      511,  521,  551, 3499,  463, 3499, 1209, 1541,    0, 3499,
      549,  524, 1534, 1272, 1534,  591, 1526,  538, 3499, 3499,
      583,  607,  613,  313,    0,  619, 1519, 3499, 3499, 3499,
     1518, 3499, 3499, 3499, 1529, 3499,    0, 1491,  291, 1474,
      334,  437,  488, 1471, 1479,  460, 1335, 1524, 1491, 3499,
     1522,  504,  481,  502,  446,  370,  443,  560,  536,  526,
      550,  555,  607,  543,  551,  562,  585, 1521,  584, 1520,

      596,  509,  606,  614,  626, 1519,  633,  636,  634,  347,
      638,  635,  649,  639,  654,  655,  656,  637,  657,  659,
      719,  654,    0, 3499, 3499, 1519, 1511, 1403,  666,    0,
     1517, 1509, 1479,    0,  641,  698, 3499,    0,  663,  723,
     3499,    0,  669,  726, 3499,    0,  709,  738, 3499,  668,
     3499,  751,    0,  694,  680,    0,  757,  788,  761,  746,
        0,  784,  789, 1493,  807, 1485,  709,  715,  810, 1550,
     3499,  816,    0, 3499,  722,  828, 1590, 1512, 3499, 1504,
      831,  837,  772,    0, 3499, 1467, 1453, 1467, 1457,  369,
     1450, 1454, 1464, 1450, 1439, 1448, 1452,  841, 1621,  843,

     3499, 1487,  751, 3499,  763,  784,  832,  744,  661,  833,
      666,  815, 1486, 1485,  853, 1484,  755,  810,  806,  776,
      855,  870,  858, 3499,  874, 3499, 1470,  876,  877,  879,
     1464, 3499, 3499,  878,  880,  881,  889,  882,  742,  884,
      885,  886, 1460,  892,  883,  891,  895, 1459,  887,  896,
      963,  934,  979,  985, 1459, 1458,  891,    0,  897,    0,
      971,    0,  989,    0,  993,    0,  902,    0, 3499, 1462,
     1431,  885,  906,  947, 3499, 1059,  998, 1666, 1001,    0,
      984, 1454, 1017, 1062, 1005, 1706, 3499, 3499, 1038, 1073,
     1412, 1415, 1410, 1402, 1412, 1412, 1410, 1409, 1412, 1419,

     1403, 1390, 1404, 1087, 1737, 1070, 1071, 1103, 1440, 3499,
     1053, 1439, 1438, 1104,  982, 1106, 1073,  894, 1100, 3499,
     3499, 1143, 3499, 1108, 1437, 1086, 1436, 1101, 1434, 3499,
     1109, 1110, 3499, 1105, 1429, 1428, 1427, 3499, 1148, 1169,
     1147, 1426, 1425, 1424, 1172, 1163, 1116, 1423, 1422, 3499,
     1414, 1177, 1174, 1413, 3499, 1412, 1411, 1173,    0, 1177,
        0, 1183,    0, 1203,    0, 1206,    0, 1388, 1213,    0,
     1216,    0, 1363,    0, 1370,  631, 1356, 1353, 1338,    0,
     1342, 1329, 1358, 1347, 1342, 1219,    0, 1194, 3499, 3499,
     1379, 1195, 1378, 3499, 1179, 1188, 1236, 3499, 1234, 1239,

     1240, 1205, 3499, 1377, 3499, 1189, 3499, 1117, 1244, 1376,
     3499, 3499, 3499, 1246, 1245, 1249, 3499, 3499, 3499, 1375,
     1251, 1248, 3499, 3499, 3499, 1250, 1374, 3499, 3499, 3499,
     1356, 1244,    0, 1266,    0, 1334,    0, 1337, 1331,    0,
     1327, 1312, 1337, 1319, 1304, 1318,    0, 1279,    0, 1256,
     3499, 1357, 3499, 1356, 1260, 1355, 1258, 1354, 1353, 1352,
     3499, 1262, 1264, 1351, 3499, 1350, 1349, 1279, 3499, 1284,
     1290, 1348, 3499, 1331,    0, 1296, 1309,    0,    0, 1286,
     1287, 1297,    0, 1337, 3499, 3499, 1336, 3499, 1293, 3499,
     3499, 3499, 1335, 1332, 3499, 3499, 3499, 1331, 1327, 1325,

     3499, 3499, 1272, 1274, 1276, 1280, 1261, 3499, 3499, 1312,
     3499, 3499, 3499, 3499, 3499, 1274, 1262, 1255, 1263, 1259,
     3499, 1242, 1254, 1237, 1232, 1228, 1139, 1125, 1133, 1120,
     1070, 1031,  971,  981,    0,  954,  878,  868,  857,    0,
      772,  524,    0,  471,  447,  294,   48,    0,   19,    0,
     3499, 1787, 1809, 1831, 1853, 1875, 1897, 1919, 1941, 1963,
     1985, 2007, 2029, 2050, 2067, 2076, 2096, 2113, 2134, 2154,
     2168, 2179, 2197, 2211, 2222, 2243, 2255, 2276, 2288, 2309,
     2321, 2342, 2363, 2375, 2396, 2418, 2440, 2460, 2480, 2502,
     2515, 2530, 2537, 2557, 2579, 2596, 2617, 2637, 2651, 2662,

     2680, 2694, 2705, 2726, 2745, 2756, 2777, 2796, 2807, 2828,
     2847, 2858, 2879, 2898, 2918, 2937, 2948, 2960, 2980, 3002,
     3024, 3046, 3067, 3080, 3100, 3121, 3134, 3140, 3160, 3182,
     3198, 3217, 3236, 3248, 3259, 3270, 3281, 3292, 3310, 3321,
     3339, 3357, 3368, 3379, 3390, 3401, 3412, 3423, 3434, 3445,
     3456, 3467, 3478
    } ;

static yyconst short int yy_def[754] =
    {   0,
      651,    1,  652,  652,  653,  653,  654,  654,  651,    9,
      651,   11,  651,   13,  655,  655,  656,  656,  657,  657,
      658,  658,  659,  659,  660,  660,    1,    1,  651,  651,
      651,  651,  651,  661,  651,  662,  663,  664,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  665,  651,
      666,  667,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  651,
      669,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      662,  651,  651,  651,  651,  670,  671,  671,  671,  651,
      651,  651,  651,  651,  672,  651,  651,  651,  673,  674,

      674,  651,  651,  651,  675,  676,  651,  651,  651,  677,
      678,  651,  651,  651,  679,  680,  651,  651,  651,  681,
      682,  651,  651,  651,  683,  684,  651,  651,  651,  651,
      651,  651,  685,  651,  686,  651,  687,  687,  662,  651,
      688,  689,  651,  690,  690,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  691,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  692,  651,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  694,  695,  651,  695,  651,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      651,  651,  697,  651,  651,  698,  699,  699,  699,  700,
      701,  702,  702,  703,  704,  705,  651,  706,  707,  708,
      651,  709,  710,  711,  651,  712,  713,  714,  651,  715,
      651,  716,  717,  651,  651,  718,  651,  651,  651,  719,
      720,  719,  719,  651,  719,  721,  719,  722,  723,  723,
      651,  651,  724,  651,  725,  726,  726,  651,  651,  651,
      651,  651,  651,  727,  651,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  729,  729,  730,

      651,  651,  731,  651,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  651,  731,  651,  731,  731,  731,  731,
      731,  651,  651,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      651,  651,  651,  651,  732,  733,  651,  734,  651,  735,
      651,  736,  651,  737,  651,  738,  651,  718,  651,  720,
      651,  721,  721,  722,  651,  739,  723,  723,  651,  740,
      725,  651,  725,  741,  726,  726,  651,  651,  651,  651,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  729,  729,  730,  730,  742,  651,  651,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  651,
      651,  731,  651,  731,  731,  731,  731,  731,  731,  651,
      731,  731,  651,  731,  731,  731,  731,  651,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  651,
      731,  731,  731,  731,  651,  731,  731,  651,  743,  651,
      744,  651,  745,  651,  746,  651,  747,  651,  651,  748,
      651,  749,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  651,  750,  731,  651,  651,
      731,  731,  731,  651,  731,  731,  731,  651,  731,  731,

      731,  731,  651,  731,  651,  731,  651,  731,  731,  731,
      651,  651,  651,  731,  731,  731,  651,  651,  651,  731,
      731,  731,  651,  651,  651,  731,  731,  651,  651,  651,
      651,  651,  751,  651,  752,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  651,  753,  731,
      651,  731,  651,  731,  731,  731,  731,  731,  731,  731,
      651,  731,  731,  731,  651,  731,  731,  731,  651,  731,
      731,  731,  651,  651,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  731,  651,  651,  731,  651,  731,  651,
      651,  651,  731,  731,  651,  651,  651,  731,  731,  731,

      651,  651,  728,  728,  728,  728,  728,  651,  651,  731,
      651,  651,  651,  651,  651,  728,  728,  728,  728,  728,
      651,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
        0,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651
    } ;

static yyconst short int yy_nxt[3576] =
    {   0,
       30,   31,   32,   31,   33,   34,   35,   35,   36,   37,
       38,   35,   35,   39,   40,   35,   40,   41,   42,   43,
       44,   44,   44,   45,   30,   46,   47,   48,   31,   35,
       49,   49,   49,   49,   49,   49,   49,   49,   50,   51,
       35,   35,   35,   52,   53,   54,   55,   56,   57,   58,
       54,   54,   59,   54,   54,   60,   61,   62,   63,   64,
       54,   65,   66,   67,   68,   54,   69,   54,   54,   35,
       35,   35,   70,   49,   54,   30,   72,   72,   76,   77,
       76,   77,   79,   80,   79,   80,  650,   73,   73,   81,
      149,   81,   74,   74,  159,  150,  161,  162,  163,   82,

      649,   82,   83,   84,   85,   83,   83,   83,   83,   83,
       83,   83,   86,   83,   83,   83,   83,   83,   87,   88,
       87,   89,   89,   89,   89,   83,   83,   83,   83,   83,
       83,   83,   87,   87,   87,   87,   87,   87,   87,   87,
       83,   83,   83,   83,   87,   83,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   83,   83,   83,   87,   83,   83,   83,   90,   91,
       92,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   93,   90,   94,   90,   90,   95,   95,   95,

       95,   90,   90,   90,   90,   90,   90,   90,   95,   95,
       95,   95,   95,   95,   95,   95,   90,   90,   90,   90,
       90,   90,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   90,   90,   90,
       90,   90,   90,   90,   96,   97,   98,   96,   96,   96,
       96,   96,   96,   96,   99,   96,   96,   96,   96,   96,
      100,  101,  100,  100,  100,  100,  100,   96,   96,   96,
       96,   96,   96,   96,  100,  100,  100,  100,  100,  100,
      100,  100,   96,   96,   96,   96,  100,   96,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,   96,   96,   96,  100,   96,   96,   96,
      103,  104,  283,  283,  128,  129,  151,  136,  156,  156,
      156,  156,  159,  177,  143,  161,  287,  178,  288,  128,
      129,  180,  130,  131,  131,  131,  180,  648,  180,  105,
      105,  105,  105,  105,  105,  105,  105,  130,  131,  131,
      131,  137,  106,  144,  146,  146,  146,  158,  180,  179,
      180,  180,  236,  290,  159,  180,  237,  160,  201,  161,
      147,  291,  148,  148,  148,  148,  240,  220,  202,  338,

      241,  146,  105,  103,  104,  132,  180,  138,  180,  145,
      168,  169,  180,  170,  309,  171,  395,  188,  172,  180,
      132,  189,  173,  180,  182,  174,  396,  175,  180,  190,
      183,  191,  105,  105,  105,  105,  105,  105,  105,  105,
      180,  192,  180,  203,  151,  106,  152,  152,  152,  153,
      206,  180,  184,  204,  180,  205,  208,  180,  154,  185,
      180,  193,  207,  186,  155,  194,  187,  244,  136,  195,
      248,  245,  154,  209,  249,  105,  108,  109,  196,  180,
      198,  197,  221,  222,  222,  222,  219,  199,  200,  292,
      251,  216,  304,  210,  155,  293,  647,  211,  217,  177,

      310,  218,  137,  178,  308,  110,  110,  110,  110,  110,
      110,  110,  110,  180,  212,  180,  213,  646,  111,  252,
      180,  228,  214,  229,  229,  229,  229,  254,  254,  254,
      257,  257,  257,  257,  143,  179,  215,  180,  138,  255,
      258,  259,  259,  259,  305,  256,  294,  180,  110,  108,
      109,  303,  295,  255,  180,  328,  261,  148,  148,  148,
      148,  180,  180,  144,  306,  307,  180,  262,  272,  272,
      272,  180,  645,  180,  263,  256,  264,  265,  110,  110,
      110,  110,  110,  110,  110,  110,  273,  320,  315,  266,
      267,  111,  146,  146,  146,  180,  180,  316,  313,  145,

      280,  314,  281,  281,  281,  281,  311,  180,  321,  312,
      148,  148,  148,  148,  317,  282,  273,  180,  180,  146,
      322,  110,  113,  114,  151,  180,  152,  152,  152,  153,
      151,  282,  153,  153,  153,  153,  151,  180,  156,  156,
      156,  156,  323,  325,  333,  180,  180,  180,  180,  180,
      180,  115,  115,  115,  115,  115,  115,  115,  115,  318,
      180,  330,  319,  327,  116,  180,  180,  180,  180,  329,
      180,  351,  180,  354,  354,  354,  354,  180,  251,  340,
      236,  334,  336,  228,  237,  229,  229,  229,  229,  331,
      538,  342,  337,  539,  115,  113,  114,  335,  339,  367,

      367,  347,  240,  344,  341,  348,  241,  252,  244,  349,
      346,  343,  245,  254,  254,  254,  345,  357,  357,  357,
      375,  418,  350,  416,  115,  115,  115,  115,  115,  115,
      115,  115,  382,  383,  260,  358,  351,  116,  352,  352,
      352,  353,  359,  359,  359,  361,  361,  361,  248,  260,
      154,  261,  249,  180,  376,  180,  155,  363,  363,  363,
      360,  384,  180,  362,  154,  358,  180,  115,  118,  119,
      365,  365,  365,  369,  180,  364,  257,  257,  257,  257,
      257,  257,  257,  257,  266,  267,  155,  180,  366,  261,
      360,  283,  283,  362,  261,  180,  415,  120,  120,  120,

      120,  120,  120,  120,  120,  364,  446,  254,  254,  254,
      121,  369,  261,  424,  411,  271,  369,  180,  366,  255,
      644,  180,  266,  267,  412,  256,  180,  266,  267,  377,
      377,  377,  413,  255,  369,  379,  379,  379,  278,  427,
      120,  118,  119,  180,  180,  266,  267,  385,  385,  385,
      281,  281,  281,  281,  407,  256,  389,  389,  389,  389,
      404,  404,  404,  282,  180,  425,  180,  419,  426,  430,
      120,  120,  120,  120,  120,  120,  120,  120,  414,  282,
      417,  180,  408,  121,  302,  180,  409,  180,  180,  180,
      421,  180,  180,  180,  180,  180,  180,  180,  180,  428,

      180,  422,  180,  180,  431,  180,  180,  180,  651,  390,
      458,  458,  458,  120,  123,  124,  460,  460,  460,  643,
      434,  367,  367,  125,  373,  260,  429,  437,  436,  642,
      435,  452,  432,  439,  448,  442,  443,  641,  496,  453,
      441,  447,  440,  454,  445,  449,  372,  457,  444,  451,
      456,  351,  375,  352,  352,  352,  353,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  281,  281,  281,  281,  376,  126,  123,  124,
      462,  462,  462,  180,  382,  282,  351,  125,  353,  353,

      353,  353,  351,  271,  354,  354,  354,  354,  464,  464,
      464,  282,  466,  466,  466,  278,  640,  135,  135,  135,
      140,  140,  140,  384,  142,  142,  142,  382,  492,  639,
      638,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  384,  389,  389,  389,
      389,  126,  227,  227,  180,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  469,  469,
      469,  471,  471,  471,  494,  227,  227,  227,  227,  227,
      227,  227,  389,  389,  389,  389,  470,  180,  637,  472,

      227,  227,  227,  227,  488,  227,  176,  176,  176,  408,
      408,  180,  180,  409,  409,  180,  180,  180,  636,  180,
      180,  180,  486,  486,  486,  495,  470,  180,  180,  472,
      302,  227,  227,  227,  504,  227,  227,  227,  232,  232,
      487,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  498,  491,  506,  497,  180,  180,
      510,  232,  232,  232,  232,  232,  232,  232,  493,  502,
      487,  509,  508,  522,  180,  563,  232,  232,  232,  232,
      180,  232,  635,  180,  634,  180,  633,  632,  180,  499,
      180,  516,  235,  235,  235,  500,  239,  239,  239,  180,

      180,  501,  243,  243,  243,  180,  180,  232,  232,  232,
      514,  232,  232,  232,  268,  521,  180,  515,  135,  135,
      520,  526,  247,  247,  247,  250,  250,  250,  269,  269,
      269,  527,  532,  532,  532,  534,  534,  534,  548,  548,
      548,  554,  550,  552,  562,  180,  270,  180,  135,  555,
      180,  180,  135,  135,  135,  180,  180,  180,  135,  180,
      180,  180,  180,  374,  374,  374,  135,  180,  560,  180,
      135,  180,  135,  180,  135,  180,  270,  142,  557,  631,
      630,  142,  275,  629,  556,  381,  381,  381,  558,  559,
      180,  276,  276,  276,  566,  180,  571,  572,  406,  406,

      406,  180,  628,  627,  180,  626,  567,  564,  587,  277,
      568,  142,  570,  584,  625,  142,  142,  142,  624,  623,
      589,  142,  622,  621,  620,  594,  619,  598,  618,  142,
      593,  617,  599,  142,  616,  142,  615,  142,  614,  277,
      176,  610,  613,  612,  176,  176,  611,  609,  608,  607,
      606,  600,  605,  604,  298,  298,  298,  603,  602,  601,
      597,  596,  595,  592,  591,  590,  588,  586,  585,  583,
      582,  581,  299,  580,  176,  579,  578,  577,  300,  176,
      176,  576,  575,  574,  176,  573,  569,  565,  561,  553,
      551,  547,  176,  546,  545,  544,  176,  543,  176,  542,

      176,  541,  299,  227,  227,  540,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  537,
      536,  531,  530,  529,  528,  525,  227,  227,  227,  227,
      227,  227,  227,  524,  523,  519,  518,  517,  513,  512,
      511,  227,  227,  227,  227,  507,  227,  505,  503,  490,
      489,  164,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  180,  468,  260,  356,  355,
      455,  450,  227,  227,  227,  438,  227,  227,  227,  232,
      232,  433,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  423,  421,  420,  410,  403,

      402,  401,  232,  232,  232,  232,  232,  232,  232,  400,
      399,  398,  397,  394,  393,  392,  391,  232,  232,  232,
      232,  388,  232,  387,  373,  371,  233,  356,  228,  355,
      332,  326,  324,  180,  302,  301,  297,  296,  289,  286,
      164,  159,  285,  279,  278,  274,  271,  233,  232,  232,
      232,  228,  232,  232,  232,  271,  149,  225,  224,  180,
      166,  164,  157,  141,  134,  651,  133,  133,  651,  378,
      378,  378,  378,  651,  651,  651,  651,  651,  651,  651,
      378,  378,  378,  378,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  378,  378,  378,  378,  378,  378,

      278,  651,  651,  651,  651,  651,  651,  651,  651,  386,
      386,  386,  386,  651,  651,  651,  651,  651,  651,  651,
      386,  386,  386,  386,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  386,  386,  386,  386,  386,  386,
      405,  405,  405,  405,  651,  651,  651,  651,  651,  651,
      651,  405,  405,  405,  405,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  302,  405,  405,  405,  405,  405,
      405,  271,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  135,  135,  135,  135,  651,
      651,  651,  651,  651,  651,  651,  135,  135,  135,  135,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      135,  135,  135,  135,  135,  135,  278,  651,  651,  651,
      651,  651,  651,  651,  651,  142,  142,  142,  142,  651,
      651,  651,  651,  651,  651,  651,  142,  142,  142,  142,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      142,  142,  142,  142,  142,  142,  176,  176,  176,  176,
      651,  651,  651,  651,  651,  651,  651,  176,  176,  176,
      176,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      302,  176,  176,  176,  176,  176,  176,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  139,  651,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  165,  651,  651,  651,  165,  165,  651,  651,
      651,  165,  165,  165,  651,  165,  165,  165,  167,  651,
      167,  167,  167,  651,  651,  167,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  181,  651,
      651,  651,  181,  181,  651,  651,  651,  181,  181,  181,
      651,  181,  181,  181,  223,  651,  223,  223,  223,  223,
      651,  223,  651,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  227,  227,  227,  227,  651,
      651,  651,  227,  227,  227,  651,  227,  227,  230,  230,
      651,  651,  651,  230,  230,  230,  651,  651,  230,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  232,  232,
      232,  232,  651,  651,  651,  232,  232,  232,  651,  232,
      232,  234,  234,  651,  651,  651,  234,  234,  234,  651,
      234,  234,  234,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  238,  238,  651,  651,  651,  238,
      238,  238,  651,  238,  238,  238,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  242,  242,  651,

      651,  651,  242,  242,  242,  651,  242,  242,  242,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      246,  246,  651,  651,  651,  246,  246,  246,  651,  246,
      246,  246,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  253,  253,  651,  651,  651,  253,
      253,  253,  651,  253,  253,  253,  260,  651,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  651,
      260,  260,  260,  651,  260,  260,  260,  260,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  140,  651,  140,  651,  651,  651,  651,  140,
      651,  651,  651,  651,  651,  651,  140,  651,  651,  140,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  284,  284,  651,  651,  651,  284,
      651,  651,  651,  651,  284,  165,  651,  651,  651,  165,
      165,  651,  651,  651,  165,  165,  165,  651,  165,  165,
      165,  167,  167,  167,  651,  651,  167,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  181,  651,  651,  651,  181,  181,  651,  651,  651,
      181,  181,  181,  651,  181,  181,  181,  223,  651,  223,
      223,  223,  223,  651,  223,  651,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  227,  227,
      227,  227,  651,  651,  651,  227,  227,  227,  651,  227,
      227,  230,  230,  651,  651,  651,  230,  230,  230,  651,
      651,  230,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  232,  232,  232,  232,  651,  651,  651,  232,  232,
      232,  651,  232,  232,  234,  234,  651,  651,  651,  234,
      234,  234,  651,  234,  234,  234,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  651,  235,
      651,  651,  651,  651,  235,  651,  651,  651,  651,  651,
      651,  235,  651,  651,  235,  238,  238,  651,  651,  651,
      238,  238,  238,  651,  238,  238,  238,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  651,

      239,  651,  651,  651,  651,  239,  651,  651,  651,  651,
      651,  651,  239,  651,  651,  239,  242,  242,  651,  651,
      651,  242,  242,  242,  651,  242,  242,  242,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      651,  243,  651,  651,  651,  651,  243,  651,  651,  651,
      651,  651,  651,  243,  651,  651,  243,  246,  246,  651,
      651,  651,  246,  246,  246,  651,  246,  246,  246,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  651,  247,  651,  651,  651,  651,  247,  651,  651,
      651,  651,  651,  651,  247,  651,  651,  247,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      651,  250,  651,  651,  651,  651,  250,  651,  651,  651,
      651,  651,  651,  250,  651,  651,  250,  253,  253,  651,
      651,  651,  253,  253,  253,  651,  253,  253,  253,  368,
      368,  651,  651,  651,  368,  651,  651,  651,  651,  368,
      260,  651,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  651,  260,  260,  260,  260,  260,  651,  260,  260,

      260,  260,  370,  370,  651,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  651,  372,  372,  372,  372,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  380,
      380,  651,  651,  651,  380,  651,  651,  651,  651,  380,

      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  284,  284,  651,  651,  651,  284,  651,
      651,  651,  651,  284,  167,  167,  167,  651,  651,  167,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  181,  651,  651,  651,  181,  181,  651,
      651,  651,  181,  181,  181,  651,  181,  181,  181,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  459,  459,  651,
      651,  651,  459,  651,  651,  651,  651,  459,  461,  461,
      651,  651,  651,  461,  651,  651,  651,  651,  461,  463,
      463,  651,  651,  651,  463,  651,  651,  651,  651,  463,
      465,  465,  651,  651,  651,  465,  651,  651,  651,  651,

      465,  467,  467,  651,  651,  651,  467,  651,  651,  651,
      651,  467,  374,  651,  374,  651,  651,  651,  651,  374,
      651,  651,  651,  651,  651,  651,  374,  651,  651,  374,
      140,  140,  651,  651,  651,  140,  651,  651,  651,  651,
      140,  381,  651,  381,  651,  651,  651,  651,  381,  651,
      651,  651,  651,  651,  651,  381,  651,  651,  381,  406,
      651,  406,  651,  651,  651,  651,  406,  651,  651,  651,
      651,  651,  651,  406,  651,  651,  406,  235,  235,  651,
      651,  651,  235,  651,  651,  651,  651,  235,  239,  239,
      651,  651,  651,  239,  651,  651,  651,  651,  239,  243,

      243,  651,  651,  651,  243,  651,  651,  651,  651,  243,
      247,  247,  651,  651,  651,  247,  651,  651,  651,  651,
      247,  250,  250,  651,  651,  651,  250,  651,  651,  651,
      651,  250,  533,  533,  651,  651,  651,  533,  651,  651,
      651,  651,  533,  535,  535,  651,  651,  651,  535,  651,
      651,  651,  651,  535,  549,  549,  651,  651,  651,  549,
      651,  651,  651,  651,  549,  374,  374,  651,  651,  651,
      374,  651,  651,  651,  651,  374,  381,  381,  651,  651,
      651,  381,  651,  651,  651,  651,  381,  406,  406,  651,
      651,  651,  406,  651,  651,  651,  651,  406,   29,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651
    } ;

static yyconst short int yy_chk[3576] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    5,    5,
        6,    6,    7,    7,    8,    8,  649,    3,    4,    7,
       42,    8,    3,    4,   47,   42,   47,   47,   47,    7,

      647,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       15,   15,  154,  154,   25,   25,   44,   34,   44,   44,
       44,   44,   48,   52,   38,   48,  169,   52,  169,   26,
       26,   60,   25,   25,   25,   25,   69,  646,  210,   15,
       15,   15,   15,   15,   15,   15,   15,   26,   26,   26,
       26,   34,   15,   38,   41,   41,   41,   46,   53,   52,
       56,  186,  106,  171,   46,   57,  106,   46,   60,   51,
       41,  171,   41,   41,   41,   41,  111,   69,   60,  210,

      111,   41,   15,   16,   16,   25,   61,   34,   62,   38,
       51,   51,   63,   51,  186,   51,  290,   56,   51,   55,
       26,   56,   51,   64,   53,   51,  290,   51,   58,   57,
       53,   57,   16,   16,   16,   16,   16,   16,   16,   16,
       68,   57,   59,   61,   43,   16,   43,   43,   43,   43,
       63,   67,   55,   61,  187,   62,   64,  185,   43,   55,
       65,   58,   63,   55,   43,   58,   55,  116,  135,   58,
      121,  116,   43,   64,  121,   16,   17,   17,   58,   66,
       59,   58,   70,   70,   70,   70,   68,   59,   59,  172,
      125,   67,  183,   65,   43,  172,  645,   65,   67,  176,

      187,   67,  135,  176,  185,   17,   17,   17,   17,   17,
       17,   17,   17,  184,   66,  182,   66,  644,   17,  125,
      202,   89,   66,   89,   89,   89,   89,  130,  130,  130,
      131,  131,  131,  131,  142,  176,   66,  190,  135,  130,
      132,  132,  132,  132,  183,  130,  173,  189,   17,   18,
       18,  182,  173,  130,  194,  202,  133,  148,  148,  148,
      148,  191,  195,  142,  184,  184,  192,  133,  141,  141,
      141,  188,  642,  196,  133,  130,  133,  133,   18,   18,
       18,   18,   18,   18,   18,   18,  141,  194,  190,  133,
      133,   18,  146,  146,  146,  199,  197,  191,  189,  142,

      151,  189,  151,  151,  151,  151,  188,  201,  195,  188,
      146,  146,  146,  146,  192,  151,  141,  203,  193,  146,
      196,   18,   19,   19,  152,  204,  152,  152,  152,  152,
      153,  151,  153,  153,  153,  153,  156,  205,  156,  156,
      156,  156,  197,  199,  207,  209,  212,  208,  218,  211,
      214,   19,   19,   19,   19,   19,   19,   19,   19,  193,
      213,  204,  193,  201,   19,  215,  216,  217,  219,  203,
      220,  222,  309,  222,  222,  222,  222,  311,  250,  212,
      235,  207,  209,  229,  235,  229,  229,  229,  229,  205,
      476,  214,  209,  476,   19,   20,   20,  208,  211,  255,

      255,  218,  239,  216,  213,  218,  239,  250,  243,  219,
      217,  215,  243,  254,  254,  254,  216,  236,  236,  236,
      268,  311,  220,  309,   20,   20,   20,   20,   20,   20,
       20,   20,  275,  275,  267,  236,  221,   20,  221,  221,
      221,  221,  240,  240,  240,  244,  244,  244,  247,  267,
      221,  260,  247,  339,  268,  308,  221,  248,  248,  248,
      240,  275,  303,  244,  221,  236,  317,   20,   21,   21,
      252,  252,  252,  260,  305,  248,  257,  257,  257,  257,
      259,  259,  259,  259,  260,  260,  221,  320,  252,  262,
      240,  283,  283,  244,  263,  306,  308,   21,   21,   21,

       21,   21,   21,   21,   21,  248,  339,  258,  258,  258,
       21,  262,  265,  317,  303,  269,  263,  319,  252,  258,
      641,  318,  262,  262,  305,  258,  312,  263,  263,  269,
      269,  269,  306,  258,  265,  272,  272,  272,  276,  320,
       21,   22,   22,  307,  310,  265,  265,  276,  276,  276,
      281,  281,  281,  281,  300,  258,  282,  282,  282,  282,
      298,  298,  298,  281,  315,  318,  321,  312,  319,  323,
       22,   22,   22,   22,   22,   22,   22,   22,  307,  281,
      310,  322,  300,   22,  298,  325,  300,  328,  329,  334,
      330,  335,  336,  338,  345,  340,  341,  342,  349,  321,

      337,  315,  346,  344,  323,  418,  347,  350,  373,  282,
      357,  357,  357,   22,   23,   23,  359,  359,  359,  639,
      328,  367,  367,   23,  372,  372,  322,  330,  329,  638,
      328,  345,  325,  334,  341,  337,  337,  637,  418,  346,
      336,  340,  335,  347,  338,  342,  373,  350,  337,  344,
      349,  352,  374,  352,  352,  352,  352,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  351,  351,  351,  351,  374,   23,   24,   24,
      361,  361,  361,  415,  381,  351,  353,   24,  353,  353,

      353,  353,  354,  377,  354,  354,  354,  354,  363,  363,
      363,  351,  365,  365,  365,  385,  636,  377,  377,  377,
      379,  379,  379,  381,  385,  385,  385,  383,  415,  634,
      633,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  383,  389,  389,  389,
      389,   24,   88,   88,  411,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,  376,  376,
      376,  384,  384,  384,  417,   88,   88,   88,   88,   88,
       88,   88,  390,  390,  390,  390,  376,  426,  632,  384,

       88,   88,   88,   88,  411,   88,  404,  404,  404,  406,
      407,  419,  428,  406,  407,  414,  434,  416,  631,  424,
      431,  432,  408,  408,  408,  417,  376,  447,  508,  384,
      404,   88,   88,   88,  426,   88,   88,   88,  101,  101,
      408,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  422,  414,  428,  419,  441,  439,
      434,  101,  101,  101,  101,  101,  101,  101,  416,  424,
      408,  432,  431,  447,  446,  508,  101,  101,  101,  101,
      440,  101,  630,  445,  629,  453,  628,  627,  452,  422,
      495,  441,  458,  458,  458,  422,  460,  460,  460,  496,

      506,  422,  462,  462,  462,  488,  492,  101,  101,  101,
      439,  101,  101,  101,  137,  446,  502,  440,  137,  137,
      445,  452,  464,  464,  464,  466,  466,  466,  137,  137,
      137,  453,  469,  469,  469,  471,  471,  471,  486,  486,
      486,  495,  488,  492,  506,  499,  137,  497,  137,  496,
      500,  501,  137,  137,  137,  509,  515,  514,  137,  522,
      516,  526,  521,  532,  532,  532,  137,  550,  502,  557,
      137,  555,  137,  562,  137,  563,  137,  144,  499,  626,
      625,  144,  144,  624,  497,  534,  534,  534,  500,  501,
      568,  144,  144,  144,  514,  570,  522,  526,  548,  548,

      548,  571,  623,  622,  589,  620,  515,  509,  555,  144,
      516,  144,  521,  550,  619,  144,  144,  144,  618,  617,
      557,  144,  616,  610,  607,  563,  606,  568,  605,  144,
      562,  604,  570,  144,  603,  144,  600,  144,  599,  144,
      177,  589,  598,  594,  177,  177,  593,  587,  584,  582,
      581,  571,  580,  577,  177,  177,  177,  576,  574,  572,
      567,  566,  564,  560,  559,  558,  556,  554,  552,  546,
      545,  544,  177,  543,  177,  542,  541,  539,  177,  177,
      177,  538,  536,  531,  177,  527,  520,  510,  504,  493,
      491,  485,  177,  484,  483,  482,  177,  481,  177,  479,

      177,  478,  177,  228,  228,  477,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  475,
      473,  468,  457,  456,  454,  451,  228,  228,  228,  228,
      228,  228,  228,  449,  448,  444,  443,  442,  437,  436,
      435,  228,  228,  228,  228,  429,  228,  427,  425,  413,
      412,  409,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  382,  371,  370,  356,  355,
      348,  343,  228,  228,  228,  331,  228,  228,  228,  233,
      233,  327,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  316,  314,  313,  302,  297,

      296,  295,  233,  233,  233,  233,  233,  233,  233,  294,
      293,  292,  291,  289,  288,  287,  286,  233,  233,  233,
      233,  280,  233,  278,  266,  264,  232,  231,  227,  226,
      206,  200,  198,  181,  179,  178,  175,  174,  170,  168,
      165,  161,  157,  147,  145,  143,  138,  100,  233,  233,
      233,   87,  233,  233,  233,  270,   82,   74,   73,   54,
       50,   49,   45,   37,   33,   29,   28,   27,    0,  270,
      270,  270,  270,    0,    0,    0,    0,    0,    0,    0,
      270,  270,  270,  270,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  270,  270,  270,  270,  270,  270,

      277,    0,    0,    0,    0,    0,    0,    0,    0,  277,
      277,  277,  277,    0,    0,    0,    0,    0,    0,    0,
      277,  277,  277,  277,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  277,  277,  277,  277,  277,  277,
      299,  299,  299,  299,    0,    0,    0,    0,    0,    0,
        0,  299,  299,  299,  299,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  299,  299,  299,  299,  299,  299,
      299,  378,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  378,  378,  378,  378,    0,
        0,    0,    0,    0,    0,    0,  378,  378,  378,  378,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      378,  378,  378,  378,  378,  378,  386,    0,    0,    0,
        0,    0,    0,    0,    0,  386,  386,  386,  386,    0,
        0,    0,    0,    0,    0,    0,  386,  386,  386,  386,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      386,  386,  386,  386,  386,  386,  405,  405,  405,  405,
        0,    0,    0,    0,    0,    0,    0,  405,  405,  405,
      405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      405,  405,  405,  405,  405,  405,  405,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  652,  652,  652,  652,  652,  652,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  657,  657,  657,

      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  661,  661,  662,    0,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  665,    0,    0,    0,  665,  665,    0,    0,
        0,  665,  665,  665,    0,  665,  665,  665,  666,    0,
      666,  666,  666,    0,    0,  666,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  668,    0,
        0,    0,  668,  668,    0,    0,    0,  668,  668,  668,
        0,  668,  668,  668,  669,    0,  669,  669,  669,  669,
        0,  669,    0,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  671,  671,  671,  671,    0,
        0,    0,  671,  671,  671,    0,  671,  671,  672,  672,
        0,    0,    0,  672,  672,  672,    0,    0,  672,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  674,  674,
      674,  674,    0,    0,    0,  674,  674,  674,    0,  674,
      674,  675,  675,    0,    0,    0,  675,  675,  675,    0,
      675,  675,  675,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  677,  677,    0,    0,    0,  677,
      677,  677,    0,  677,  677,  677,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  679,  679,    0,

        0,    0,  679,  679,  679,    0,  679,  679,  679,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      681,  681,    0,    0,    0,  681,  681,  681,    0,  681,
      681,  681,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  684,  684,    0,    0,    0,  684,
      684,  684,    0,  684,  684,  684,  685,    0,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,    0,
      685,  685,  685,    0,  685,  685,  685,  685,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  688,    0,  688,    0,    0,    0,    0,  688,
        0,    0,    0,    0,    0,    0,  688,    0,    0,  688,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  691,  691,    0,    0,    0,  691,
        0,    0,    0,    0,  691,  692,    0,    0,    0,  692,
      692,    0,    0,    0,  692,  692,  692,    0,  692,  692,
      692,  693,  693,  693,    0,    0,  693,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  696,    0,    0,    0,  696,  696,    0,    0,    0,
      696,  696,  696,    0,  696,  696,  696,  697,    0,  697,
      697,  697,  697,    0,  697,    0,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  699,  699,
      699,  699,    0,    0,    0,  699,  699,  699,    0,  699,
      699,  700,  700,    0,    0,    0,  700,  700,  700,    0,
        0,  700,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,

      701,  702,  702,  702,  702,    0,    0,    0,  702,  702,
      702,    0,  702,  702,  703,  703,    0,    0,    0,  703,
      703,  703,    0,  703,  703,  703,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  705,    0,  705,
        0,    0,    0,    0,  705,    0,    0,    0,    0,    0,
        0,  705,    0,    0,  705,  706,  706,    0,    0,    0,
      706,  706,  706,    0,  706,  706,  706,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  708,    0,

      708,    0,    0,    0,    0,  708,    0,    0,    0,    0,
        0,    0,  708,    0,    0,  708,  709,  709,    0,    0,
        0,  709,  709,  709,    0,  709,  709,  709,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  711,
        0,  711,    0,    0,    0,    0,  711,    0,    0,    0,
        0,    0,    0,  711,    0,    0,  711,  712,  712,    0,
        0,    0,  712,  712,  712,    0,  712,  712,  712,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,

      714,    0,  714,    0,    0,    0,    0,  714,    0,    0,
        0,    0,    0,    0,  714,    0,    0,  714,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  716,
        0,  716,    0,    0,    0,    0,  716,    0,    0,    0,
        0,    0,    0,  716,    0,    0,  716,  717,  717,    0,
        0,    0,  717,  717,  717,    0,  717,  717,  717,  718,
      718,    0,    0,    0,  718,    0,    0,    0,    0,  718,
      719,    0,  719,  719,  719,  719,  719,  719,  719,  719,
      719,    0,  719,  719,  719,  719,  719,    0,  719,  719,

      719,  719,  720,  720,    0,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,    0,  721,  721,  721,  721,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  724,
      724,    0,    0,    0,  724,    0,    0,    0,    0,  724,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  727,  727,    0,    0,    0,  727,    0,
        0,    0,    0,  727,  728,  728,  728,    0,    0,  728,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  731,    0,    0,    0,  731,  731,    0,
        0,    0,  731,  731,  731,    0,  731,  731,  731,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  734,  734,    0,
        0,    0,  734,    0,    0,    0,    0,  734,  735,  735,
        0,    0,    0,  735,    0,    0,    0,    0,  735,  736,
      736,    0,    0,    0,  736,    0,    0,    0,    0,  736,
      737,  737,    0,    0,    0,  737,    0,    0,    0,    0,

      737,  738,  738,    0,    0,    0,  738,    0,    0,    0,
        0,  738,  739,    0,  739,    0,    0,    0,    0,  739,
        0,    0,    0,    0,    0,    0,  739,    0,    0,  739,
      740,  740,    0,    0,    0,  740,    0,    0,    0,    0,
      740,  741,    0,  741,    0,    0,    0,    0,  741,    0,
        0,    0,    0,    0,    0,  741,    0,    0,  741,  742,
        0,  742,    0,    0,    0,    0,  742,    0,    0,    0,
        0,    0,    0,  742,    0,    0,  742,  743,  743,    0,
        0,    0,  743,    0,    0,    0,    0,  743,  744,  744,
        0,    0,    0,  744,    0,    0,    0,    0,  744,  745,

      745,    0,    0,    0,  745,    0,    0,    0,    0,  745,
      746,  746,    0,    0,    0,  746,    0,    0,    0,    0,
      746,  747,  747,    0,    0,    0,  747,    0,    0,    0,
        0,  747,  748,  748,    0,    0,    0,  748,    0,    0,
        0,    0,  748,  749,  749,    0,    0,    0,  749,    0,
        0,    0,    0,  749,  750,  750,    0,    0,    0,  750,
        0,    0,    0,    0,  750,  751,  751,    0,    0,    0,
      751,    0,    0,    0,    0,  751,  752,  752,    0,    0,
        0,  752,    0,    0,    0,    0,  752,  753,  753,    0,
        0,    0,  753,    0,    0,    0,    0,  753,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.ll"
#define INITIAL 0
/*
 *  Authors:
 *    Martin Henz (henz@iscs.nus.sg)
 *    Leif Kornstaedt (kornstae@ps.uni-sb.de)
 *
 *  Copyright:
 *    Martin Henz and Leif Kornstaedt, 1996, 1997
 *
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 *
 *  This file is part of Mozart, an implementation
 *  of Oz 3:
 *     http://mozart.ps.uni-sb.de
 *
 *  See the file "LICENSE" or
 *     http://mozart.ps.uni-sb.de/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */
#line 28 "scanner.ll"
#include <string.h>
#include <sys/stat.h>

#ifndef __MINGW32__
#include <pwd.h>
#endif

#include "base.hh"
#include "os.hh"
#include "dictionary.hh"
#include "am.hh"

#include "parser.hh"

void xyreportError(char *kind, char *message,
                   const char *file, int line, int column);
void xy_setScannerPrefix();
void xy_setParserExpect();

char xyFileName[100];
char xyhelpFileName[100];
OZ_Term xyFileNameAtom;

int xy_gumpSyntax, xy_allowDeprecated;
OZ_Term xy_errorMessages;

static int errorFlag;


//*******************
// THE INPUT ROUTINE
//*******************

int xylino;                             // current line number
char *xylastline;                       // remember where we have put the input

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size)   xy_input(buf, result, max_size)

static void xy_input(char *buf, int &result, const int max_size) {
  xylastline = buf;

  // read one line into buf
  int curpos = 0;
  int c = fgetc(xyin);
  while(curpos < max_size && c != EOF && c != OZEOF && c != '\n') {
    buf[curpos++] = c;
    if (curpos < max_size)
      c = fgetc(xyin);
  }

  if (c == EOF || c == OZEOF) {
    if (curpos > 0)   // did we read other chars than EOF?
      result = curpos;
    else
      result = YY_NULL;
  } else {
    if (curpos < max_size)
      buf[curpos++] = c;
    result = curpos;
  }
}


//****************
// OUTPUT OF FLEX
//****************

#undef YY_DECL
#define YY_DECL static int xymylex()


//*************************
// CONDITIONAL COMPILATION
// uses a stack of flags;
// \ifdef and \ifndef push
// \else toggles top
// \endif pops.
//*************************

static OzDictionary *defines;

#define CONDITIONALMAXDEPTH 1000

static int conditional[CONDITIONALMAXDEPTH];
static int conditional_p;       // points to top of stack
static int conditional_basep;   // points to bottom of stack

static void push_cond(int flag) {
  if (conditional_p < CONDITIONALMAXDEPTH - 1)
    conditional[++conditional_p] = flag;
  else
    xyreportError("macro directive limitation",
                  "conditionals nested too deep",
                  xyFileName,xylino,xycharno());
}

static void pop_cond() {
  if (conditional_p > conditional_basep)
    conditional_p--;
  else
    xyreportError("macro directive error",
                  "\\endif without previous corresponding \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
}

static void toggle_cond() {
  if (conditional_p > conditional_basep) {
    // toggle top of flag stack
    if (conditional[conditional_p])
      conditional[conditional_p] = 0;
    else
      conditional[conditional_p] = 1;
  } else
    xyreportError("macro directive error",
                  "\\else without previous corresponding \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
}

static int get_cond() {
  int i = conditional_p;
  while (i > conditional_basep)
    if (!conditional[i--])
      return 0;
  return 1;
}


//***********************
// STACK OF FILE ENTRIES
// for \insert
//***********************

class XyFileEntry {
public:
  YY_BUFFER_STATE buffer;
  OZ_Term fileNameAtom;
  int lino;
  int conditional_basep;
  XyFileEntry *previous;

  XyFileEntry(YY_BUFFER_STATE b, OZ_Term f, int l, int c, XyFileEntry *p):
      buffer(b), fileNameAtom(f), lino(l), conditional_basep(c), previous(p) {}
};

static XyFileEntry *bufferStack;

static void push_insert(FILE *filep, char *fileName) {
  bufferStack = new XyFileEntry(YY_CURRENT_BUFFER, xyFileNameAtom, xylino,
                                conditional_basep, bufferStack);
  strncpy(xyFileName, fileName, 99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(fileName);
  xyin = filep;
  BEGIN(INITIAL);
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  xylino = 1;
  conditional_basep = conditional_p;
}

static int pop_insert() {
  if (conditional_p > conditional_basep)
    xyreportError("macro directive error",
                  "unterminated \\ifdef or \\ifndef",
                  xyFileName,xylino,xycharno());
  errorFlag = 0;
  if (bufferStack != NULL) {
    fclose(xyin);
    xy_switch_to_buffer(bufferStack->buffer);
    xyFileNameAtom = bufferStack->fileNameAtom;
    const char *fileName = OZ_atomToC(xyFileNameAtom);
    strncpy(xyFileName, fileName, 99);
    xyFileName[99] = '\0';
    xylino = bufferStack->lino;
    conditional_basep = bufferStack->conditional_basep;
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
    return 0;
  } else
    return 1;
}


//**********
// COMMENTS
//**********

static int commentdepth;
static OZ_Term commentfile;
static int commentlino;
static int commentoffset;
static int commentlastmode;


//*********************
// FILE NAME EXPANSION
//*********************

static char *getHomeUser(char *user) {
#ifdef WINDOWS
  return NULL;
#else
  struct passwd *pwentry = getpwnam(user);
  return pwentry != NULL? pwentry->pw_dir: (char *) NULL;
#endif
}

static int isReadableFile(char *file) {
  struct stat buf;

  if (access(file, F_OK) < 0 || stat(file, &buf) < 0)
    return 0;

  return !S_ISDIR(buf.st_mode);
}

static char *checkAccess(char *file) {
  char *ret = new char[strlen(file) + 1 + 3];

  strcpy(ret, file);
  if (isReadableFile(ret))
    return ret;

  strcat(ret, ".oz");
  if (isReadableFile(ret))
    return ret;

  delete[] ret;
  return NULL;
}

static char *scExpndFileName(char *fileName, char *curfile) {
  // full pathname given?
  if (fileName[0] == '/' ||
#ifdef WINDOWS
      fileName[1] == ':' ||   // good old DOS filename like E:...
#endif
      !strncmp(fileName, "./", 2))
    return checkAccess(fileName);

  // expand "~"
  if (fileName[0] == '~') {
    char *userhome;
    int len = 0;
    if (fileName[1] == '/') {
      userhome = getenv("HOME");
      len = 2;
    } else {
      char *rest = strchr(fileName, '/');
      if (rest == NULL)
        userhome = NULL;
      else {
        len = (rest + 1) - fileName;
        rest[0] = '\0';
        userhome = getHomeUser(&fileName[1]);
        rest[0] = '/';
      }
    }
    if (userhome == NULL)
      return NULL;

    char *help = new char[strlen(userhome) + 1 + strlen(&fileName[len]) + 1];
    sprintf(help, "%s/%s", userhome, &fileName[len]);
    char *ret = checkAccess(help);
    delete[] help;

    return ret;
  }

  // search in "current" directory
  if (curfile != NULL) {
    int i = strlen(curfile);
    while (i != 0 && curfile[i - 1] != '/')   // i. e., the dir part of curfile
      i--;
    if (i != 0) {
      char *help = new char[i + strlen(fileName) + 1];
      strncpy(help, curfile, i);
      strcpy(&help[i], fileName);
      char *ret = checkAccess(help);
      delete[] help;

      if (ret != NULL)
        return ret;
    }
  }

  // search in OZPATH
  char *path = getenv("OZPATH");
  if (path == NULL)
    path = ".";

  while (path[0] != '\0') {
    int i;
    for (i = 0; path[i] != PathSeparator && path[i] != '\0'; i++);
    char *help = new char[i + 1 + strlen(fileName) + 1];
    strncpy(help, path, i);
    help[i] = '/';
    strcpy(&help[i + 1], fileName);
    char *ret = checkAccess(help);
    delete[] help;
    if (ret != NULL)
      return ret;
    if (path[i] == '\0')
      break;
    path = &path[i + 1];
  }

  return NULL;
}


//***************************
// TREATING STRINGS AND SUCH
//***************************

static void stripDot() {
  int i, j;
  for (i = 0; xytext[i] < '0' || xytext[i] > '9'; i++)
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
  for (j = 0; xytext[i] != '\0'; xytext[j++] = xytext[i++]);
  xytext[j] = '\0';
}

static void strip(char c) {
  if (xytext[0] == c) {
    int i = 1;
    while (xytext[i] != '\0') {
      xytext[i - 1] = xytext[i];
      i++;
    }
    xytext[i - 2] = '\0';
  }
}

static void stripRegex() {
  int i = 1;
  while (xytext[i] != '\0') {
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
    xytext[i - 1] = xytext[i];
    i++;
  }
  xytext[i - 2] = '\0';
}

static void transBody(char c, char *text, int &i, int &j) {
  int jstart = j;
  while (text[j] != c) {
    if (text[j] == '\n')
      xylino++;
    if (text[j] == '\\') {
      j++;
      switch (text[j]) {
      case 'a':
        text[i] = '\a';
        break;
      case 'b':
        text[i] = '\b';
        break;
      case 'f':
        text[i] = '\f';
        break;
      case 'n':
        text[i] = '\n';
        break;
      case 'r':
        text[i] = '\r';
        break;
      case 't':
        text[i] = '\t';
        break;
      case 'v':
        text[i] = '\v';
        break;
      case 'x':
      case 'X':
        { char hexstring[3];
          hexstring[0] = text[++j];
          hexstring[1] = text[++j];
          hexstring[2] = '\0';
          int hexnum = (int) strtol(hexstring, NULL, 16);
          if (hexnum == 0 && get_cond())
            xyreportError("lexical error",
                          "character in hexadecimal notation =< 0",
                          xyFileName,xylino,xycharno() + (j - jstart));
          text[i] = hexnum;
        }
        break;
      case '\\':
      case '`':
      case '\"':
      case '\'':
      case '&':
        text[i] = text[j];
        break;
      default:
        { char octstring[4];
          octstring[0] = text[j++];
          octstring[1] = text[j++];
          octstring[2] = text[j];
          octstring[3] = '\0';
          int octnum = (int) strtol(octstring, NULL, 8);
          if ((octnum == 0 || octnum > 255) && get_cond())
            xyreportError("lexical error",
                          "character in octal notation =< 0 or >= 256",
                          xyFileName,xylino,xycharno() + (j - jstart));
          text[i] = octnum & 0xFF;
        }
      }
    } else
      text[i] = text[j];
    i++;
    j++;
  }
}

static void stripTrans(char c) {
  if (xytext[0] == c) {
    int i = 0;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i] = '\0';
  }
}

static void trans(char c) {
  if (xytext[0] == c) {
    int i = 1;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i++] = c;
    xytext[i] = '\0';
  }
}

#define COMMENT 1

#define IGNOREDIRECTIVE 2
#define DIRECTIVE 3

#define LINE 4
#define SWITCHDIR 5
#define INSERT 6
#define DEFINE 7
#define IFDEF 8
#define IFNDEF 9
#define UNDEF 10

#define SCANNERPREFIX 11
#define PARSEREXPECT 12

#define LEX 13

#line 1901 "scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
        if ( yy_current_buffer->yy_is_interactive ) \
                { \
                int c = '*', n; \
                for ( n = 0; n < max_size && \
                             (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
                        buf[n] = (char) c; \
                if ( c == '\n' ) \
                        buf[n++] = (char) c; \
                if ( c == EOF && ferror( yyin ) ) \
                        YY_FATAL_ERROR( "input in flex scanner failed" ); \
                result = n; \
                } \
        else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
                  && ferror( yyin ) ) \
                YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
        YY_USER_ACTION

YY_DECL
        {
        register yy_state_type yy_current_state;
        register char *yy_cp, *yy_bp;
        register int yy_act;

#line 523 "scanner.ll"


#line 2055 "scanner.cc"

        if ( yy_init )
                {
                yy_init = 0;

#ifdef YY_USER_INIT
                YY_USER_INIT;
#endif

                if ( ! yy_start )
                        yy_start = 1;   /* first start state */

                if ( ! yyin )
                        yyin = stdin;

                if ( ! yyout )
                        yyout = stdout;

                if ( ! yy_current_buffer )
                        yy_current_buffer =
                                yy_create_buffer( yyin, YY_BUF_SIZE );

                yy_load_buffer_state();
                }

        while ( 1 )             /* loops until end-of-file is reached */
                {
                yy_cp = yy_c_buf_p;

                /* Support of yytext. */
                *yy_cp = yy_hold_char;

                /* yy_bp points to the position in yy_ch_buf of the start of
                 * the current run.
                 */
                yy_bp = yy_cp;

                yy_current_state = yy_start;
yy_match:
                do
                        {
                        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
                        if ( yy_accept[yy_current_state] )
                                {
                                yy_last_accepting_state = yy_current_state;
                                yy_last_accepting_cpos = yy_cp;
                                }
                        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                                {
                                yy_current_state = (int) yy_def[yy_current_state];
                                if ( yy_current_state >= 652 )
                                        yy_c = yy_meta[(unsigned int) yy_c];
                                }
                        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                        ++yy_cp;
                        }
                while ( yy_base[yy_current_state] != 3499 );

yy_find_action:
                yy_act = yy_accept[yy_current_state];
                if ( yy_act == 0 )
                        { /* have to back up */
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        yy_act = yy_accept[yy_current_state];
                        }

                YY_DO_BEFORE_ACTION;


do_action:      /* This label is used only to access EOF actions. */


                switch ( yy_act )
        { /* beginning of action switch */
                        case 0: /* must back up */
                        /* undo the effects of YY_DO_BEFORE_ACTION */
                        *yy_cp = yy_hold_char;
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 525 "scanner.ll"
;
        YY_BREAK
case 2:
YY_RULE_SETUP
#line 527 "scanner.ll"
{ commentdepth = 1;
                                 commentfile = xyFileNameAtom;
                                 commentlino = xylino;
                                 commentoffset = xycharno();
                                 commentlastmode = YYSTATE;
                                 BEGIN(COMMENT);
                               }
        YY_BREAK
case 3:
YY_RULE_SETUP
#line 535 "scanner.ll"
{ commentdepth++; }
        YY_BREAK
case 4:
YY_RULE_SETUP
#line 536 "scanner.ll"
{ if (--commentdepth == 0)
                                   BEGIN(commentlastmode);
                               }
        YY_BREAK
case 5:
YY_RULE_SETUP
#line 539 "scanner.ll"
;
        YY_BREAK
case 6:
YY_RULE_SETUP
#line 540 "scanner.ll"
{ xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case 7:
YY_RULE_SETUP
#line 543 "scanner.ll"
;
        YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 544 "scanner.ll"
{ if (get_cond()) {
                                   const char *file = OZ_atomToC(commentfile);
                                   xyreportError("lexical error",
                                                 "unterminated comment",
                                                 file,commentlino,commentoffset);
                                 }
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK
case 8:
YY_RULE_SETUP
#line 556 "scanner.ll"
{ BEGIN(SWITCHDIR); return SWITCH; }
        YY_BREAK
case 9:
YY_RULE_SETUP
#line 557 "scanner.ll"
{ BEGIN(DIRECTIVE); return PUSHSWITCHES; }
        YY_BREAK
case 10:
YY_RULE_SETUP
#line 558 "scanner.ll"
{ BEGIN(DIRECTIVE); return POPSWITCHES; }
        YY_BREAK
case 11:
YY_RULE_SETUP
#line 559 "scanner.ll"
{ BEGIN(DIRECTIVE); return LOCALSWITCHES; }
        YY_BREAK
case 12:
YY_RULE_SETUP
#line 561 "scanner.ll"
{ if (get_cond()) BEGIN(LINE); }
        YY_BREAK
case 13:
YY_RULE_SETUP
#line 562 "scanner.ll"
{ BEGIN(INSERT); }
        YY_BREAK
case 14:
YY_RULE_SETUP
#line 563 "scanner.ll"
{ BEGIN(DEFINE); }
        YY_BREAK
case 15:
YY_RULE_SETUP
#line 564 "scanner.ll"
{ BEGIN(UNDEF); }
        YY_BREAK
case 16:
YY_RULE_SETUP
#line 565 "scanner.ll"
{ BEGIN(IFDEF); }
        YY_BREAK
case 17:
YY_RULE_SETUP
#line 566 "scanner.ll"
{ BEGIN(IFNDEF); }
        YY_BREAK
case 18:
YY_RULE_SETUP
#line 567 "scanner.ll"
{ toggle_cond();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 19:
YY_RULE_SETUP
#line 570 "scanner.ll"
{ pop_cond();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 20:
YY_RULE_SETUP
#line 574 "scanner.ll"
{ BEGIN(SCANNERPREFIX); }
        YY_BREAK
case 21:
YY_RULE_SETUP
#line 575 "scanner.ll"
{ BEGIN(PARSEREXPECT); }
        YY_BREAK

case 22:
YY_RULE_SETUP
#line 578 "scanner.ll"
;
        YY_BREAK
case 23:
YY_RULE_SETUP
#line 579 "scanner.ll"
;
        YY_BREAK
case 24:
YY_RULE_SETUP
#line 580 "scanner.ll"
{ BEGIN(INITIAL);
                                 xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case YY_STATE_EOF(IGNOREDIRECTIVE):
#line 584 "scanner.ll"
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 25:
YY_RULE_SETUP
#line 590 "scanner.ll"
;
        YY_BREAK
case 26:
YY_RULE_SETUP
#line 591 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 27:
YY_RULE_SETUP
#line 592 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(DIRECTIVE):
#line 601 "scanner.ll"
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 28:
YY_RULE_SETUP
#line 607 "scanner.ll"
{ xylino = atol(xytext) - 1; }
        YY_BREAK
case 29:
YY_RULE_SETUP
#line 608 "scanner.ll"
{ strip('\'');
                                 char *fullname = scExpndFileName(xytext,xyFileName);
                                 if (fullname != NULL) {
                                   strncpy(xyFileName, fullname, 99);
                                   delete[] fullname;
                                 } else
                                   strncpy(xyFileName, xytext, 99);
                                 xyFileName[99] = '\0';
                                 xyFileNameAtom = OZ_atom(xyFileName);
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 30:
YY_RULE_SETUP
#line 619 "scanner.ll"
;
        YY_BREAK
case 31:
YY_RULE_SETUP
#line 620 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 32:
YY_RULE_SETUP
#line 621 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(LINE):
#line 630 "scanner.ll"
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 33:
YY_RULE_SETUP
#line 640 "scanner.ll"
{ return '+'; }
        YY_BREAK
case 34:
YY_RULE_SETUP
#line 641 "scanner.ll"
{ return '-'; }
        YY_BREAK
case 35:
YY_RULE_SETUP
#line 642 "scanner.ll"
{ return SWITCHNAME; }
        YY_BREAK
case 36:
YY_RULE_SETUP
#line 643 "scanner.ll"
;
        YY_BREAK
case 37:
YY_RULE_SETUP
#line 644 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 38:
YY_RULE_SETUP
#line 645 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(SWITCHDIR):
#line 654 "scanner.ll"
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 39:
YY_RULE_SETUP
#line 661 "scanner.ll"
{ if (get_cond()) {
                                   strip('\'');
                                   char *fullname = scExpndFileName(xytext,xyFileName);
                                   if (fullname != NULL) {
                                     OZ_Term coord =
                                       OZ_mkTupleC("pos",3,xyFileNameAtom,
                                                   OZ_int(xylino),
                                                   OZ_int(xycharno()));
                                     xy_errorMessages =
                                       OZ_cons(OZ_mkTupleC("logInsert",2,
                                                           OZ_atom(fullname),
                                                           coord),
                                               xy_errorMessages);
                                     FILE *filep = fopen(fullname, "r");
                                     push_insert(filep, fullname);
                                     delete[] fullname;
                                     BEGIN(INITIAL);
                                   } else {
                                     const char *s =
                                       "could not open file `";
                                     char *f = new char[strlen(s) + 1 +
                                                        strlen(xytext) + 2];
                                     strcpy(f,s);
                                     strcat(f,xytext);
                                     strcat(f,"'");
                                     xyreportError("macro directive error",f,
                                                   xyFileName,xylino,xycharno());
                                     delete[] f;
                                     BEGIN(DIRECTIVE);
                                   }
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 40:
YY_RULE_SETUP
#line 694 "scanner.ll"
;
        YY_BREAK
case 41:
YY_RULE_SETUP
#line 695 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 42:
YY_RULE_SETUP
#line 696 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(INSERT):
#line 705 "scanner.ll"
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 43:
YY_RULE_SETUP
#line 716 "scanner.ll"
{ if (get_cond()) {
                                   trans('`');
                                   OZ_Term key = OZ_atom(xytext);
                                   defines->setArg(key, OZ_true());
                                   BEGIN(DIRECTIVE);
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 44:
YY_RULE_SETUP
#line 724 "scanner.ll"
;
        YY_BREAK
case 45:
YY_RULE_SETUP
#line 725 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 46:
YY_RULE_SETUP
#line 726 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(DEFINE):
#line 735 "scanner.ll"
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 47:
YY_RULE_SETUP
#line 745 "scanner.ll"
{ if (get_cond()) {
                                   trans('`');
                                   defines->remove(OZ_atom(xytext));
                                   BEGIN(DIRECTIVE);
                                 } else
                                   BEGIN(INITIAL);
                               }
        YY_BREAK
case 48:
YY_RULE_SETUP
#line 752 "scanner.ll"
;
        YY_BREAK
case 49:
YY_RULE_SETUP
#line 753 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 50:
YY_RULE_SETUP
#line 754 "scanner.ll"
{ if (errorFlag)
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(UNDEF):
#line 763 "scanner.ll"
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 51:
YY_RULE_SETUP
#line 773 "scanner.ll"
{ trans('`');
                                 OZ_Term key = OZ_atom(xytext);
                                 push_cond(OZ_isTrue(defines->member(key)));
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 52:
YY_RULE_SETUP
#line 778 "scanner.ll"
;
        YY_BREAK
case 53:
YY_RULE_SETUP
#line 779 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 54:
YY_RULE_SETUP
#line 780 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(IFDEF):
#line 789 "scanner.ll"
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 55:
YY_RULE_SETUP
#line 799 "scanner.ll"
{ trans('`');
                                 OZ_Term key = OZ_atom(xytext);
                                 push_cond(!OZ_isTrue(defines->member(key)));
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 56:
YY_RULE_SETUP
#line 804 "scanner.ll"
;
        YY_BREAK
case 57:
YY_RULE_SETUP
#line 805 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 58:
YY_RULE_SETUP
#line 806 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(IFNDEF):
#line 815 "scanner.ll"
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 59:
YY_RULE_SETUP
#line 825 "scanner.ll"
{ stripTrans('\'');
                                 xy_setScannerPrefix();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 60:
YY_RULE_SETUP
#line 829 "scanner.ll"
;
        YY_BREAK
case 61:
YY_RULE_SETUP
#line 830 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 62:
YY_RULE_SETUP
#line 831 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(SCANNERPREFIX):
#line 840 "scanner.ll"
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK


case 63:
YY_RULE_SETUP
#line 850 "scanner.ll"
{ xy_setParserExpect();
                                 BEGIN(DIRECTIVE);
                               }
        YY_BREAK
case 64:
YY_RULE_SETUP
#line 853 "scanner.ll"
;
        YY_BREAK
case 65:
YY_RULE_SETUP
#line 854 "scanner.ll"
{ errorFlag = 1; }
        YY_BREAK
case 66:
YY_RULE_SETUP
#line 855 "scanner.ll"
{ if (errorFlag && get_cond())
                                   xyreportError("directive error",
                                                 "illegal directive syntax",
                                                 xyFileName,xylino,xycharno());
                                 errorFlag = 0;
                                 xylino++;
                                 xylastline = xytext + 1;
                                 BEGIN(INITIAL);
                               }
        YY_BREAK
case YY_STATE_EOF(PARSEREXPECT):
#line 864 "scanner.ll"
{ if (get_cond())
                                   xyreportError("directive error",
                                                 "unterminated directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK

case 67:
YY_RULE_SETUP
#line 874 "scanner.ll"
{ BEGIN(INITIAL); return REGEX; }
        YY_BREAK
case 68:
YY_RULE_SETUP
#line 875 "scanner.ll"
{ BEGIN(INITIAL); stripRegex(); return REGEX; }
        YY_BREAK
case 69:
YY_RULE_SETUP
#line 877 "scanner.ll"
{ return CHOICE; }
        YY_BREAK
case 70:
YY_RULE_SETUP
#line 878 "scanner.ll"
{ return LDOTS; }
        YY_BREAK
case 71:
YY_RULE_SETUP
#line 879 "scanner.ll"
{ return OOASSIGN; }
        YY_BREAK
case 72:
YY_RULE_SETUP
#line 880 "scanner.ll"
{ return DEFAULT; }
        YY_BREAK
case 73:
YY_RULE_SETUP
#line 881 "scanner.ll"
{ return REDUCE; }
        YY_BREAK
case 74:
YY_RULE_SETUP
#line 882 "scanner.ll"
{ return DEREFF; }
        YY_BREAK
case 75:
YY_RULE_SETUP
#line 883 "scanner.ll"
{ return SEP; }
        YY_BREAK
case 76:
YY_RULE_SETUP
#line 884 "scanner.ll"
{ return ADD; }
        YY_BREAK
case 77:
YY_RULE_SETUP
#line 885 "scanner.ll"
{ return FDMUL; }
        YY_BREAK
case 78:
YY_RULE_SETUP
#line 886 "scanner.ll"
{ return OTHERMUL; }
        YY_BREAK
case 79:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 887 "scanner.ll"
{ return OTHERMUL; }
        YY_BREAK
case 80:
YY_RULE_SETUP
#line 888 "scanner.ll"
{ return COMPARE; }
        YY_BREAK
case 81:
YY_RULE_SETUP
#line 889 "scanner.ll"
{ return FDIN; }
        YY_BREAK
case 82:
YY_RULE_SETUP
#line 890 "scanner.ll"
{ return FDCOMPARE; }
        YY_BREAK
case 83:
YY_RULE_SETUP
#line 892 "scanner.ll"
{ // Hack to avoid strange parsing of X.1.1:
                                 // If "." is followed by integer, then
                                 // a special token is returned.
                                 // If this rule would not be there, the
                                 // resulting tokens would be "X" "." "1.1",
                                 // where the last one is a float.
                                 // Caveat: Comments are not allowed
                                 //         between . and number.
                                 stripDot(); return DOTINT; }
        YY_BREAK
case 84:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 902 "scanner.ll"
{ // Hack to avoid parsing error for a(b:1...):
                                 // If int is followed by ..., int is returned.
                                 // If this rule would not be there, the rule
                                 // for floats would match and an error would
                                 // occur.
                                 return OZINT; }
        YY_BREAK
case 85:
YY_RULE_SETUP
#line 909 "scanner.ll"
{ return OZINT; }
        YY_BREAK
case 86:
YY_RULE_SETUP
#line 911 "scanner.ll"
{ return OZFLOAT; }
        YY_BREAK
case 87:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 913 "scanner.ll"
{ return UNIT_LABEL; }
        YY_BREAK
case 88:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 914 "scanner.ll"
{ return TRUE_LABEL; }
        YY_BREAK
case 89:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 915 "scanner.ll"
{ return FALSE_LABEL; }
        YY_BREAK
case 90:
YY_RULE_SETUP
#line 917 "scanner.ll"
{ return andthen; }
        YY_BREAK
case 91:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 918 "scanner.ll"
{ return andthen; }
        YY_BREAK
case 92:
YY_RULE_SETUP
#line 919 "scanner.ll"
{ return at; }
        YY_BREAK
case 93:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 920 "scanner.ll"
{ return at; }
        YY_BREAK
case 94:
YY_RULE_SETUP
#line 921 "scanner.ll"
{ return attr; }
        YY_BREAK
case 95:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 922 "scanner.ll"
{ return attr; }
        YY_BREAK
case 96:
YY_RULE_SETUP
#line 923 "scanner.ll"
{ return _case_; }
        YY_BREAK
case 97:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 924 "scanner.ll"
{ return _case_; }
        YY_BREAK
case 98:
YY_RULE_SETUP
#line 925 "scanner.ll"
{ return catch; }
        YY_BREAK
case 99:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 926 "scanner.ll"
{ return catch; }
        YY_BREAK
case 100:
YY_RULE_SETUP
#line 927 "scanner.ll"
{ return choice; }
        YY_BREAK
case 101:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 928 "scanner.ll"
{ return choice; }
        YY_BREAK
case 102:
YY_RULE_SETUP
#line 929 "scanner.ll"
{ return _class_; }
        YY_BREAK
case 103:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 930 "scanner.ll"
{ return _class_; }
        YY_BREAK
case 104:
YY_RULE_SETUP
#line 931 "scanner.ll"
{ return cond; }
        YY_BREAK
case 105:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 932 "scanner.ll"
{ return cond; }
        YY_BREAK
case 106:
YY_RULE_SETUP
#line 933 "scanner.ll"
{ return _condis_; }
        YY_BREAK
case 107:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 934 "scanner.ll"
{ return _condis_; }
        YY_BREAK
case 108:
YY_RULE_SETUP
#line 935 "scanner.ll"
{ return declare; }
        YY_BREAK
case 109:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 936 "scanner.ll"
{ return declare; }
        YY_BREAK
case 110:
YY_RULE_SETUP
#line 937 "scanner.ll"
{ return define; }
        YY_BREAK
case 111:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 938 "scanner.ll"
{ return define; }
        YY_BREAK
case 112:
YY_RULE_SETUP
#line 939 "scanner.ll"
{ return dis; }
        YY_BREAK
case 113:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 940 "scanner.ll"
{ return dis; }
        YY_BREAK
case 114:
YY_RULE_SETUP
#line 941 "scanner.ll"
{ return _else_; }
        YY_BREAK
case 115:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 942 "scanner.ll"
{ return _else_; }
        YY_BREAK
case 116:
YY_RULE_SETUP
#line 943 "scanner.ll"
{ return elsecase; }
        YY_BREAK
case 117:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 944 "scanner.ll"
{ return elsecase; }
        YY_BREAK
case 118:
YY_RULE_SETUP
#line 945 "scanner.ll"
{ return elseif; }
        YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 946 "scanner.ll"
{ return elseif; }
        YY_BREAK
case 120:
YY_RULE_SETUP
#line 947 "scanner.ll"
{ return elseof; }
        YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 948 "scanner.ll"
{ return elseof; }
        YY_BREAK
case 122:
YY_RULE_SETUP
#line 949 "scanner.ll"
{ return end; }
        YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 950 "scanner.ll"
{ return end; }
        YY_BREAK
case 124:
YY_RULE_SETUP
#line 951 "scanner.ll"
{ return export; }
        YY_BREAK
case 125:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 952 "scanner.ll"
{ return export; }
        YY_BREAK
case 126:
YY_RULE_SETUP
#line 953 "scanner.ll"
{ return fail; }
        YY_BREAK
case 127:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 954 "scanner.ll"
{ return fail; }
        YY_BREAK
case 128:
YY_RULE_SETUP
#line 955 "scanner.ll"
{ return false; }
        YY_BREAK
case 129:
YY_RULE_SETUP
#line 956 "scanner.ll"
{ return feat; }
        YY_BREAK
case 130:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 957 "scanner.ll"
{ return feat; }
        YY_BREAK
case 131:
YY_RULE_SETUP
#line 958 "scanner.ll"
{ return finally; }
        YY_BREAK
case 132:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 959 "scanner.ll"
{ return finally; }
        YY_BREAK
case 133:
YY_RULE_SETUP
#line 960 "scanner.ll"
{ return _from_; }
        YY_BREAK
case 134:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 961 "scanner.ll"
{ return _from_; }
        YY_BREAK
case 135:
YY_RULE_SETUP
#line 962 "scanner.ll"
{ return _fun_; }
        YY_BREAK
case 136:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 963 "scanner.ll"
{ return _fun_; }
        YY_BREAK
case 137:
YY_RULE_SETUP
#line 964 "scanner.ll"
{ return functor; }
        YY_BREAK
case 138:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 965 "scanner.ll"
{ return functor; }
        YY_BREAK
case 139:
YY_RULE_SETUP
#line 966 "scanner.ll"
{ return _if_; }
        YY_BREAK
case 140:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 967 "scanner.ll"
{ return _if_; }
        YY_BREAK
case 141:
YY_RULE_SETUP
#line 968 "scanner.ll"
{ return import; }
        YY_BREAK
case 142:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 969 "scanner.ll"
{ return import; }
        YY_BREAK
case 143:
YY_RULE_SETUP
#line 970 "scanner.ll"
{ return _in_; }
        YY_BREAK
case 144:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 971 "scanner.ll"
{ return _in_; }
        YY_BREAK
case 145:
YY_RULE_SETUP
#line 972 "scanner.ll"
{ if (xy_gumpSyntax) { BEGIN(LEX); return lex; } else return OZATOM; }
        YY_BREAK
case 146:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 973 "scanner.ll"
{ if (xy_gumpSyntax) { BEGIN(LEX); return lex; } else return ATOM_LABEL; }
        YY_BREAK
case 147:
YY_RULE_SETUP
#line 974 "scanner.ll"
{ return local; }
        YY_BREAK
case 148:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 975 "scanner.ll"
{ return local; }
        YY_BREAK
case 149:
YY_RULE_SETUP
#line 976 "scanner.ll"
{ return _lock_; }
        YY_BREAK
case 150:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 977 "scanner.ll"
{ return _lock_; }
        YY_BREAK
case 151:
YY_RULE_SETUP
#line 978 "scanner.ll"
{ return _meth_; }
        YY_BREAK
case 152:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 979 "scanner.ll"
{ return _meth_; }
        YY_BREAK
case 153:
YY_RULE_SETUP
#line 980 "scanner.ll"
{ return xy_gumpSyntax? _mode_: OZATOM; }
        YY_BREAK
case 154:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 981 "scanner.ll"
{ return xy_gumpSyntax? _mode_: ATOM_LABEL; }
        YY_BREAK
case 155:
YY_RULE_SETUP
#line 982 "scanner.ll"
{ return not; }
        YY_BREAK
case 156:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 983 "scanner.ll"
{ return not; }
        YY_BREAK
case 157:
YY_RULE_SETUP
#line 984 "scanner.ll"
{ return of; }
        YY_BREAK
case 158:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 985 "scanner.ll"
{ return of; }
        YY_BREAK
case 159:
YY_RULE_SETUP
#line 986 "scanner.ll"
{ return or; }
        YY_BREAK
case 160:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 987 "scanner.ll"
{ return or; }
        YY_BREAK
case 161:
YY_RULE_SETUP
#line 988 "scanner.ll"
{ return orelse; }
        YY_BREAK
case 162:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 989 "scanner.ll"
{ return orelse; }
        YY_BREAK
case 163:
YY_RULE_SETUP
#line 990 "scanner.ll"
{ return xy_gumpSyntax? _parser_: OZATOM; }
        YY_BREAK
case 164:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 991 "scanner.ll"
{ return xy_gumpSyntax? _parser_: ATOM_LABEL; }
        YY_BREAK
case 165:
YY_RULE_SETUP
#line 992 "scanner.ll"
{ return prepare; }
        YY_BREAK
case 166:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 993 "scanner.ll"
{ return prepare; }
        YY_BREAK
case 167:
YY_RULE_SETUP
#line 994 "scanner.ll"
{ return proc; }
        YY_BREAK
case 168:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 995 "scanner.ll"
{ return proc; }
        YY_BREAK
case 169:
YY_RULE_SETUP
#line 996 "scanner.ll"
{ return xy_gumpSyntax? prod: OZATOM; }
        YY_BREAK
case 170:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 997 "scanner.ll"
{ return xy_gumpSyntax? prod: ATOM_LABEL; }
        YY_BREAK
case 171:
YY_RULE_SETUP
#line 998 "scanner.ll"
{ return prop; }
        YY_BREAK
case 172:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 999 "scanner.ll"
{ return prop; }
        YY_BREAK
case 173:
YY_RULE_SETUP
#line 1000 "scanner.ll"
{ return _raise_; }
        YY_BREAK
case 174:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1001 "scanner.ll"
{ return _raise_; }
        YY_BREAK
case 175:
YY_RULE_SETUP
#line 1002 "scanner.ll"
{ return require; }
        YY_BREAK
case 176:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1003 "scanner.ll"
{ return require; }
        YY_BREAK
case 177:
YY_RULE_SETUP
#line 1004 "scanner.ll"
{ return xy_gumpSyntax? _scanner_: OZATOM; }
        YY_BREAK
case 178:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1005 "scanner.ll"
{ return xy_gumpSyntax? _scanner_: ATOM_LABEL; }
        YY_BREAK
case 179:
YY_RULE_SETUP
#line 1006 "scanner.ll"
{ return self; }
        YY_BREAK
case 180:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1007 "scanner.ll"
{ return self; }
        YY_BREAK
case 181:
YY_RULE_SETUP
#line 1008 "scanner.ll"
{ return skip; }
        YY_BREAK
case 182:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1009 "scanner.ll"
{ return skip; }
        YY_BREAK
case 183:
YY_RULE_SETUP
#line 1010 "scanner.ll"
{ return xy_gumpSyntax? syn: OZATOM; }
        YY_BREAK
case 184:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1011 "scanner.ll"
{ return xy_gumpSyntax? syn: ATOM_LABEL; }
        YY_BREAK
case 185:
YY_RULE_SETUP
#line 1012 "scanner.ll"
{ return then; }
        YY_BREAK
case 186:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1013 "scanner.ll"
{ return then; }
        YY_BREAK
case 187:
YY_RULE_SETUP
#line 1014 "scanner.ll"
{ return xy_gumpSyntax? token: OZATOM; }
        YY_BREAK
case 188:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1015 "scanner.ll"
{ return xy_gumpSyntax? token: ATOM_LABEL; }
        YY_BREAK
case 189:
YY_RULE_SETUP
#line 1016 "scanner.ll"
{ return thread; }
        YY_BREAK
case 190:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1017 "scanner.ll"
{ return thread; }
        YY_BREAK
case 191:
YY_RULE_SETUP
#line 1018 "scanner.ll"
{ return true; }
        YY_BREAK
case 192:
YY_RULE_SETUP
#line 1019 "scanner.ll"
{ return try; }
        YY_BREAK
case 193:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1020 "scanner.ll"
{ return try; }
        YY_BREAK
case 194:
YY_RULE_SETUP
#line 1021 "scanner.ll"
{ return unit; }
        YY_BREAK
case 195:
YY_RULE_SETUP
#line 1022 "scanner.ll"
{ return with; }
        YY_BREAK
case 196:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1023 "scanner.ll"
{ return with; }
        YY_BREAK
case 197:
YY_RULE_SETUP
#line 1025 "scanner.ll"
{ stripTrans('\''); return OZATOM; }
        YY_BREAK
case 198:
YY_RULE_SETUP
#line 1026 "scanner.ll"
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return OZATOM;}
        YY_BREAK
case 199:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1027 "scanner.ll"
{ stripTrans('\''); return ATOM_LABEL; }
        YY_BREAK
case 200:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1028 "scanner.ll"
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return ATOM_LABEL;}
        YY_BREAK
case 201:
YY_RULE_SETUP
#line 1029 "scanner.ll"
{ trans('`'); return VARIABLE; }
        YY_BREAK
case 202:
YY_RULE_SETUP
#line 1030 "scanner.ll"
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return VARIABLE;}
        YY_BREAK
case 203:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1031 "scanner.ll"
{ trans('`'); return VARIABLE_LABEL; }
        YY_BREAK
case 204:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1032 "scanner.ll"
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return VARIABLE;}
        YY_BREAK
case 205:
YY_RULE_SETUP
#line 1033 "scanner.ll"
{ stripTrans('\"'); return STRING; }
        YY_BREAK
case 206:
YY_RULE_SETUP
#line 1034 "scanner.ll"
{ if (get_cond()) xyreportError("lexical error","illegal string syntax",xyFileName,xylino,xycharno()); return STRING;}
        YY_BREAK
case 207:
YY_RULE_SETUP
#line 1036 "scanner.ll"
{ int i = 0;
                                 int j = 1;
                                 transBody(0, xytext, i, j);
                                 return AMPER;
                               }
        YY_BREAK
case 208:
YY_RULE_SETUP
#line 1042 "scanner.ll"
{
                                 return xytext[0];
                               }
        YY_BREAK
case 209:
YY_RULE_SETUP
#line 1046 "scanner.ll"
;
        YY_BREAK
case 210:
YY_RULE_SETUP
#line 1047 "scanner.ll"
{ xylino++;
                                 xylastline = xytext + 1;
                               }
        YY_BREAK
case 211:
YY_RULE_SETUP
#line 1051 "scanner.ll"
{ if (get_cond())
                                   xyreportError("lexical error",
                                                 "unknown directive",
                                                 xyFileName,xylino,xycharno());
                                 BEGIN(IGNOREDIRECTIVE);
                               }
        YY_BREAK
case 212:
YY_RULE_SETUP
#line 1058 "scanner.ll"
{ if (get_cond())
                                   xyreportError("lexical error",
                                                 "illegal character",
                                                 xyFileName,xylino,xycharno());
                               }
        YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEX):
#line 1064 "scanner.ll"
{ BEGIN(DIRECTIVE);
                                 if (pop_insert())
                                   return ENDOFFILE;
                               }
        YY_BREAK
case 213:
YY_RULE_SETUP
#line 1069 "scanner.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
        YY_BREAK
#line 3733 "scanner.cc"

        case YY_END_OF_BUFFER:
                {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = yy_hold_char;
                YY_RESTORE_YY_MORE_OFFSET

                if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                        {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between yy_current_buffer and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        yy_n_chars = yy_current_buffer->yy_n_chars;
                        yy_current_buffer->yy_input_file = yyin;
                        yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                        }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        { /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state();

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans( yy_current_state );

                        yy_bp = yytext_ptr + YY_MORE_ADJ;

                        if ( yy_next_state )
                                {
                                /* Consume the NUL. */
                                yy_cp = ++yy_c_buf_p;
                                yy_current_state = yy_next_state;
                                goto yy_match;
                                }

                        else
                                {
                                yy_cp = yy_c_buf_p;
                                goto yy_find_action;
                                }
                        }

                else switch ( yy_get_next_buffer() )
                        {
                        case EOB_ACT_END_OF_FILE:
                                {
                                yy_did_buffer_switch_on_eof = 0;

                                if ( yywrap() )
                                        {
                                        /* Note: because we've taken care in
                                         * yy_get_next_buffer() to have set up
                                         * yytext, we can now set up
                                         * yy_c_buf_p so that if some total
                                         * hoser (like flex itself) wants to
                                         * call the scanner after we return the
                                         * YY_NULL, it'll still work - another
                                         * YY_NULL will get returned.
                                         */
                                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                        yy_act = YY_STATE_EOF(YY_START);
                                        goto do_action;
                                        }

                                else
                                        {
                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
                                        }
                                break;
                                }

                        case EOB_ACT_CONTINUE_SCAN:
                                yy_c_buf_p =
                                        yytext_ptr + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_match;

                        case EOB_ACT_LAST_MATCH:
                                yy_c_buf_p =
                                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                break;
                }

        default:
                YY_FATAL_ERROR(
                        "fatal flex scanner internal error--no action found" );
        } /* end of action switch */
                } /* end of scanning one token */
        } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *      EOB_ACT_LAST_MATCH -
 *      EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *      EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
        {
        register char *dest = yy_current_buffer->yy_ch_buf;
        register char *source = yytext_ptr;
        register int number_to_move, i;
        int ret_val;

        if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
                YY_FATAL_ERROR(
                "fatal flex scanner internal error--end of buffer missed" );

        if ( yy_current_buffer->yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                yy_current_buffer->yy_n_chars = yy_n_chars = 0;

        else
                {
                int num_to_read =
                        yy_current_buffer->yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                        YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                        /* just a shorter name for the current buffer */
                        YY_BUFFER_STATE b = yy_current_buffer;

                        int yy_c_buf_p_offset =
                                (int) (yy_c_buf_p - b->yy_ch_buf);

                        if ( b->yy_is_our_buffer )
                                {
                                int new_size = b->yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->yy_buf_size += b->yy_buf_size / 8;
                                else
                                        b->yy_buf_size *= 2;

                                b->yy_ch_buf = (char *)
                                        /* Include room in for 2 EOB chars. */
                                        yy_flex_realloc( (void *) b->yy_ch_buf,
                                                         b->yy_buf_size + 2 );
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->yy_ch_buf = 0;

                        if ( ! b->yy_ch_buf )
                                YY_FATAL_ERROR(
                                "fatal error - scanner input buffer overflow" );

                        yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                        num_to_read = yy_current_buffer->yy_buf_size -
                                                number_to_move - 1;
#endif
                        }

                if ( num_to_read > YY_READ_BUF_SIZE )
                        num_to_read = YY_READ_BUF_SIZE;

                /* Read in more data. */
                YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                        yy_n_chars, num_to_read );

                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        if ( yy_n_chars == 0 )
                {
                if ( number_to_move == YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        yyrestart( yyin );
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        yy_current_buffer->yy_buffer_status =
                                YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        yy_n_chars += number_to_move;
        yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
        yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

        yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

        return ret_val;
        }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
        {
        register yy_state_type yy_current_state;
        register char *yy_cp;

        yy_current_state = yy_start;

        for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
                {
                register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 76);
                if ( yy_accept[yy_current_state] )
                        {
                        yy_last_accepting_state = yy_current_state;
                        yy_last_accepting_cpos = yy_cp;
                        }
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                        {
                        yy_current_state = (int) yy_def[yy_current_state];
                        if ( yy_current_state >= 652 )
                                yy_c = yy_meta[(unsigned int) yy_c];
                        }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                }

        return yy_current_state;
        }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *      next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
        {
        register int yy_is_jam;
        register char *yy_cp = yy_c_buf_p;

        register YY_CHAR yy_c = 76;
        if ( yy_accept[yy_current_state] )
                {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
                }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 652 )
                        yy_c = yy_meta[(unsigned int) yy_c];
                }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        yy_is_jam = (yy_current_state == 651);

        return yy_is_jam ? 0 : yy_current_state;
        }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
        {
        register char *yy_cp = yy_c_buf_p;

        /* undo effects of setting up yytext */
        *yy_cp = yy_hold_char;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                { /* need to shift things up to make room */
                /* +2 for EOB chars. */
                register int number_to_move = yy_n_chars + 2;
                register char *dest = &yy_current_buffer->yy_ch_buf[
                                        yy_current_buffer->yy_buf_size + 2];
                register char *source =
                                &yy_current_buffer->yy_ch_buf[number_to_move];

                while ( source > yy_current_buffer->yy_ch_buf )
                        *--dest = *--source;

                yy_cp += (int) (dest - source);
                yy_bp += (int) (dest - source);
                yy_current_buffer->yy_n_chars =
                        yy_n_chars = yy_current_buffer->yy_buf_size;

                if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                        YY_FATAL_ERROR( "flex scanner push-back overflow" );
                }

        *--yy_cp = (char) c;


        yytext_ptr = yy_bp;
        yy_hold_char = *yy_cp;
        yy_c_buf_p = yy_cp;
        }
#endif  /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
        {
        int c;

        *yy_c_buf_p = yy_hold_char;

        if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
                {
                /* yy_c_buf_p now points to the character we want to return.
                 * If this occurs *before* the EOB characters, then it's a
                 * valid NUL; if not, then we've hit the end of the buffer.
                 */
                if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        /* This was really a NUL. */
                        *yy_c_buf_p = '\0';

                else
                        { /* need more input */
                        int offset = yy_c_buf_p - yytext_ptr;
                        ++yy_c_buf_p;

                        switch ( yy_get_next_buffer() )
                                {
                                case EOB_ACT_LAST_MATCH:
                                        /* This happens because yy_g_n_b()
                                         * sees that we've accumulated a
                                         * token and flags that we need to
                                         * try matching the token before
                                         * proceeding.  But for input(),
                                         * there's no matching to consider.
                                         * So convert the EOB_ACT_LAST_MATCH
                                         * to EOB_ACT_END_OF_FILE.
                                         */

                                        /* Reset buffer status. */
                                        yyrestart( yyin );

                                        /* fall through */

                                case EOB_ACT_END_OF_FILE:
                                        {
                                        if ( yywrap() )
                                                return EOF;

                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
#ifdef __cplusplus
                                        return yyinput();
#else
                                        return input();
#endif
                                        }

                                case EOB_ACT_CONTINUE_SCAN:
                                        yy_c_buf_p = yytext_ptr + offset;
                                        break;
                                }
                        }
                }

        c = *(unsigned char *) yy_c_buf_p;      /* cast for 8-bit char's */
        *yy_c_buf_p = '\0';     /* preserve yytext */
        yy_hold_char = *++yy_c_buf_p;


        return c;
        }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
        {
        if ( ! yy_current_buffer )
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_init_buffer( yy_current_buffer, input_file );
        yy_load_buffer_state();
        }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
        {
        if ( yy_current_buffer == new_buffer )
                return;

        if ( yy_current_buffer )
                {
                /* Flush out information for old buffer. */
                *yy_c_buf_p = yy_hold_char;
                yy_current_buffer->yy_buf_pos = yy_c_buf_p;
                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        yy_current_buffer = new_buffer;
        yy_load_buffer_state();

        /* We don't actually know whether we did this switch during
         * EOF (yywrap()) processing, but the only time this flag
         * is looked at is after yywrap() is called, so it's safe
         * to go ahead and always set it.
         */
        yy_did_buffer_switch_on_eof = 1;
        }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
        {
        yy_n_chars = yy_current_buffer->yy_n_chars;
        yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
        yyin = yy_current_buffer->yy_input_file;
        yy_hold_char = *yy_c_buf_p;
        }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
        {
        YY_BUFFER_STATE b;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_buf_size = size;

        /* yy_ch_buf has to be 2 characters longer than the size given because
         * we need to put in 2 end-of-buffer characters.
         */
        b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
        if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_is_our_buffer = 1;

        yy_init_buffer( b, file );

        return b;
        }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
        {
        if ( ! b )
                return;

        if ( b == yy_current_buffer )
                yy_current_buffer = (YY_BUFFER_STATE) 0;

        if ( b->yy_is_our_buffer )
                yy_flex_free( (void *) b->yy_ch_buf );

        yy_flex_free( (void *) b );
        }


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


        {
        yy_flush_buffer( b );

        b->yy_input_file = file;
        b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
        b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
        b->yy_is_interactive = 0;
#else
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
        }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

        {
        if ( ! b )
                return;

        b->yy_n_chars = 0;

        /* We always need two end-of-buffer characters.  The first causes
         * a transition to the end-of-buffer state.  The second causes
         * a jam in that state.
         */
        b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
        b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

        b->yy_buf_pos = &b->yy_ch_buf[0];

        b->yy_at_bol = 1;
        b->yy_buffer_status = YY_BUFFER_NEW;

        if ( b == yy_current_buffer )
                yy_load_buffer_state();
        }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
        {
        YY_BUFFER_STATE b;

        if ( size < 2 ||
             base[size-2] != YY_END_OF_BUFFER_CHAR ||
             base[size-1] != YY_END_OF_BUFFER_CHAR )
                /* They forgot to leave room for the EOB's. */
                return 0;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

        b->yy_buf_size = size - 2;      /* "- 2" to take care of EOB's */
        b->yy_buf_pos = b->yy_ch_buf = base;
        b->yy_is_our_buffer = 0;
        b->yy_input_file = 0;
        b->yy_n_chars = b->yy_buf_size;
        b->yy_is_interactive = 0;
        b->yy_at_bol = 1;
        b->yy_fill_buffer = 0;
        b->yy_buffer_status = YY_BUFFER_NEW;

        yy_switch_to_buffer( b );

        return b;
        }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
        {
        int len;
        for ( len = 0; yy_str[len]; ++len )
                ;

        return yy_scan_bytes( yy_str, len );
        }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
        {
        YY_BUFFER_STATE b;
        char *buf;
        yy_size_t n;
        int i;

        /* Get memory for full buffer, including space for trailing EOB's. */
        n = len + 2;
        buf = (char *) yy_flex_alloc( n );
        if ( ! buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

        for ( i = 0; i < len; ++i )
                buf[i] = bytes[i];

        buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

        b = yy_scan_buffer( buf, n );
        if ( ! b )
                YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

        /* It's okay to grow etc. this buffer, and we should throw it
         * away when we're done.
         */
        b->yy_is_our_buffer = 1;

        return b;
        }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
        {
        if ( yy_start_stack_ptr >= yy_start_stack_depth )
                {
                yy_size_t new_size;

                yy_start_stack_depth += YY_START_STACK_INCR;
                new_size = yy_start_stack_depth * sizeof( int );

                if ( ! yy_start_stack )
                        yy_start_stack = (int *) yy_flex_alloc( new_size );

                else
                        yy_start_stack = (int *) yy_flex_realloc(
                                        (void *) yy_start_stack, new_size );

                if ( ! yy_start_stack )
                        YY_FATAL_ERROR(
                        "out of memory expanding start-condition stack" );
                }

        yy_start_stack[yy_start_stack_ptr++] = YY_START;

        BEGIN(new_state);
        }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
        {
        if ( --yy_start_stack_ptr < 0 )
                YY_FATAL_ERROR( "start-condition stack underflow" );

        BEGIN(yy_start_stack[yy_start_stack_ptr]);
        }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
        {
        return yy_start_stack[yy_start_stack_ptr - 1];
        }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
        {
        (void) fprintf( stderr, "%s\n", msg );
        exit( YY_EXIT_FAILURE );
        }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                yytext[yyleng] = yy_hold_char; \
                yy_c_buf_p = yytext + n; \
                yy_hold_char = *yy_c_buf_p; \
                *yy_c_buf_p = '\0'; \
                yyleng = n; \
                } \
        while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
        {
        register int i;
        for ( i = 0; i < n; ++i )
                s1[i] = s2[i];
        }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
        {
        register int n;
        for ( n = 0; s[n]; ++n )
                ;

        return n;
        }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
        {
        return (void *) malloc( size );
        }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
        {
        /* The cast to (char *) in the following accommodates both
         * implementations that use char* generic pointers, and those
         * that use void* generic pointers.  It works with the latter
         * because both ANSI C and C++ allow castless assignment from
         * any pointer type to void*, and deal with argument conversions
         * as though doing an assignment.
         */
        return (void *) realloc( (char *) ptr, size );
        }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
        {
        free( ptr );
        }

#if YY_MAIN
int main()
        {
        yylex();
        return 0;
        }
#endif
#line 1069 "scanner.ll"


static void xy_init(OZ_Term defines0) {
  xylino = 1;
  errorFlag = 0;

  bufferStack = NULL;

  defines = tagged2Dictionary(OZ_deref(defines0));
  conditional_p = 0;
  conditional_basep = 0;
  commentdepth = 0;

  BEGIN(INITIAL);
}

int xy_init_from_file(char *file, OZ_Term defines) {
  char *fullname = scExpndFileName(file, NULL);
  if (fullname == NULL)
    return 0;
  xy_errorMessages = OZ_cons(OZ_mkTupleC("logInsert",1,OZ_atom(fullname)),
                             OZ_nil());
  xyin = fopen(fullname, "r");
  if (xyin == NULL)
    return 0;
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  strncpy(xyFileName,fullname,99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  delete[] fullname;
  xy_init(defines);
  return 1;
}

void xy_init_from_string(char *str, OZ_Term defines) {
  xy_errorMessages = OZ_nil();
  xyFileName[0] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  xyin = NULL;
  xy_scan_string(str);
  xylastline = YY_CURRENT_BUFFER->yy_ch_buf;
  xy_init(defines);
}

char *xy_expand_file_name(char *file) {
  return scExpndFileName(file, NULL);
}

void xy_exit() {
  xy_delete_buffer(YY_CURRENT_BUFFER);
  while (bufferStack != NULL) {
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
  }
  if (xyin)
    fclose(xyin);
}

int xylex() {
  int next = xymylex();
  if (get_cond() || next == 0 || next == ENDOFFILE)
    return next;
  else
    return xylex();
}

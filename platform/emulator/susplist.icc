/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: mehl,tmueller,popow
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __SUSPLIST_ICC__
#define __SUSPLIST_ICC__


#ifdef INTERFACE
#ifndef OUTLINE
#pragma interface
#endif
#endif

//-----------------------------------------------------------------------------
//                           class SuspList

inline
SuspList * SuspList::appendToAndUnlink(SuspList * &to_list)
{
  if (this)
    if (to_list) {
      SuspList* aux;
      for (aux = to_list; aux->getNext(); aux = aux->getNext());
      aux->setNext(this);
    } else {
      to_list = this;
    }
  return NULL;
}

inline
SuspList * SuspList::appendTo(SuspList * to_list)
{
  if (this) {
    if (to_list) {
      SuspList *aux;
      for (aux = to_list; aux->getNext(); aux = aux->getNext());
      aux->setNext(this);
      return to_list;
    }
    return this;
  } else {
    return to_list;
  }
}

inline
SuspList * SuspList::appendToAndUnlink(SuspList * &to_list, Bool reset_local)
{
  if (reset_local) {
    if (this) {
      SuspList *aux;
      for (aux = this; aux->getNext(); aux = aux->getNext()) {
#ifdef DEBUG_CHECK
        if ((aux->getElem ())->isLocalThread ())
          {cout << '&'; cout.flush();}
#endif
        (aux->getElem ())->unmarkLocalThread ();
      }
      (aux->getElem ())->unmarkLocalThread ();
      aux->setNext(to_list);
      to_list = this;
    }
    return NULL;
  } else {
    return appendToAndUnlink(to_list);
  }
}

inline
SuspList * SuspList::dispose(void)
{
  SuspList * ret = next;
  freeListDispose(this, sizeof(SuspList));
  return ret;
}

inline
SuspList * SuspList::getNextAndDispose(void) {
  SuspList * n = next; dispose(); return n;
}


inline
void SuspList::disposeList(void) {
  for (SuspList * l = this; l; l = l->dispose());
}

#endif

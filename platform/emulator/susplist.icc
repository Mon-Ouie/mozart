/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: mehl,tmueller,popow
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __SUSPLIST_ICC__
#define __SUSPLIST_ICC__


#ifdef INTERFACE
#ifndef OUTLINE
#pragma interface
#endif
#endif

#include "thread.hh"

//-----------------------------------------------------------------------------
//                           class SuspList

inline
SuspList * SuspList::appendToAndUnlink(SuspList * &to_list, Bool reset_local)
{
  if (reset_local) {
    if (this) {
      SuspList *aux;
      for (aux = this; aux->getNext(); aux = aux->getNext()) {
#ifdef DEBUG_CHECK
        if (aux->getElem()->isLocalThread())
          {cout << '&'; cout.flush();}
#endif
        aux->getElem()->unmarkLocalThread();
      }
      aux->getElem()->unmarkLocalThread();
      aux->setNext(to_list);
      to_list = this;
    }
    return NULL;
  } else {
    if (this)
      if (to_list) {
        SuspList* aux;
        for (aux = to_list; aux->getNext(); aux = aux->getNext());
        aux->setNext(this);
      } else {
        to_list = this;
      }
    return NULL;
  }
}

//-----------------------------------------------------------------------------
// class OrderedSuspList

inline
OrderedSuspList * OrderedSuspList::insert(Thread * thr)
{
#ifdef DEBUG_NONMONOTONIC
  cout << "OrderedSuspList::insert" << endl << flush;
#endif

  Assert(thr->isNonMonotonicPropagatorThread());

  OrderedSuspList * r = this, ** p = &r;
  OZ_NonMonotonic::order_t n_order = thr->getPropagator()->getOrder();
  while (*p && (n_order > (*p)->t->getPropagator()->getOrder()))
    p = &((*p)->n);

  *p = new OrderedSuspList(thr, *p);

  return r;
}

#endif

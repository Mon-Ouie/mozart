/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: mehl,tmueller,popow
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __SUSPLIST_ICC__
#define __SUSPLIST_ICC__


#ifdef INTERFACE
#ifndef OUTLINE
#pragma interface
#endif
#endif

//-----------------------------------------------------------------------------
//                           class SuspList

inline
SuspList * SuspList::appendToAndUnlink(SuspList * &to_list, Bool reset_local)
{
  if (this) { 
    SuspList * aux;
    
    if (reset_local) 
      for (aux = this; aux; aux = aux->getNext())
      	aux->getElem()->unmarkLocalThread();
    
    if (to_list) {
      // this != NULL && to_list != NULL
      
      // multiple entries of suspensions have to be removed; therefore ...
      // ... tag this-list and find last entry
      SuspList * last DebugCode(= NULL);
      for (aux = this; 1; ) {
	aux->getElem()->markTagged();
	
	SuspList * aux_next = aux->getNext(); 
	
	if (aux_next) {
	  aux = aux_next; 
	} else {
	  last = aux;
	  break;
	}
      }

      Assert (last);
      
      // remove tagged entries from to_list 
      SuspList ** aux1 = &to_list;
      while (*aux1) {
	if ((*aux1)->getElem()->isTagged()) {
	  *aux1 = (*aux1)->getNext();
	  continue;
	}
	aux1 = &(*aux1)->next;
      }
      
      // untag this-list
      for (aux = this; aux; aux = aux->getNext())
      	aux->getElem()->unmarkTagged();
      
      last->setNext(to_list);
    } 

    to_list = this;
  }
  return NULL;
}

inline
SuspList * SuspList::dispose(void)
{
  SuspList * ret = next;
  freeListDispose(this, sizeof(SuspList));
  return ret;
}

inline
SuspList * SuspList::getNextAndDispose(void) {
  SuspList * n = next; dispose(); return n;
}


inline
void SuspList::disposeList(void) {
  for (SuspList * l = this; l; l = l->dispose());
}

//-----------------------------------------------------------------------------
// class OrderedSuspList

inline   
OrderedSuspList * OrderedSuspList::insert(Thread * thr)
{
  Assert(thr->isNonMonotonicPropagatorThread());

  OrderedSuspList * r = this, ** p = &r;
  OZ_NonMonotonic::order_t n_order = thr->getPropagator()->getOrder();
  while (*p && (n_order > (*p)->t->getPropagator()->getOrder()))
    p = &((*p)->n);

  *p = new OrderedSuspList(thr, *p);

  return r;
}

inline
void OrderedSuspList::print(void)
{
  for (OrderedSuspList * p = this; p != NULL; p = p->n) {
    OZ_Propagator * pr = p->t->getPropagator();
    cout << "   " << pr->toString()
	 << endl << flush;
  }
}

#endif


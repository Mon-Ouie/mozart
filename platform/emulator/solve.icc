/*
 *  Authors:
 *    Kostja Popow (popow@ps.uni-sb.de)
 *    Christian Schulte <schulte@ps.uni-sb.de>
 *
 *  Contributors:
 *    Michael Mehl (mehl@dfki.de)
 *
 *  Copyright:
 *    Organization or Person (Year(s))
 *
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 *
 *  This file is part of Mozart, an implementation
 *  of Oz 3:
 *     http://www.mozart-oz.org
 *
 *  See the file "LICENSE" or
 *     http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */

// Solver

#ifndef __SOLVE_ICC_
#define __SOLVE_ICC_

#if !defined(OUTLINE) && defined(INTERFACE)
#pragma interface
#endif

#include "board.hh"
#include "susplist.hh"

#ifdef OUTLINE
#define inline
#endif

/* ------------------------------------------------------------------------
 * class SolveActor
 * ------------------------------------------------------------------------ */

inline
void SolveActor::addSuspension (Suspension susp)
{
  suspList = new SuspList (susp, suspList);
}

inline
void SolveActor::mergeNonMono(Board *bb) {
  // merge nonmonotonic susp lists
  if (nonMonoSuspList) {
    // Merge in current solve board but not elsewhere
    if (bb && bb->isSolve()) {
      // merge nonmonotonic susp list to another solve space
      SolveActor * sa = SolveActor::Cast(bb->getActor());
      if (sa->nonMonoSuspList) {
        sa->mergeNonMonoSuspListWith(nonMonoSuspList);
        setNonMonoSuspList(NULL);
      } else {
        sa->setNonMonoSuspList(nonMonoSuspList);
      }
    } else {
      // merge nonmonotinic susp list to a non-solve space
      DebugCode(OZ_warning("Merging solve space with non-solve space."));
      oz_solve_scheduleNonMonoSuspList(this);
    }
  }
}

inline
int SolveActor::commit(int left, int right) {
  ozstat.incSolveAlt();

  Assert(bag && bag->getDist()->isAlive());

  return bag->getDist()->commit(solveBoard,left,right);

}

inline
void SolveActor::clearResult(Board* bb) {
  if (OZ_isVariable(result))
    return;

  result = oz_newVar(bb);
}

inline
Distributor * SolveActor::getDistributor(void) {
  bag = bag->clean();

  if (!bag)
    return (Distributor *) 0;

  // Find unary distributor, if any
  for (DistBag * db = bag; db; db=db->getNext()) {
    if (db->getDist()->getAlternatives() == 1)
      return db->getDist();
  }

  return bag->getDist();
}

#ifdef DEBUG_THREADCOUNT
extern int existingLTQs;
#endif


#ifdef OUTLINE
#undef inline
#endif

#endif  // __SOLVE_ICC_

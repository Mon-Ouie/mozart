$cmode='dyn';

%builtins_all =
(
    'fsp_init'		=> { in  => [],
			     out => ['+atom'],
			     BI  => fsp_init,
			     module => libfset,
			     native => true},

    'fsp_isIn'		=> { in  => ['int','fset','bool'],
			     out => [],
			     bi  => fsp_isIn,
			     module => libfset,
			     native => true},

    'fsp_equalR'	=> { in  => ['fset','fset','bool'],
			     out => [],
			     bi  => fsp_equalR,
			     module => libfset,
			     native => true},

    'fsp_isInR'		=> { in  => ['int','fset','int'],
			     out => [],
			     bi  => fsp_isInR,
			     module => libfset,
			     native => true},

    'fsp_include'	=> { in  => ['int','fset'],
			     out => [],
			     bi  => fsp_include,
			     module => libfset,
			     native => true},

    'fsp_exclude'	=> { in  => ['int','fset'],
			     out => [],
			     bi  => fsp_exclude,
			     module => libfset,
			     native => true},

    'fsp_match'		=> { in  => ['fset','+value'],
			     out => [],
			     bi  => fsp_match,
			     module => libfset,
			     native => true},

    'fsp_seq'		=> { in  => ['+value'],
			     out => [],
			     bi  => fsp_seq,
			     module => libfset,
			     native => true},

    'fsp_minN'		=> { in  => ['fset','+value'],
			     out => [],
			     bi  => fsp_minN,
			     module => libfset,
			     native => true},

    'fsp_maxN'		=> { in  => ['fset','+value'],
			     out => [],
			     bi  => fsp_maxN,
			     module => libfset,
			     native => true},

    'fsp_card'		=> { in  => ['fset','int'],
			     out => [],
			     bi  => fsp_card,
			     module => libfset,
			     native => true},

    'fsp_union'		=> { in  => ['fset','fset','fset'],
			     out => [],
			     bi  => fsp_union,
			     module => libfset,
			     native => true},

    'fsp_intersection'	=> { in  => ['fset','fset','fset'],
			     out => [],
			     bi  => fsp_intersection,
			     module => libfset,
			     native => true},

    'fsp_subsume'	=> { in  => ['fset','fset'],
			     out => [],
			     bi  => fsp_subsume,
			     module => libfset,
			     native => true},

    'fsp_disjoint'	=> { in  => ['fset','fset'],
			     out => [],
			     bi  => fsp_disjoint,
			     module => libfset,
			     native => true},

    'fsp_distinct'	=> { in  => ['fset','fset'],
			     out => [],
			     bi  => fsp_distinct,
			     module => libfset,
			     native => true},

    'fsp_monitorIn'	=> { in  => ['fset','value'],
			     out => [],
			     bi  => fsp_monitorIn,
			     module => libfset,
			     native => true},

    'fsp_min'		=> { in  => ['fset','int'],
			     out => [],
			     bi  => fsp_min,
			     module => libfset,
			     native => true},

    'fsp_max'		=> { in  => ['fset','int'],
			     out => [],
			     bi  => fsp_max,
			     module => libfset,
			     native => true},

    'fsp_convex'	=> { in  => ['fset'],
			     out => [],
			     bi  => fsp_convex,
			     module => libfset,
			     native => true},

    'fsp_diff'		=> { in  => ['fset','fset','fset'],
			     out => [],
			     bi  => fsp_diff,
			     module => libfset,
			     native => true},

    'fsp_includeR'	=> { in  => ['int','fset','int'],
			     out => [],
			     bi  => fsp_includeR,
			     module => libfset,
			     native => true},

    'fsp_bounds'	=> { in  => ['+fset','fset','int','int','int'],
			     out => [],
			     bi  => fsp_bounds,
			     module => libfset,
			     native => true},

    'fsp_boundsN'	=> { in  => ['+value','+value','+value',
				     '+value','+value'],
			     out => [],
			     bi  => fsp_boundsN,
			     module => libfset,
			     native => true},

    'fsp_disjointN'	=> { in  => ['+value'],
			     out => [],
			     bi  => fsp_disjointN,
			     module => libfset,
			     native => true},

    'fsp_unionN'	=> { in  => ['+value','fset'],
			     out => [],
			     bi  => fsp_unionN,
			     module => libfset,
			     native => true},

    'fsp_partition'	=> { in  => ['+value','fset'],
			     out => [],
			     bi  => fsp_partition,
			     module => libfset,
			     native => true},

    'fsp_partitionReified'=> { in  => ['+value','fset','+value'],
			     out => [],
			     bi  => fsp_partitionReified,
			     module => libfset,
			     native => true},

    'fsp_partitionProbing'=> { in  => ['+value','fset','+value'],
			       out => [],
			       bi  => fsp_partitionProbing,
			       module => libfset,
			       native => true},

    'fsp_partitionReified1'=> { in  => ['+value','fset','+value','int'],
				out => [],
				bi  => fsp_partitionReified1,
				module => libfset,
				native => true},


 );

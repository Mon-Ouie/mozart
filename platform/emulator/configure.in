dnl -*- sh -*-
dnl
dnl  Authors:
dnl    Michael Mehl (mehl@dfki.de)
dnl 
dnl  Contributors:
dnl    optional, Contributor's name (Contributor's email address)
dnl 
dnl  Copyright:
dnl    Michael Mehl (1997)
dnl 
dnl  Last change:
dnl    $Date$ by $Author$
dnl    $Revision$
dnl 
dnl  This file is part of Mozart, an implementation 
dnl  of Oz 3:
dnl     $MOZARTURL$
dnl 
dnl  See the file "LICENSE" or
dnl     $LICENSEURL$
dnl  for information on usage and redistribution 
dnl  of this file, and for a DISCLAIMER OF ALL 
dnl  WARRANTIES.
dnl

dnl Process this file with autoconf to produce a configure script.

dnl mm2: Known Problems and Bugs
dnl  Warnings pedwarn
dnl  Windows support
dnl  pmake support
dnl  ensure that all needed programs are really found

dnl *****************************************************************
dnl INITIALIZE
dnl *****************************************************************

dnl This will check that we are in the Oz directory and initiate
AC_INIT(oz.h)

AC_CANONICAL_HOST

AC_LANG_CPLUSPLUS

#AC_PREFIX_DEFAULT(${oz_default_prefix=/usr/local})
if test -n "${oz_default_prefix}" && test -d $oz_default_prefix
then
  ac_default_prefix=$oz_default_prefix
fi

dnl *****************************************************************
dnl topdir/oz version
dnl *****************************************************************

srcdira=`(cd $srcdir; pwd)`
AC_SUBST(srcdira)

if test "${TOPDIR+set}" != set
then
    TOPDIR="$srcdir/.."
fi
TOPDIRA=`(cd $TOPDIR; pwd)`
AC_SUBST(TOPDIR)
AC_SUBST(TOPDIRA)

dnl *****************************************************************
dnl windows cross compilation
dnl *****************************************************************

AC_MSG_CHECKING(for --enable-wincross)
AC_ARG_ENABLE(wincross,
  [--enable-wincross  Windows cross compilation (default=no)])
if test "${enable_wincross}" = yes; then
        AC_MSG_RESULT(yes (-DGNUWIN32 -DWINDOWS))
	CXX=$oz_wincross_CXX
	CC=$oz_wincross_CC
	LD=$oz_wincross_LD
	RANLIB=$oz_wincross_RANLIB
	LDFLAGS="$LDFLAGS $oz_wincross_LDFLAGS"
	platform="win32-i486"
	PROGRAMNAME="ozemulator.exe"
	AC_DEFINE(GNUWIN32)
	AC_DEFINE(WINDOWS)
else
        AC_MSG_RESULT(no)
fi

dnl *****************************************************************
dnl Checks for programs.
dnl *****************************************************************

PATH=$PATH:$TOPDIRA/bin:$TOPDIRA:$prefix/bin

AC_MSG_CHECKING(for --with-pgcc)
AC_ARG_WITH(pgcc,
    [--with-pgcc        use pgcc compiler (default: yes, if --enable-opt)])

	if test "${with_pgcc+set}" != set
	then
	    case $enable_opt in
		n*|d*)
		    AC_MSG_RESULT(no)
		    ;;
		*)
		    AC_MSG_RESULT(trying)
		    AC_CHECK_PROGS(PGXX, pg++)
		    if test -n "${PGXX}"
		    then
			CC=pgcc
			CXX=$PGXX
		    fi
		    ;;
	    esac
	else
	if test "${with_pgcc}" = yes; then
            AC_MSG_RESULT(yes)
	    AC_CHECK_PROGS(PGXX, pg++)
	    if test -n "${PGXX}"
	    then
		CC=pgcc
		CXX=$PGXX
	    else
		AC_MSG_WARN(Ingnoring --with-pgcc)
	    fi
	else
	    AC_MSG_RESULT(no)
	fi
	fi

AC_MSG_CHECKING(for --with-sunpro)
AC_ARG_WITH(sunpro,
    [--with-sunpro      use sunpro compiler (default: no)])
	if test "${with_sunpro}" = yes; then
            AC_MSG_RESULT(yes)
	    AC_CHECK_PROGS(SUNPRO, CC)
	    if test -n "${SUNPRO}"
	    then
		CC=cc
		CXX=$SUNPRO
		AC_DEFINE(SUNPRO)
		: ${enable_threaded=no}
	    else
		AC_MSG_WARN(Ingnoring --with-sunpro!)
	    fi
	else
	    AC_MSG_RESULT(no)
	fi

AC_PROG_CC
AC_PROG_CXX

AC_PROG_INSTALL
AC_PROG_LEX
AC_PROG_YACC
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AC_CHECK_PROGS(M4, gm4 m4, true)

# check if M4 understands option -E
if test -n "$M4"
then
    AC_MSG_CHECKING(if $M4 understands -E option)
    ac_res=`$M4 -E < /dev/null 2>&1`
    if test -n "$ac_res"
    then
	AC_MSG_RESULT(no)
    else
	AC_MSG_RESULT(yes)
	M4="$M4 -E"
    fi
fi

AC_CHECK_PROGS(RM, rm, true)
AC_CHECK_PROGS(SH, sh bash ksh, true)
AC_CHECK_PROGS(MV, mv, true)
AC_CHECK_PROGS(ECHO, echo, true)
AC_CHECK_PROGS(SED, gnused sed, true)
AC_CHECK_PROGS(AR, gar ar, true)

AC_PATH_PROG(PLATFORMSCRIPT, ozplatform)
AC_PATH_PROG(DYNLD, ozdynld, true)

if test -z "${PLATFORMSCRIPT}"
then
  AC_MSG_ERROR("required ozplatform script not found")
fi

M4_S=""
AC_SUBST(M4_S)

AC_PATH_PROG(DEPEND, makedepend, true)

dnl *****************************************************************
dnl platform
dnl *****************************************************************

: ${platform=`$PLATFORMSCRIPT`}
AC_SUBST(platform)

: ${PROGRAMNAME=oz.emulator.bin}
TARGETS="$PROGRAMNAME"
AC_SUBST(PROGRAMNAME)
AC_SUBST(TARGETS)

PLATFORM="`echo $platform|sed -e s/-/_/|tr a-z A-Z`"
AC_DEFINE_UNQUOTED($PLATFORM)
AC_SUBST(PLATFORM)

OS=`echo $PLATFORM|sed -e 's/.*_//'`
AC_DEFINE_UNQUOTED($OS)

ARCH=`echo $PLATFORM|sed -e 's/_.*//'`
AC_DEFINE_UNQUOTED($ARCH)

dnl *****************************************************************
dnl Compiler and Linker options
dnl *****************************************************************

if test "$ac_test_CFLAGS" != set
then
    CFLAGS=""
fi

AC_SUBST(CWARN)

if test "${GXX}" = yes; then
    O_OPT="$O_OPT -O6"
    G_OPT="$G_OPT -g3 -DINTERFACE"
    M4_S="-s"
    DEPEND="$CXX -MM"
    CWARN="\$(WARNINGS)"
    if test "${platform}" = linux-i486
    then
      if test -n "${PGXX}"
      then
	CFLAGS="$CFLAGS -fno-exceptions -fno-rtti -Wno-sign-compare"
	O_OPT="$O_OPT -mpentium -frisc"
      else
	O_OPT="$O_OPT -m486"
	O_OPT="$O_OPT -malign-loops=4 -malign-jumps=4 -malign-functions=4"
      fi
    fi
fi

if test -n "${SUNPRO}"
then
    O_OPT="-fast"
    DEPEND="$CXX -xM"
fi

: ${O_OPT="-O"}
: ${G_OPT="-g"}

case $platform in
    sunos*)
	;;
    linux*)
	LDFLAGS="$LDFLAGS -Wl,-export-dynamic"
	;;
    solaris*)
	;;
    irix*)
	;;
    osf1*)
	dnl dont change LDFLAGS, see machine.hh !!!
	LDFLAGS="$LDFLAGS -Wl,-D -Wl,0x30000000 -Wl,-T -Wl,0x20000000"
	;;
    hpux*)
	;;
esac

dnl *****************************************************************
dnl Checks for libraries.
dnl *****************************************************************

dnl Note: use $(CC) for linking, not $(CXX): 
dnl g++ creates references to libg++ 
LD=$CXX
if test "${GCC}" = yes
then
  LD="$CC"
fi
AC_SUBST(LD)


dnl mm2: don\'t know what libintl is needed for
dnl AC_CHECK_LIB(intl, main)

AC_CHECK_LIB(nsl, gethostbyaddr)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(m, fabs)
AC_CHECK_LIB(kernel32,main)
AC_CHECK_LIB(wsock32,main)

# special hack for static linking under linux
case $platform in
    linux*)
	AC_MSG_CHECKING(for --enable-lstatic)
	AC_ARG_ENABLE(lstatic,
	    [--enable-lstatic   linux static linking (default=yes)])
	if test "${enable_lstatic}" != no; then
		AC_MSG_RESULT(yes)
		LIBS="-ldl -Xlinker -Bstatic $LIBS"
	else
		AC_MSG_RESULT(no)
		AC_CHECK_LIB(dl, dlopen)
	fi
    ;;
    *)
	AC_CHECK_LIB(dl, dlopen)
    ;;
esac

dnl *****************************************************************
dnl Checks for header files.
dnl *****************************************************************

dnl AC_HEADER_DIRENT
dnl AC_HEADER_STDC
dnl AC_HEADER_SYS_WAIT
dnl AC_CHECK_HEADERS(fcntl.h limits.h malloc.h strings.h sys/time.h unistd.h)

dnl *****************************************************************
dnl Checks for typedefs, structures, and compiler characteristics.
dnl *****************************************************************

dnl const test not needed for C++!
dnl AC_C_CONST

dnl AC_C_INLINE
dnl AC_TYPE_MODE_T
dnl AC_TYPE_PID_T
dnl AC_TYPE_SIZE_T
dnl AC_HEADER_TIME
dnl AC_STRUCT_TM

dnl *****************************************************************
dnl Checks for library functions.
dnl *****************************************************************

dnl AC_FUNC_ALLOCA
dnl AC_FUNC_MEMCMP
dnl AC_TYPE_SIGNAL
dnl AC_FUNC_VPRINTF
dnl AC_CHECK_FUNCS(getcwd gethostname gettimeofday putenv select socket strdup strerror strstr strtod strtol strtoul uname)

dnl *****************************************************************
dnl MISC
dnl *****************************************************************

# AC_CHECK_SIZEOF(int)
# AC_C_BIGENDIAN

dnl *****************************************************************
dnl *** GMP
dnl *****************************************************************

AC_MSG_CHECKING(for --with-gmp)
AC_ARG_WITH(gmp,
    [--with-gmp=<dir>
        search gmp library and header in <dir> (default: NONE)])

if test -n "${with_gmp}"
then
    oz_gmp_lib_dir=$with_gmp
    oz_gmp_inc_dir=$with_gmp
fi

AC_ARG_WITH(gmp_lib,
    [--with-gmp-lib=<dir>
        search gmp library in <dir> (default: /usr/local/lib)])

if test -n "${with_gmp_lib}"
then
    oz_gmp_lib_dir=$with_gmp_lib
fi

AC_ARG_WITH(gmp_include,
    [--with-gmp-include=<dir>
        search gmp header in <dir> (default: /usr/local/include)])

if test -n "${with_gmp_include}"
then
    oz_gmp_inc_dir=$with_gmp_include
fi

: ${oz_gmp_lib_dir=/usr/local/lib}
: ${oz_gmp_inc_dir=/usr/local/include}

AC_MSG_RESULT(trying \"-L$oz_gmp_lib_dir -I$oz_gmp_inc_dir\")

CPPFLAGS="-I$oz_gmp_inc_dir $CPPFLAGS"
AC_CHECK_HEADER(gmp.h,,
	AC_MSG_ERROR(required GNU MP include file not found))

LDFLAGS="-L$oz_gmp_lib_dir $LDFLAGS"
AC_CHECK_LIB(gmp, mpz_init, ,
	AC_MSG_ERROR(required GNU MP lib not found))

dnl *****************************************************************
dnl *** Features
dnl *****************************************************************

AC_MSG_CHECKING(for --enable-ozma)
AC_ARG_ENABLE(ozma,
    [--enable-ozma      add assembler (default=no)])
	if test "${enable_ozma}" = yes; then
		AC_MSG_RESULT(yes (-DOZMA))
		AC_DEFINE(OZMA)
	else
		AC_MSG_RESULT(no)
	fi

AC_MSG_CHECKING(for --enable-opt)
AC_ARG_ENABLE(opt,
    [--enable-opt       optimize [y|n|d[ebug]|p[rofile]] (default=yes)])
case $enable_opt in
    n*)
        AC_MSG_RESULT(no)
	;;
    d*)
        AC_MSG_RESULT(debug (-DDEBUG_EMULATOR))
	AC_DEFINE(DEBUG_EMULATOR)
	CFLAGS="$CFLAGS $G_OPT"
    ;;
    *)
	CFLAGS="$CFLAGS $O_OPT"
dnl ********************************
dnl OPTIMIZED EMULATOR
dnl ********************************
	case $enable_opt in
	    p*)
		AC_MSG_RESULT(profile (-DPROFILE_EMULATOR))
		AC_DEFINE(PROFILE_EMULATOR)
		CFLAGS="$CFLAGS -pg"
		if test "${GXX}" = yes; then
		    CFLAGS="$CFLAGS -fno-inline -fno-default-inline"
		fi
		LDFLAGS="$LDFLAGS -pg"
		;;
	    *)
		AC_MSG_RESULT(yes)
		case $platform in
		    linux*)
			CFLAGS="$CFLAGS -fomit-frame-pointer"
		    ;;
		esac
		;;
	esac
	AC_MSG_CHECKING(for   --enable-threaded)
	AC_ARG_ENABLE(threaded,
	  [  --enable-threaded  threaded code emulator (default=yes)])
	if test "${enable_threaded}" != no; then
		AC_MSG_RESULT(yes (-DTHREADED))
		AC_DEFINE(THREADED)
	else
		AC_MSG_RESULT(no)
	fi
	
	AC_MSG_CHECKING(for   --enable-fastreg)
	AC_ARG_ENABLE(fastreg,
	  [  --enable-fastreg   fast register access (default=yes)])
	if test "${enable_fastreg}" != no; then
		AC_MSG_RESULT(yes (-DFASTREGACCESS))
		AC_DEFINE(FASTREGACCESS)
	else
		AC_MSG_RESULT(no)
	fi
	AC_MSG_CHECKING(for   --enable-regopt)
	AC_ARG_ENABLE(regopt,
	  [  --enable-regopt    register optimization (default=yes)])
	if test "${enable_regopt}" != no; then
		AC_MSG_RESULT(yes (-DREGOPT))
		AC_DEFINE(REGOPT)
	else
		AC_MSG_RESULT(no)
	fi

    ;;
esac

AC_MSG_CHECKING(for --enable-linkprop)
AC_ARG_ENABLE(linkprop,
  [--enable-linkprop  link propagators statically (default=yes)])
if test "${enable_linkprop}" != no; then
        AC_MSG_RESULT(yes (-UFOREIGNFDPROPS))
	FDTARGETS="libfd.a libsched.a"
	FSETTARGETS="libfset.a"
	LIBS="-L./FDLib -lfd -lsched -L./FSetLib -lfset $LIBS"
else
	FDTARGETS="fdlib.so schedlib.so"
	FSETTARGETS="fsetlib.so"
	INSTALL_PROP="install-prop"
        AC_MSG_RESULT(no (-DFOREIGNFDPROPS))
	AC_DEFINE(FOREIGNFDPROPS)
fi
AC_SUBST(FDTARGETS)
AC_SUBST(FSETTARGETS)
AC_SUBST(INSTALL_PROP)

AC_MSG_CHECKING(for --enable-peanuts)
AC_ARG_ENABLE(peanuts,
  [--enable-peanuts   use peanuts file (default=yes)])
if test "${enable_peanuts}" != no; then
        AC_MSG_RESULT(yes)
	PEANUTS="\$(PEANUTSFILE)"
else
        AC_MSG_RESULT(no)
	PEANUTS="\$(PEANUTS)"
fi
AC_SUBST(PEANUTS)


dnl *****************************************************************
dnl malloc
dnl *****************************************************************

AC_MSG_CHECKING(for --with-malloc)
AC_ARG_WITH(malloc,
    [--with-malloc=<obj>
        use malloc from object file <obj> (default: NONE)])
if test -n "$with_malloc"
then
    oz_malloc_obj=$with_malloc
fi

if test -n "$oz_malloc_obj" && test -r $oz_malloc_obj
then
    LIBS="$LIBS $oz_malloc_obj"
    AC_MSG_RESULT(yes (\"$oz_malloc_obj\"))
else
    AC_MSG_RESULT(no)
fi

dnl *****************************************************************
dnl tmphack
dnl *****************************************************************

AC_MSG_CHECKING(for --enable-tmphack)
AC_ARG_ENABLE(tmphack,
  [--enable-tmphack=<host>   link and compile in /tmp (default=no)])
if test -n "${enable_tmphack}" 
then
    oz_tmphack_host=$enable_tmphack
fi

if test -n "$oz_tmphack_host"
then
    AC_MSG_RESULT(yes (host is \"$oz_tmphack_host\"))
    oz_tmphack_target=".cc.o"
    oz_tmphack_programname="$PROGRAMNAME"
    PROGRAMNAME="$PROGRAMNAME.local"
else
    AC_MSG_RESULT(no)
    oz_tmphack_target=".cc.oo"
    oz_tmphack_programname="$PROGRAMNAME.tmp"
fi
AC_SUBST(oz_tmphack_target)
AC_SUBST(oz_tmphack_host)
AC_SUBST(oz_tmphack_programname)

dnl *****************************************************************
dnl FINALIZATION SUPPORT
dnl *****************************************************************

AC_MSG_CHECKING(for --enable-finalization)
AC_ARG_ENABLE(finalization,
  [--enable-finalization
                   provide support for finalization (default=yes)])
if test "${enable_finalization}" = no; then
        AC_MSG_RESULT(no)
	AC_DEFINE(NOFINALIZATION)
else
        AC_MSG_RESULT(yes)
fi

dnl *****************************************************************
dnl FOREIGN POINTER SUPPORT
dnl *****************************************************************

AC_MSG_CHECKING(for --enable-foreign-pointer)
AC_ARG_ENABLE(foreign-pointer,
  [--enable-foreign-pointer,
                   provide support for foreign pointers (default=yes)])
if test "${enable_foreign_pointer}" = no; then
        AC_MSG_RESULT(no)
	AC_DEFINE(NOFOREIGN_POINTER)
else
        AC_MSG_RESULT(yes)
fi

dnl *****************************************************************
dnl FINALIZE
dnl *****************************************************************

AC_CONFIG_HEADER(conf.h)

AC_OUTPUT(Makefile.vars Makefile Makefile.rules FDLib/Makefile FSetLib/Makefile)

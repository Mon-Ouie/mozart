/*
 *  Authors:
 *    Tobias Mueller (tmueller@ps.uni-sb.de)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     $MOZARTURL$
 * 
 *  See the file "LICENSE" or
 *     $LICENSEURL$
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */

#ifndef __CTGENVAR_ICC__
#define __CTGENVAR_ICC__

#if defined(INTERFACE) && !defined(OUTLINE)
#pragma interface
#endif

inline
GenCtVariable * tagged2GenCtVar(OZ_Term t)
{
  GCDEBUG(t);
  return (GenCtVariable *) tagged2CVar(t);
}

inline
Bool isGenCtVar(TaggedRef term, TypeOfTerm tag)
{
  GCDEBUG(term);
  Assert(tag == tagTypeOf(term));
  return isCVar(tag) && (tagged2CVar(term)->getType() == CtVariable);
}


inline
OZ_GenConstraint * unpatchReifiedCt(OZ_Term t) 
{
  Assert(!isUVar(t) && oz_isVariable(t) && !oz_isRef(t));
  GenCtVariable * ctv = ((GenCtVariable *) tagValueOf(t));;
  
  ctv->unpatchReified();
  return ctv->getReifiedPatch();
}

inline
void addSuspCtVar(OZ_Term v, Suspension susp, OZ_GenWakeUpDescriptor w)
{
  GenCtVariable * ctv = tagged2GenCtVar(v);

  /*
  switch (list_index) {
  case fs_prop_val:
    AddSuspToList(fsv->fsSuspList[fs_prop_val], susp, fsv->home);
    break;
  case fs_prop_bounds:
    AddSuspToList(fsv->fsSuspList[fs_prop_glb], susp, fsv->home);
    AddSuspToList(fsv->fsSuspList[fs_prop_lub], susp, fsv->home);
    break;
  case fs_prop_glb:
    AddSuspToList(fsv->fsSuspList[fs_prop_glb], susp, fsv->home);
    break;
  case fs_prop_lub:
    AddSuspToList(fsv->fsSuspList[fs_prop_lub], susp, fsv->home);
    break;
  case fs_prop_any:
    AddSuspToList(fsv->suspList, susp, fsv->home);
    break;
  default:
    error("list index out of range.");
    break;
  }
  */
}

#endif /* __CTGENVAR_ICC__ */

// eof
//-----------------------------------------------------------------------------

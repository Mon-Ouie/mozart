$cmode='dyn';

%builtins_all =
(
    'init'              => { in  => [],
                             out => ['+atom'],
                             BI  => fsp_init,
                             module => libfset,
                             native => true},

    'isIn'              => { in  => ['int','fset','bool'],
                             out => [],
                             bi  => fsp_isIn,
                             module => libfset,
                             native => true},

    'equalR'    => { in  => ['fset','fset','bool'],
                             out => [],
                             bi  => fsp_equalR,
                             module => libfset,
                             native => true},

    'isInR'             => { in  => ['int','fset','int'],
                             out => [],
                             bi  => fsp_isInR,
                             module => libfset,
                             native => true},

    'include'   => { in  => ['int','fset'],
                             out => [],
                             bi  => fsp_include,
                             module => libfset,
                             native => true},

    'exclude'   => { in  => ['int','fset'],
                             out => [],
                             bi  => fsp_exclude,
                             module => libfset,
                             native => true},

    'match'             => { in  => ['fset','+value'],
                             out => [],
                             bi  => fsp_match,
                             module => libfset,
                             native => true},

    'seq'               => { in  => ['+value'],
                             out => [],
                             bi  => fsp_seq,
                             module => libfset,
                             native => true},

    'minN'              => { in  => ['fset','+value'],
                             out => [],
                             bi  => fsp_minN,
                             module => libfset,
                             native => true},

    'maxN'              => { in  => ['fset','+value'],
                             out => [],
                             bi  => fsp_maxN,
                             module => libfset,
                             native => true},

    'card'              => { in  => ['fset','int'],
                             out => [],
                             bi  => fsp_card,
                             module => libfset,
                             native => true},

    'union'             => { in  => ['fset','fset','fset'],
                             out => [],
                             bi  => fsp_union,
                             module => libfset,
                             native => true},

    'intersection'      => { in  => ['fset','fset','fset'],
                             out => [],
                             bi  => fsp_intersection,
                             module => libfset,
                             native => true},

    'subsume'   => { in  => ['fset','fset'],
                             out => [],
                             bi  => fsp_subsume,
                             module => libfset,
                             native => true},

    'disjoint'  => { in  => ['fset','fset'],
                             out => [],
                             bi  => fsp_disjoint,
                             module => libfset,
                             native => true},

    'distinct'  => { in  => ['fset','fset'],
                             out => [],
                             bi  => fsp_distinct,
                             module => libfset,
                             native => true},

    'monitorIn' => { in  => ['fset','value'],
                             out => [],
                             bi  => fsp_monitorIn,
                             module => libfset,
                             native => true},

    'min'               => { in  => ['fset','int'],
                             out => [],
                             bi  => fsp_min,
                             module => libfset,
                             native => true},

    'max'               => { in  => ['fset','int'],
                             out => [],
                             bi  => fsp_max,
                             module => libfset,
                             native => true},

    'convex'    => { in  => ['fset'],
                             out => [],
                             bi  => fsp_convex,
                             module => libfset,
                             native => true},

    'diff'              => { in  => ['fset','fset','fset'],
                             out => [],
                             bi  => fsp_diff,
                             module => libfset,
                             native => true},

    'includeR'  => { in  => ['int','fset','int'],
                             out => [],
                             bi  => fsp_includeR,
                             module => libfset,
                             native => true},

    'bounds'    => { in  => ['+fset','fset','int','int','int'],
                             out => [],
                             bi  => fsp_bounds,
                             module => libfset,
                             native => true},

    'boundsN'   => { in  => ['+value','+value','+value',
                                     '+value','+value'],
                             out => [],
                             bi  => fsp_boundsN,
                             module => libfset,
                             native => true},

    'disjointN' => { in  => ['+value'],
                             out => [],
                             bi  => fsp_disjointN,
                             module => libfset,
                             native => true},

    'unionN'    => { in  => ['+value','fset'],
                             out => [],
                             bi  => fsp_unionN,
                             module => libfset,
                             native => true},

    'partition' => { in  => ['+value','fset'],
                             out => [],
                             bi  => fsp_partition,
                             module => libfset,
                             native => true},

    'partitionReified'=> { in  => ['+value','fset','+value'],
                             out => [],
                             bi  => fsp_partitionReified,
                             module => libfset,
                             native => true},


 );

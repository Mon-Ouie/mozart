/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: popow, mehl
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __AM_ICC
#define __AM_ICC

#if !defined(OUTLINE) && defined(INTERFACE)
#pragma interface
#endif

// optimize: inline ....

inline
Bool AM::isToplevel() {
  return (currentBoard == rootBoard);
}


inline
void AM::rebind(TaggedRef *refPtr, TaggedRef newRef)
/* (re)bind Ref *ref to Term *ptr;                     */
/* We need this procedure for the rational unification */
/* algorithm;                                          */
{
  rebindTrail.pushCouple(refPtr, *refPtr);   /* always;   */
  doBind(refPtr,newRef);
}


inline
void AM::bindToNonvar(TaggedRef *varPtr, TaggedRef var,
                      TaggedRef a, Bool prop)
{
  // most probable case first: local UVar
  // if (isUVar(var) && currentBoard == tagged2VarHome(var)) {
  // more efficient:
  if (var == currentUVarPrototype && prop) {
    doBind(varPtr,a);
  } else {
    genericBind(varPtr,var,NULL,a,prop);
  }
  LOCAL_PROPAGATION(Assert(localPropStore.isEmpty() ||
                           localPropStore.isInLocalPropagation()););

}


/* specially optimized unify: test two most probable cases first:
 *
 *     1. bind a variable
 *     2. test two non-variables
 *     3. but don't forget to check identical variables
 */

inline
Bool AM::fastUnify(TaggedRef A, TaggedRef B, Bool prop)
{
  if (!prop) goto bomb;

  {
    TaggedRef proto = currentUVarPrototype;
    TaggedRef term1 = A;
    TaggedRef term2 = B;

    DEREF(term1,term1Ptr,_1);

    if (proto == term1) {
      DEREF(term2,_2,_3);
      if (!isAnyVar(term2)) {
        doBind(term1Ptr,term2);
        goto exit;
      }
    }
    DEREF(term2,term2Ptr,_2);
    if (proto == term2 && !isAnyVar(term1)) {
      doBind(term2Ptr,term1);
      goto exit;
    }
    if (term1==term2 && !isAnyVar(term1)) {
      goto exit;
    }
  }
 bomb:
  return unify(A,B,prop);

 exit:
  return OK;
}

inline
void AM::deinstallCurrent()
{
  reduceTrailOnSuspend();
  currentBoard->unsetInstalled();
  setCurrent(currentBoard->getParentFast());
}

inline
void AM::deinstallPath(Board *top)
{
  Assert(!top->isCommitted() && !top->isFailed());

  while (currentBoard != top) {
    deinstallCurrent();
    Assert(currentBoard != rootBoard || top == rootBoard);
  }
}

inline
Bool AM::installScript(Script &script)
{
  Bool ret = OK;
  for (int index = 0; index < script.getSize(); index++) {
    if (!unify(script[index].getLeft(),script[index].getRight())) {
      ret = NO;
      if (!isToplevel()) {
        break;
      }
    }
  }
#ifndef DEBUG_CHECK
  script.dealloc();
#else
  if (ret == OK)
    script.dealloc ();
#endif
  return ret;
}

inline
Bool AM::entailment ()
{
  return (!currentBoard->hasSuspension()
          // First test: no subtrees;
          && trail.isEmptyChunk()
          // second test: is this node stable?
          );
}

inline
Bool AM::isLocalUVar(TaggedRef var,TaggedRef *varPtr)
{
  // variables are usually bound
  // in the node where they are created
  if (var == currentUVarPrototype) return OK;
  return isLocalUVarOutline(var,varPtr);
}

inline
Bool AM::isLocalUVar(TaggedRef var)
{
  // variables are usually bound
  // in the node where they are created
  if (var == currentUVarPrototype) return OK;
  return tagged2VarHome(var)->getBoardFast()==currentBoard;
}


inline
Bool AM::isLocalSVar(SVariable *var) {
  Board *home = var->getHome1();

  if (home == currentBoard) return OK;
  return isLocalSVarOutline(var);
}

inline
Bool AM::isLocalSVar(TaggedRef var)
{
  return isLocalSVar(tagged2SVar(var));
}

inline
Bool AM::isLocalCVar(TaggedRef var) {
  SVariable *svar=taggedCVar2SVar(var);
  Board *home = svar->getHome1();

  if (home == currentBoard) return OK;
  return isLocalSVarOutline(svar);
}

inline
Bool AM::isLocalVariable(TaggedRef var,TaggedRef *varPtr)
{
  CHECK_ISVAR(var);

  if (isUVar(var))
    return isLocalUVar(var,varPtr);
  if (isSVar(var))
    return isLocalSVar(var);

  return isLocalCVar(var);
}

inline
void AM::checkSuspensionList(TaggedRef taggedvar, PropCaller calledBy)
{
  SVariable * var = tagged2SuspVar(taggedvar);
  var->setSuspList(checkSuspensionList(var, var->getSuspList(),
                                       calledBy));
}

inline
Bool AM::isEmptyTrailChunk ()
{
  return (trail.isEmptyChunk ());
}

inline
void AM::pushCall(TaggedRef def, int arity, RefsArray args)
{
  currentThread->pushCall(def,args,arity);
}

inline
void AM::pushTaskInline(ProgramCounter pc,RefsArray y,RefsArray g,RefsArray x,int i)
{
  if (i>0) {
    x = copyRefsArray(x,i);
  }
  cachedStack->pushCont(pc,y,g,x,i);
}

inline
void AM::pushCFun(OZ_CFun f, RefsArray x, int i)
{
  currentThread->pushCFunCont(f, x, i, OK);
}

inline
void AM::pushLocal()
{
  currentThread->pushLocal();
}

/* ------------------------------------------------------------------------
 * Threads
 * ------------------------------------------------------------------------ */

// unset the ThreadSwitch flag and reset the counter
inline
void AM::restartThread()
{
  unsetSFlag(ThreadSwitch);
  threadSwitchCounter=osMsToClockTick(ozconf.timeSlice);
}

inline
void AM::addSuspendVarList(TaggedRef * t)
{
  Assert(isAnyVar(*t));

  if (suspendVarList==makeTaggedNULL()) {
    suspendVarList=makeTaggedRef(t);
  } else {
    suspendVarList=cons(makeTaggedRef(t),suspendVarList);
  }
}

/*
 * MISC
 */

inline
Board *Literal::getBoardFast()
{
  return home->getBoardFast();
}

inline
Board *Abstraction::getBoardFast()
{
  return home->getBoardFast();
}


inline
Board *Object::getBoardFast()
{
  return isDeep() ? ((DeepObject*)this)->home->getBoardFast() : am.rootBoard;
}

inline
Board *SChunk::getBoardFast()
{
  return home->getBoardFast();
}

inline
Board *Cell::getBoardFast() {
  return home->getBoardFast();
}

inline
Board *Space::getBoardFast() {
  return home->getBoardFast();
}

#endif  // __AM_ICC

/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: popow, mehl
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __AM_ICC
#define __AM_ICC

#if !defined(OUTLINE) && defined(__GNUC__)
#pragma interface
#endif

#include "thread.hh"
#include "unify.hh"
#include "genvar.hh"
#include "verbose.hh"

// optimize: inline ....

inline
Bool AM::isToplevel() { return (currentBoard == rootBoard); }

inline
void AM::rebind(TaggedRef *refPtr, TaggedRef newRef)
/* (re)bind Ref *ref to Term *ptr;                     */
/* We need this procedure for the rational unification */
/* algorithm;                                          */
{
  rebindTrail.pushCouple(refPtr, *refPtr);   /* always;   */
  doBind(refPtr,newRef);
}

/* specially optimized unify: test two most probable cases first:
 *
 *     1. bind a variable
 *     2. test two non-variables
 *     3. but don't forget to check identical variables
 */

inline
Bool AM::fastUnify(TaggedRef A, TaggedRef B, Bool prop)
{
  if (prop == NO) goto bomb;

  {
    TaggedRef proto = currentUVarPrototype;
    TaggedRef term1 = A;
    TaggedRef term2 = B;

    DEREF(term1,term1Ptr,_1);

    if (proto == term1) {
      DEREF(term2,_2,_3);
      if (!isAnyVar(term2)) {
        doBind(term1Ptr,term2);
        goto exit;
      }
    }
    DEREF(term2,term2Ptr,_2);
    if (proto == term2 && !isAnyVar(term1)) {
      doBind(term2Ptr,term1);
      goto exit;
    }
  }
 bomb:
  return unify(A,B,prop);

 exit:
  return OK;
}

inline
void AM::bindToNonvar(TaggedRef *varPtr, TaggedRef var, TaggedRef a, Bool prop)
{
  // most probable case first: local UVar
  // if (isUVar(var) && currentBoard == tagged2VarHome(var)) {
  // more efficient:
  if (var == currentUVarPrototype && prop) {
    doBind(varPtr,a);
  } else {
    genericBind(varPtr,var,NULL,a,prop);
  }
  LOCAL_PROPAGATION(Assert(localPropStore.isEmpty() ||
                           localPropStore.isInLocalPropagation()));

}

inline
void AM::deinstallPath(Board *top)
{
  DebugCheck(top->isCommitted(),
             error("AM::deinstallPath: top already commited");
             return;);

  while (currentBoard != top) {
    deinstallCurrent();
    DebugCheck(currentBoard == rootBoard
               && top != rootBoard,
               error("AM::deinstallPath: root node reached"));
  }
}

inline
void AM::deinstallCurrent()
{
  reduceTrailOnSuspend();
  currentBoard->unsetInstalled();
  setCurrent(currentBoard->getParentBoard()->getBoardDeref());
}

inline
Bool AM::installScript(Script &script)
{
  Bool ret = OK;
  for (int index = 0; index < script.getSize(); index++) {
    if (!unify(script[index].getLeft(),script[index].getRight())) {
      ret = NO;
      if (!isToplevel()) {
        break;
      }
    }
  }
#ifndef DEBUG_CHECK
  script.dealloc();
#else
  if (ret == OK)
    script.dealloc ();
#endif
  return ret;
}

inline
Bool AM::entailment ()
{
  return (!currentBoard->hasSuspension()
          // First test: no subtrees;
          && trail.isEmptyChunk()
          // second test: is this node stable?
          ? OK : NO);
}

inline
void AM::bind(TaggedRef *varPtr, TaggedRef var, TaggedRef *termPtr, Bool prop)
{
  genericBind(varPtr,var,termPtr, *termPtr, prop);
}

/*
 *   Procedure what checks whether one node is in subtree of another;
 *
 */
inline
Bool AM::isInScope (Board *above, Board* node) {
  while (node != rootBoard) {
    if (node == above)
      return (OK);
    node = node->getParentBoard()->getBoardDeref();
  }
  return (NO);
}


inline
Bool AM::isLocalUVar(TaggedRef var)
{
  return (var == currentUVarPrototype ||
          // variables are usually bound
          // in the node where they are created
          tagged2VarHome(var)->getBoardDeref() == currentBoard )
    ? OK : NO;
}

inline
Bool AM::isLocalSVar(TaggedRef var) {
  Board *home = tagged2SVar(var)->getHome1();

  return (home == currentBoard ||
          home->getBoardDeref() == currentBoard )
    ? OK : NO;
}

inline
Bool AM::isLocalCVar(TaggedRef var) {
  Board *home = tagged2CVar(var)->getHome1();

  return (home == currentBoard ||
          home->getBoardDeref() == currentBoard )
    ? OK : NO;
}

inline
Bool AM::isLocalVariable(TaggedRef var)
{
  CHECK_ISVAR(var);

  if (isUVar(var))
    return isLocalUVar(var);
  if (isSVar(var))
    return isLocalSVar(var);

  return isLocalCVar(var);
}

inline
void updateExtSuspension(Board *varHome, Suspension *susp)
{
  if (am.currentSolveBoard != (Board *) NULL) {
    am.setExtSuspension (varHome, susp);
  }
}

inline
void AM::checkSuspensionList(TaggedRef taggedvar, TaggedRef term,
                             PropCaller calledBy)
{
  Assert(isRef(term) || !isAnyVar(term));

  SVariable * var = tagged2SuspVar(taggedvar);
  var->setSuspList(checkSuspensionList(var, taggedvar, var->getSuspList(),
                                       term, calledBy));
}

inline
Bool AM::isEmptyTrailChunk ()
{
  return (trail.isEmptyChunk ());
}

void AM::pushCall(Board *b, Chunk *def, int arity, RefsArray args)
{
  currentThread->pushCall(b,def,args,arity);
}
void AM::pushTask(Board *n,ProgramCounter pc,
                  RefsArray y,RefsArray g,RefsArray x=0,int i=0)
{
  currentThread->pushCont(n,pc,y,g,x,i);
}
void AM::pushCFun(Board *n, OZ_CFun f, RefsArray x=0, int i=0)
{
  currentThread->pushCFunCont(n, f, (Suspension *) NULL, x, i);
}

void AM::pushNervous(Board *n)
{
  currentThread->pushNervous(n);
}

/* ------------------------------------------------------------------------
 * Threads
 * ------------------------------------------------------------------------ */

// unset the ThreadSwitch flag and reset the processCounter
inline
void AM::restartThread()
{
  unsetSFlag(ThreadSwitch);
  ProcessCounter=msToClockTick(conf.timeSlice);
}

inline
Thread *AM::newThread(int p,Board *h)
{
#ifdef NEWCOUNTER
  h->incSuspCount();
#endif
  Thread *th = threadsFreeList;
  if (th) {
    threadsFreeList = th->next;
  } else {
    th=new Thread(conf.taskStackSize);
  }
  th->init(p,h);
  return th;
}

// free the memory of the thread (there are no references to it anymore)
inline
void AM::disposeThread(Thread *th)
{
  Verbose((VERB_THREAD,"Thread::dispose = 0x%x\n",this));
  if (th == rootThread) {
    rootThread->init(conf.defaultPriority,rootBoard);
    checkToplevel();
  } else {
    /* dispose thread: */
    th->next=threadsFreeList;
    threadsFreeList = th;
  }
}

// check if the thread is scheduled
inline
Bool AM::isScheduled(Thread *th)
{
  return th->prev!=NULL || th->next!=NULL || threadsHead==th;
}

// add a thread to the thread queue
inline
void AM::scheduleThread(Thread *th)
{
  Assert(!isScheduled(th));

  if (th != currentThread
      && currentThread
      && th->getPriority() > currentThread->getPriority()) {
    insertFromHead(th);
    setSFlag(ThreadSwitch);
  } else {
    insertFromTail(th); // or insertFromHead();
  }
}

inline
Bool AM::threadQueueIsEmpty()
{
  return threadsHead ? NO : OK;
}

/* only usage in emulate */
inline
Thread *AM::getFirstThread()
{
  Assert(threadsHead!=0);
  Thread *tt = threadsHead;
  Verbose((VERB_THREAD,"Thread::GetFirst = 0x%x\n",tt));
  threadsHead=tt->next;
  if (threadsHead) {
    Assert(threadsHead->prev==tt);
    threadsHead->prev= (Thread *) NULL;
  } else {
    Assert(threadsTail==tt);
    threadsTail=threadsHead;
  }
  tt->prev=tt->next=(Thread *) NULL;

#ifdef DEBUG_CHECK
  Thread *tmp = threadsHead;
  while (tmp != (Thread *) NULL) {
    if (tmp->getPriority() > tt->getPriority())
      error ("Thread::GetFirst (): wrong task is got");
    tmp = tmp->next;
  }
#endif
  return tt;
}

// unlink the thread from the thread queue
inline
Thread *AM::unlinkThread(Thread *th)
{
  if (th->prev) {
    Assert(th->prev->next==th);
    th->prev->next=th->next;
  } else {
    Assert(threadsHead==th);
    threadsHead=th->next;
  }
  if (th->next) {
    Assert(th->next->prev==th);
    th->next->prev=th->prev;
  } else {
    Assert(threadsTail==th);
    threadsTail=th->prev;
  }
  th->prev=th->next=(Thread *) NULL;
  return th;
}

// insert into priority queue searching from head
//  before the first one with a lower priority
inline
void AM::insertFromHead(Thread *th)
{
  Thread *here;
  for (here = threadsHead; here; here=here->prev) {
    if (here->getPriority() < th->getPriority()) {
      break;
    }
  }
  insertBefore(th,here);
}

// insert 'this' after 'here', if here = 0 then at head
inline
void AM::insertAfter(Thread *th,Thread *here)
{
  th->prev=here;
  if (here) {
    th->next=here->next;
    here->next=th;
    if (th->next) {
      Assert(th->next->prev==here);
      th->next->prev=th;
    } else {
      Assert(threadsTail==here);
      threadsTail=th;
    }
  } else {
    th->next=threadsHead;
    threadsHead=th;
    if (th->next) {
      Assert(th->next->prev==0);
      th->next->prev=th;
    } else {
      Assert(threadsTail==0);
      threadsTail=th;
    }
  }
}

// insert into priority queue searching from tail
//  after the last one with the same or a higher priority
inline
void AM::insertFromTail(Thread *th)
{
  Thread *here;
  for (here = threadsTail; here; here=here->prev) {
    if (here->getPriority() >= th->getPriority()) {
      break;
    }
  }
  insertAfter(th,here);
}

// insert 'this' before 'here', if here = 0 then at tail
inline
void AM::insertBefore(Thread *th, Thread *here)
{
  th->next=here;
  if (here) {
    th->prev=here->prev;
    here->prev=th;
    if (th->prev) {
      Assert(th->prev->next==here);
      th->prev->next=th;
    } else {
      Assert(threadsHead==here);
      threadsHead=th;
    }
  } else {
    th->prev=threadsTail;
    threadsTail=th;
    if (th->prev) {
      Assert(th->prev->next==0);
      th->prev->next=th;
    } else {
      Assert(threadsHead==0);
      threadsHead=th;
    }
  }
}

#endif  // __AM_ICC

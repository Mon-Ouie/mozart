/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: popow, mehl
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __AM_ICC
#define __AM_ICC


#include "thread.hh"

/* specially optimized unify: test two most probable cases first:
 *
 *     1. bind a variable
 *     2. test two non-variables
 *     3. but don't forget to check identical variables
 */

inline Bool AM::fastUnify(TaggedRef A, TaggedRef B)
{

  TaggedRef term1 = A;
  TaggedRef term2 = B;

  DEREF(term1,term1Ptr,_1);
  DEREF(term2,term2Ptr,_2);

  if (term1Ptr == term2Ptr && term1Ptr != NULL)
    return OK;

  TaggedRef proto = currentUVarPrototype;
  if (proto == term1) {
    doBind(term1Ptr,B);
    return OK;
  }


  if (proto == term2) {
    doBind(term2Ptr,A);
    return OK;
  }

  return unify(A,B);
}

inline void AM::bindToNonvar(TaggedRef *varPtr, TaggedRef var, TaggedRef a)
{
  // most probable case first: local UVar
  // if (isUVar(var) && AM::currentBoard == tagged2VarHome(var)) {
  // more efficient:
  if (var == currentUVarPrototype) {
    doBind(varPtr,a);
  } else {
    genericBind(varPtr,var,NULL,a);
  }
}

inline void AM::pushTask(Board *n,ProgramCounter pc,
                         RefsArray y,RefsArray g,
                         RefsArray x,int i)
{
  n->addSuspension();
  if (!currentTaskStack) {
    currentTaskStack = am.currentThread->makeTaskStack();
  }
  currentTaskStack->pushCont(n,pc,y,g,x,i);
}

inline Bool AM::entailment ()
{
  return (!AM::currentBoard->hasSuspension()
          // First test: no subtrees;
          && trail.isEmptyChunk()
          // second test: is this node stable?
          ? OK : NO);
}

// unify two non derefed tagged refs
inline Bool AM::unify(TaggedRef ref1, TaggedRef ref2)
{
  CHECK_NONVAR(ref1);
  CHECK_NONVAR(ref2);

  return unify(&ref1, &ref2);
}

inline Bool AM::unify(TaggedRef *ref1, TaggedRef ref2)
{
  CHECK_NONVAR(ref2);

  return unify(ref1, &ref2);
}

inline void AM::bind(TaggedRef *varPtr, TaggedRef var, TaggedRef *termPtr)
{
  genericBind(varPtr,var,termPtr, *termPtr);
}

#endif

/*
 *  Authors:
 *    Author's name (Author's email address)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     $MOZARTURL$
 * 
 *  See the file "LICENSE" or
 *     $LICENSEURL$
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */
/*
  Hydra Project, DFKI Saarbruecken,
  Stuhlsatzenhausweg 3, D-66123 Saarbruecken, Phone (+49) 681 302-5312
  Author: tmueller
  Last modified: $Date$ from $Author$
  Version: $Revision$
  State: $State$

  ------------------------------------------------------------------------
*/

#ifndef __metavar_icc__
#define __metavar_icc__

#if defined(INTERFACE) && !defined(OUTLINE) 
#pragma interface
#endif



inline
Bool isHeapChunk(TaggedRef term)
{
  term = deref(term);
  return isConst(term)
    ? tagged2Const(term)->getType() == Co_HeapChunk
    : FALSE;
}


inline
Bool isGenMetaVar(TaggedRef term)
{
  GCDEBUG(term);
  return isCVar(term) && (tagged2CVar(term)->getType() == MetaVariable);
}


inline
Bool isGenMetaVar(TaggedRef term, TypeOfTerm t)
{
  GCDEBUG(term);
  Assert(t == tagTypeOf(term));
  return isCVar(t) && (tagged2CVar(term)->getType() == MetaVariable);
}

#endif

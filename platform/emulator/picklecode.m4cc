/* -*- C++ -*-
 *  Authors:
 *    Ralf Scheidhauer <Ralf.Scheidhauer@ps.uni-sb.de>
 *    Konstantin Popov <kost@sics.se>
 *
 *  Contributors:
 *    Per Brand (perbrand@sics.se)
 *    Michael Mehl (mehl@dfki.de)
 *    Denys Duchier (duchier@ps.uni-sb.de)
 *
 *  Copyright:
 *    Organization or Person (Year(s))
 *
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 *
 *  This file is part of Mozart, an implementation
 *  of Oz 3:
 *     http://mozart.ps.uni-sb.de
 *
 *  See the file "LICENSE" or
 *     http://mozart.ps.uni-sb.de/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */

changequote([[,]])

define(readArg,$1)
define(writeArg,$1)
define(instruction,
        case TOUPPER($1):
           opAction($2)
           opAction($3)
           opAction($4)
           opAction($5)
           opAction($6)
           opAction($7)
           opAction($8)
           opAction($9)
          break;)

define(opAction,
[[ifelse($1,Number,gt->traverseOzValue(getTaggedArg(PC++));ozValuesCnt--;,
         $1,Literal,gt->traverseOzValue(getTaggedArg(PC++));ozValuesCnt--;,
         $1,Feature,gt->traverseOzValue(getTaggedArg(PC++));ozValuesCnt--;,
         $1,Constant,gt->traverseOzValue(getTaggedArg(PC++));ozValuesCnt--;,
         $1,Builtinname,_m_bi = (Builtin*)getAdressArg(PC++); marshalBuiltin(gt,_m_bi);ozValuesCnt--;,
         $1,XRegisterIndex,marshalNumber(bs,XRegToInt(getXRegArg(PC++)));,
         $1,YRegisterIndex,marshalNumber(bs,YRegToInt(getYRegArg(PC++)));,
         $1,GRegisterIndex,marshalNumber(bs,GRegToInt(getGRegArg(PC++)));,
         $1,Arity,marshalNumber(bs,(unsigned int)getPosIntArg(PC++));,
         $1,Label,marshalLabel(bs,instrstart-start,getLabelArg(PC++));,
         $1,Count,marshalNumber(bs,(unsigned int)getPosIntArg(PC++));,
         $1,ArityAndIsTail,marshalNumber(bs,(unsigned int)getPosIntArg(PC++));,
         $1,Dummy,marshalNumber(bs,(unsigned int)getPosIntArg(PC++));,
         $1,ProcedureRef,marshalProcedureRef(gt,(AbstractionEntry*)getAdressArg(PC++),bs);,
         $1,PredId,marshalPredId(gt,(PrTabEntry*)getAdressArg(PC++),bs);ozValuesCnt--;,
         $1,HashTableRef,marshalHashTableRef(gt,instrstart-start,(IHashTable *)getAdressArg(PC++),bs);ozValuesCnt--;,
         $1,RecordArity,marshalRecordArity(gt,(SRecordArity) getAdressArg(PC++),bs);ozValuesCnt--;,
         $1,CallMethodInfo,marshalCallMethodInfo(gt,(CallMethodInfo*)getAdressArg(PC++),bs);ozValuesCnt--;,
         $1,GRegRef,marshalGRegRef((AssRegArray*)getAdressArg(PC++),bs);,
         $1,Location,marshalLocation(_m_bi,(OZ_Location*)getAdressArg(PC++),bs);,
         $1,Cache,PC += CacheSize;)]])


//
//
Bool pickleCode(GenTraverser *gt, GTAbstractEntity *arg)
{
  MarshalerCodeAreaDescriptor *desc = (MarshalerCodeAreaDescriptor *) arg;
  // ('bs' could be also saved in the argument;)
  PickleMarshalerBuffer *bs = (PickleMarshalerBuffer *) gt->getOpaque();
  Assert(bs);
  ProgramCounter start = desc->getStart(), end = desc->getEnd();
  ProgramCounter PC = desc->getCurrent();
  // when 'ozValuesCnt' hits zero, then the code area must be broken
  // in two pieces (before a next instructioN):
  int ozValuesCnt = ozValuesBAPickles;
  Builtin *_m_bi;    // Needed for passing information from marshalling
                     // builtins to locations

  //
  if (PC == start) marshalCodeStart(bs);
  marshalDIF(bs, DIF_CODEAREA);

  //
  while (ozValuesCnt > 0 && PC < end) {
    ProgramCounter instrstart = PC;
    Opcode op = CodeArea::getOpcode(PC++);

    //
    if (op == CALLPROCEDUREREF)
      op = (getNumberArg(PC+1) & 1)==0 ? FASTCALL : FASTTAILCALL;

    //
    // (RS?) fastcalls need special handling
    // kost@ : ... that is, one cannot put internal pointers into the
    // stream; thus, these instructioNs get replaced by some other
    // instructioNs.
    if (op == FASTCALL || op == FASTTAILCALL) {
      AbstractionEntry *entry = (AbstractionEntry *) getAdressArg(PC);
      if (!entry->isCopyable()) {
        marshalOpCode(bs, instrstart-start, CALLCONSTANT);
        Abstraction *abstr = entry->getAbstr();

        //
        gt->traverseOzValue(makeTaggedConst(abstr));
        ozValuesCnt--;

        //
        Bool istailcall = (op==FASTTAILCALL);
        marshalNumber(bs, (abstr->getArity()<<1)|istailcall);
        PC++; // skip (AbstractionEntry *)
        PC++; // skip unused second arg
        continue;
      }
    }

    //
    marshalOpCode(bs, instrstart-start, op);
    switch(op) {

      changequote(`,') dnl '
      include(EMUDIR/instrDefs.m4)
      changequote([[,]])

    // don't indent the next line:
    default: Assert(0); break;
    }
  }

  // (don't indent the next line:)
  if (PC >= end && ozValuesCnt > 0) {
    marshalOpCode(bs, PC-start, ENDOFFILE);
    marshalCodeEnd(bs);
    //
    delete desc;
    return (TRUE);
  } else {
    desc->setCurrent(PC);
    return (FALSE);
  }
}

//
undefine([[opAction]])

define(opAction,
[[ifelse($1,Number,gt->traverseOzValue(getTaggedArg(PC++));ozValuesCnt--;,
         $1,Literal,gt->traverseOzValue(getTaggedArg(PC++));ozValuesCnt--;,
         $1,Feature,gt->traverseOzValue(getTaggedArg(PC++));ozValuesCnt--;,
         $1,Constant,gt->traverseOzValue(getTaggedArg(PC++));ozValuesCnt--;,
         $1,Builtinname,traverseBuiltin(gt,(Builtin*)getAdressArg(PC++));ozValuesCnt--;,
         $1,XRegisterIndex,PC++;,
         $1,YRegisterIndex,PC++;,
         $1,GRegisterIndex,PC++;,
         $1,Arity,PC++;,
         $1,Label,PC++;,
         $1,Count,PC++;,
         $1,ArityAndIsTail,PC++;,
         $1,Dummy,PC++;,
         $1,ProcedureRef,PC++;,
         $1,PredId,traversePredId(gt,(PrTabEntry*)getAdressArg(PC++));ozValuesCnt--;,
         $1,HashTableRef,traverseHashTableRef(gt,instrstart-start,(IHashTable *)getAdressArg(PC++));ozValuesCnt--;,
         $1,RecordArity,traverseRecordArity(gt,(SRecordArity)getAdressArg(PC++));ozValuesCnt--;,
         $1,CallMethodInfo,traverseCallMethodInfo(gt,(CallMethodInfo*)getAdressArg(PC++));ozValuesCnt--;,
         $1,GRegRef,PC++;,
         $1,Location,PC++;,
         $1,Cache,PC += CacheSize;)]])


//
//
Bool traverseCode(GenTraverser *gt, GTAbstractEntity *arg)
{
  MarshalerCodeAreaDescriptor *desc = (MarshalerCodeAreaDescriptor *) arg;
  ProgramCounter start = desc->getStart(), end = desc->getEnd();
  ProgramCounter PC = desc->getCurrent();
  int ozValuesCnt = ozValuesBAPickles;

  //
  while (ozValuesCnt > 0 && PC < end) {
    ProgramCounter instrstart = PC;
    Opcode op = CodeArea::getOpcode(PC++);

    //
    if (op == CALLPROCEDUREREF)
      op = (getNumberArg(PC+1) & 1)==0 ? FASTCALL : FASTTAILCALL;

    //
    if (op == FASTCALL || op == FASTTAILCALL) {
      AbstractionEntry *entry = (AbstractionEntry *) getAdressArg(PC);
      if (!entry->isCopyable()) {
        gt->traverseOzValue(makeTaggedConst(entry->getAbstr()));
        ozValuesCnt--;
        PC++; // skip (AbstractionEntry *)
        PC++; // skip unused second arg
        continue;
      }
    }

    //
    switch(op) {

      changequote(`,') dnl '
      include(EMUDIR/instrDefs.m4)
      changequote([[,]])

    // don't indent the next line:
    default: Assert(0); break;
    }
  }

  // (don't indent the next line:)
  if (PC >= end) {
    delete desc;
    return (TRUE);
  } else {
    desc->setCurrent(PC);
    return (FALSE);
  }
}


//
#ifdef USE_FAST_UNMARSHALER
//
undefine([[opAction]])

define(opAction,
[[ifelse($1,Number,PC=unmarshalOzValue(b,PC,code DebugArg(mIsNumber));ozValuesCnt--;,
        $1,Literal,PC=unmarshalOzValue(b,PC,code DebugArg(mIsLiteral));ozValuesCnt--;,
        $1,Feature,PC=unmarshalOzValue(b,PC,code DebugArg(mIsFeature));ozValuesCnt--;,
        $1,Constant,PC=unmarshalOzValue(b,PC,code DebugArg(mIsConstant));ozValuesCnt--;,
        $1,Builtinname,PC=unmarshalBuiltin(b,PC);ozValuesCnt--;,
        $1,XRegisterIndex,PC=unmarshalXReg(PC,bs);,
        $1,YRegisterIndex,PC=unmarshalYReg(PC,bs);,
        $1,GRegisterIndex,PC=unmarshalGReg(PC,bs);,
        $1,Arity,PC=unmarshalNum(PC,bs);,
        $1,Label,PC=unmarshalLabel(PC,bs);,
        $1,Count,PC=unmarshalNum(PC,bs);,
        $1,ArityAndIsTail,PC=unmarshalNum(PC,bs);,
        $1,Dummy,PC=unmarshalNum(PC,bs);,
        $1,ProcedureRef,PC=unmarshalProcedureRef(b,PC,bs,code);,
        $1,PredId,PC=unmarshalPredId(b,PC,instPC,bs);ozValuesCnt--;,
        $1,HashTableRef,PC=unmarshalHashTableRef(b,PC,bs);ozValuesCnt--;,
        $1,RecordArity,PC=unmarshalRecordArity(b,PC,bs);ozValuesCnt--;,
        $1,CallMethodInfo,PC=unmarshalCallMethodInfo(b,PC,bs);ozValuesCnt--;,
        $1,GRegRef,PC=unmarshalGRegRef(PC,bs);,
        $1,Location,PC=unmarshalLocation(PC,bs);,
        $1,Cache,PC=unmarshalCache(PC,code);)]])

//
// Returning 'OK' means we are done (with the code area);
// 'pc' can be zero meaning "discard the code". If it is non-zero,
// then it is supposed to be large enough to hold the whole code;
Bool unpickleCode(PickleMarshalerBuffer *bs, Builder *b,
                   BuilderCodeAreaDescriptor *desc)
{
  int ozValuesCnt = ozValuesBAPickles;
  ProgramCounter PC = desc->getCurrent();
  ProgramCounter instPC;
  DebugCode(instPC = (ProgramCounter) -1);
  // 'CodeArea*' is passed in it itself:
  CodeArea *code = desc->getCodeArea();
  Bool done = NO;

  //
  while (ozValuesCnt > 0) {
    Opcode op = (Opcode) bs->get();
    if (op == ENDOFFILE) {
      done = OK;
      break;
    }

    //
    if (op == DEBUGENTRY && PC)
      b->schedGenAction(handleDEBUGENTRY, PC);

    //
    Assert(op != CALLPROCEDUREREF);
    if (PC) {
      instPC = PC;
      PC = CodeArea::writeOpcode(op, PC);
    }

    //
    switch(op) {

      changequote(`,') dnl '
      include(EMUDIR/instrDefs.m4)
      changequote([[,]])

    default: Assert(0); break;
    }
  }

  //
  if (done)
    delete desc;
  else
    desc->setCurrent(PC);
  return (done);
}

#else

// Robust unmarshaling
undefine([[opAction]])

#define ONERR(e)        \
  if (e) { delete desc; return (UCR_ERROR); }

define(opAction,
[[ifelse($1,Number,PC=unmarshalOzValue(b,PC,code DebugArg(mIsNumber));ozValuesCnt--;,
         $1,Literal,PC=unmarshalOzValue(b,PC,code DebugArg(mIsLiteral));ozValuesCnt--;,
         $1,Feature,PC=unmarshalOzValue(b,PC,code DebugArg(mIsFeature));ozValuesCnt--;,
         $1,Constant,PC=unmarshalOzValue(b,PC,code DebugArg(mIsConstant));ozValuesCnt--;,
         $1,Builtinname,PC=unmarshalBuiltin(b,PC);ozValuesCnt--;,
         $1,XRegisterIndex,PC=unmarshalXRegRobust(PC,bs,&e);ONERR(e);,
         $1,YRegisterIndex,PC=unmarshalYRegRobust(PC,bs,&e);ONERR(e);,
         $1,GRegisterIndex,PC=unmarshalGRegRobust(PC,bs,&e);ONERR(e);,
         $1,Arity,PC=unmarshalNumRobust(PC,bs,&e);ONERR(e);,
         $1,Label,PC=unmarshalLabelRobust(PC,bs,&e);ONERR(e);,
         $1,Count,PC=unmarshalNumRobust(PC,bs,&e);ONERR(e);,
         $1,ArityAndIsTail,PC=unmarshalNumRobust(PC,bs,&e);ONERR(e);,
         $1,Dummy,PC=unmarshalNumRobust(PC,bs,&e);ONERR(e);,
         $1,ProcedureRef,PC=unmarshalProcedureRefRobust(b,PC,bs,code,&e);ONERR(e);,
         $1,PredId,PC=unmarshalPredIdRobust(b,PC,instPC,bs,&e);ozValuesCnt--;ONERR(e);,
         $1,HashTableRef,PC=unmarshalHashTableRefRobust(b,PC,bs,&e);ozValuesCnt--;ONERR(e);,
         $1,RecordArity,PC=unmarshalRecordArityRobust(b,PC,bs,&e);ozValuesCnt--;ONERR(e);,
         $1,CallMethodInfo,PC=unmarshalCallMethodInfoRobust(b,PC,bs,&e);ozValuesCnt--;ONERR(e);,
         $1,GRegRef,PC=unmarshalGRegRefRobust(PC,bs,&e);ONERR(e);,
         $1,Location,PC=unmarshalLocationRobust(PC,bs,&e);ONERR(e);,
         $1,Cache,PC=unmarshalCache(PC,code);)]])

//
// Returning 'OK' means we are done (with the code area);
// 'pc' can be zero meaning "discard the code". If it is non-zero,
// then it is supposed to be large enough to hold the whole code;
// Returning 'ERR' means that the buffer can not be marshalled.
UCRReturn unpickleCodeRobust(PickleMarshalerBuffer *bs, Builder *b,
                             BuilderCodeAreaDescriptor *desc)
{
  int ozValuesCnt = ozValuesBAPickles;
  ProgramCounter PC = desc->getCurrent();
  ProgramCounter instPC;
  DebugCode(instPC = (ProgramCounter) -1);
  // 'CodeArea*' is passed in it itself:
  CodeArea *code = desc->getCodeArea();
  Bool done = NO;
  int e;

  //
  while (ozValuesCnt > 0) {
    Opcode op = (Opcode) bs->get();
    if (op == ENDOFFILE) {
      done = OK;
      break;
    }

    //
    if (op == DEBUGENTRY && PC)
      b->schedGenAction(handleDEBUGENTRY, PC);

    //
    Assert(op != CALLPROCEDUREREF);
    if (PC) {
      instPC = PC;
      PC = CodeArea::writeOpcode(op, PC);
    }

    //
    switch(op) {

      changequote(`,') dnl '
      include(EMUDIR/instrDefs.m4)
      changequote([[,]])

    default:
      delete desc;
      return (UCR_ERROR);
    }
  }

  //
  if (done)
    delete desc;
  else
    desc->setCurrent(PC);
  return ((done == OK) ? UCR_DONE : UCR_SUSPEND);
}

#endif

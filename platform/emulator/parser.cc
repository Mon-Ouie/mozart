
/*  A Bison parser, made from parser.yy
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse xyparse
#define yylex xylex
#define yyerror xyerror
#define yylval xylval
#define yychar xychar
#define yydebug xydebug
#define yynerrs xynerrs
#define	SWITCH	258
#define	SWITCHNAME	259
#define	LOCALSWITCHES	260
#define	PUSHSWITCHES	261
#define	POPSWITCHES	262
#define	OZATOM	263
#define	ATOM_LABEL	264
#define	OZFLOAT	265
#define	OZINT	266
#define	AMPER	267
#define	DOTINT	268
#define	STRING	269
#define	VARIABLE	270
#define	VARIABLE_LABEL	271
#define	DEFAULT	272
#define	CHOICE	273
#define	LDOTS	274
#define	attr	275
#define	at	276
#define	_case_	277
#define	catch	278
#define	choice	279
#define	_class_	280
#define	cond	281
#define	_condis_	282
#define	declare	283
#define	define	284
#define	dis	285
#define	_else_	286
#define	elsecase	287
#define	elseif	288
#define	elseof	289
#define	end	290
#define	export	291
#define	fail	292
#define	false	293
#define	FALSE_LABEL	294
#define	feat	295
#define	finally	296
#define	_from_	297
#define	_fun_	298
#define	functor	299
#define	_if_	300
#define	import	301
#define	_in_	302
#define	local	303
#define	_lock_	304
#define	_meth_	305
#define	not	306
#define	of	307
#define	or	308
#define	prepare	309
#define	proc	310
#define	prop	311
#define	_raise_	312
#define	require	313
#define	self	314
#define	skip	315
#define	then	316
#define	thread	317
#define	true	318
#define	TRUE_LABEL	319
#define	try	320
#define	unit	321
#define	UNIT_LABEL	322
#define	with	323
#define	ENDOFFILE	324
#define	REGEX	325
#define	lex	326
#define	_mode_	327
#define	_parser_	328
#define	prod	329
#define	_scanner_	330
#define	syn	331
#define	token	332
#define	REDUCE	333
#define	SEP	334
#define	OOASSIGN	335
#define	orelse	336
#define	andthen	337
#define	COMPARE	338
#define	FDCOMPARE	339
#define	FDIN	340
#define	ADD	341
#define	FDMUL	342
#define	OTHERMUL	343
#define	DEREFF	344

#line 25 "parser.yy"

//
// See Oz/tools/compiler/Doc/TupleSyntax for an description of the
// generated parse trees.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>

#include "base.hh"


//----------------------
// Interface to Scanner
//----------------------

extern char xyFileName[];   // name of the current file, "" means stdin
extern char xyhelpFileName[];
extern OZ_Term xyFileNameAtom;

extern int xy_gumpSyntax, xy_allowDeprecated;
extern OZ_Term xy_errorMessages;

extern int xylino;
extern char *xytext;
extern char *xylastline;

char *xy_expand_file_name(char *file);

int xy_init_from_file(char *file, OZ_Term defines);
void xy_init_from_string(char *str, OZ_Term defines);
void xy_exit();

int xylex();

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

void checkDeprecation(OZ_Term coord);
void xyreportWarning(char *kind, char *msg, OZ_Term coord);
void xyreportError(char *kind, char *msg, OZ_Term coord);
void xyreportError(char *kind, char *msg,
		   const char *file, int line, int column);


//-----------------
// Local Variables
//-----------------

#define YYMAXDEPTH 1000000
#define YYERROR_VERBOSE

static OZ_Term nilAtom;
static OZ_Term yyoutput;

static void xyerror(char *);


// Gump Extensions

#define DEPTH 20

static int depth;

static char prodKeyBuffer[DEPTH][80];
static char *prodKey[DEPTH];
static OZ_Term prodName[DEPTH];

struct TermNode {
  OZ_Term term;
  TermNode *next;
  TermNode(OZ_Term t, TermNode *n) { term = t; next = n; }
};
static TermNode *terms[DEPTH];
static OZ_Term decls[DEPTH];


//---------------------
// Operations on Terms
//---------------------

#define pair(left,right) OZ_pair2(left,right)
#define consList(head,tail) OZ_cons(head,tail)

inline OZ_Term newCTerm(char *l) {
  return OZ_atom(l);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1) {
  return OZ_mkTupleC(l,1,t1);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2) {
  return OZ_mkTupleC(l,2,t1,t2);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3) {
  return OZ_mkTupleC(l,3,t1,t2,t3);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4) {
  return OZ_mkTupleC(l,4,t1,t2,t3,t4);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5) {
  return OZ_mkTupleC(l,5,t1,t2,t3,t4,t5);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5, OZ_Term t6) {
  return OZ_mkTupleC(l,6,t1,t2,t3,t4,t5,t6);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5, OZ_Term t6, OZ_Term t7) {
  return OZ_mkTupleC(l,7,t1,t2,t3,t4,t5,t6,t7);
}

static OZ_Term makeLongPos(OZ_Term pos1, OZ_Term pos2) {
  return newCTerm("pos",OZ_subtree(pos1,OZ_int(1)),OZ_subtree(pos1,OZ_int(2)),
		  OZ_subtree(pos1,OZ_int(3)),OZ_subtree(pos2,OZ_int(1)),
		  OZ_subtree(pos2,OZ_int(2)),OZ_subtree(pos2,OZ_int(3)));
}

inline OZ_Term pos() {
  return newCTerm("pos",xyFileNameAtom,OZ_int(xylino),OZ_int(xycharno()));
}

inline OZ_Term makeVar(OZ_Term printName, OZ_Term pos) {
  return newCTerm("fVar",printName,pos);
}

inline OZ_Term makeVar(char *printName) {
  return makeVar(OZ_atom(printName),pos());
}

inline OZ_Term makeCons(OZ_Term first, OZ_Term second, OZ_Term pos) {
   return newCTerm("fRecord",
		   newCTerm("fAtom",OZ_atom("|"),pos),
		   consList(first,consList(second,nilAtom)));
}

static OZ_Term makeInt(char *chars, OZ_Term pos) {
  return newCTerm("fInt",OZ_CStringToInt(chars),pos);
}

static OZ_Term makeInt(char c, OZ_Term pos) {
  return newCTerm("fInt",OZ_int((unsigned char) c),pos);
}

static OZ_Term makeString(char *chars, OZ_Term pos) {
  if (chars[0] == '\0')
    return newCTerm("fAtom",nilAtom,pos);
  else
    return makeCons(makeInt(chars[0],pos),makeString(&chars[1],pos),pos);
}


//------
// Gump
//------

static OZ_Term scannerPrefix = 0;
static OZ_Term parserExpect = 0;

void xy_setScannerPrefix() {
  scannerPrefix = OZ_atom(xytext);
}

void xy_setParserExpect() {
  parserExpect = OZ_CStringToInt(xytext);
}


#line 208 "parser.yy"
typedef union {
  OZ_Term t;
  int i;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		777
#define	YYFLAG		-32768
#define	YYNTBASE	110

#define YYTRANSLATE(x) ((unsigned)(x) <= 344 ? yytranslate[x] : 250)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   109,     2,    88,   103,     2,     2,     2,   100,
   101,     2,    98,    92,    99,    94,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   108,     2,     2,
    80,     2,     2,    96,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   104,     2,   105,    95,   102,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   106,    87,   107,    93,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    81,    82,    83,    84,    85,    86,
    89,    90,    91,    97
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     5,     8,    11,    13,    17,    20,    27,    34,
    40,    41,    44,    46,    48,    50,    51,    54,    57,    60,
    62,    65,    70,    75,    80,    85,    90,    95,   100,   105,
   107,   112,   114,   118,   123,   128,   133,   138,   142,   147,
   150,   155,   159,   163,   167,   169,   171,   173,   175,   177,
   179,   181,   183,   185,   187,   189,   191,   198,   205,   216,
   227,   234,   236,   243,   246,   249,   255,   263,   269,   277,
   283,   291,   293,   295,   301,   304,   310,   316,   322,   328,
   330,   332,   333,   336,   337,   339,   344,   351,   356,   361,
   366,   373,   378,   379,   383,   390,   393,   395,   399,   402,
   407,   408,   411,   412,   415,   420,   422,   424,   426,   428,
   430,   432,   437,   439,   440,   443,   445,   449,   450,   454,
   455,   458,   466,   474,   476,   478,   480,   482,   484,   485,
   488,   493,   494,   496,   498,   500,   502,   504,   506,   508,
   510,   512,   519,   522,   525,   529,   531,   539,   546,   549,
   552,   556,   558,   560,   564,   568,   570,   574,   578,   580,
   585,   592,   597,   602,   604,   609,   617,   619,   621,   622,
   625,   630,   635,   640,   645,   646,   649,   653,   655,   657,
   659,   661,   663,   665,   667,   668,   671,   677,   679,   684,
   686,   688,   690,   692,   694,   699,   705,   707,   709,   713,
   715,   717,   719,   722,   723,   726,   731,   733,   735,   737,
   741,   742,   748,   751,   752,   754,   758,   763,   769,   773,
   777,   779,   782,   787,   792,   796,   800,   803,   808,   813,
   819,   821,   825,   828,   833,   838,   845,   847,   849,   851,
   855,   857,   859,   861,   863,   864,   865,   874,   876,   878,
   880,   883,   886,   889,   895,   901,   906,   908,   910,   915,
   916,   919,   922,   924,   926,   936,   938,   940,   943,   946,
   947,   950,   952,   955,   957,   961,   963,   966,   968,   971,
   972,   982,   983,   984,   995,  1002,  1006,  1009,  1012,  1014,
  1015,  1018,  1019,  1020,  1027,  1028,  1029,  1036,  1037,  1038,
  1045,  1047,  1051,  1053,  1055,  1057,  1058,  1060,  1062,  1064,
  1065,  1066,  1069,  1071,  1074,  1079,  1084,  1092,  1093,  1096,
  1098,  1100,  1102,  1104,  1106,  1110,  1113,  1117,  1118,  1121,
  1124,  1130,  1135,  1138,  1141,  1143,  1145,  1147,  1150,  1154,
  1156,  1158,  1163,  1165,  1171,  1173,  1175,  1181,  1186,  1187,
  1188,  1198,  1199,  1200,  1210,  1211,  1212,  1222,  1224,  1230,
  1232,  1234,  1236
};

static const short yyrhs[] = {   111,
    69,     0,     1,     0,   116,   112,     0,   204,   112,     0,
   112,     0,   188,   122,   112,     0,   113,   111,     0,    28,
   189,   116,    47,   188,   112,     0,    28,   189,   116,    47,
   116,   112,     0,    28,   189,   116,   188,   112,     0,     0,
     3,   114,     0,     5,     0,     6,     0,     7,     0,     0,
   115,   114,     0,    98,     4,     0,    99,     4,     0,   117,
     0,   117,   116,     0,   117,    80,   189,   117,     0,   117,
    81,   189,   117,     0,   117,    82,   189,   117,     0,   117,
    83,   189,   117,     0,   117,   128,   189,   117,     0,   117,
   129,   189,   117,     0,   117,   130,   189,   117,     0,   117,
    87,   189,   117,     0,   119,     0,   119,    88,   189,   118,
     0,   119,     0,   119,    88,   118,     0,   119,   131,   189,
   119,     0,   119,   132,   189,   119,     0,   119,   133,   189,
   119,     0,   119,    92,   189,   119,     0,    93,   189,   119,
     0,   119,    94,   189,   119,     0,   119,    13,     0,   119,
    95,   189,   119,     0,    96,   189,   119,     0,    97,   189,
   119,     0,   100,   134,   101,     0,   182,     0,   184,     0,
   102,     0,    66,     0,    63,     0,    38,     0,    59,     0,
   103,     0,   185,     0,   186,     0,   187,     0,   139,     0,
   104,   189,   117,   136,   105,   189,     0,   106,   189,   117,
   135,   107,   189,     0,    55,   189,   120,   106,   117,   135,
   107,   134,    35,   189,     0,    43,   189,   120,   106,   117,
   135,   107,   134,    35,   189,     0,    44,   189,   156,   121,
    35,   189,     0,   155,     0,    48,   189,   116,    47,   116,
    35,     0,    45,   146,     0,    22,   148,     0,    49,   189,
   134,    35,   189,     0,    49,   189,   117,    61,   134,    35,
   189,     0,    62,   189,   134,    35,   189,     0,    65,   189,
   134,   137,   138,    35,   189,     0,    57,   189,   134,    35,
   189,     0,    57,   189,   134,    68,   134,    35,   189,     0,
    60,     0,    37,     0,    51,   189,   134,    35,   189,     0,
    26,   171,     0,    53,   189,   178,    35,   189,     0,    30,
   189,   178,    35,   189,     0,    24,   189,   180,    35,   189,
     0,    27,   189,   175,    35,   189,     0,   190,     0,   198,
     0,     0,   182,   120,     0,     0,   122,     0,    58,   189,
   123,   121,     0,    54,   189,   116,    47,   116,   121,     0,
    54,   189,   116,   121,     0,    46,   189,   123,   121,     0,
    36,   189,   127,   121,     0,    29,   189,   116,    47,   116,
   121,     0,    29,   189,   116,   121,     0,     0,   183,   126,
   123,     0,   124,   100,   125,   101,   126,   123,     0,    16,
   189,     0,   145,     0,   145,   108,   183,     0,   145,   125,
     0,   145,   108,   183,   125,     0,     0,    21,   182,     0,
     0,   183,   127,     0,   145,   108,   183,   127,     0,    84,
     0,    85,     0,    86,     0,    89,     0,    90,     0,    91,
     0,   116,    47,   189,   116,     0,   116,     0,     0,   117,
   135,     0,   188,     0,   188,   117,   136,     0,     0,    23,
   189,   151,     0,     0,    41,   134,     0,   140,   189,   100,
   142,   143,   101,   189,     0,   141,   189,   100,   142,   143,
   101,   189,     0,     9,     0,    67,     0,    64,     0,    39,
     0,    16,     0,     0,   117,   142,     0,   144,   108,   117,
   142,     0,     0,    19,     0,   182,     0,   183,     0,   186,
     0,    66,     0,    63,     0,    38,     0,   182,     0,   186,
     0,   189,   116,    61,   134,   147,   189,     0,    33,   146,
     0,    32,   148,     0,    31,   134,    35,     0,    35,     0,
   189,   116,    61,   189,   134,   149,   189,     0,   189,   116,
    52,   150,   149,   189,     0,    33,   146,     0,    32,   148,
     0,    31,   134,    35,     0,    35,     0,   152,     0,   152,
    18,   150,     0,   152,    34,   150,     0,   152,     0,   152,
    18,   151,     0,   153,    61,   134,     0,   154,     0,   154,
    83,   188,   116,     0,   154,    83,   188,   116,    47,   116,
     0,   154,    80,   189,   154,     0,   154,    87,   189,   154,
     0,   119,     0,   119,    88,   189,   118,     0,    25,   189,
   156,   157,   162,    35,   189,     0,   117,     0,   188,     0,
     0,   158,   157,     0,    42,   189,   117,   135,     0,    20,
   189,   160,   159,     0,    40,   189,   160,   159,     0,    56,
   189,   117,   135,     0,     0,   160,   159,     0,   161,   108,
   117,     0,   161,     0,   182,     0,   184,     0,   186,     0,
    66,     0,    63,     0,    38,     0,     0,   163,   162,     0,
    50,   189,   164,   134,    35,     0,   165,     0,   165,    80,
   189,   183,     0,   182,     0,   184,     0,    66,     0,    63,
     0,    38,     0,   166,   100,   167,   101,     0,   166,   100,
   167,    19,   101,     0,     9,     0,    16,     0,   109,   189,
    16,     0,    67,     0,    64,     0,    39,     0,   168,   167,
     0,     0,   169,   170,     0,   144,   108,   169,   170,     0,
   183,     0,   103,     0,   102,     0,    17,   189,   117,     0,
     0,   189,   173,   172,    35,   189,     0,    31,   134,     0,
     0,   174,     0,   174,    18,   173,     0,   116,    61,   189,
   134,     0,   116,    47,   116,    61,   134,     0,   176,    18,
   176,     0,   176,    18,   175,     0,   177,     0,   177,   176,
     0,   117,   129,   189,   117,     0,   117,   130,   189,   117,
     0,   179,    18,   179,     0,   179,    18,   178,     0,   116,
   188,     0,   116,    47,   116,   188,     0,   116,   188,    61,
   134,     0,   116,    47,   116,    61,   134,     0,   181,     0,
   181,    18,   180,     0,   116,   188,     0,   116,   188,    47,
   116,     0,   116,   188,    61,   134,     0,   116,   188,    47,
   116,    61,   134,     0,     8,     0,    15,     0,   183,     0,
   109,   189,   183,     0,    14,     0,    11,     0,    12,     0,
    10,     0,     0,     0,    75,   189,   183,   157,   162,   191,
    35,   189,     0,   192,     0,   193,     0,   195,     0,   192,
   191,     0,   193,   191,     0,   195,   191,     0,    71,   182,
    80,   194,    35,     0,    71,   183,    80,   194,    35,     0,
    71,   194,   134,    35,     0,    70,     0,    14,     0,    72,
   183,   196,    35,     0,     0,   197,   196,     0,    42,   203,
     0,   193,     0,   195,     0,    73,   189,   183,   157,   162,
   200,   199,    35,   189,     0,   227,     0,   205,     0,   227,
   199,     0,   205,   199,     0,     0,    77,   201,     0,   202,
     0,   202,   201,     0,   182,     0,   182,   108,   117,     0,
   183,     0,   183,   203,     0,   205,     0,   205,   204,     0,
     0,    74,   183,    80,   206,   209,   224,   225,   230,    35,
     0,     0,     0,    74,   103,   207,    80,   208,   209,   224,
   225,   230,    35,     0,    74,   209,   224,   225,   230,    35,
     0,   211,   183,   222,     0,   183,   223,     0,   210,   212,
     0,   211,     0,     0,   182,   108,     0,     0,     0,   100,
   213,   219,   101,   214,   222,     0,     0,     0,   104,   215,
   219,   105,   216,   222,     0,     0,     0,   106,   217,   219,
   107,   218,   222,     0,   220,     0,   220,   221,   219,     0,
   183,     0,   102,     0,    79,     0,     0,   223,     0,    89,
     0,    90,     0,     0,     0,   226,    47,     0,   227,     0,
   227,   226,     0,    76,   182,   230,    35,     0,    76,   183,
   230,    35,     0,    76,   248,   100,   228,   101,   230,    35,
     0,     0,   229,   228,     0,   183,     0,   103,     0,   102,
     0,   231,     0,   232,     0,   232,    18,   231,     0,   188,
   234,     0,    60,   189,   233,     0,     0,    78,   134,     0,
   235,   234,     0,   235,   223,   189,   236,   224,     0,   235,
    80,   238,   236,     0,    47,   236,     0,   239,   236,     0,
   233,     0,   183,     0,   233,     0,   237,   236,     0,   184,
    80,   238,     0,   238,     0,   183,     0,   183,   223,   189,
   224,     0,   240,     0,   109,   189,   183,    80,   238,     0,
   240,     0,   247,     0,   211,   189,   247,   222,   224,     0,
   247,   223,   189,   224,     0,     0,     0,   210,   189,   100,
   241,   249,   101,   242,   222,   224,     0,     0,     0,   210,
   189,   104,   243,   249,   105,   244,   222,   224,     0,     0,
     0,   210,   189,   106,   245,   249,   107,   246,   222,   224,
     0,   182,     0,   248,   189,   100,   135,   101,     0,     9,
     0,    16,     0,   230,     0,   230,   221,   249,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   367,   369,   373,   375,   378,   380,   385,   387,   390,   392,
   395,   399,   401,   403,   405,   409,   411,   415,   422,   431,
   433,   437,   439,   441,   443,   445,   448,   450,   452,   454,
   456,   462,   464,   468,   471,   474,   477,   479,   482,   485,
   489,   492,   494,   497,   499,   501,   503,   505,   507,   509,
   511,   513,   515,   517,   519,   521,   523,   527,   529,   532,
   535,   537,   539,   541,   543,   545,   547,   549,   551,   553,
   555,   557,   559,   561,   563,   565,   568,   571,   574,   576,
   578,   582,   584,   589,   591,   596,   598,   600,   603,   605,
   607,   609,   614,   616,   618,   622,   626,   628,   630,   632,
   636,   638,   642,   644,   646,   651,   655,   659,   663,   667,
   671,   675,   677,   681,   683,   687,   689,   695,   697,   701,
   703,   707,   712,   719,   721,   723,   725,   729,   733,   735,
   737,   741,   743,   747,   749,   751,   753,   755,   757,   761,
   763,   767,   771,   773,   775,   777,   781,   785,   789,   791,
   793,   795,   799,   801,   803,   807,   809,   813,   817,   819,
   822,   826,   828,   830,   832,   838,   843,   845,   850,   852,
   856,   858,   860,   862,   866,   868,   872,   874,   878,   880,
   882,   884,   886,   888,   892,   894,   898,   902,   904,   908,
   910,   912,   914,   916,   918,   920,   924,   926,   928,   930,
   932,   934,   938,   940,   944,   946,   950,   952,   954,   959,
   961,   965,   969,   971,   975,   977,   981,   983,   987,   989,
   993,   995,   999,  1001,  1005,  1007,  1011,  1015,  1017,  1020,
  1024,  1026,  1030,  1035,  1040,  1043,  1047,  1051,  1055,  1057,
  1061,  1065,  1067,  1071,  1075,  1079,  1089,  1097,  1099,  1101,
  1103,  1105,  1107,  1111,  1113,  1117,  1121,  1123,  1127,  1131,
  1133,  1137,  1139,  1141,  1147,  1155,  1157,  1159,  1161,  1165,
  1167,  1171,  1173,  1177,  1179,  1183,  1185,  1189,  1191,  1195,
  1197,  1199,  1200,  1201,  1203,  1207,  1209,  1211,  1215,  1216,
  1219,  1223,  1224,  1224,  1225,  1226,  1226,  1227,  1228,  1228,
  1231,  1233,  1237,  1238,  1241,  1245,  1246,  1249,  1250,  1253,
  1261,  1263,  1267,  1269,  1273,  1275,  1277,  1281,  1283,  1287,
  1289,  1291,  1295,  1299,  1301,  1305,  1314,  1318,  1320,  1324,
  1326,  1336,  1341,  1348,  1350,  1354,  1358,  1360,  1364,  1366,
  1370,  1372,  1378,  1382,  1385,  1390,  1392,  1396,  1400,  1401,
  1402,  1404,  1405,  1406,  1408,  1409,  1410,  1414,  1416,  1420,
  1422,  1427,  1429
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"SWITCHNAME","LOCALSWITCHES","PUSHSWITCHES","POPSWITCHES","OZATOM","ATOM_LABEL",
"OZFLOAT","OZINT","AMPER","DOTINT","STRING","VARIABLE","VARIABLE_LABEL","DEFAULT",
"CHOICE","LDOTS","attr","at","_case_","catch","choice","_class_","cond","_condis_",
"declare","define","dis","_else_","elsecase","elseif","elseof","end","export",
"fail","false","FALSE_LABEL","feat","finally","_from_","_fun_","functor","_if_",
"import","_in_","local","_lock_","_meth_","not","of","or","prepare","proc","prop",
"_raise_","require","self","skip","then","thread","true","TRUE_LABEL","try",
"unit","UNIT_LABEL","with","ENDOFFILE","REGEX","lex","_mode_","_parser_","prod",
"_scanner_","syn","token","REDUCE","SEP","'='","OOASSIGN","orelse","andthen",
"COMPARE","FDCOMPARE","FDIN","'|'","'#'","ADD","FDMUL","OTHERMUL","','","'~'",
"'.'","'^'","'@'","DEREFF","'+'","'-'","'('","')'","'_'","'$'","'['","']'","'{'",
"'}'","':'","'!'","file","queries","queries1","directive","switchList","switch",
"sequence","phrase","hashes","phrase2","procFlags","optFunctorDescriptorList",
"functorDescriptorList","importDecls","variableLabel","featureList","optImportAt",
"exportDecls","compare","fdCompare","fdIn","add","fdMul","otherMul","inSequence",
"phraseList","fixedListArgs","optCatch","optFinally","record","recordAtomLabel",
"recordVarLabel","recordArguments","optDots","feature","featureNoVar","ifMain",
"ifRest","caseMain","caseRest","elseOfList","caseClauseList","caseClause","sideCondition",
"pattern","class","phraseOpt","classDescriptorList","classDescriptor","attrFeatList",
"attrFeat","attrFeatFeature","methList","meth","methHead","methHead1","methHeadLabel",
"methFormals","methFormal","methFormalTerm","methFormalOptDefault","condMain",
"condElse","condClauseList","condClause","condisClauseList","condisClause","fdExpression",
"orClauseList","orClause","choiceClauseList","choiceClause","atom","nakedVariable",
"variable","string","int","float","thisCoord","coord","scannerSpecification",
"scannerRules","lexAbbrev","lexRule","regex","modeClause","modeDescrs","modeDescr",
"parserSpecification","parserRules","tokenClause","tokenList","tokenDecl","modeFromList",
"prodClauseList","prodClause","@1","@2","@3","prodHeadRest","prodName","prodNameAtom",
"prodKey","@4","@5","@6","@7","@8","@9","prodParams","prodParam","separatorOp",
"optTerminatorOp","terminatorOp","prodMakeKey","localRules","localRulesSub",
"synClause","synParams","synParam","synAlt","synSeqs","synSeq","optSynAction",
"nonEmptySeq","synVariable","synPrims","synPrim","synPrimNoAssign","synPrimNoVar",
"synPrimNoVarNoAssign","@10","@11","@12","@13","@14","@15","synInstTerm","synLabel",
"synProdCallParams", NULL
};
#endif

static const short yyr1[] = {     0,
   110,   110,   111,   111,   111,   111,   112,   112,   112,   112,
   112,   113,   113,   113,   113,   114,   114,   115,   115,   116,
   116,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   118,   118,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   120,   120,   121,   121,   122,   122,   122,   122,   122,
   122,   122,   123,   123,   123,   124,   125,   125,   125,   125,
   126,   126,   127,   127,   127,   128,   129,   130,   131,   132,
   133,   134,   134,   135,   135,   136,   136,   137,   137,   138,
   138,   139,   139,   140,   140,   140,   140,   141,   142,   142,
   142,   143,   143,   144,   144,   144,   144,   144,   144,   145,
   145,   146,   147,   147,   147,   147,   148,   148,   149,   149,
   149,   149,   150,   150,   150,   151,   151,   152,   153,   153,
   153,   154,   154,   154,   154,   155,   156,   156,   157,   157,
   158,   158,   158,   158,   159,   159,   160,   160,   161,   161,
   161,   161,   161,   161,   162,   162,   163,   164,   164,   165,
   165,   165,   165,   165,   165,   165,   166,   166,   166,   166,
   166,   166,   167,   167,   168,   168,   169,   169,   169,   170,
   170,   171,   172,   172,   173,   173,   174,   174,   175,   175,
   176,   176,   177,   177,   178,   178,   179,   179,   179,   179,
   180,   180,   181,   181,   181,   181,   182,   183,   184,   184,
   185,   186,   186,   187,   188,   189,   190,   191,   191,   191,
   191,   191,   191,   192,   192,   193,   194,   194,   195,   196,
   196,   197,   197,   197,   198,   199,   199,   199,   199,   200,
   200,   201,   201,   202,   202,   203,   203,   204,   204,   206,
   205,   207,   208,   205,   205,   209,   209,   209,   210,   210,
   211,   213,   214,   212,   215,   216,   212,   217,   218,   212,
   219,   219,   220,   220,   221,   222,   222,   223,   223,   224,
   225,   225,   226,   226,   227,   227,   227,   228,   228,   229,
   229,   229,   230,   231,   231,   232,   232,   233,   233,   234,
   234,   234,   234,   234,   234,   235,   236,   236,   237,   237,
   238,   238,   238,   239,   239,   240,   240,   240,   241,   242,
   240,   243,   244,   240,   245,   246,   240,   247,   247,   248,
   248,   249,   249
};

static const short yyr2[] = {     0,
     2,     1,     2,     2,     1,     3,     2,     6,     6,     5,
     0,     2,     1,     1,     1,     0,     2,     2,     2,     1,
     2,     4,     4,     4,     4,     4,     4,     4,     4,     1,
     4,     1,     3,     4,     4,     4,     4,     3,     4,     2,
     4,     3,     3,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     6,     6,    10,    10,
     6,     1,     6,     2,     2,     5,     7,     5,     7,     5,
     7,     1,     1,     5,     2,     5,     5,     5,     5,     1,
     1,     0,     2,     0,     1,     4,     6,     4,     4,     4,
     6,     4,     0,     3,     6,     2,     1,     3,     2,     4,
     0,     2,     0,     2,     4,     1,     1,     1,     1,     1,
     1,     4,     1,     0,     2,     1,     3,     0,     3,     0,
     2,     7,     7,     1,     1,     1,     1,     1,     0,     2,
     4,     0,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     6,     2,     2,     3,     1,     7,     6,     2,     2,
     3,     1,     1,     3,     3,     1,     3,     3,     1,     4,
     6,     4,     4,     1,     4,     7,     1,     1,     0,     2,
     4,     4,     4,     4,     0,     2,     3,     1,     1,     1,
     1,     1,     1,     1,     0,     2,     5,     1,     4,     1,
     1,     1,     1,     1,     4,     5,     1,     1,     3,     1,
     1,     1,     2,     0,     2,     4,     1,     1,     1,     3,
     0,     5,     2,     0,     1,     3,     4,     5,     3,     3,
     1,     2,     4,     4,     3,     3,     2,     4,     4,     5,
     1,     3,     2,     4,     4,     6,     1,     1,     1,     3,
     1,     1,     1,     1,     0,     0,     8,     1,     1,     1,
     2,     2,     2,     5,     5,     4,     1,     1,     4,     0,
     2,     2,     1,     1,     9,     1,     1,     2,     2,     0,
     2,     1,     2,     1,     3,     1,     2,     1,     2,     0,
     9,     0,     0,    10,     6,     3,     2,     2,     1,     0,
     2,     0,     0,     6,     0,     0,     6,     0,     0,     6,
     1,     3,     1,     1,     1,     0,     1,     1,     1,     0,
     0,     2,     1,     2,     4,     4,     7,     0,     2,     1,
     1,     1,     1,     1,     3,     2,     3,     0,     2,     2,
     5,     4,     2,     2,     1,     1,     1,     2,     3,     1,
     1,     4,     1,     5,     1,     1,     5,     4,     0,     0,
     9,     0,     0,     9,     0,     0,     9,     1,     5,     1,
     1,     1,     3
};

static const short yydefact[] = {     0,
     2,    16,    13,    14,    15,   237,   124,   244,   242,   243,
   241,   238,   128,   246,   246,   246,   246,   246,   246,   246,
    73,    50,   127,   246,   246,   246,   246,   246,   246,   246,
   246,   246,    51,    72,   246,    49,   126,   246,    48,   125,
   246,   290,   246,   246,   246,   246,     0,    47,    52,   246,
   246,   246,     0,     5,   245,    11,    20,    30,    56,   246,
   246,    62,    45,   239,    46,    53,    54,    55,     0,    80,
    81,    11,   278,     0,     0,    12,    16,    65,     0,     0,
   245,    75,     0,     0,     0,     0,    82,   245,    64,     0,
     0,     0,     0,     0,    82,     0,     0,     0,     0,   282,
     0,     0,   310,     0,   289,     0,     0,     0,     0,   113,
     0,     0,     0,     0,     1,     7,     3,   246,   246,   246,
   246,   106,   107,   108,   246,    21,   246,   246,   246,    40,
   246,   109,   110,   111,   246,   246,   246,   246,   246,   246,
     0,     0,   246,   246,   246,   246,   246,    11,     4,   279,
    18,    19,    17,     0,   245,     0,   231,   167,   169,   168,
     0,   214,   215,     0,     0,     0,   221,   245,   245,     0,
     0,     0,    82,    84,     0,     0,    20,     0,     0,     0,
     0,     0,     0,   118,   169,     0,   291,   280,   308,   309,
   287,   311,   292,   295,   298,   288,   306,   169,    38,    42,
    43,   246,    44,   245,   114,   240,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   129,   129,     0,   103,    93,     0,    93,     6,     0,
   246,   233,   246,     0,   246,   246,   246,   246,   185,   169,
     0,   246,     0,     0,     0,   246,   246,   246,     0,   222,
   245,    11,     0,   227,   246,     0,     0,    83,     0,    85,
     0,     0,     0,   246,   246,   246,     0,   246,     0,   246,
   246,   120,   185,   283,   290,     0,   245,     0,   313,     0,
     0,     0,   286,   307,   185,     0,     0,   116,   114,     0,
    22,    23,    24,    25,    29,    26,    27,    28,    31,    32,
    37,    39,    41,    34,    35,    36,    50,    49,    48,   129,
   132,     0,    45,   239,    54,   132,    84,    84,     0,   140,
   103,   141,   246,    84,     0,   101,    84,    84,   164,     0,
   153,     0,   159,     0,     0,     0,    78,   232,     0,     0,
     0,     0,   246,     0,   185,   170,     0,     0,   213,   246,
   216,     0,     0,    79,   220,   219,    11,    11,    10,   245,
     0,    77,   226,   225,   114,   246,     0,     0,     0,    66,
    74,    76,   114,    70,     0,    68,     0,     0,     0,   270,
   290,     0,   310,   360,   361,   245,   245,     0,   246,   328,
     0,   323,   324,   312,   314,   304,   303,     0,   301,     0,
     0,     0,   112,   246,   245,   115,   246,     0,   130,   133,
     0,     0,     0,     0,    92,    90,     0,   104,    96,    89,
     0,     0,    93,     0,    88,    86,   246,     0,   246,   246,
   152,   246,     0,     0,     0,   246,   245,   246,     0,   234,
   235,   184,   183,   182,   175,   178,   179,   180,   181,   175,
   114,   114,     0,   246,   186,     0,   217,   212,   223,   224,
     9,     8,     0,   228,   229,     0,    61,     0,   246,   246,
   146,   246,    63,   246,     0,   246,   119,   156,   121,   246,
     0,     0,   310,   311,     0,     0,   318,   328,   328,     0,
   246,   358,   336,   246,   246,   335,   326,   328,   328,   345,
   346,   246,   285,   245,   293,   305,     0,   296,   299,     0,
     0,     0,   248,   249,   250,    57,   117,    58,    33,   246,
   129,   246,    84,   103,     0,    97,   102,    94,    84,     0,
     0,   150,   149,   148,   154,   155,   158,     0,     0,     0,
   246,     0,   172,   175,     0,   173,   171,   174,   197,   198,
   194,   202,   193,   201,   192,   200,   246,     0,   188,     0,
   190,   191,   166,   218,   230,     0,     0,   144,   143,   142,
    67,     0,    71,     0,    69,   274,   271,   272,     0,   267,
   266,   311,   245,   315,   316,   322,   321,   320,     0,   318,
   327,   341,     0,   337,   333,   328,   340,   343,   329,     0,
     0,     0,   290,   246,   330,   334,   246,     0,   325,   306,
   302,   306,   306,   258,   257,     0,     0,     0,   260,   246,
   251,   252,   253,   122,   131,   123,    91,   105,   101,     0,
    99,    87,   165,   151,   162,   160,   163,   147,   236,   176,
   177,     0,     0,   246,   204,     0,   145,     0,   157,     0,
   273,   246,   269,   268,   245,     0,   245,   319,   246,   290,
   338,     0,   349,   352,   355,   358,   306,   341,   328,   328,
   310,   114,   294,   297,   300,     0,     0,     0,     0,     0,
   263,   264,     0,   260,   247,    93,    98,     0,   199,   187,
     0,   139,   138,   137,   209,   208,     0,     0,   204,   211,
   134,   207,   136,   246,   246,   275,   265,     0,   281,     0,
   310,   339,   290,   245,   245,   245,   310,   332,   310,   348,
     0,     0,     0,   256,   276,   262,   259,   261,    95,   100,
   161,   189,     0,     0,   195,   203,   246,   205,    60,    59,
   284,   317,   342,   344,   362,     0,     0,     0,   347,   331,
   359,   254,   255,   277,   211,   207,   196,     0,   245,   350,
   353,   356,   206,   210,   363,   306,   306,   306,   310,   310,
   310,   351,   354,   357,     0,     0,     0
};

static const short yydefgoto[] = {   775,
    53,    54,    55,    76,    77,   110,    57,   299,    58,   172,
   259,   260,   324,   325,   525,   423,   318,   127,   128,   129,
   138,   139,   140,   111,   290,   287,   272,   379,    59,    60,
    61,   311,   411,   312,   319,    89,   472,    78,   432,   330,
   477,   331,   332,   333,    62,   159,   239,   240,   543,   544,
   446,   344,   345,   558,   559,   560,   698,   699,   700,   738,
    82,   244,   162,   163,   165,   166,   167,   170,   171,   156,
   157,    63,    64,    65,    66,    67,    68,   390,    79,    70,
   512,   513,   514,   618,   515,   683,   684,    71,   579,   482,
   577,   578,   726,    72,    73,   275,   186,   381,   103,   494,
   495,   196,   280,   610,   281,   612,   282,   613,   398,   399,
   507,   283,   284,   192,   277,   278,   279,   589,   590,   745,
   392,   393,   594,   497,   498,   595,   596,   597,   499,   598,
   714,   766,   715,   767,   716,   768,   501,   502,   746
};

static const short yypact[] = {  1058,
-32768,   282,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    64,-32768,-32768,-32768,-32768,  1571,-32768,-32768,-32768,
-32768,-32768,    18,-32768,  1163,    79,  1367,   191,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   467,-32768,
-32768,    79,    24,   181,   205,-32768,   282,-32768,  1571,  1571,
  1571,-32768,  1571,  1571,  1571,  1571,   197,  1571,-32768,  1571,
  1571,  1571,  1571,  1571,   197,  1571,  1571,  1571,   198,-32768,
   116,   210,-32768,   217,   198,   198,  1571,  1571,  1571,   196,
   158,  1571,  1571,   198,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   170,   177,-32768,-32768,-32768,-32768,-32768,    79,-32768,-32768,
-32768,-32768,-32768,   213,-32768,   262,   297,   826,   278,-32768,
    48,   281,   309,   826,   301,   322,  1571,   310,   317,   332,
   352,   267,   197,   467,   315,   356,  1265,   364,   379,   385,
   316,    31,   389,   409,   278,   362,-32768,-32768,-32768,-32768,
-32768,   380,-32768,-32768,-32768,-32768,   298,   278,   135,-32768,
-32768,-32768,-32768,   826,  1367,-32768,  1571,  1571,  1571,  1571,
  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,  1571,
  1571,  1673,  1673,  1571,   330,   381,  1571,   381,-32768,  1571,
-32768,   147,-32768,  1571,-32768,-32768,-32768,-32768,   408,   278,
  1571,-32768,  1571,   425,  1571,-32768,-32768,-32768,  1571,-32768,
  1571,    79,  1571,   411,-32768,  1571,  1571,-32768,   431,-32768,
  1571,  1571,  1571,-32768,-32768,-32768,  1571,-32768,  1571,-32768,
-32768,   436,   408,-32768,    82,   370,   423,   448,   380,    42,
    42,    42,-32768,-32768,   408,  1571,   394,  1571,  1367,   397,
   826,   539,   445,   351,   419,   517,   324,   324,-32768,   359,
   212,-32768,-32768,   201,   212,   212,   401,   407,   412,  1469,
   516,   432,   433,   439,   442,   516,   355,   467,   443,-32768,
   330,-32768,-32768,   467,   454,   532,   509,   467,   593,   533,
    55,   497,   184,  1571,  1571,  1571,-32768,-32768,   470,   470,
  1571,  1571,-32768,   524,   408,-32768,   501,  1571,-32768,-32768,
-32768,  1571,  1571,-32768,-32768,   322,    79,    79,-32768,   508,
  1571,-32768,-32768,   352,  1367,-32768,   616,   535,   538,-32768,
-32768,-32768,  1367,-32768,   540,-32768,  1571,  1571,   545,   513,
    82,   298,-32768,-32768,-32768,   423,   423,   491,-32768,   796,
   558,-32768,   576,-32768,-32768,-32768,-32768,   494,   519,   504,
   523,   391,-32768,-32768,   826,-32768,-32768,  1571,-32768,-32768,
   510,  1571,   537,  1571,-32768,-32768,   198,-32768,-32768,-32768,
   354,   197,   381,  1571,-32768,-32768,-32768,  1571,-32768,-32768,
-32768,-32768,  1571,  1571,  1571,-32768,-32768,-32768,   533,   573,
-32768,-32768,-32768,-32768,   470,   531,-32768,-32768,-32768,   470,
  1367,  1367,   569,-32768,-32768,  1571,-32768,-32768,   847,   855,
-32768,-32768,  1571,-32768,-32768,   534,-32768,  1571,-32768,-32768,
-32768,-32768,-32768,-32768,   536,-32768,-32768,   627,-32768,-32768,
   197,   121,-32768,   380,   621,   623,    81,   581,   410,  1571,
-32768,   116,-32768,-32768,   255,-32768,-32768,   780,   410,-32768,
   298,-32768,-32768,   423,-32768,-32768,    42,-32768,-32768,   254,
   198,   628,   391,   391,   391,-32768,-32768,-32768,-32768,-32768,
  1469,-32768,   467,   330,   563,    39,-32768,-32768,   467,  1571,
   630,-32768,-32768,-32768,-32768,-32768,-32768,  1571,  1571,  1571,
-32768,  1571,-32768,   470,  1571,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1571,   587,   568,
-32768,-32768,-32768,-32768,-32768,  1571,   636,-32768,-32768,-32768,
-32768,  1571,-32768,  1571,-32768,   566,-32768,   197,   641,   121,
   121,   380,   423,-32768,-32768,-32768,-32768,-32768,   578,    81,
-32768,   259,   597,-32768,-32768,   410,-32768,-32768,-32768,   198,
   300,   294,   370,-32768,-32768,-32768,-32768,   586,-32768,   298,
-32768,   298,   298,-32768,-32768,   611,   617,  1571,   175,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   532,   198,
-32768,-32768,-32768,-32768,   139,   651,   612,-32768,-32768,-32768,
   826,   453,   665,-32768,   658,   666,-32768,   668,-32768,  1571,
-32768,-32768,-32768,-32768,   423,   669,   423,-32768,-32768,   370,
-32768,   625,-32768,-32768,-32768,-32768,   298,   298,   410,   410,
-32768,  1571,-32768,-32768,-32768,   178,   178,   671,   198,   178,
-32768,-32768,   672,   175,-32768,   381,   354,  1571,-32768,-32768,
   198,-32768,-32768,-32768,-32768,-32768,   600,    37,   658,   692,
-32768,   439,-32768,-32768,-32768,   826,-32768,   677,-32768,   678,
-32768,-32768,   370,   423,   423,   423,-32768,-32768,-32768,-32768,
   613,   681,   682,-32768,   198,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    86,   622,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   519,   624,   626,   619,-32768,-32768,
-32768,-32768,-32768,-32768,   692,-32768,-32768,  1571,   423,-32768,
-32768,-32768,-32768,   826,-32768,   298,   298,   298,-32768,-32768,
-32768,-32768,-32768,-32768,   718,   727,-32768
};

static const short yypgoto[] = {-32768,
   673,   -14,-32768,   653,-32768,    60,   405,  -368,   -40,    -1,
  -263,   663,  -222,-32768,  -487,   105,  -296,-32768,   571,   574,
-32768,-32768,-32768,   490,  -282,   334,-32768,-32768,-32768,-32768,
-32768,  -202,   421,  -597,  -399,  -231,-32768,  -358,   305,    58,
   166,  -359,-32768,  -188,-32768,   657,  -122,-32768,  -362,   162,
-32768,   -82,-32768,-32768,-32768,-32768,    51,-32768,    19,     0,
-32768,-32768,   511,-32768,   505,   -90,-32768,   -70,   506,   530,
-32768,   321,    50,  -287,-32768,   131,-32768,    38,   -15,-32768,
   -69,-32768,  -486,  -165,  -423,    83,-32768,-32768,   -58,-32768,
   187,-32768,    43,   696,  -420,-32768,-32768,-32768,  -216,   -34,
   -23,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -249,-32768,
    27,  -532,   -68,  -342,  -414,   498,  -407,   183,-32768,  -250,
   275,-32768,  -346,   283,-32768,  -425,-32768,  -560,-32768,  -341,
-32768,-32768,-32768,-32768,-32768,-32768,   180,   514,  -505
};


#define	YYLAST		1782


static const short yytable[] = {    80,
    81,    83,    84,    85,    86,   328,   406,   104,    87,    88,
    90,    91,    92,    93,    94,    95,    96,   478,   105,    97,
   316,   526,    98,   180,   418,    99,   391,   106,   107,   108,
   109,   400,   401,   191,   112,   113,   114,    69,   631,   519,
   484,   117,   669,   496,   141,   142,     6,   697,   500,     9,
    10,   448,   448,   415,   416,   734,    12,   149,   383,    56,
   420,   580,   273,   425,   426,   268,   199,   200,   201,   583,
   532,     6,   433,   606,   581,   285,   250,   673,    12,   674,
   675,     2,   466,     3,     4,     5,   115,   546,   434,     6,
   475,   102,    69,   181,   241,    12,    12,    42,   269,   712,
    12,   697,   207,   208,   209,   210,    19,   409,   242,   211,
   568,   212,   213,   214,    56,   215,   126,   346,   160,   216,
   217,   218,   219,   220,   221,   160,   526,   224,   225,   226,
   227,   228,   681,   229,   717,   485,   486,   735,   154,   155,
   582,   591,   161,   396,   168,   169,   630,   130,   185,   175,
   176,   496,   744,   169,   197,   198,   500,   448,   356,   580,
   580,   633,   448,   206,   483,   562,   100,   655,   547,   548,
   661,   258,   581,   581,   300,   301,   302,   303,   304,   305,
   306,   640,   586,   587,   151,   363,   286,   695,   696,   329,
   380,   614,   232,   335,    42,   682,   276,   681,   533,   730,
   528,   593,   402,   130,     6,   252,   254,   336,   152,   747,
   748,   593,    12,   130,   478,   334,   679,   337,   436,   339,
   340,   341,   342,   187,   130,   438,   348,   628,   136,   137,
   352,   353,   354,   769,   770,   771,   126,   359,   569,   362,
   104,   288,   202,   718,   719,   680,   511,   615,   370,   371,
   372,   105,   374,   765,   376,   377,   448,   611,   203,   627,
   682,     6,   455,   436,   230,   632,   437,   614,    12,   222,
   438,   314,   314,   231,   321,   326,   223,   326,   131,   132,
   133,   134,   135,   317,   136,   137,   327,   526,   358,   188,
   133,   134,   135,   155,   136,   137,   233,   235,   189,   190,
   347,     6,   384,   135,   161,   136,   137,   419,   593,   385,
   357,   243,   360,   191,   234,   169,   193,   236,   625,   237,
   194,   368,   195,   615,   382,   387,   245,   453,   720,   397,
   397,   397,   656,   238,   458,   248,   329,     6,  -239,   249,
     9,    10,   461,   462,    12,   403,   104,   189,   190,   635,
   467,   637,   315,   315,  -289,   322,   251,   105,  -289,   314,
  -289,     6,   101,   253,     9,    10,   255,   300,   743,   256,
   321,   130,   257,   488,   749,   261,   750,     6,   384,    74,
    75,   593,   593,   143,    12,   385,   189,   190,   516,   721,
   144,   518,   329,   329,   440,    12,   323,   464,   264,   663,
   145,   414,   262,   664,   708,   665,   710,   173,   146,-32768,
   125,   530,   147,   265,    90,   173,   534,     6,   384,   266,
   538,   267,   540,   270,    12,   385,   772,   773,   774,   604,
   382,   271,   607,   121,   122,   123,   124,   125,   563,   493,
   315,   274,   288,   621,   622,   623,   408,   132,   133,   134,
   135,   322,   136,   137,    90,   276,   570,   343,   571,   350,
   573,   510,   511,   729,   575,   366,   524,    12,   689,   449,
   449,   361,   326,   523,   539,   600,   378,     6,   601,   602,
     9,    10,   389,   529,    12,   158,   608,   490,   164,   300,
   535,   536,   158,   173,   394,   143,   177,   329,   404,   329,
   445,   450,   144,   407,   624,   125,   626,   442,  -139,  -290,
   722,   723,   145,  -290,  -138,  -290,   204,   205,    52,  -137,
   146,   653,   654,   659,   147,   638,   120,   121,   122,   123,
   124,   125,   443,   329,   410,   444,   588,   143,   592,   412,
  -134,   642,   313,   313,   144,   320,  -135,   493,   592,  -136,
   417,   322,   422,   421,   145,   424,   397,   435,   454,   617,
   619,   456,   146,   428,   429,   430,   147,   431,   463,   473,
   314,   164,   474,   321,   476,   449,     6,   549,    52,   480,
   449,   178,   179,    12,   550,   182,   183,   184,   670,   481,
   487,   671,   503,   504,   505,   101,   386,   506,   636,   659,
-32768,-32768,   124,   125,   685,   130,   551,   552,   508,   289,
   520,   291,   292,   293,   294,   295,   296,   297,   298,   119,
   120,   121,   122,   123,   124,   125,   310,   310,   691,   509,
   313,   553,   554,   542,   555,   556,   707,   522,   545,   588,
   566,   320,   572,   711,   574,   592,   468,   469,   470,   662,
   471,   315,   668,   164,   322,   584,   322,   585,   490,   447,
   447,   365,   620,   629,   634,     6,   644,   645,     9,    10,
   647,   373,    12,   650,   449,   652,   660,   557,   657,   687,
   427,   132,   133,   134,   135,   672,   136,   137,   739,   740,
   676,   206,   405,   289,   702,   692,   677,   688,   438,   690,
   704,   101,   705,   709,   713,   724,   727,   733,   737,   668,
   492,   741,   742,   751,   310,   752,   753,   776,   592,   592,
   693,   758,   757,   694,   760,   762,   777,   116,   725,   153,
   761,   148,   349,   686,   246,   326,   413,   247,   517,   649,
   732,   320,   527,   541,   174,   451,   452,   731,   702,   736,
   367,   755,   369,   355,   763,   351,   459,   460,   375,   695,
   696,   364,   668,   338,   651,   447,   728,   754,   150,   289,
   447,   759,   658,   561,   725,   703,   395,   289,   609,     0,
   605,   667,   756,     0,     0,     0,     0,     6,   384,   388,
     0,     0,     0,     0,    12,   385,     0,     0,     0,     0,
     0,   576,     0,     6,   384,     0,     0,     0,     0,   492,
    12,   385,     0,     0,     0,     0,   521,   322,   492,   492,
     0,     0,     0,   439,     0,   441,   489,     0,     0,   703,
   616,     0,     0,     0,     0,     0,     0,   457,     0,     0,
     0,   313,   489,     0,   320,     0,   320,     0,     0,     0,
   465,     0,     0,     0,     0,   289,   289,   490,     0,   603,
     0,     0,     0,     0,   447,     0,     0,   479,   189,   190,
     0,     0,     0,   490,     0,     0,     0,     0,     0,  -290,
     0,     0,     0,  -290,     0,  -290,     0,     0,   491,     0,
     0,     0,     0,     0,     0,  -290,     0,     0,   576,  -290,
     0,  -290,     0,     0,   491,   118,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,   492,   531,     0,     0,
     0,     0,   666,   492,   537,   310,   -27,   -27,   -27,   -27,
   -27,   -27,-32768,   125,   -28,   -28,   -28,   -28,   -28,   -28,
-32768,   125,     0,     0,     0,   564,     0,     0,     0,   641,
     0,     0,   565,     0,     0,     0,     0,   567,     0,     0,
     0,     0,     0,     0,     0,   701,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   599,
   492,     0,     0,     0,     0,     0,     0,     0,     0,   492,
   492,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   701,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   639,     0,   492,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   643,     0,     0,
     0,     0,     0,     0,   706,   646,     0,     0,     1,     0,
     2,   648,     3,     4,     5,     6,     7,     8,     9,    10,
     0,    11,    12,    13,     0,     0,   289,     0,     0,    14,
     0,    15,    16,    17,    18,    19,  -245,    20,     0,     0,
     0,     0,     0,  -245,    21,    22,    23,     0,     0,     0,
    24,    25,    26,  -245,     0,    27,    28,   678,    29,     0,
    30,  -245,    31,     0,    32,  -245,    33,    34,     0,    35,
    36,    37,    38,    39,    40,     0,   -11,     0,     0,     0,
    41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    44,     0,     0,    45,    46,     0,     0,    47,     0,    48,
    49,    50,   764,    51,     0,     2,    52,     3,     4,     5,
     6,     7,     8,     9,    10,     0,    11,    12,    13,     0,
     0,     0,     0,     0,    14,     0,    15,    16,    17,    18,
    19,     0,    20,     0,     0,     0,     0,     0,     0,    21,
    22,    23,     0,     0,     0,    24,    25,    26,     0,     0,
    27,    28,     0,    29,     0,    30,     0,    31,     0,    32,
     0,    33,    34,     0,    35,    36,    37,    38,    39,    40,
     0,   -11,     0,     0,     0,    41,    42,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    44,     0,     0,    45,    46,
     0,     0,    47,     0,    48,    49,    50,     0,    51,     0,
     0,    52,     6,     7,     8,     9,    10,     0,    11,    12,
    13,     0,     0,     0,     0,     0,    14,     0,    15,    16,
    17,    18,     0,     0,    20,     0,     0,     0,     0,     0,
     0,    21,    22,    23,     0,     0,     0,    24,    25,    26,
     0,     0,    27,    28,     0,    29,     0,    30,     0,    31,
     0,    32,     0,    33,    34,   263,    35,    36,    37,    38,
    39,    40,     0,     0,     0,     0,     0,    41,     0,    43,
     0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
   124,   125,     0,     0,     0,     0,     0,    44,     0,     0,
    45,    46,     0,     0,    47,     0,    48,    49,    50,     0,
    51,     0,     0,    52,     6,     7,     8,     9,    10,     0,
    11,    12,    13,     0,     0,     0,     0,     0,    14,     0,
    15,    16,    17,    18,     0,     0,    20,     0,     0,     0,
     0,     0,     0,    21,    22,    23,     0,     0,     0,    24,
    25,    26,     0,     0,    27,    28,     0,    29,     0,    30,
     0,    31,     0,    32,     0,    33,    34,     0,    35,    36,
    37,    38,    39,    40,     0,     0,     0,     0,     0,    41,
     0,    43,     0,     0,     0,     0,   118,   119,   120,   121,
   122,   123,   124,   125,     0,     0,     0,     0,     0,    44,
     0,     0,    45,    46,     0,     0,    47,     0,    48,    49,
    50,     0,    51,     0,     0,    52,     6,     7,     8,     9,
    10,     0,    11,    12,    13,     0,     0,     0,     0,     0,
    14,     0,    15,    16,    17,    18,     0,     0,    20,     0,
     0,     0,     0,     0,     0,    21,   307,    23,     0,     0,
     0,    24,    25,    26,     0,     0,    27,    28,     0,    29,
     0,    30,     0,    31,     0,    32,     0,    33,    34,     0,
    35,   308,    37,    38,   309,    40,     0,     0,     0,     0,
     0,    41,     0,    43,     0,     0,     0,     0,   118,   119,
   120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
     0,    44,     0,     0,    45,    46,     0,     0,    47,     0,
    48,    49,    50,     0,    51,     0,     0,    52,     6,     7,
     8,     9,    10,     0,    11,    12,    13,     0,     0,     0,
     0,     0,    14,     0,    15,    16,    17,    18,     0,     0,
    20,     0,     0,     0,     0,     0,     0,    21,    22,    23,
     0,     0,     0,    24,    25,    26,     0,     0,    27,    28,
     0,    29,     0,    30,     0,    31,     0,    32,     0,    33,
    34,     0,    35,    36,    37,    38,    39,    40,     0,     0,
     0,     0,     0,    41,     0,    43,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    44,     0,     0,    45,    46,     0,     0,
    47,     0,    48,    49,    50,     0,    51,     0,     0,    52,
     6,     7,     8,     9,    10,     0,    11,    12,    13,     0,
     0,     0,     0,     0,    14,     0,    15,    16,    17,    18,
     0,     0,    20,     0,     0,     0,     0,     0,     0,    21,
   307,    23,     0,     0,     0,    24,    25,    26,     0,     0,
    27,    28,     0,    29,     0,    30,     0,    31,     0,    32,
     0,    33,    34,     0,    35,   308,    37,    38,   309,    40,
     0,     0,     0,     0,     0,    41,     0,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    44,     0,     0,    45,    46,
     0,     0,    47,     0,    48,    49,    50,     0,    51,     0,
     0,    52
};

static const short yycheck[] = {    15,
    16,    17,    18,    19,    20,   228,   289,    42,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   377,    42,    35,
   223,   421,    38,    94,   321,    41,   277,    43,    44,    45,
    46,   281,   282,   102,    50,    51,    52,     0,   526,   408,
   383,    56,   603,   390,    60,    61,     8,   645,   390,    11,
    12,   339,   340,   317,   318,    19,    15,    72,   275,     0,
   324,   482,   185,   327,   328,    35,   107,   108,   109,   484,
   429,     8,    18,   499,   482,   198,   167,   610,    15,   612,
   613,     3,   365,     5,     6,     7,    69,   450,    34,     8,
   373,    42,    55,    95,    47,    15,    15,    74,    68,   660,
    15,   699,   118,   119,   120,   121,    28,   310,    61,   125,
   469,   127,   128,   129,    55,   131,    57,   240,    81,   135,
   136,   137,   138,   139,   140,    88,   526,   143,   144,   145,
   146,   147,   619,   148,   667,   386,   387,   101,    79,    80,
   483,   488,    83,   102,    85,    86,   108,    13,    99,    90,
    91,   498,   713,    94,   105,   106,   498,   445,   249,   580,
   581,   530,   450,   114,   381,   453,   103,   582,   451,   452,
   596,   173,   580,   581,   215,   216,   217,   218,   219,   220,
   221,   544,   102,   103,     4,   256,   202,   102,   103,   230,
   273,    14,   155,    47,    74,   619,    76,   684,   430,   687,
   423,   489,   285,    13,     8,   168,   169,    61,     4,   715,
   716,   499,    15,    13,   574,   231,    42,   233,    80,   235,
   236,   237,   238,   108,    13,    87,   242,   524,    94,    95,
   246,   247,   248,   766,   767,   768,   177,   252,   470,   255,
   275,   204,    47,   669,   670,    71,    72,    70,   264,   265,
   266,   275,   268,   759,   270,   271,   544,   507,   101,   523,
   684,     8,   345,    80,    52,   529,    83,    14,    15,   100,
    87,   222,   223,    61,   225,   226,   100,   228,    88,    89,
    90,    91,    92,   224,    94,    95,   227,   687,   251,    80,
    90,    91,    92,   234,    94,    95,    35,    20,    89,    90,
   241,     8,     9,    92,   245,    94,    95,   323,   596,    16,
   251,    31,   253,   382,    18,   256,   100,    40,   521,    42,
   104,   262,   106,    70,   275,   276,    18,   343,   671,   280,
   281,   282,   583,    56,   350,    35,   377,     8,    80,    18,
    11,    12,   357,   358,    15,   286,   381,    89,    90,   538,
   366,   540,   222,   223,   100,   225,    47,   381,   104,   310,
   106,     8,    42,    47,    11,    12,    35,   408,   711,    18,
   321,    13,   106,   389,   717,    61,   719,     8,     9,    98,
    99,   669,   670,    29,    15,    16,    89,    90,   404,   672,
    36,   407,   433,   434,   335,    15,    16,   360,    35,   100,
    46,    47,    47,   104,   655,   106,   657,    87,    54,    86,
    87,   427,    58,    35,   430,    95,   432,     8,     9,    35,
   436,   106,   438,    35,    15,    16,   769,   770,   771,   498,
   381,    23,   501,    83,    84,    85,    86,    87,   454,   390,
   310,    80,   405,   513,   514,   515,    88,    89,    90,    91,
    92,   321,    94,    95,   470,    76,   472,    50,   474,    35,
   476,    71,    72,   686,   480,    35,   417,    15,    16,   339,
   340,    61,   423,   414,   437,   491,    41,     8,   494,   495,
    11,    12,    60,   424,    15,    81,   502,    78,    84,   530,
   433,   434,    88,   173,    47,    29,    92,   538,   105,   540,
   339,   340,    36,   107,   520,    87,   522,    38,   108,   100,
   676,   677,    46,   104,   108,   106,   112,   113,   109,   108,
    54,   580,   581,   592,    58,   541,    82,    83,    84,    85,
    86,    87,    63,   574,    19,    66,   487,    29,   489,   108,
   108,   557,   222,   223,    36,   225,   108,   498,   499,   108,
   108,   421,    21,   100,    46,    47,   507,    61,    35,   510,
   511,    61,    54,    31,    32,    33,    58,    35,    61,    35,
   521,   167,    35,   524,    35,   445,     8,     9,   109,    35,
   450,    92,    93,    15,    16,    96,    97,    98,   604,    77,
   100,   607,    35,    18,   101,   275,   276,    79,   539,   668,
    84,    85,    86,    87,   620,    13,    38,    39,   105,   205,
   101,   207,   208,   209,   210,   211,   212,   213,   214,    81,
    82,    83,    84,    85,    86,    87,   222,   223,   644,   107,
   310,    63,    64,    61,    66,    67,   652,   101,   108,   590,
   107,   321,   107,   659,    18,   596,    31,    32,    33,   600,
    35,   521,   603,   249,   524,    35,   526,    35,    78,   339,
   340,   257,    35,   101,    35,     8,    80,   100,    11,    12,
    35,   267,    15,   108,   544,    35,    80,   109,   101,   630,
    88,    89,    90,    91,    92,   100,    94,    95,   704,   705,
    80,   642,   288,   289,   645,    38,    80,    47,    87,    35,
    35,   381,    35,    35,    80,    35,    35,   108,    17,   660,
   390,    35,    35,   101,   310,    35,    35,     0,   669,   670,
    63,   737,   101,    66,   101,   107,     0,    55,   679,    77,
   105,    69,   243,   629,   164,   686,   316,   164,   405,   574,
   691,   421,   422,   439,    88,   341,   342,   688,   699,   699,
   261,   733,   263,   249,   755,   245,   352,   353,   269,   102,
   103,   256,   713,   234,   578,   445,   684,   725,    73,   365,
   450,   745,   590,   453,   725,   645,   279,   373,   504,    -1,
   498,   602,   733,    -1,    -1,    -1,    -1,     8,     9,   276,
    -1,    -1,    -1,    -1,    15,    16,    -1,    -1,    -1,    -1,
    -1,   481,    -1,     8,     9,    -1,    -1,    -1,    -1,   489,
    15,    16,    -1,    -1,    -1,    -1,   412,   687,   498,   499,
    -1,    -1,    -1,   334,    -1,   336,    47,    -1,    -1,   699,
   510,    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,    -1,
    -1,   521,    47,    -1,   524,    -1,   526,    -1,    -1,    -1,
   361,    -1,    -1,    -1,    -1,   451,   452,    78,    -1,    80,
    -1,    -1,    -1,    -1,   544,    -1,    -1,   378,    89,    90,
    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,   100,
    -1,    -1,    -1,   104,    -1,   106,    -1,    -1,   109,    -1,
    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,   578,   104,
    -1,   106,    -1,    -1,   109,    80,    81,    82,    83,    84,
    85,    86,    87,    -1,    -1,    -1,   596,   428,    -1,    -1,
    -1,    -1,   602,   603,   435,   521,    80,    81,    82,    83,
    84,    85,    86,    87,    80,    81,    82,    83,    84,    85,
    86,    87,    -1,    -1,    -1,   456,    -1,    -1,    -1,   545,
    -1,    -1,   463,    -1,    -1,    -1,    -1,   468,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   645,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
   660,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   669,
   670,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   699,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   542,    -1,   713,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   558,    -1,    -1,
    -1,    -1,    -1,    -1,   650,   566,    -1,    -1,     1,    -1,
     3,   572,     5,     6,     7,     8,     9,    10,    11,    12,
    -1,    14,    15,    16,    -1,    -1,   672,    -1,    -1,    22,
    -1,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
    -1,    -1,    -1,    36,    37,    38,    39,    -1,    -1,    -1,
    43,    44,    45,    46,    -1,    48,    49,   618,    51,    -1,
    53,    54,    55,    -1,    57,    58,    59,    60,    -1,    62,
    63,    64,    65,    66,    67,    -1,    69,    -1,    -1,    -1,
    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,   102,
   103,   104,   758,   106,    -1,     3,   109,     5,     6,     7,
     8,     9,    10,    11,    12,    -1,    14,    15,    16,    -1,
    -1,    -1,    -1,    -1,    22,    -1,    24,    25,    26,    27,
    28,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    39,    -1,    -1,    -1,    43,    44,    45,    -1,    -1,
    48,    49,    -1,    51,    -1,    53,    -1,    55,    -1,    57,
    -1,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
    -1,    69,    -1,    -1,    -1,    73,    74,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    97,
    -1,    -1,   100,    -1,   102,   103,   104,    -1,   106,    -1,
    -1,   109,     8,     9,    10,    11,    12,    -1,    14,    15,
    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,    24,    25,
    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,
    -1,    37,    38,    39,    -1,    -1,    -1,    43,    44,    45,
    -1,    -1,    48,    49,    -1,    51,    -1,    53,    -1,    55,
    -1,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    -1,    -1,    -1,    -1,    -1,    73,    -1,    75,
    -1,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
    86,    87,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,
    96,    97,    -1,    -1,   100,    -1,   102,   103,   104,    -1,
   106,    -1,    -1,   109,     8,     9,    10,    11,    12,    -1,
    14,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,
    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,    43,
    44,    45,    -1,    -1,    48,    49,    -1,    51,    -1,    53,
    -1,    55,    -1,    57,    -1,    59,    60,    -1,    62,    63,
    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    73,
    -1,    75,    -1,    -1,    -1,    -1,    80,    81,    82,    83,
    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    93,
    -1,    -1,    96,    97,    -1,    -1,   100,    -1,   102,   103,
   104,    -1,   106,    -1,    -1,   109,     8,     9,    10,    11,
    12,    -1,    14,    15,    16,    -1,    -1,    -1,    -1,    -1,
    22,    -1,    24,    25,    26,    27,    -1,    -1,    30,    -1,
    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,
    -1,    43,    44,    45,    -1,    -1,    48,    49,    -1,    51,
    -1,    53,    -1,    55,    -1,    57,    -1,    59,    60,    -1,
    62,    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
    -1,    73,    -1,    75,    -1,    -1,    -1,    -1,    80,    81,
    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
    -1,    93,    -1,    -1,    96,    97,    -1,    -1,   100,    -1,
   102,   103,   104,    -1,   106,    -1,    -1,   109,     8,     9,
    10,    11,    12,    -1,    14,    15,    16,    -1,    -1,    -1,
    -1,    -1,    22,    -1,    24,    25,    26,    27,    -1,    -1,
    30,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
    -1,    -1,    -1,    43,    44,    45,    -1,    -1,    48,    49,
    -1,    51,    -1,    53,    -1,    55,    -1,    57,    -1,    59,
    60,    -1,    62,    63,    64,    65,    66,    67,    -1,    -1,
    -1,    -1,    -1,    73,    -1,    75,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    93,    -1,    -1,    96,    97,    -1,    -1,
   100,    -1,   102,   103,   104,    -1,   106,    -1,    -1,   109,
     8,     9,    10,    11,    12,    -1,    14,    15,    16,    -1,
    -1,    -1,    -1,    -1,    22,    -1,    24,    25,    26,    27,
    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    39,    -1,    -1,    -1,    43,    44,    45,    -1,    -1,
    48,    49,    -1,    51,    -1,    53,    -1,    55,    -1,    57,
    -1,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
    -1,    -1,    -1,    -1,    -1,    73,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    97,
    -1,    -1,   100,    -1,   102,   103,   104,    -1,   106,    -1,
    -1,   109
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 368 "parser.yy"
{ yyoutput = yyvsp[-1].t; YYACCEPT; ;
    break;}
case 2:
#line 370 "parser.yy"
{ yyoutput = OZ_atom("parseError"); YYABORT; ;
    break;}
case 3:
#line 374 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 4:
#line 376 "parser.yy"
{ yyval.t = consList(newCTerm("fSynTopLevelProductionTemplates",
					   yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 5:
#line 379 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 6:
#line 381 "parser.yy"
{ yyval.t = consList(newCTerm("fFunctor",newCTerm("fDollar",yyvsp[-2].t),
					   yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 7:
#line 386 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 8:
#line 388 "parser.yy"
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-3].t,newCTerm("fSkip",yyvsp[-1].t),
					   yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 9:
#line 391 "parser.yy"
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 10:
#line 393 "parser.yy"
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-2].t,
					   newCTerm("fSkip",yyvsp[-1].t),yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 11:
#line 396 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 12:
#line 400 "parser.yy"
{ yyval.t = newCTerm("dirSwitch",yyvsp[0].t); ;
    break;}
case 13:
#line 402 "parser.yy"
{ yyval.t = newCTerm("dirLocalSwitches"); ;
    break;}
case 14:
#line 404 "parser.yy"
{ yyval.t = newCTerm("dirPushSwitches"); ;
    break;}
case 15:
#line 406 "parser.yy"
{ yyval.t = newCTerm("dirPopSwitches"); ;
    break;}
case 16:
#line 410 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 17:
#line 412 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 18:
#line 416 "parser.yy"
{ if (!strcmp(xytext,"gump"))
		      xy_gumpSyntax = 1;
		    if (!strcmp(xytext,"allowdeprecated"))
		      xy_allowDeprecated = 1;
		    yyval.t = newCTerm("on",newCTerm(xytext),pos());
		  ;
    break;}
case 19:
#line 423 "parser.yy"
{ if (!strcmp(xytext,"gump"))
		      xy_gumpSyntax = 0;
		    if (!strcmp(xytext,"allowdeprecated"))
		      xy_allowDeprecated = 0;
		    yyval.t = newCTerm("off",newCTerm(xytext),pos());
		  ;
    break;}
case 20:
#line 432 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 21:
#line 434 "parser.yy"
{ yyval.t = newCTerm("fAnd",yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 22:
#line 438 "parser.yy"
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 23:
#line 440 "parser.yy"
{ yyval.t = newCTerm("fAssign",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 24:
#line 442 "parser.yy"
{ yyval.t = newCTerm("fOrElse",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 25:
#line 444 "parser.yy"
{ yyval.t = newCTerm("fAndThen",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 26:
#line 446 "parser.yy"
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 27:
#line 449 "parser.yy"
{ yyval.t = newCTerm("fFdCompare",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 28:
#line 451 "parser.yy"
{ yyval.t = newCTerm("fFdIn",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 29:
#line 453 "parser.yy"
{ yyval.t = makeCons(yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 30:
#line 455 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 31:
#line 457 "parser.yy"
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("#"),yyvsp[-1].t),
				  consList(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 32:
#line 463 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 33:
#line 465 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 34:
#line 469 "parser.yy"
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 35:
#line 472 "parser.yy"
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 36:
#line 475 "parser.yy"
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 37:
#line 478 "parser.yy"
{ yyval.t = newCTerm("fObjApply",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 38:
#line 480 "parser.yy"
{ yyval.t = newCTerm("fOpApply",newCTerm("~"),
				  consList(yyvsp[0].t,nilAtom),yyvsp[-1].t); ;
    break;}
case 39:
#line 483 "parser.yy"
{ yyval.t = newCTerm("fOpApply",newCTerm("."),
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 40:
#line 486 "parser.yy"
{ yyval.t = newCTerm("fOpApply",newCTerm("."),
				  consList(yyvsp[-1].t,consList(makeInt(xytext,pos()),
						       nilAtom)),pos()); ;
    break;}
case 41:
#line 490 "parser.yy"
{ yyval.t = newCTerm("fOpApply",newCTerm("^"),
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 42:
#line 493 "parser.yy"
{ yyval.t = newCTerm("fAt",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 43:
#line 495 "parser.yy"
{ yyval.t = newCTerm("fOpApply",newCTerm("!!"),
				  consList(yyvsp[0].t,nilAtom),yyvsp[-1].t); ;
    break;}
case 44:
#line 498 "parser.yy"
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 45:
#line 500 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 46:
#line 502 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 47:
#line 504 "parser.yy"
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 48:
#line 506 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 49:
#line 508 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 50:
#line 510 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 51:
#line 512 "parser.yy"
{ yyval.t = newCTerm("fSelf",pos()); ;
    break;}
case 52:
#line 514 "parser.yy"
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 53:
#line 516 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 54:
#line 518 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 55:
#line 520 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 56:
#line 522 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 57:
#line 524 "parser.yy"
{ yyval.t = newCTerm("fRecord",newCTerm("fAtom",newCTerm("|"),
						     makeLongPos(yyvsp[-4].t,yyvsp[0].t)),
				  consList(yyvsp[-3].t,consList(yyvsp[-2].t,nilAtom))); ;
    break;}
case 58:
#line 528 "parser.yy"
{ yyval.t = newCTerm("fApply",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 59:
#line 531 "parser.yy"
{ yyval.t = newCTerm("fProc",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-7].t,makeLongPos(yyvsp[-8].t,yyvsp[0].t)); ;
    break;}
case 60:
#line 534 "parser.yy"
{ yyval.t = newCTerm("fFun",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-7].t,makeLongPos(yyvsp[-8].t,yyvsp[0].t)); ;
    break;}
case 61:
#line 536 "parser.yy"
{ yyval.t = newCTerm("fFunctor",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 62:
#line 538 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 63:
#line 540 "parser.yy"
{ yyval.t = newCTerm("fLocal",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t); ;
    break;}
case 64:
#line 542 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 65:
#line 544 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 66:
#line 546 "parser.yy"
{ yyval.t = newCTerm("fLock",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 67:
#line 548 "parser.yy"
{ yyval.t = newCTerm("fLockThen",yyvsp[-4].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 68:
#line 550 "parser.yy"
{ yyval.t = newCTerm("fThread",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 69:
#line 552 "parser.yy"
{ yyval.t = newCTerm("fTry",yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 70:
#line 554 "parser.yy"
{ yyval.t = newCTerm("fRaise",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 71:
#line 556 "parser.yy"
{ yyval.t = newCTerm("fRaiseWith",yyvsp[-4].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 72:
#line 558 "parser.yy"
{ yyval.t = newCTerm("fSkip",pos()); ;
    break;}
case 73:
#line 560 "parser.yy"
{ yyval.t = newCTerm("fFail",pos()); ;
    break;}
case 74:
#line 562 "parser.yy"
{ yyval.t = newCTerm("fNot",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 75:
#line 564 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 76:
#line 566 "parser.yy"
{ yyval.t = newCTerm("fOr",yyvsp[-2].t,newCTerm("for"),
				  makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 77:
#line 569 "parser.yy"
{ yyval.t = newCTerm("fOr",yyvsp[-2].t,newCTerm("fdis"),
				  makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 78:
#line 572 "parser.yy"
{ yyval.t = newCTerm("fOr",yyvsp[-2].t,newCTerm("fchoice"),
				  makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 79:
#line 575 "parser.yy"
{ yyval.t = newCTerm("fCondis",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 80:
#line 577 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 81:
#line 579 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 82:
#line 583 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 83:
#line 585 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 84:
#line 590 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 85:
#line 592 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 86:
#line 597 "parser.yy"
{ yyval.t = consList(newCTerm("fRequire",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 87:
#line 599 "parser.yy"
{ yyval.t = consList(newCTerm("fPrepare",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 88:
#line 601 "parser.yy"
{ yyval.t = consList(newCTerm("fPrepare",yyvsp[-1].t,
					   newCTerm("fSkip",yyvsp[-2].t),yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 89:
#line 604 "parser.yy"
{ yyval.t = consList(newCTerm("fImport",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 90:
#line 606 "parser.yy"
{ yyval.t = consList(newCTerm("fExport",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 91:
#line 608 "parser.yy"
{ yyval.t = consList(newCTerm("fDefine",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 92:
#line 610 "parser.yy"
{ yyval.t = consList(newCTerm("fDefine",yyvsp[-1].t,
					   newCTerm("fSkip",yyvsp[-2].t),yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 93:
#line 615 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 94:
#line 617 "parser.yy"
{ yyval.t = consList(newCTerm("fImportItem",yyvsp[-2].t,nilAtom,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 95:
#line 619 "parser.yy"
{ yyval.t = consList(newCTerm("fImportItem",yyvsp[-5].t,yyvsp[-3].t,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 96:
#line 623 "parser.yy"
{ yyval.t = newCTerm("fVar",OZ_atom(xytext),yyvsp[0].t); ;
    break;}
case 97:
#line 627 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 98:
#line 629 "parser.yy"
{ yyval.t = consList(pair(yyvsp[0].t,yyvsp[-2].t),nilAtom); ;
    break;}
case 99:
#line 631 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 100:
#line 633 "parser.yy"
{ yyval.t = consList(pair(yyvsp[-1].t,yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 101:
#line 637 "parser.yy"
{ yyval.t = newCTerm("fNoImportAt"); ;
    break;}
case 102:
#line 639 "parser.yy"
{ yyval.t = newCTerm("fImportAt",yyvsp[0].t); ;
    break;}
case 103:
#line 643 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 104:
#line 645 "parser.yy"
{ yyval.t = consList(newCTerm("fExportItem",yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 105:
#line 647 "parser.yy"
{ yyval.t = consList(newCTerm("fExportItem",
					   newCTerm("fColon",yyvsp[-3].t,yyvsp[-1].t)),yyvsp[0].t); ;
    break;}
case 106:
#line 652 "parser.yy"
{ yyval.t = newCTerm(xytext); ;
    break;}
case 107:
#line 656 "parser.yy"
{ yyval.t = newCTerm(xytext); ;
    break;}
case 108:
#line 660 "parser.yy"
{ yyval.t = newCTerm(xytext); ;
    break;}
case 109:
#line 664 "parser.yy"
{ yyval.t = newCTerm(xytext); ;
    break;}
case 110:
#line 668 "parser.yy"
{ yyval.t = newCTerm(xytext); ;
    break;}
case 111:
#line 672 "parser.yy"
{ yyval.t = newCTerm(xytext); ;
    break;}
case 112:
#line 676 "parser.yy"
{ yyval.t = newCTerm("fLocal",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 113:
#line 678 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 114:
#line 682 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 115:
#line 684 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 116:
#line 688 "parser.yy"
{ yyval.t = newCTerm("fAtom",nilAtom,yyvsp[0].t); ;
    break;}
case 117:
#line 690 "parser.yy"
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("|"),yyvsp[-2].t),
				  consList(yyvsp[-1].t,consList(yyvsp[0].t,nilAtom))); ;
    break;}
case 118:
#line 696 "parser.yy"
{ yyval.t = newCTerm("fNoCatch"); ;
    break;}
case 119:
#line 698 "parser.yy"
{ yyval.t = newCTerm("fCatch",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 120:
#line 702 "parser.yy"
{ yyval.t = newCTerm("fNoFinally"); ;
    break;}
case 121:
#line 704 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 122:
#line 708 "parser.yy"
{
		    yyval.t = newCTerm(OZ_isTrue(yyvsp[-2].t)? "fOpenRecord": "fRecord",
				  newCTerm("fAtom",yyvsp[-6].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)),yyvsp[-3].t);
		  ;
    break;}
case 123:
#line 713 "parser.yy"
{
		    yyval.t = newCTerm(OZ_isTrue(yyvsp[-2].t)? "fOpenRecord": "fRecord",
				  makeVar(yyvsp[-6].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)),yyvsp[-3].t);
		  ;
    break;}
case 124:
#line 720 "parser.yy"
{ yyval.t = OZ_atom(xytext); ;
    break;}
case 125:
#line 722 "parser.yy"
{ yyval.t = OZ_unit(); ;
    break;}
case 126:
#line 724 "parser.yy"
{ yyval.t = OZ_true(); ;
    break;}
case 127:
#line 726 "parser.yy"
{ yyval.t = OZ_false(); ;
    break;}
case 128:
#line 730 "parser.yy"
{ yyval.t = OZ_atom(xytext); ;
    break;}
case 129:
#line 734 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 130:
#line 736 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 131:
#line 738 "parser.yy"
{ yyval.t = consList(newCTerm("fColon",yyvsp[-3].t,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 132:
#line 742 "parser.yy"
{ yyval.t = OZ_false(); ;
    break;}
case 133:
#line 744 "parser.yy"
{ yyval.t = OZ_true(); ;
    break;}
case 134:
#line 748 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 135:
#line 750 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 136:
#line 752 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 137:
#line 754 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 138:
#line 756 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 139:
#line 758 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 140:
#line 762 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 141:
#line 764 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 142:
#line 768 "parser.yy"
{ yyval.t = newCTerm("fBoolCase",yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 143:
#line 772 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 144:
#line 774 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 145:
#line 776 "parser.yy"
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 146:
#line 778 "parser.yy"
{ yyval.t = newCTerm("fSkip",pos()); ;
    break;}
case 147:
#line 782 "parser.yy"
{ checkDeprecation(yyvsp[-3].t);
		    yyval.t = newCTerm("fBoolCase",yyvsp[-5].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-6].t,yyvsp[0].t));
		  ;
    break;}
case 148:
#line 786 "parser.yy"
{ yyval.t = newCTerm("fCase",yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 149:
#line 790 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 150:
#line 792 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 151:
#line 794 "parser.yy"
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 152:
#line 796 "parser.yy"
{ yyval.t = newCTerm("fNoElse",pos()); ;
    break;}
case 153:
#line 800 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 154:
#line 802 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 155:
#line 804 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 156:
#line 808 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 157:
#line 810 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 158:
#line 814 "parser.yy"
{ yyval.t = newCTerm("fCaseClause",yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 159:
#line 818 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 160:
#line 820 "parser.yy"
{ yyval.t = newCTerm("fSideCondition",yyvsp[-3].t,
				  newCTerm("fSkip",yyvsp[-1].t),yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 161:
#line 823 "parser.yy"
{ yyval.t = newCTerm("fSideCondition",yyvsp[-5].t,yyvsp[-2].t,yyvsp[0].t,yyvsp[-3].t); ;
    break;}
case 162:
#line 827 "parser.yy"
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 163:
#line 829 "parser.yy"
{ yyval.t = makeCons(yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 164:
#line 831 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 165:
#line 833 "parser.yy"
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("#"),yyvsp[-1].t),
				  consList(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 166:
#line 840 "parser.yy"
{ yyval.t = newCTerm("fClass",yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 167:
#line 844 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 168:
#line 846 "parser.yy"
{ yyval.t = newCTerm("fDollar",yyvsp[0].t); ;
    break;}
case 169:
#line 851 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 170:
#line 853 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 171:
#line 857 "parser.yy"
{ yyval.t = newCTerm("fFrom",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 172:
#line 859 "parser.yy"
{ yyval.t = newCTerm("fAttr",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 173:
#line 861 "parser.yy"
{ yyval.t = newCTerm("fFeat",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 174:
#line 863 "parser.yy"
{ yyval.t = newCTerm("fProp",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 175:
#line 867 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 176:
#line 869 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 177:
#line 873 "parser.yy"
{ yyval.t = pair(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 178:
#line 875 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 179:
#line 879 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 180:
#line 881 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 181:
#line 883 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 182:
#line 885 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 183:
#line 887 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 184:
#line 889 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 185:
#line 893 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 186:
#line 895 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 187:
#line 899 "parser.yy"
{ yyval.t = newCTerm("fMeth",yyvsp[-2].t,yyvsp[-1].t,yyvsp[-3].t); ;
    break;}
case 188:
#line 903 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 189:
#line 905 "parser.yy"
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 190:
#line 909 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 191:
#line 911 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 192:
#line 913 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 193:
#line 915 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 194:
#line 917 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 195:
#line 919 "parser.yy"
{ yyval.t = newCTerm("fRecord",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 196:
#line 921 "parser.yy"
{ yyval.t = newCTerm("fOpenRecord",yyvsp[-4].t,yyvsp[-2].t); ;
    break;}
case 197:
#line 925 "parser.yy"
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 198:
#line 927 "parser.yy"
{ yyval.t = makeVar(xytext); ;
    break;}
case 199:
#line 929 "parser.yy"
{ yyval.t = newCTerm("fEscape",makeVar(xytext),yyvsp[-1].t); ;
    break;}
case 200:
#line 931 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 201:
#line 933 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 202:
#line 935 "parser.yy"
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 203:
#line 939 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 204:
#line 941 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 205:
#line 945 "parser.yy"
{ yyval.t = newCTerm("fMethArg",yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 206:
#line 947 "parser.yy"
{ yyval.t = newCTerm("fMethColonArg",yyvsp[-3].t,yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 207:
#line 951 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 208:
#line 953 "parser.yy"
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 209:
#line 955 "parser.yy"
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 210:
#line 960 "parser.yy"
{ yyval.t = newCTerm("fDefault",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 211:
#line 962 "parser.yy"
{ yyval.t = newCTerm("fNoDefault"); ;
    break;}
case 212:
#line 966 "parser.yy"
{ yyval.t = newCTerm("fCond",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 213:
#line 970 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 214:
#line 972 "parser.yy"
{ yyval.t = newCTerm("fNoElse",pos()); ;
    break;}
case 215:
#line 976 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 216:
#line 978 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 217:
#line 982 "parser.yy"
{ yyval.t = newCTerm("fClause",newCTerm("fSkip",yyvsp[-1].t),yyvsp[-3].t,yyvsp[0].t); ;
    break;}
case 218:
#line 984 "parser.yy"
{ yyval.t = newCTerm("fClause",yyvsp[-4].t,yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 219:
#line 988 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,consList(yyvsp[0].t,nilAtom)); ;
    break;}
case 220:
#line 990 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 221:
#line 994 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 222:
#line 996 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 223:
#line 1000 "parser.yy"
{ yyval.t = newCTerm("fFdCompare",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 224:
#line 1002 "parser.yy"
{ yyval.t = newCTerm("fFdIn",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 225:
#line 1006 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,consList(yyvsp[0].t,nilAtom)); ;
    break;}
case 226:
#line 1008 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 227:
#line 1012 "parser.yy"
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[0].t),
				  yyvsp[-1].t,newCTerm("fNoThen",yyvsp[0].t)); ;
    break;}
case 228:
#line 1016 "parser.yy"
{ yyval.t = newCTerm("fClause",yyvsp[-3].t,yyvsp[-1].t,newCTerm("fNoThen",yyvsp[0].t)); ;
    break;}
case 229:
#line 1018 "parser.yy"
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[-2].t),yyvsp[-3].t,yyvsp[0].t); ;
    break;}
case 230:
#line 1021 "parser.yy"
{ yyval.t = newCTerm("fClause",yyvsp[-4].t,yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 231:
#line 1025 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 232:
#line 1027 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 233:
#line 1031 "parser.yy"
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[0].t),
				  newCTerm("fSkip",yyvsp[0].t),
				  yyvsp[-1].t); ;
    break;}
case 234:
#line 1036 "parser.yy"
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[-2].t),
				  newCTerm("fSkip",yyvsp[-2].t),
				  newCTerm("fLocal",yyvsp[-3].t,yyvsp[0].t,yyvsp[-2].t)); ;
    break;}
case 235:
#line 1041 "parser.yy"
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[-2].t),yyvsp[-3].t,yyvsp[0].t); ;
    break;}
case 236:
#line 1044 "parser.yy"
{ yyval.t = newCTerm("fClause",yyvsp[-5].t,yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 237:
#line 1048 "parser.yy"
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 238:
#line 1052 "parser.yy"
{ yyval.t = makeVar(xytext); ;
    break;}
case 239:
#line 1056 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 240:
#line 1058 "parser.yy"
{ yyval.t = newCTerm("fEscape",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 241:
#line 1062 "parser.yy"
{ yyval.t = makeString(xytext,pos()); ;
    break;}
case 242:
#line 1066 "parser.yy"
{ yyval.t = makeInt(xytext,pos()); ;
    break;}
case 243:
#line 1068 "parser.yy"
{ yyval.t = makeInt(xytext[0],pos()); ;
    break;}
case 244:
#line 1072 "parser.yy"
{ yyval.t = newCTerm("fFloat",OZ_CStringToFloat(xytext),pos()); ;
    break;}
case 245:
#line 1076 "parser.yy"
{ yyval.t = pos(); ;
    break;}
case 246:
#line 1080 "parser.yy"
{ yyval.t = pos(); ;
    break;}
case 247:
#line 1091 "parser.yy"
{ OZ_Term prefix =
		      scannerPrefix? scannerPrefix: OZ_atom("zy");
		    yyval.t = newCTerm("fScanner",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,prefix,
				  makeLongPos(yyvsp[-6].t,yyvsp[0].t)); ;
    break;}
case 248:
#line 1098 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 249:
#line 1100 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 250:
#line 1102 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 251:
#line 1104 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 252:
#line 1106 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 253:
#line 1108 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 254:
#line 1112 "parser.yy"
{ yyval.t = newCTerm("fLexicalAbbreviation",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 255:
#line 1114 "parser.yy"
{ yyval.t = newCTerm("fLexicalAbbreviation",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 256:
#line 1118 "parser.yy"
{ yyval.t = newCTerm("fLexicalRule",yyvsp[-2].t,yyvsp[-1].t); ;
    break;}
case 257:
#line 1122 "parser.yy"
{ yyval.t = OZ_string(xytext); ;
    break;}
case 258:
#line 1124 "parser.yy"
{ yyval.t = OZ_string(xytext); ;
    break;}
case 259:
#line 1128 "parser.yy"
{ yyval.t = newCTerm("fMode",yyvsp[-2].t,yyvsp[-1].t); ;
    break;}
case 260:
#line 1132 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 261:
#line 1134 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 262:
#line 1138 "parser.yy"
{ yyval.t = newCTerm("fInheritedModes",yyvsp[0].t); ;
    break;}
case 263:
#line 1140 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 264:
#line 1142 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 265:
#line 1150 "parser.yy"
{ OZ_Term expect = parserExpect? parserExpect: OZ_int(0);
		    yyval.t = newCTerm("fParser",yyvsp[-6].t,yyvsp[-5].t,yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,expect,
				  makeLongPos(yyvsp[-7].t,yyvsp[0].t)); ;
    break;}
case 266:
#line 1156 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 267:
#line 1158 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 268:
#line 1160 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 269:
#line 1162 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 270:
#line 1166 "parser.yy"
{ yyval.t = newCTerm("fToken",nilAtom); ;
    break;}
case 271:
#line 1168 "parser.yy"
{ yyval.t = newCTerm("fToken",yyvsp[0].t); ;
    break;}
case 272:
#line 1172 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 273:
#line 1174 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 274:
#line 1178 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 275:
#line 1180 "parser.yy"
{ yyval.t = pair(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 276:
#line 1184 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 277:
#line 1186 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 278:
#line 1190 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 279:
#line 1192 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 280:
#line 1196 "parser.yy"
{ *prodKey[depth]++ = '='; ;
    break;}
case 281:
#line 1198 "parser.yy"
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,yyvsp[-7].t); ;
    break;}
case 282:
#line 1199 "parser.yy"
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 283:
#line 1200 "parser.yy"
{ *prodKey[depth]++ = '='; ;
    break;}
case 284:
#line 1202 "parser.yy"
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,yyvsp[-7].t); ;
    break;}
case 285:
#line 1204 "parser.yy"
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,newCTerm("none")); ;
    break;}
case 286:
#line 1208 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,nilAtom); ;
    break;}
case 287:
#line 1210 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,nilAtom); ;
    break;}
case 288:
#line 1212 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 291:
#line 1220 "parser.yy"
{ prodName[depth] = OZ_string(OZ_atomToC(OZ_getArg(yyvsp[-1].t,0))); ;
    break;}
case 292:
#line 1223 "parser.yy"
{ *prodKey[depth]++ = '('; depth++; ;
    break;}
case 293:
#line 1224 "parser.yy"
{ depth--; ;
    break;}
case 294:
#line 1224 "parser.yy"
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 295:
#line 1225 "parser.yy"
{ *prodKey[depth]++ = '['; depth++; ;
    break;}
case 296:
#line 1226 "parser.yy"
{ depth--; ;
    break;}
case 297:
#line 1226 "parser.yy"
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 298:
#line 1227 "parser.yy"
{ *prodKey[depth]++ = '{'; depth++; ;
    break;}
case 299:
#line 1228 "parser.yy"
{ depth--; ;
    break;}
case 300:
#line 1228 "parser.yy"
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 301:
#line 1232 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 302:
#line 1234 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 303:
#line 1237 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 304:
#line 1238 "parser.yy"
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 305:
#line 1242 "parser.yy"
{ *prodKey[depth - 1]++ = '/'; *prodKey[depth - 1]++ = '/'; ;
    break;}
case 308:
#line 1249 "parser.yy"
{ *prodKey[depth]++ = xytext[0]; ;
    break;}
case 309:
#line 1250 "parser.yy"
{ *prodKey[depth]++ = xytext[0]; ;
    break;}
case 310:
#line 1254 "parser.yy"
{ *prodKey[depth] = '\0';
		    yyval.t = pair(prodName[depth],OZ_string(prodKeyBuffer[depth]));
		    prodName[depth] = newCTerm("none");
		    prodKey[depth] = prodKeyBuffer[depth];
		  ;
    break;}
case 311:
#line 1262 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 312:
#line 1264 "parser.yy"
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 313:
#line 1268 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 314:
#line 1270 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 315:
#line 1274 "parser.yy"
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-2].t,nilAtom,yyvsp[-1].t); ;
    break;}
case 316:
#line 1276 "parser.yy"
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-2].t,nilAtom,yyvsp[-1].t); ;
    break;}
case 317:
#line 1278 "parser.yy"
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-5].t,yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 318:
#line 1282 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 319:
#line 1284 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 320:
#line 1288 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 321:
#line 1290 "parser.yy"
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 322:
#line 1292 "parser.yy"
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 323:
#line 1296 "parser.yy"
{ yyval.t = newCTerm("fSynAlternative", yyvsp[0].t); ;
    break;}
case 324:
#line 1300 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 325:
#line 1302 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 326:
#line 1306 "parser.yy"
{ OZ_Term t = yyvsp[0].t;
		    while (terms[depth]) {
		      t = consList(newCTerm("fSynApplication", terms[depth]->term, nilAtom), t);
		      TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		    }
		    yyval.t = newCTerm("fSynSequence", decls[depth], t, yyvsp[-1].t);
		    decls[depth] = nilAtom;
		  ;
    break;}
case 327:
#line 1315 "parser.yy"
{ yyval.t = newCTerm("fSynSequence", nilAtom, yyvsp[0].t, yyvsp[-1].t); ;
    break;}
case 328:
#line 1319 "parser.yy"
{ yyval.t = nilAtom; ;
    break;}
case 329:
#line 1321 "parser.yy"
{ yyval.t = consList(newCTerm("fSynAction",yyvsp[0].t),nilAtom); ;
    break;}
case 330:
#line 1325 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 331:
#line 1327 "parser.yy"
{ yyval.t = consList(newCTerm("fSynTemplateInstantiation", yyvsp[0].t,
					   consList(newCTerm("fSynApplication",
							     terms[depth]->term,
							     nilAtom),
						    nilAtom),
					   yyvsp[-2].t),
				  yyvsp[-1].t);
		    TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		  ;
    break;}
case 332:
#line 1337 "parser.yy"
{ yyval.t = consList(newCTerm("fSynAssignment", terms[depth]->term, yyvsp[-1].t),
				  yyvsp[0].t);
		    TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		  ;
    break;}
case 333:
#line 1342 "parser.yy"
{ while (terms[depth]) {
		      decls[depth] = consList(terms[depth]->term, decls[depth]);
		      TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		    }
		    yyval.t = yyvsp[0].t;
		  ;
    break;}
case 334:
#line 1349 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 335:
#line 1351 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 336:
#line 1355 "parser.yy"
{ terms[depth] = new TermNode(yyvsp[0].t, terms[depth]); ;
    break;}
case 337:
#line 1359 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 338:
#line 1361 "parser.yy"
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 339:
#line 1365 "parser.yy"
{ yyval.t = newCTerm("fSynAssignment",yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 340:
#line 1367 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 341:
#line 1371 "parser.yy"
{ yyval.t = newCTerm("fSynApplication",yyvsp[0].t,nilAtom); ;
    break;}
case 342:
#line 1373 "parser.yy"
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(newCTerm("fSynApplication",yyvsp[-3].t,
						    nilAtom),
					   nilAtom),yyvsp[-1].t);
		  ;
    break;}
case 343:
#line 1379 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 344:
#line 1383 "parser.yy"
{ yyval.t = newCTerm("fSynAssignment",
				  newCTerm("fEscape",yyvsp[-2].t,yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 345:
#line 1386 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 346:
#line 1391 "parser.yy"
{ yyval.t = yyvsp[0].t; ;
    break;}
case 347:
#line 1393 "parser.yy"
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(yyvsp[-2].t,nilAtom),yyvsp[-3].t);
		  ;
    break;}
case 348:
#line 1397 "parser.yy"
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(yyvsp[-3].t,nilAtom),yyvsp[-1].t);
		  ;
    break;}
case 349:
#line 1400 "parser.yy"
{ *prodKey[depth]++ = '('; depth++; ;
    break;}
case 350:
#line 1401 "parser.yy"
{ depth--; ;
    break;}
case 351:
#line 1403 "parser.yy"
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 352:
#line 1404 "parser.yy"
{ *prodKey[depth]++ = '['; depth++; ;
    break;}
case 353:
#line 1405 "parser.yy"
{ depth--; ;
    break;}
case 354:
#line 1407 "parser.yy"
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 355:
#line 1408 "parser.yy"
{ *prodKey[depth]++ = '{'; depth++; ;
    break;}
case 356:
#line 1409 "parser.yy"
{ depth--; ;
    break;}
case 357:
#line 1411 "parser.yy"
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 358:
#line 1415 "parser.yy"
{ yyval.t = newCTerm("fSynApplication",yyvsp[0].t,nilAtom); ;
    break;}
case 359:
#line 1417 "parser.yy"
{ yyval.t = newCTerm("fSynApplication",yyvsp[-4].t,yyvsp[-1].t); ;
    break;}
case 360:
#line 1421 "parser.yy"
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 361:
#line 1423 "parser.yy"
{ yyval.t = makeVar(xytext); ;
    break;}
case 362:
#line 1428 "parser.yy"
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 363:
#line 1430 "parser.yy"
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1433 "parser.yy"


void checkDeprecation(OZ_Term coord) {
  char *msg = "use `if' instead of `case' for boolean conditionals";
  if (xy_allowDeprecated) {
    xyreportWarning("deprecation warning",msg,coord);
  } else {
    xyreportError("deprecation error",msg,coord);
  }
}

void xyreportWarning(char *kind, char *msg, OZ_Term coord) {
  OZ_Term args = OZ_cons(OZ_pairA("coord",coord),
			 OZ_cons(OZ_pairAA("kind",kind),
				 OZ_cons(OZ_pairAA("msg",msg),OZ_nil())));
  xy_errorMessages = OZ_cons(OZ_recordInit(OZ_atom("warn"),args),
			     xy_errorMessages);
}

void xyreportError(char *kind, char *msg, OZ_Term coord) {
  OZ_Term args = OZ_cons(OZ_pairA("coord",coord),
			 OZ_cons(OZ_pairAA("kind",kind),
				 OZ_cons(OZ_pairAA("msg",msg),OZ_nil())));
  xy_errorMessages = OZ_cons(OZ_recordInit(OZ_atom("error"),args),
			     xy_errorMessages);
}

void xyreportError(char *kind, char *msg, const char *file,
		   int line, int column) {
  xyreportError(kind,msg,OZ_mkTupleC("pos",3,OZ_atom(file),
				     OZ_int(line),OZ_int(column)));
}

static void xyerror(char *s) {
  char *news;
  if (!strncmp(s, "parse error", 11)) {
    if (strlen(s) > 13) {
      xyreportError("parse error", s + 13, xyFileName, xylino, xycharno());
    } else if (yychar != YYEMPTY) {
      int yychar1 = YYTRANSLATE(yychar);
      char *s2 = new char[30 + strlen(yytname[yychar1])];
      sprintf(s2, "unexpected token `%s'", yytname[yychar1]);
      xyreportError("parse error", s2, xyFileName, xylino, xycharno());
      delete[] s2;
    } else {
      xyreportError("parse error", s, xyFileName, xylino, xycharno());
    }
  } else {
    xyreportError("parse error", s, xyFileName, xylino, xycharno());
  }
}

static OZ_Term init_options(OZ_Term optRec) {
  OZ_Term x;

  x = OZ_subtree(optRec, OZ_atom("gump"));
  xy_gumpSyntax = x == 0? 0: OZ_eq(x, OZ_true());

  x = OZ_subtree(optRec, OZ_atom("allowdeprecated"));
  xy_allowDeprecated = x == 0? 1: OZ_eq(x, OZ_true());

  OZ_Term defines = OZ_subtree(optRec, OZ_atom("defines"));
  return defines;
}

static OZ_Term parse() {
  nilAtom = OZ_nil();

  int i;
  for (i = 0; i < DEPTH; i++) {
    prodKey[i] = prodKeyBuffer[i];
    prodName[i] = OZ_atom("none");
    terms[i] = 0;
    decls[i] = nilAtom;
  }
  depth = 0;
  for (i = 0; i < DEPTH; i++)
    terms[i] = 0;

  xyparse();

  // in case there was a syntax error during the parse, delete garbage:
  xy_exit();
  for (i = 0; i < DEPTH; i++)
    while (terms[i]) {
      TermNode *tmp = terms[i]; terms[i] = terms[i]->next; delete tmp;
    }

  return OZ_pair2(yyoutput, xy_errorMessages);
}

OZ_BI_define(parser_parseFile, 2, 1)
{
  // {ParseFile FileName OptRec ?(AST#ReporterMessages)}
  OZ_declareVirtualString(0, file);
  OZ_declareDetTerm(1, optRec);
  if (!OZ_isRecord(optRec))
    return OZ_typeError(1, "ParseOptions");
  OZ_Term defines = init_options(optRec);
  if (defines == 0 || !OZ_isDictionary(defines))
    return OZ_typeError(1, "ParseOptions");
  if (!xy_init_from_file(file, defines))
    OZ_RETURN(OZ_pair2(OZ_atom("fileNotFound"), OZ_nil()));
  else
    OZ_RETURN(parse());
}
OZ_BI_end

OZ_BI_define(parser_parseVirtualString, 2, 1)
{
  // {ParseVirtualString VS OptRec ?(AST#ReporterMessages)}
  OZ_declareVirtualString(0, str);
  OZ_declareDetTerm(1, optRec);
  if (!OZ_isRecord(optRec))
    return OZ_typeError(1, "ParseOptions");
  OZ_Term defines = init_options(optRec);
  if (defines == 0 || !OZ_isDictionary(defines))
    return OZ_typeError(1, "ParseOptions");
  xy_init_from_string(str, defines);
  OZ_RETURN(parse());
}
OZ_BI_end

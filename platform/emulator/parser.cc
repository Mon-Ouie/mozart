
/*  A Bison parser, made from /home/kornstae/mozart/platform/emulator/parser.yy
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse xyparse
#define yylex xylex
#define yyerror xyerror
#define yylval xylval
#define yychar xychar
#define yydebug xydebug
#define yynerrs xynerrs
#define	SWITCH	258
#define	SWITCHNAME	259
#define	LOCALSWITCHES	260
#define	PUSHSWITCHES	261
#define	POPSWITCHES	262
#define	OZATOM	263
#define	ATOM_LABEL	264
#define	OZFLOAT	265
#define	OZINT	266
#define	AMPER	267
#define	DOTINT	268
#define	STRING	269
#define	VARIABLE	270
#define	VARIABLE_LABEL	271
#define	DEFAULT	272
#define	CHOICE	273
#define	LDOTS	274
#define	attr	275
#define	at	276
#define	_case_	277
#define	catch	278
#define	choice	279
#define	_class_	280
#define	cond	281
#define	_condis_	282
#define	declare	283
#define	define	284
#define	dis	285
#define	_else_	286
#define	elsecase	287
#define	elseif	288
#define	elseof	289
#define	end	290
#define	export	291
#define	fail	292
#define	false	293
#define	FALSE_LABEL	294
#define	feat	295
#define	finally	296
#define	_from_	297
#define	_fun_	298
#define	functor	299
#define	_if_	300
#define	import	301
#define	_in_	302
#define	local	303
#define	_lock_	304
#define	_meth_	305
#define	not	306
#define	of	307
#define	or	308
#define	prepare	309
#define	proc	310
#define	prop	311
#define	_raise_	312
#define	require	313
#define	self	314
#define	skip	315
#define	then	316
#define	thread	317
#define	true	318
#define	TRUE_LABEL	319
#define	try	320
#define	unit	321
#define	UNIT_LABEL	322
#define	ENDOFFILE	323
#define	REGEX	324
#define	lex	325
#define	_mode_	326
#define	_parser_	327
#define	prod	328
#define	_scanner_	329
#define	syn	330
#define	token	331
#define	REDUCE	332
#define	SEP	333
#define	OOASSIGN	334
#define	orelse	335
#define	andthen	336
#define	COMPARE	337
#define	FDCOMPARE	338
#define	FDIN	339
#define	ADD	340
#define	FDMUL	341
#define	OTHERMUL	342
#define	DEREFF	343


//
// See Oz/tools/compiler/Doc/TupleSyntax for an description of the
// generated parse trees.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>

#ifdef _MSC_VER
#include <malloc.h>
#include <io.h>
#else
#include <sys/time.h>
#endif

#include "base.hh"


//----------------------
// Interface to Scanner
//----------------------

extern char xyFileName[];   // name of the current file, "" means stdin
extern char xyhelpFileName[];
extern OZ_Term xyFileNameAtom;

extern int xy_gumpSyntax, xy_allowDeprecated;
extern OZ_Term xy_errorMessages;

extern int xylino;
extern char *xytext;
extern char *xylastline;

char *xy_expand_file_name(char *file);

int xy_init_from_file(char *file, OZ_Term defines);
void xy_init_from_string(char *str, OZ_Term defines);
void xy_exit();

int xylex();

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

void checkDeprecation(OZ_Term coord);
void xyreportWarning(char *kind, char *msg, OZ_Term coord);
void xyreportError(char *kind, char *msg, OZ_Term coord);
void xyreportError(char *kind, char *msg,
		   const char *file, int line, int column);


//-----------------
// Local Variables
//-----------------

#define YYMAXDEPTH 1000000
#define YYERROR_VERBOSE

static OZ_Term nilAtom;
static OZ_Term yyoutput;

static void xyerror(char *);


// Gump Extensions

#define DEPTH 20

static int depth;

static char prodKeyBuffer[DEPTH][80];
static char *prodKey[DEPTH];
static OZ_Term prodName[DEPTH];

struct TermNode {
  OZ_Term term;
  TermNode *next;
  TermNode(OZ_Term t, TermNode *n) { term = t; next = n; }
};
static TermNode *terms[DEPTH];
static OZ_Term decls[DEPTH];


//---------------------
// Operations on Terms
//---------------------

#define pair(left,right) OZ_pair2(left,right)
#define consList(head,tail) OZ_cons(head,tail)

inline OZ_Term newCTerm(char *l) {
  return OZ_atom(l);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1) {
  return OZ_mkTupleC(l,1,t1);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2) {
  return OZ_mkTupleC(l,2,t1,t2);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3) {
  return OZ_mkTupleC(l,3,t1,t2,t3);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4) {
  return OZ_mkTupleC(l,4,t1,t2,t3,t4);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5) {
  return OZ_mkTupleC(l,5,t1,t2,t3,t4,t5);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5, OZ_Term t6) {
  return OZ_mkTupleC(l,6,t1,t2,t3,t4,t5,t6);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5, OZ_Term t6, OZ_Term t7) {
  return OZ_mkTupleC(l,7,t1,t2,t3,t4,t5,t6,t7);
}

static OZ_Term makeLongPos(OZ_Term pos1, OZ_Term pos2) {
  return newCTerm("pos",OZ_subtree(pos1,OZ_int(1)),OZ_subtree(pos1,OZ_int(2)),
		  OZ_subtree(pos1,OZ_int(3)),OZ_subtree(pos2,OZ_int(1)),
		  OZ_subtree(pos2,OZ_int(2)),OZ_subtree(pos2,OZ_int(3)));
}

inline OZ_Term pos() {
  return newCTerm("pos",xyFileNameAtom,OZ_int(xylino),OZ_int(xycharno()));
}

inline OZ_Term makeVar(OZ_Term printName, OZ_Term pos) {
  return newCTerm("fVar",printName,pos);
}

inline OZ_Term makeVar(char *printName) {
  return makeVar(OZ_atom(printName),pos());
}

inline OZ_Term makeCons(OZ_Term first, OZ_Term second, OZ_Term pos) {
   return newCTerm("fRecord",
		   newCTerm("fAtom",OZ_atom("|"),pos),
		   consList(first,consList(second,nilAtom)));
}

static OZ_Term makeInt(char *chars, OZ_Term pos) {
  return newCTerm("fInt",OZ_CStringToInt(chars),pos);
}

static OZ_Term makeInt(char c, OZ_Term pos) {
  return newCTerm("fInt",OZ_int((unsigned char) c),pos);
}

static OZ_Term makeString(char *chars, OZ_Term pos) {
  if (chars[0] == '\0')
    return newCTerm("fAtom",nilAtom,pos);
  else
    return makeCons(makeInt(chars[0],pos),makeString(&chars[1],pos),pos);
}


//------
// Gump
//------

static OZ_Term scannerPrefix = 0;
static OZ_Term parserExpect = 0;

void xy_setScannerPrefix() {
  scannerPrefix = OZ_atom(xytext);
}

void xy_setParserExpect() {
  parserExpect = OZ_CStringToInt(xytext);
}


typedef union {
  OZ_Term t;
  int i;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		765
#define	YYFLAG		-32768
#define	YYNTBASE	109

#define YYTRANSLATE(x) ((unsigned)(x) <= 343 ? yytranslate[x] : 248)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   108,     2,    87,   102,     2,     2,     2,    99,
   100,     2,    97,    91,    98,    93,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   107,     2,     2,
    79,     2,     2,    95,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   103,     2,   104,    94,   101,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   105,    86,   106,    92,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    80,    81,    82,    83,    84,    85,    88,
    89,    90,    96
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     5,     8,    11,    13,    17,    20,    27,    34,
    40,    41,    44,    46,    48,    50,    51,    54,    57,    60,
    62,    65,    70,    75,    80,    85,    90,    95,   100,   105,
   107,   112,   114,   118,   123,   128,   133,   138,   142,   147,
   150,   155,   159,   163,   167,   169,   171,   173,   175,   177,
   179,   181,   183,   185,   187,   189,   191,   198,   205,   216,
   227,   234,   236,   243,   246,   249,   255,   263,   269,   277,
   283,   285,   287,   293,   296,   302,   308,   314,   320,   322,
   324,   325,   328,   329,   331,   336,   343,   348,   353,   358,
   365,   370,   371,   375,   382,   385,   387,   391,   394,   399,
   400,   403,   404,   407,   412,   414,   416,   418,   420,   422,
   424,   429,   431,   432,   435,   437,   441,   442,   446,   447,
   450,   458,   466,   468,   470,   472,   474,   476,   477,   480,
   485,   486,   488,   490,   492,   494,   496,   498,   500,   502,
   504,   511,   514,   517,   521,   523,   531,   538,   541,   544,
   548,   550,   552,   556,   560,   562,   566,   570,   572,   577,
   584,   589,   594,   596,   601,   609,   611,   613,   614,   617,
   622,   627,   632,   637,   638,   641,   645,   647,   649,   651,
   653,   655,   657,   659,   660,   663,   669,   671,   676,   678,
   680,   682,   684,   686,   691,   697,   699,   701,   705,   707,
   709,   711,   714,   715,   718,   723,   725,   727,   729,   733,
   734,   740,   743,   744,   746,   750,   755,   761,   765,   769,
   771,   774,   779,   784,   788,   792,   795,   800,   805,   811,
   813,   817,   819,   821,   823,   827,   829,   831,   833,   835,
   836,   837,   846,   848,   850,   852,   855,   858,   861,   867,
   873,   878,   880,   882,   887,   888,   891,   894,   896,   898,
   908,   910,   912,   915,   918,   919,   922,   924,   927,   929,
   933,   935,   938,   940,   943,   944,   954,   955,   956,   967,
   974,   978,   981,   984,   986,   987,   990,   991,   992,   999,
  1000,  1001,  1008,  1009,  1010,  1017,  1019,  1023,  1025,  1027,
  1029,  1030,  1032,  1034,  1036,  1037,  1038,  1041,  1043,  1046,
  1051,  1056,  1064,  1065,  1068,  1070,  1072,  1074,  1076,  1078,
  1082,  1085,  1089,  1090,  1093,  1096,  1102,  1107,  1110,  1113,
  1115,  1117,  1119,  1122,  1126,  1128,  1130,  1135,  1137,  1143,
  1145,  1147,  1153,  1158,  1159,  1160,  1170,  1171,  1172,  1182,
  1183,  1184,  1194,  1196,  1202,  1204,  1206,  1208
};

static const short yyrhs[] = {   110,
    68,     0,     1,     0,   115,   111,     0,   202,   111,     0,
   111,     0,   186,   121,   111,     0,   112,   110,     0,    28,
   187,   115,    47,   186,   111,     0,    28,   187,   115,    47,
   115,   111,     0,    28,   187,   115,   186,   111,     0,     0,
     3,   113,     0,     5,     0,     6,     0,     7,     0,     0,
   114,   113,     0,    97,     4,     0,    98,     4,     0,   116,
     0,   116,   115,     0,   116,    79,   187,   116,     0,   116,
    80,   187,   116,     0,   116,    81,   187,   116,     0,   116,
    82,   187,   116,     0,   116,   127,   187,   116,     0,   116,
   128,   187,   116,     0,   116,   129,   187,   116,     0,   116,
    86,   187,   116,     0,   118,     0,   118,    87,   187,   117,
     0,   118,     0,   118,    87,   117,     0,   118,   130,   187,
   118,     0,   118,   131,   187,   118,     0,   118,   132,   187,
   118,     0,   118,    91,   187,   118,     0,    92,   187,   118,
     0,   118,    93,   187,   118,     0,   118,    13,     0,   118,
    94,   187,   118,     0,    95,   187,   118,     0,    96,   187,
   118,     0,    99,   133,   100,     0,   180,     0,   182,     0,
   101,     0,    66,     0,    63,     0,    38,     0,    59,     0,
   102,     0,   183,     0,   184,     0,   185,     0,   138,     0,
   103,   187,   116,   135,   104,   187,     0,   105,   187,   116,
   134,   106,   187,     0,    55,   187,   119,   105,   116,   134,
   106,   133,    35,   187,     0,    43,   187,   119,   105,   116,
   134,   106,   133,    35,   187,     0,    44,   187,   155,   120,
    35,   187,     0,   154,     0,    48,   187,   115,    47,   115,
    35,     0,    45,   145,     0,    22,   147,     0,    49,   187,
   133,    35,   187,     0,    49,   187,   116,    61,   133,    35,
   187,     0,    62,   187,   133,    35,   187,     0,    65,   187,
   133,   136,   137,    35,   187,     0,    57,   187,   133,    35,
   187,     0,    60,     0,    37,     0,    51,   187,   133,    35,
   187,     0,    26,   170,     0,    53,   187,   177,    35,   187,
     0,    30,   187,   177,    35,   187,     0,    24,   187,   179,
    35,   187,     0,    27,   187,   174,    35,   187,     0,   188,
     0,   196,     0,     0,   180,   119,     0,     0,   121,     0,
    58,   187,   122,   120,     0,    54,   187,   115,    47,   115,
   120,     0,    54,   187,   115,   120,     0,    46,   187,   122,
   120,     0,    36,   187,   126,   120,     0,    29,   187,   115,
    47,   115,   120,     0,    29,   187,   115,   120,     0,     0,
   181,   125,   122,     0,   123,    99,   124,   100,   125,   122,
     0,    16,   187,     0,   144,     0,   144,   107,   181,     0,
   144,   124,     0,   144,   107,   181,   124,     0,     0,    21,
   180,     0,     0,   181,   126,     0,   144,   107,   181,   126,
     0,    83,     0,    84,     0,    85,     0,    88,     0,    89,
     0,    90,     0,   115,    47,   187,   115,     0,   115,     0,
     0,   116,   134,     0,   186,     0,   186,   116,   135,     0,
     0,    23,   187,   150,     0,     0,    41,   133,     0,   139,
   187,    99,   141,   142,   100,   187,     0,   140,   187,    99,
   141,   142,   100,   187,     0,     9,     0,    67,     0,    64,
     0,    39,     0,    16,     0,     0,   116,   141,     0,   143,
   107,   116,   141,     0,     0,    19,     0,   180,     0,   181,
     0,   184,     0,    66,     0,    63,     0,    38,     0,   180,
     0,   184,     0,   187,   115,    61,   133,   146,   187,     0,
    33,   145,     0,    32,   147,     0,    31,   133,    35,     0,
    35,     0,   187,   115,    61,   187,   133,   148,   187,     0,
   187,   115,    52,   149,   148,   187,     0,    33,   145,     0,
    32,   147,     0,    31,   133,    35,     0,    35,     0,   151,
     0,   151,    18,   149,     0,   151,    34,   149,     0,   151,
     0,   151,    18,   150,     0,   152,    61,   133,     0,   153,
     0,   153,    82,   186,   115,     0,   153,    82,   186,   115,
    47,   115,     0,   153,    79,   187,   153,     0,   153,    86,
   187,   153,     0,   118,     0,   118,    87,   187,   117,     0,
    25,   187,   155,   156,   161,    35,   187,     0,   116,     0,
   186,     0,     0,   157,   156,     0,    42,   187,   116,   134,
     0,    20,   187,   159,   158,     0,    40,   187,   159,   158,
     0,    56,   187,   116,   134,     0,     0,   159,   158,     0,
   160,   107,   116,     0,   160,     0,   180,     0,   182,     0,
   184,     0,    66,     0,    63,     0,    38,     0,     0,   162,
   161,     0,    50,   187,   163,   133,    35,     0,   164,     0,
   164,    79,   187,   181,     0,   180,     0,   182,     0,    66,
     0,    63,     0,    38,     0,   165,    99,   166,   100,     0,
   165,    99,   166,    19,   100,     0,     9,     0,    16,     0,
   108,   187,    16,     0,    67,     0,    64,     0,    39,     0,
   167,   166,     0,     0,   168,   169,     0,   143,   107,   168,
   169,     0,   181,     0,   102,     0,   101,     0,    17,   187,
   116,     0,     0,   187,   172,   171,    35,   187,     0,    31,
   133,     0,     0,   173,     0,   173,    18,   172,     0,   115,
    61,   187,   133,     0,   115,    47,   115,    61,   133,     0,
   175,    18,   175,     0,   175,    18,   174,     0,   176,     0,
   176,   175,     0,   116,   128,   187,   116,     0,   116,   129,
   187,   116,     0,   178,    18,   178,     0,   178,    18,   177,
     0,   115,   186,     0,   115,    47,   115,   186,     0,   115,
   186,    61,   133,     0,   115,    47,   115,    61,   133,     0,
   133,     0,   133,    18,   179,     0,     8,     0,    15,     0,
   181,     0,   108,   187,   181,     0,    14,     0,    11,     0,
    12,     0,    10,     0,     0,     0,    74,   187,   181,   156,
   161,   189,    35,   187,     0,   190,     0,   191,     0,   193,
     0,   190,   189,     0,   191,   189,     0,   193,   189,     0,
    70,   180,    79,   192,    35,     0,    70,   181,    79,   192,
    35,     0,    70,   192,   133,    35,     0,    69,     0,    14,
     0,    71,   181,   194,    35,     0,     0,   195,   194,     0,
    42,   201,     0,   191,     0,   193,     0,    72,   187,   181,
   156,   161,   198,   197,    35,   187,     0,   225,     0,   203,
     0,   225,   197,     0,   203,   197,     0,     0,    76,   199,
     0,   200,     0,   200,   199,     0,   180,     0,   180,   107,
   116,     0,   181,     0,   181,   201,     0,   203,     0,   203,
   202,     0,     0,    73,   181,    79,   204,   207,   222,   223,
   228,    35,     0,     0,     0,    73,   102,   205,    79,   206,
   207,   222,   223,   228,    35,     0,    73,   207,   222,   223,
   228,    35,     0,   209,   181,   220,     0,   181,   221,     0,
   208,   210,     0,   209,     0,     0,   180,   107,     0,     0,
     0,    99,   211,   217,   100,   212,   220,     0,     0,     0,
   103,   213,   217,   104,   214,   220,     0,     0,     0,   105,
   215,   217,   106,   216,   220,     0,   218,     0,   218,   219,
   217,     0,   181,     0,   101,     0,    78,     0,     0,   221,
     0,    88,     0,    89,     0,     0,     0,   224,    47,     0,
   225,     0,   225,   224,     0,    75,   180,   228,    35,     0,
    75,   181,   228,    35,     0,    75,   246,    99,   226,   100,
   228,    35,     0,     0,   227,   226,     0,   181,     0,   102,
     0,   101,     0,   229,     0,   230,     0,   230,    18,   229,
     0,   186,   232,     0,    60,   187,   231,     0,     0,    77,
   133,     0,   233,   232,     0,   233,   221,   187,   234,   222,
     0,   233,    79,   236,   234,     0,    47,   234,     0,   237,
   234,     0,   231,     0,   181,     0,   231,     0,   235,   234,
     0,   182,    79,   236,     0,   236,     0,   181,     0,   181,
   221,   187,   222,     0,   238,     0,   108,   187,   181,    79,
   236,     0,   238,     0,   245,     0,   209,   187,   245,   220,
   222,     0,   245,   221,   187,   222,     0,     0,     0,   208,
   187,    99,   239,   247,   100,   240,   220,   222,     0,     0,
     0,   208,   187,   103,   241,   247,   104,   242,   220,   222,
     0,     0,     0,   208,   187,   105,   243,   247,   106,   244,
   220,   222,     0,   180,     0,   246,   187,    99,   134,   100,
     0,     9,     0,    16,     0,   228,     0,   228,   219,   247,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   370,   372,   376,   378,   381,   383,   388,   390,   393,   395,
   398,   402,   404,   406,   408,   412,   414,   418,   425,   434,
   436,   440,   442,   444,   446,   448,   451,   453,   455,   457,
   459,   465,   467,   471,   474,   477,   480,   482,   485,   488,
   492,   495,   497,   500,   502,   504,   506,   508,   510,   512,
   514,   516,   518,   520,   522,   524,   526,   530,   532,   535,
   538,   540,   542,   544,   546,   548,   550,   552,   554,   556,
   558,   560,   562,   564,   566,   568,   570,   572,   574,   576,
   580,   582,   587,   589,   594,   596,   598,   601,   603,   605,
   607,   612,   614,   616,   620,   624,   626,   628,   630,   634,
   636,   640,   642,   644,   649,   653,   657,   661,   665,   669,
   673,   675,   679,   681,   685,   687,   693,   695,   699,   701,
   705,   710,   717,   719,   721,   723,   727,   731,   733,   735,
   739,   741,   745,   747,   749,   751,   753,   755,   759,   761,
   765,   769,   771,   773,   775,   779,   783,   787,   789,   791,
   793,   797,   799,   801,   805,   807,   811,   815,   817,   820,
   824,   826,   828,   830,   836,   841,   843,   848,   850,   854,
   856,   858,   860,   864,   866,   870,   872,   876,   878,   880,
   882,   884,   886,   890,   892,   896,   900,   902,   906,   908,
   910,   912,   914,   916,   918,   922,   924,   926,   928,   930,
   932,   936,   938,   942,   944,   948,   950,   952,   957,   959,
   963,   967,   969,   973,   975,   979,   981,   985,   987,   991,
   993,   997,   999,  1003,  1005,  1009,  1013,  1015,  1018,  1022,
  1024,  1028,  1032,  1036,  1038,  1042,  1046,  1048,  1052,  1056,
  1060,  1070,  1078,  1080,  1082,  1084,  1086,  1088,  1092,  1094,
  1098,  1102,  1104,  1108,  1112,  1114,  1118,  1120,  1122,  1128,
  1136,  1138,  1140,  1142,  1146,  1148,  1152,  1154,  1158,  1160,
  1164,  1166,  1170,  1172,  1176,  1178,  1180,  1181,  1182,  1184,
  1188,  1190,  1192,  1196,  1197,  1200,  1204,  1205,  1205,  1206,
  1207,  1207,  1208,  1209,  1209,  1212,  1214,  1218,  1219,  1222,
  1226,  1227,  1230,  1231,  1234,  1242,  1244,  1248,  1250,  1254,
  1256,  1258,  1262,  1264,  1268,  1270,  1272,  1276,  1280,  1282,
  1286,  1295,  1299,  1301,  1305,  1307,  1317,  1322,  1329,  1331,
  1335,  1339,  1341,  1345,  1347,  1351,  1353,  1359,  1363,  1366,
  1371,  1373,  1377,  1381,  1382,  1383,  1385,  1386,  1387,  1389,
  1390,  1391,  1395,  1397,  1401,  1403,  1408,  1410
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"SWITCHNAME","LOCALSWITCHES","PUSHSWITCHES","POPSWITCHES","OZATOM","ATOM_LABEL",
"OZFLOAT","OZINT","AMPER","DOTINT","STRING","VARIABLE","VARIABLE_LABEL","DEFAULT",
"CHOICE","LDOTS","attr","at","_case_","catch","choice","_class_","cond","_condis_",
"declare","define","dis","_else_","elsecase","elseif","elseof","end","export",
"fail","false","FALSE_LABEL","feat","finally","_from_","_fun_","functor","_if_",
"import","_in_","local","_lock_","_meth_","not","of","or","prepare","proc","prop",
"_raise_","require","self","skip","then","thread","true","TRUE_LABEL","try",
"unit","UNIT_LABEL","ENDOFFILE","REGEX","lex","_mode_","_parser_","prod","_scanner_",
"syn","token","REDUCE","SEP","'='","OOASSIGN","orelse","andthen","COMPARE","FDCOMPARE",
"FDIN","'|'","'#'","ADD","FDMUL","OTHERMUL","','","'~'","'.'","'^'","'@'","DEREFF",
"'+'","'-'","'('","')'","'_'","'$'","'['","']'","'{'","'}'","':'","'!'","file",
"queries","queries1","directive","switchList","switch","sequence","phrase","hashes",
"phrase2","procFlags","optFunctorDescriptorList","functorDescriptorList","importDecls",
"variableLabel","featureList","optImportAt","exportDecls","compare","fdCompare",
"fdIn","add","fdMul","otherMul","inSequence","phraseList","fixedListArgs","optCatch",
"optFinally","record","recordAtomLabel","recordVarLabel","recordArguments","optDots",
"feature","featureNoVar","ifMain","ifRest","caseMain","caseRest","elseOfList",
"caseClauseList","caseClause","sideCondition","pattern","class","phraseOpt",
"classDescriptorList","classDescriptor","attrFeatList","attrFeat","attrFeatFeature",
"methList","meth","methHead","methHead1","methHeadLabel","methFormals","methFormal",
"methFormalTerm","methFormalOptDefault","condMain","condElse","condClauseList",
"condClause","condisClauseList","condisClause","fdExpression","orClauseList",
"orClause","choiceClauseList","atom","nakedVariable","variable","string","int",
"float","thisCoord","coord","scannerSpecification","scannerRules","lexAbbrev",
"lexRule","regex","modeClause","modeDescrs","modeDescr","parserSpecification",
"parserRules","tokenClause","tokenList","tokenDecl","modeFromList","prodClauseList",
"prodClause","@1","@2","@3","prodHeadRest","prodName","prodNameAtom","prodKey",
"@4","@5","@6","@7","@8","@9","prodParams","prodParam","separatorOp","optTerminatorOp",
"terminatorOp","prodMakeKey","localRules","localRulesSub","synClause","synParams",
"synParam","synAlt","synSeqs","synSeq","optSynAction","nonEmptySeq","synVariable",
"synPrims","synPrim","synPrimNoAssign","synPrimNoVar","synPrimNoVarNoAssign",
"@10","@11","@12","@13","@14","@15","synInstTerm","synLabel","synProdCallParams", NULL
};
#endif

static const short yyr1[] = {     0,
   109,   109,   110,   110,   110,   110,   111,   111,   111,   111,
   111,   112,   112,   112,   112,   113,   113,   114,   114,   115,
   115,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   117,   117,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   119,   119,   120,   120,   121,   121,   121,   121,   121,   121,
   121,   122,   122,   122,   123,   124,   124,   124,   124,   125,
   125,   126,   126,   126,   127,   128,   129,   130,   131,   132,
   133,   133,   134,   134,   135,   135,   136,   136,   137,   137,
   138,   138,   139,   139,   139,   139,   140,   141,   141,   141,
   142,   142,   143,   143,   143,   143,   143,   143,   144,   144,
   145,   146,   146,   146,   146,   147,   147,   148,   148,   148,
   148,   149,   149,   149,   150,   150,   151,   152,   152,   152,
   153,   153,   153,   153,   154,   155,   155,   156,   156,   157,
   157,   157,   157,   158,   158,   159,   159,   160,   160,   160,
   160,   160,   160,   161,   161,   162,   163,   163,   164,   164,
   164,   164,   164,   164,   164,   165,   165,   165,   165,   165,
   165,   166,   166,   167,   167,   168,   168,   168,   169,   169,
   170,   171,   171,   172,   172,   173,   173,   174,   174,   175,
   175,   176,   176,   177,   177,   178,   178,   178,   178,   179,
   179,   180,   181,   182,   182,   183,   184,   184,   185,   186,
   187,   188,   189,   189,   189,   189,   189,   189,   190,   190,
   191,   192,   192,   193,   194,   194,   195,   195,   195,   196,
   197,   197,   197,   197,   198,   198,   199,   199,   200,   200,
   201,   201,   202,   202,   204,   203,   205,   206,   203,   203,
   207,   207,   207,   208,   208,   209,   211,   212,   210,   213,
   214,   210,   215,   216,   210,   217,   217,   218,   218,   219,
   220,   220,   221,   221,   222,   223,   223,   224,   224,   225,
   225,   225,   226,   226,   227,   227,   227,   228,   229,   229,
   230,   230,   231,   231,   232,   232,   232,   232,   232,   232,
   233,   234,   234,   235,   235,   236,   236,   236,   237,   237,
   238,   238,   238,   239,   240,   238,   241,   242,   238,   243,
   244,   238,   245,   245,   246,   246,   247,   247
};

static const short yyr2[] = {     0,
     2,     1,     2,     2,     1,     3,     2,     6,     6,     5,
     0,     2,     1,     1,     1,     0,     2,     2,     2,     1,
     2,     4,     4,     4,     4,     4,     4,     4,     4,     1,
     4,     1,     3,     4,     4,     4,     4,     3,     4,     2,
     4,     3,     3,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     6,     6,    10,    10,
     6,     1,     6,     2,     2,     5,     7,     5,     7,     5,
     1,     1,     5,     2,     5,     5,     5,     5,     1,     1,
     0,     2,     0,     1,     4,     6,     4,     4,     4,     6,
     4,     0,     3,     6,     2,     1,     3,     2,     4,     0,
     2,     0,     2,     4,     1,     1,     1,     1,     1,     1,
     4,     1,     0,     2,     1,     3,     0,     3,     0,     2,
     7,     7,     1,     1,     1,     1,     1,     0,     2,     4,
     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     6,     2,     2,     3,     1,     7,     6,     2,     2,     3,
     1,     1,     3,     3,     1,     3,     3,     1,     4,     6,
     4,     4,     1,     4,     7,     1,     1,     0,     2,     4,
     4,     4,     4,     0,     2,     3,     1,     1,     1,     1,
     1,     1,     1,     0,     2,     5,     1,     4,     1,     1,
     1,     1,     1,     4,     5,     1,     1,     3,     1,     1,
     1,     2,     0,     2,     4,     1,     1,     1,     3,     0,
     5,     2,     0,     1,     3,     4,     5,     3,     3,     1,
     2,     4,     4,     3,     3,     2,     4,     4,     5,     1,
     3,     1,     1,     1,     3,     1,     1,     1,     1,     0,
     0,     8,     1,     1,     1,     2,     2,     2,     5,     5,
     4,     1,     1,     4,     0,     2,     2,     1,     1,     9,
     1,     1,     2,     2,     0,     2,     1,     2,     1,     3,
     1,     2,     1,     2,     0,     9,     0,     0,    10,     6,
     3,     2,     2,     1,     0,     2,     0,     0,     6,     0,
     0,     6,     0,     0,     6,     1,     3,     1,     1,     1,
     0,     1,     1,     1,     0,     0,     2,     1,     2,     4,
     4,     7,     0,     2,     1,     1,     1,     1,     1,     3,
     2,     3,     0,     2,     2,     5,     4,     2,     2,     1,
     1,     1,     2,     3,     1,     1,     4,     1,     5,     1,
     1,     5,     4,     0,     0,     9,     0,     0,     9,     0,
     0,     9,     1,     5,     1,     1,     1,     3
};

static const short yydefact[] = {     0,
     2,    16,    13,    14,    15,   232,   123,   239,   237,   238,
   236,   233,   127,   241,   241,   241,   241,   241,   241,   241,
    72,    50,   126,   241,   241,   241,   241,   241,   241,   241,
   241,   241,    51,    71,   241,    49,   125,   241,    48,   124,
   241,   285,   241,   241,   241,   241,     0,    47,    52,   241,
   241,   241,     0,     5,   240,    11,    20,    30,    56,   241,
   241,    62,    45,   234,    46,    53,    54,    55,     0,    79,
    80,    11,   273,     0,     0,    12,    16,    65,     0,     0,
   240,    74,     0,     0,     0,     0,    81,   240,    64,     0,
     0,     0,     0,     0,    81,     0,     0,     0,     0,   277,
     0,     0,   305,     0,   284,     0,     0,     0,     0,   112,
     0,     0,     0,     0,     1,     7,     3,   241,   241,   241,
   241,   105,   106,   107,   241,    21,   241,   241,   241,    40,
   241,   108,   109,   110,   241,   241,   241,   241,   241,   241,
     0,     0,   241,   241,   241,   241,   241,    11,     4,   274,
    18,    19,    17,     0,   230,     0,   166,   168,   167,     0,
   213,   214,     0,     0,     0,   220,   240,   240,     0,     0,
     0,    81,    83,     0,     0,    20,     0,     0,     0,     0,
     0,     0,   117,   168,     0,   286,   275,   303,   304,   282,
   306,   287,   290,   293,   283,   301,   168,    38,    42,    43,
   241,    44,   240,   113,   235,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   128,   128,     0,   102,    92,     0,    92,     6,     0,   241,
     0,   241,   241,   241,   241,   241,   184,   168,     0,   241,
     0,     0,     0,   241,   241,   241,     0,   221,   240,    11,
     0,   226,   241,     0,     0,    82,     0,    84,     0,     0,
     0,   241,   241,   241,     0,   241,   241,   241,   119,   184,
   278,   285,     0,   240,     0,   308,     0,     0,     0,   281,
   302,   184,     0,     0,   115,   113,     0,    22,    23,    24,
    25,    29,    26,    27,    28,    31,    32,    37,    39,    41,
    34,    35,    36,    50,    49,    48,   128,   131,     0,    45,
   234,    54,   131,    83,    83,     0,   139,   102,   140,   241,
    83,     0,   100,    83,    83,   163,     0,   152,     0,   158,
     0,   231,    77,     0,     0,     0,     0,   241,     0,   184,
   169,     0,     0,   212,   241,   215,     0,     0,    78,   219,
   218,    11,    11,    10,   240,     0,    76,   225,   224,   113,
   241,     0,     0,     0,    66,    73,    75,   113,    70,    68,
     0,     0,     0,   265,   285,     0,   305,   355,   356,   240,
   240,     0,   241,   323,     0,   318,   319,   307,   309,   299,
   298,     0,   296,     0,     0,     0,   111,   241,   240,   114,
   241,     0,   129,   132,     0,     0,     0,     0,    91,    89,
     0,   103,    95,    88,     0,     0,    92,     0,    87,    85,
   241,     0,   241,   241,   151,   241,     0,     0,     0,   241,
   240,   241,     0,   183,   182,   181,   174,   177,   178,   179,
   180,   174,   113,   113,     0,   241,   185,     0,   216,   211,
   222,   223,     9,     8,     0,   227,   228,     0,    61,     0,
   241,   241,   145,   241,    63,   241,     0,   118,   155,   120,
   241,     0,     0,   305,   306,     0,     0,   313,   323,   323,
     0,   241,   353,   331,   241,   241,   330,   321,   323,   323,
   340,   341,   241,   280,   240,   288,   300,     0,   291,   294,
     0,     0,     0,   243,   244,   245,    57,   116,    58,    33,
   241,   128,   241,    83,   102,     0,    96,   101,    93,    83,
     0,     0,   149,   148,   147,   153,   154,   157,     0,     0,
     0,   241,   171,   174,     0,   172,   170,   173,   196,   197,
   193,   201,   192,   200,   191,   199,   241,     0,   187,     0,
   189,   190,   165,   217,   229,     0,     0,   143,   142,   141,
    67,     0,     0,    69,   269,   266,   267,     0,   262,   261,
   306,   240,   310,   311,   317,   316,   315,     0,   313,   322,
   336,     0,   332,   328,   323,   335,   338,   324,     0,     0,
     0,   285,   241,   325,   329,   241,     0,   320,   301,   297,
   301,   301,   253,   252,     0,     0,     0,   255,   241,   246,
   247,   248,   121,   130,   122,    90,   104,   100,     0,    98,
    86,   164,   150,   161,   159,   162,   146,   175,   176,     0,
     0,   241,   203,     0,   144,     0,   156,     0,   268,   241,
   264,   263,   240,     0,   240,   314,   241,   285,   333,     0,
   344,   347,   350,   353,   301,   336,   323,   323,   305,   113,
   289,   292,   295,     0,     0,     0,     0,     0,   258,   259,
     0,   255,   242,    92,    97,     0,   198,   186,     0,   138,
   137,   136,   208,   207,     0,     0,   203,   210,   133,   206,
   135,   241,   241,   270,   260,     0,   276,     0,   305,   334,
   285,   240,   240,   240,   305,   327,   305,   343,     0,     0,
     0,   251,   271,   257,   254,   256,    94,    99,   160,   188,
     0,     0,   194,   202,   241,   204,    60,    59,   279,   312,
   337,   339,   357,     0,     0,     0,   342,   326,   354,   249,
   250,   272,   210,   206,   195,     0,   240,   345,   348,   351,
   205,   209,   358,   301,   301,   301,   305,   305,   305,   346,
   349,   352,     0,     0,     0
};

static const short yydefgoto[] = {   763,
    53,    54,    55,    76,    77,   110,    57,   296,    58,   171,
   257,   258,   321,   322,   516,   417,   315,   127,   128,   129,
   138,   139,   140,   155,   287,   284,   269,   373,    59,    60,
    61,   308,   405,   309,   316,    89,   464,    78,   426,   327,
   468,   328,   329,   330,    62,   158,   237,   238,   533,   534,
   438,   339,   340,   548,   549,   550,   686,   687,   688,   726,
    82,   242,   161,   162,   164,   165,   166,   169,   170,   156,
    63,    64,    65,    66,    67,    68,   384,    79,    70,   503,
   504,   505,   607,   506,   671,   672,    71,   568,   473,   566,
   567,   714,    72,    73,   272,   185,   375,   103,   485,   486,
   195,   277,   599,   278,   601,   279,   602,   392,   393,   498,
   280,   281,   191,   274,   275,   276,   578,   579,   733,   386,
   387,   583,   488,   489,   584,   585,   586,   490,   587,   702,
   754,   703,   755,   704,   756,   492,   493,   734
};

static const short yypact[] = {  1060,
-32768,   203,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    60,-32768,-32768,-32768,-32768,  1467,-32768,-32768,-32768,
-32768,-32768,   -13,-32768,  1164,    64,   950,   284,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   399,-32768,
-32768,    64,     1,    81,   103,-32768,   203,-32768,  1467,  1467,
  1467,-32768,  1467,  1467,  1467,  1467,   179,  1467,-32768,  1467,
  1467,  1467,  1467,  1467,   179,  1467,  1467,  1467,    96,-32768,
    86,   115,-32768,   315,    96,    96,  1467,  1467,  1467,   164,
   127,  1467,  1467,    96,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   140,   144,-32768,-32768,-32768,-32768,-32768,    64,-32768,-32768,
-32768,-32768,-32768,   153,   215,   223,   701,   423,-32768,    29,
   219,   248,   701,   234,   259,  1467,   245,   262,   260,   288,
   213,   179,   399,   268,   287,  1265,   310,   313,   319,   277,
   329,   332,   356,   423,   308,-32768,-32768,-32768,-32768,-32768,
   316,-32768,-32768,-32768,-32768,   237,   423,   185,-32768,-32768,
-32768,-32768,   701,   950,-32768,  1467,  1467,  1467,  1467,  1467,
  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
  1568,  1568,  1467,   377,   324,  1467,   324,-32768,  1467,-32768,
  1467,-32768,-32768,-32768,-32768,-32768,   344,   423,  1467,-32768,
  1467,   366,  1467,-32768,-32768,-32768,  1467,-32768,  1467,    64,
  1467,   352,-32768,  1467,  1467,-32768,   404,-32768,  1467,  1467,
  1467,-32768,-32768,-32768,  1467,-32768,-32768,-32768,   393,   344,
-32768,   193,   347,   384,   401,   316,    71,    71,    71,-32768,
-32768,   344,  1467,   355,  1467,   950,   360,   701,   818,   445,
   507,   382,   435,   274,   274,-32768,   309,   182,-32768,-32768,
   242,   182,   182,   370,   374,   385,  1366,   481,   416,   436,
   439,   444,   481,   426,   399,   455,-32768,   377,-32768,-32768,
   399,   483,   550,   714,   399,   451,   472,    48,   522,     5,
  1467,-32768,-32768,   253,   253,  1467,  1467,-32768,   551,   344,
-32768,   538,  1467,-32768,-32768,-32768,  1467,  1467,-32768,-32768,
   259,    64,    64,-32768,   539,  1467,-32768,-32768,   288,   950,
-32768,   477,   566,   567,-32768,-32768,-32768,   950,-32768,-32768,
  1467,  1467,   570,   530,   193,   237,-32768,-32768,-32768,   384,
   384,   508,-32768,   629,   573,-32768,   592,-32768,-32768,-32768,
-32768,   515,   540,   512,   513,   371,-32768,-32768,   701,-32768,
-32768,  1467,-32768,-32768,   521,  1467,   523,  1467,-32768,-32768,
    96,-32768,-32768,-32768,   396,   179,   324,  1467,-32768,-32768,
-32768,  1467,-32768,-32768,-32768,-32768,  1467,  1467,  1467,-32768,
-32768,-32768,   472,-32768,-32768,-32768,   253,   519,-32768,-32768,
-32768,   253,   950,   950,   703,-32768,-32768,  1467,-32768,-32768,
   747,   805,-32768,-32768,  1467,-32768,-32768,   516,-32768,  1467,
-32768,-32768,-32768,-32768,-32768,-32768,   534,-32768,   611,-32768,
-32768,   179,   134,-32768,   316,   604,   607,    66,   569,   129,
  1467,-32768,    86,-32768,-32768,   386,-32768,-32768,   564,   129,
-32768,   237,-32768,-32768,   384,-32768,-32768,    71,-32768,-32768,
   296,    96,   613,   371,   371,   371,-32768,-32768,-32768,-32768,
-32768,  1366,-32768,   399,   377,   556,    45,-32768,-32768,   399,
  1467,   615,-32768,-32768,-32768,-32768,-32768,-32768,  1467,  1467,
  1467,-32768,-32768,   253,  1467,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1467,   579,   560,
-32768,-32768,-32768,-32768,-32768,  1467,   625,-32768,-32768,-32768,
-32768,  1467,  1467,-32768,   554,-32768,   179,   627,   134,   134,
   316,   384,-32768,-32768,-32768,-32768,-32768,   571,    66,-32768,
   201,   585,-32768,-32768,   129,-32768,-32768,-32768,    96,   394,
   335,   347,-32768,-32768,-32768,-32768,   574,-32768,   237,-32768,
   237,   237,-32768,-32768,   587,   595,  1467,   257,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   550,    96,-32768,
-32768,-32768,-32768,    -7,   628,   593,-32768,-32768,   701,   533,
   645,-32768,   692,   647,-32768,   651,-32768,  1467,-32768,-32768,
-32768,-32768,   384,   652,   384,-32768,-32768,   347,-32768,   609,
-32768,-32768,-32768,-32768,   237,   237,   129,   129,-32768,  1467,
-32768,-32768,-32768,   166,   166,   654,    96,   166,-32768,-32768,
   655,   257,-32768,   324,   396,  1467,-32768,-32768,    96,-32768,
-32768,-32768,-32768,-32768,   584,    39,   692,   677,-32768,   439,
-32768,-32768,-32768,   701,-32768,   664,-32768,   670,-32768,-32768,
   347,   384,   384,   384,-32768,-32768,-32768,-32768,   617,   678,
   680,-32768,    96,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    68,   620,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   540,   623,   621,   618,-32768,-32768,-32768,-32768,
-32768,-32768,   677,-32768,-32768,  1467,   384,-32768,-32768,-32768,
-32768,   701,-32768,   237,   237,   237,-32768,-32768,-32768,-32768,
-32768,-32768,   726,   727,-32768
};

static const short yypgoto[] = {-32768,
   674,    17,-32768,   658,-32768,    98,   348,  -375,    67,   -46,
  -274,   662,  -220,-32768,  -473,   121,  -293,-32768,   577,   581,
-32768,-32768,-32768,   390,  -280,   346,-32768,-32768,-32768,-32768,
-32768,  -214,   438,  -451,  -381,  -365,-32768,  -360,   320,   136,
   186,  -353,-32768,  -305,-32768,   669,  -119,-32768,  -380,   233,
-32768,  -174,-32768,-32768,-32768,-32768,    72,-32768,    42,    21,
-32768,-32768,   528,-32768,   518,  -105,-32768,   -75,   535,   542,
   363,    35,   167,-32768,  -122,-32768,   135,   -15,-32768,   -79,
-32768,  -499,   -90,  -430,   104,-32768,-32768,     7,-32768,   208,
-32768,    75,   704,  -413,-32768,-32768,-32768,  -224,   -18,    -9,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -257,-32768,    57,
  -484,   -59,  -283,  -421,   520,  -409,   216,-32768,  -222,   302,
-32768,  -346,   312,-32768,  -458,-32768,  -553,-32768,  -342,-32768,
-32768,-32768,-32768,-32768,-32768,   207,   526,  -459
};


#define	YYLAST		1676


static const short yytable[] = {    80,
    81,    83,    84,    85,    86,   400,   325,   313,    87,    88,
    90,    91,    92,    93,    94,    95,    96,   469,   179,    97,
   394,   395,    98,   104,   412,    99,   510,   106,   107,   108,
   109,   595,   105,   517,   112,   113,   114,   487,   657,   409,
   410,   491,   190,   620,   141,   142,   414,   377,   180,   419,
   420,   385,     6,   572,   115,     9,    10,   722,   524,   569,
   248,   536,   523,   570,   270,   427,     2,     6,     3,     4,
     5,   430,   117,    42,    12,   239,   102,   282,   432,   458,
    12,   428,    12,   430,   151,    12,   431,   467,   149,   240,
   432,    19,   403,   475,   700,   374,   559,    56,   312,   312,
   558,   319,   206,   207,   208,   209,   152,   396,   669,   210,
    12,   211,   212,   213,   661,   214,   662,   663,   341,   215,
   216,   217,   218,   219,   220,   256,   649,   223,   224,   225,
   226,   227,   580,   184,    69,   517,     6,   378,   723,   196,
   197,   351,   487,    12,   379,   622,   491,   732,   205,   643,
   474,   619,    56,   628,   126,   569,   569,   476,   477,   570,
   570,   100,   537,   538,   228,   447,   575,   576,   683,   684,
   705,   390,   669,   198,   199,   200,   154,   670,   358,   603,
   160,   685,   167,   168,   312,   283,     6,   174,   175,    69,
   571,   168,   186,   187,   130,   319,   519,   130,   706,   707,
     6,   718,   188,   189,   229,   481,    42,    12,   273,   469,
   201,   441,   441,   230,   331,   159,   333,   334,   335,   336,
   337,   617,   159,   624,   343,   626,   202,  -285,   347,   348,
   349,  -285,   231,  -285,   604,   685,    52,   357,   221,   616,
   600,   670,   222,   735,   736,   621,   365,   366,   367,   241,
   369,   370,   371,   104,   130,   311,   311,   232,   318,   323,
     6,   323,   105,     9,    10,   243,   354,    12,   246,   757,
   758,   759,   135,   126,   136,   137,   247,   136,   137,  -234,
   297,   298,   299,   300,   301,   302,   303,   753,   188,   189,
   434,   249,   319,   517,   253,   326,   130,   614,   667,    74,
    75,   250,   252,     6,   413,   254,   376,   381,   251,   603,
    12,   391,   391,   391,   441,   435,   190,   255,   436,   441,
   314,   130,   445,   324,   188,   189,   668,   502,   259,   450,
   133,   134,   135,   260,   136,   137,   342,   285,    12,   320,
   160,   311,     6,   378,   262,   459,   352,   263,   355,   644,
   379,   168,   318,   264,     6,   378,   104,   363,-32768,   125,
    52,    12,   379,   266,   604,   105,   267,   479,   453,   454,
   131,   132,   133,   134,   135,   708,   136,   137,   268,   709,
   397,   265,   507,   353,     6,   509,   271,     9,    10,   312,
   273,    12,   319,   338,   319,   402,   132,   133,   134,   135,
   345,   136,   137,     6,   101,   521,     9,    10,    90,   376,
   525,   441,   356,   192,   529,   731,   531,   193,   484,   194,
   696,   737,   698,   738,   610,   611,   612,   143,   157,   593,
   553,   163,   596,   372,   144,   157,   111,   326,   361,   176,
   501,   502,   233,   383,   145,   515,    90,   388,   560,   172,
   561,   323,   146,   717,   143,   564,   147,   172,   398,   203,
   204,   144,   234,   130,   235,   401,   589,   125,   297,   590,
   591,   145,   408,   760,   761,   762,  -138,   597,   236,   146,
  -137,   177,   178,   147,  -284,   181,   182,   183,  -284,   456,
  -284,  -136,   651,   326,   326,   613,   652,   615,   653,   404,
   440,   440,   422,   423,   424,   514,   425,   460,   461,   462,
   691,   463,   577,   163,   581,   520,   627,-32768,-32768,   124,
   125,   647,   406,   484,   581,   120,   121,   122,   123,   124,
   125,   630,   391,   285,   172,   606,   608,   421,   132,   133,
   134,   135,  -133,   136,   137,  -134,   311,    12,   677,   318,
  -135,   286,   319,   288,   289,   290,   291,   292,   293,   294,
   295,   411,   526,   527,   691,   530,   437,   442,   307,   307,
   416,     6,   378,   710,   711,   641,   642,   658,    12,   379,
   659,   415,   429,   310,   310,   446,   317,   297,   121,   122,
   123,   124,   125,   673,   163,   326,   647,   326,   448,   455,
   465,   466,   360,   440,   471,   472,   478,   494,   440,   495,
   480,   552,   368,   577,   496,   499,   679,   497,   500,   581,
   511,   556,   513,   650,   695,   535,   656,   625,   563,   326,
   344,   699,   399,   286,   101,   380,     6,   378,   573,   562,
   481,   574,   592,    12,   379,   481,   582,   609,   362,   623,
   364,   188,   189,   675,   307,   618,   582,   632,   633,   635,
   638,   640,  -285,   648,   205,   664,  -285,   690,  -285,   310,
   645,   482,   660,   665,   676,   480,   727,   728,   432,   678,
   317,   692,   656,   443,   444,   693,   697,   701,   712,   715,
   721,   581,   581,   725,   451,   452,   439,   439,   729,     6,
   440,   713,     9,    10,   730,   481,    12,   286,   323,   746,
     6,   539,   740,   720,   741,   286,   739,    12,   540,   745,
   433,   690,   748,   750,   749,   764,   765,  -285,   116,   680,
   148,  -285,   449,  -285,   153,   656,   482,   101,   674,   244,
   541,   542,   143,   245,   508,   457,   483,   713,   637,   144,
   407,   582,   532,   512,   681,   744,   173,   682,   724,   145,
   418,   470,   743,   751,   350,   543,   544,   146,   545,   546,
   346,   147,   332,   719,   639,   716,   150,   317,   518,   118,
   119,   120,   121,   122,   123,   124,   125,   742,   359,   747,
   286,   286,   683,   684,   646,   389,   598,   655,   382,   439,
   594,     0,     0,     0,   439,     0,     0,   551,     0,     0,
   547,   522,     0,     0,     0,     0,     0,     0,   528,     0,
     0,     0,     0,   582,   582,   -27,   -27,   -27,   -27,   -27,
   -27,-32768,   125,     0,   565,     0,     0,   554,     0,     0,
     0,     0,   483,     0,   555,     0,     0,     0,     0,   557,
     0,   483,   483,     0,     0,     0,     0,     0,     0,   307,
     0,     0,     0,   605,     0,     0,     0,     0,     0,     0,
   588,     0,     0,     0,   310,     0,     0,   317,     0,   317,
     0,     0,   629,   -28,   -28,   -28,   -28,   -28,   -28,-32768,
   125,     0,     0,     0,     0,     0,   439,   119,   120,   121,
   122,   123,   124,   125,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   565,
     0,     0,     0,     0,     0,     0,     0,   631,     0,     0,
     0,     0,     0,     0,     0,   634,     0,   483,     0,     0,
     0,   636,     0,   654,   483,     0,     0,     6,     7,     8,
     9,    10,     0,    11,    12,    13,     0,     0,     0,     0,
     0,    14,     0,    15,    16,    17,    18,     0,     0,    20,
     0,     0,     0,     0,     0,   694,    21,    22,    23,     0,
     0,     0,    24,    25,    26,   689,   666,    27,    28,     0,
    29,     0,    30,     0,    31,     0,    32,   286,    33,    34,
   483,    35,    36,    37,    38,    39,    40,     0,     0,   483,
   483,    41,     0,    43,     0,     0,     0,     0,   118,   119,
   120,   121,   122,   123,   124,   125,     0,   317,     0,     0,
     0,    44,     0,     0,    45,    46,     0,     0,    47,   689,
    48,    49,    50,     0,    51,     0,     0,    52,     0,     0,
     1,     0,     2,   483,     3,     4,     5,     6,     7,     8,
     9,    10,     0,    11,    12,    13,     0,     0,     0,     0,
     0,    14,     0,    15,    16,    17,    18,    19,  -240,    20,
     0,     0,     0,   752,     0,  -240,    21,    22,    23,     0,
     0,     0,    24,    25,    26,  -240,     0,    27,    28,     0,
    29,     0,    30,  -240,    31,     0,    32,  -240,    33,    34,
     0,    35,    36,    37,    38,    39,    40,   -11,     0,     0,
     0,    41,    42,    43,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    44,     0,     0,    45,    46,     0,     0,    47,     0,
    48,    49,    50,     0,    51,     0,     2,    52,     3,     4,
     5,     6,     7,     8,     9,    10,     0,    11,    12,    13,
     0,     0,     0,     0,     0,    14,     0,    15,    16,    17,
    18,    19,     0,    20,     0,     0,     0,     0,     0,     0,
    21,    22,    23,     0,     0,     0,    24,    25,    26,     0,
     0,    27,    28,     0,    29,     0,    30,     0,    31,     0,
    32,     0,    33,    34,     0,    35,    36,    37,    38,    39,
    40,   -11,     0,     0,     0,    41,    42,    43,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    44,     0,     0,    45,    46,
     0,     0,    47,     0,    48,    49,    50,     0,    51,     0,
     0,    52,     6,     7,     8,     9,    10,     0,    11,    12,
    13,     0,     0,     0,     0,     0,    14,     0,    15,    16,
    17,    18,     0,     0,    20,     0,     0,     0,     0,     0,
     0,    21,    22,    23,     0,     0,     0,    24,    25,    26,
     0,     0,    27,    28,     0,    29,     0,    30,     0,    31,
     0,    32,     0,    33,    34,   261,    35,    36,    37,    38,
    39,    40,     0,     0,     0,     0,    41,     0,    43,     0,
     0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
   125,     0,     0,     0,     0,     0,    44,     0,     0,    45,
    46,     0,     0,    47,     0,    48,    49,    50,     0,    51,
     0,     0,    52,     6,     7,     8,     9,    10,     0,    11,
    12,    13,     0,     0,     0,     0,     0,    14,     0,    15,
    16,    17,    18,     0,     0,    20,     0,     0,     0,     0,
     0,     0,    21,   304,    23,     0,     0,     0,    24,    25,
    26,     0,     0,    27,    28,     0,    29,     0,    30,     0,
    31,     0,    32,     0,    33,    34,     0,    35,   305,    37,
    38,   306,    40,     0,     0,     0,     0,    41,     0,    43,
     0,     0,     0,     0,   118,   119,   120,   121,   122,   123,
   124,   125,     0,     0,     0,     0,     0,    44,     0,     0,
    45,    46,     0,     0,    47,     0,    48,    49,    50,     0,
    51,     0,     0,    52,     6,     7,     8,     9,    10,     0,
    11,    12,    13,     0,     0,     0,     0,     0,    14,     0,
    15,    16,    17,    18,     0,     0,    20,     0,     0,     0,
     0,     0,     0,    21,    22,    23,     0,     0,     0,    24,
    25,    26,     0,     0,    27,    28,     0,    29,     0,    30,
     0,    31,     0,    32,     0,    33,    34,     0,    35,    36,
    37,    38,    39,    40,     0,     0,     0,     0,    41,     0,
    43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
     0,    45,    46,     0,     0,    47,     0,    48,    49,    50,
     0,    51,     0,     0,    52,     6,     7,     8,     9,    10,
     0,    11,    12,    13,     0,     0,     0,     0,     0,    14,
     0,    15,    16,    17,    18,     0,     0,    20,     0,     0,
     0,     0,     0,     0,    21,   304,    23,     0,     0,     0,
    24,    25,    26,     0,     0,    27,    28,     0,    29,     0,
    30,     0,    31,     0,    32,     0,    33,    34,     0,    35,
   305,    37,    38,   306,    40,     0,     0,     0,     0,    41,
     0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
     0,     0,    45,    46,     0,     0,    47,     0,    48,    49,
    50,     0,    51,     0,     0,    52
};

static const short yycheck[] = {    15,
    16,    17,    18,    19,    20,   286,   227,   222,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   371,    94,    35,
   278,   279,    38,    42,   318,    41,   402,    43,    44,    45,
    46,   490,    42,   415,    50,    51,    52,   384,   592,   314,
   315,   384,   102,   517,    60,    61,   321,   272,    95,   324,
   325,   274,     8,   475,    68,    11,    12,    19,   424,   473,
   166,   442,   423,   473,   184,    18,     3,     8,     5,     6,
     7,    79,    56,    73,    15,    47,    42,   197,    86,   360,
    15,    34,    15,    79,     4,    15,    82,   368,    72,    61,
    86,    28,   307,   377,   648,   270,   462,     0,   221,   222,
   461,   224,   118,   119,   120,   121,     4,   282,   608,   125,
    15,   127,   128,   129,   599,   131,   601,   602,   238,   135,
   136,   137,   138,   139,   140,   172,   585,   143,   144,   145,
   146,   147,   479,    99,     0,   517,     8,     9,   100,   105,
   106,   247,   489,    15,    16,   521,   489,   701,   114,   571,
   375,   107,    55,   534,    57,   569,   570,   380,   381,   569,
   570,   102,   443,   444,   148,   340,   101,   102,   101,   102,
   655,   101,   672,   107,   108,   109,    79,   608,   254,    14,
    83,   633,    85,    86,   307,   201,     8,    90,    91,    55,
   474,    94,   107,    79,    13,   318,   417,    13,   657,   658,
     8,   675,    88,    89,    52,    77,    73,    15,    75,   563,
    47,   334,   335,    61,   230,    81,   232,   233,   234,   235,
   236,   515,    88,   529,   240,   531,   100,    99,   244,   245,
   246,   103,    18,   105,    69,   687,   108,   253,    99,   514,
   498,   672,    99,   703,   704,   520,   262,   263,   264,    31,
   266,   267,   268,   272,    13,   221,   222,    35,   224,   225,
     8,   227,   272,    11,    12,    18,   250,    15,    35,   754,
   755,   756,    91,   176,    93,    94,    18,    93,    94,    79,
   214,   215,   216,   217,   218,   219,   220,   747,    88,    89,
    38,    47,   415,   675,    35,   229,    13,   512,    42,    97,
    98,   167,   168,     8,   320,    18,   272,   273,    47,    14,
    15,   277,   278,   279,   437,    63,   376,   105,    66,   442,
   223,    13,   338,   226,    88,    89,    70,    71,    61,   345,
    89,    90,    91,    47,    93,    94,   239,   203,    15,    16,
   243,   307,     8,     9,    35,   361,   249,    35,   251,   572,
    16,   254,   318,    35,     8,     9,   375,   260,    85,    86,
   108,    15,    16,    35,    69,   375,    35,   383,   352,   353,
    87,    88,    89,    90,    91,   659,    93,    94,    23,   660,
   283,   105,   398,   249,     8,   401,    79,    11,    12,   512,
    75,    15,   515,    50,   517,    87,    88,    89,    90,    91,
    35,    93,    94,     8,    42,   421,    11,    12,   424,   375,
   426,   534,    61,    99,   430,   699,   432,   103,   384,   105,
   643,   705,   645,   707,   504,   505,   506,    29,    81,   489,
   446,    84,   492,    41,    36,    88,    47,   371,    35,    92,
    70,    71,    20,    60,    46,   411,   462,    47,   464,    87,
   466,   417,    54,   674,    29,   471,    58,    95,   104,   112,
   113,    36,    40,    13,    42,   106,   482,    86,   402,   485,
   486,    46,    47,   757,   758,   759,   107,   493,    56,    54,
   107,    92,    93,    58,    99,    96,    97,    98,   103,   355,
   105,   107,    99,   427,   428,   511,   103,   513,   105,    19,
   334,   335,    31,    32,    33,   408,    35,    31,    32,    33,
   633,    35,   478,   166,   480,   418,   532,    83,    84,    85,
    86,   581,   107,   489,   490,    81,    82,    83,    84,    85,
    86,   547,   498,   399,   172,   501,   502,    87,    88,    89,
    90,    91,   107,    93,    94,   107,   512,    15,    16,   515,
   107,   204,   675,   206,   207,   208,   209,   210,   211,   212,
   213,   107,   427,   428,   687,   431,   334,   335,   221,   222,
    21,     8,     9,   664,   665,   569,   570,   593,    15,    16,
   596,    99,    61,   221,   222,    35,   224,   521,    82,    83,
    84,    85,    86,   609,   247,   529,   656,   531,    61,    61,
    35,    35,   255,   437,    35,    76,    99,    35,   442,    18,
    47,   445,   265,   579,   100,   104,   632,    78,   106,   585,
   100,   106,   100,   589,   640,   107,   592,   530,    18,   563,
   241,   647,   285,   286,   272,   273,     8,     9,    35,   106,
    77,    35,    79,    15,    16,    77,   480,    35,   259,    35,
   261,    88,    89,   619,   307,   100,   490,    79,    99,    35,
   107,    35,    99,    79,   630,    79,   103,   633,   105,   307,
   100,   108,    99,    79,    47,    47,   692,   693,    86,    35,
   318,    35,   648,   336,   337,    35,    35,    79,    35,    35,
   107,   657,   658,    17,   347,   348,   334,   335,    35,     8,
   534,   667,    11,    12,    35,    77,    15,   360,   674,   725,
     8,     9,    35,   679,    35,   368,   100,    15,    16,   100,
   331,   687,   100,   106,   104,     0,     0,    99,    55,    38,
    69,   103,   343,   105,    77,   701,   108,   375,   618,   163,
    38,    39,    29,   163,   399,   356,   384,   713,   563,    36,
   313,   585,   433,   406,    63,   721,    88,    66,   687,    46,
    47,   372,   721,   743,   247,    63,    64,    54,    66,    67,
   243,    58,   231,   676,   567,   672,    73,   415,   416,    79,
    80,    81,    82,    83,    84,    85,    86,   713,   254,   733,
   443,   444,   101,   102,   579,   276,   495,   591,   273,   437,
   489,    -1,    -1,    -1,   442,    -1,    -1,   445,    -1,    -1,
   108,   422,    -1,    -1,    -1,    -1,    -1,    -1,   429,    -1,
    -1,    -1,    -1,   657,   658,    79,    80,    81,    82,    83,
    84,    85,    86,    -1,   472,    -1,    -1,   448,    -1,    -1,
    -1,    -1,   480,    -1,   455,    -1,    -1,    -1,    -1,   460,
    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   512,
    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,
   481,    -1,    -1,    -1,   512,    -1,    -1,   515,    -1,   517,
    -1,    -1,   535,    79,    80,    81,    82,    83,    84,    85,
    86,    -1,    -1,    -1,    -1,    -1,   534,    80,    81,    82,
    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   567,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   556,    -1,   585,    -1,    -1,
    -1,   562,    -1,   591,   592,    -1,    -1,     8,     9,    10,
    11,    12,    -1,    14,    15,    16,    -1,    -1,    -1,    -1,
    -1,    22,    -1,    24,    25,    26,    27,    -1,    -1,    30,
    -1,    -1,    -1,    -1,    -1,   638,    37,    38,    39,    -1,
    -1,    -1,    43,    44,    45,   633,   607,    48,    49,    -1,
    51,    -1,    53,    -1,    55,    -1,    57,   660,    59,    60,
   648,    62,    63,    64,    65,    66,    67,    -1,    -1,   657,
   658,    72,    -1,    74,    -1,    -1,    -1,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    -1,   675,    -1,    -1,
    -1,    92,    -1,    -1,    95,    96,    -1,    -1,    99,   687,
   101,   102,   103,    -1,   105,    -1,    -1,   108,    -1,    -1,
     1,    -1,     3,   701,     5,     6,     7,     8,     9,    10,
    11,    12,    -1,    14,    15,    16,    -1,    -1,    -1,    -1,
    -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
    -1,    -1,    -1,   746,    -1,    36,    37,    38,    39,    -1,
    -1,    -1,    43,    44,    45,    46,    -1,    48,    49,    -1,
    51,    -1,    53,    54,    55,    -1,    57,    58,    59,    60,
    -1,    62,    63,    64,    65,    66,    67,    68,    -1,    -1,
    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    92,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
   101,   102,   103,    -1,   105,    -1,     3,   108,     5,     6,
     7,     8,     9,    10,    11,    12,    -1,    14,    15,    16,
    -1,    -1,    -1,    -1,    -1,    22,    -1,    24,    25,    26,
    27,    28,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,
    37,    38,    39,    -1,    -1,    -1,    43,    44,    45,    -1,
    -1,    48,    49,    -1,    51,    -1,    53,    -1,    55,    -1,
    57,    -1,    59,    60,    -1,    62,    63,    64,    65,    66,
    67,    68,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    92,    -1,    -1,    95,    96,
    -1,    -1,    99,    -1,   101,   102,   103,    -1,   105,    -1,
    -1,   108,     8,     9,    10,    11,    12,    -1,    14,    15,
    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,    24,    25,
    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,
    -1,    37,    38,    39,    -1,    -1,    -1,    43,    44,    45,
    -1,    -1,    48,    49,    -1,    51,    -1,    53,    -1,    55,
    -1,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,
    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
    86,    -1,    -1,    -1,    -1,    -1,    92,    -1,    -1,    95,
    96,    -1,    -1,    99,    -1,   101,   102,   103,    -1,   105,
    -1,    -1,   108,     8,     9,    10,    11,    12,    -1,    14,
    15,    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,    24,
    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    -1,
    -1,    -1,    37,    38,    39,    -1,    -1,    -1,    43,    44,
    45,    -1,    -1,    48,    49,    -1,    51,    -1,    53,    -1,
    55,    -1,    57,    -1,    59,    60,    -1,    62,    63,    64,
    65,    66,    67,    -1,    -1,    -1,    -1,    72,    -1,    74,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    -1,    -1,    -1,    -1,    -1,    92,    -1,    -1,
    95,    96,    -1,    -1,    99,    -1,   101,   102,   103,    -1,
   105,    -1,    -1,   108,     8,     9,    10,    11,    12,    -1,
    14,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,
    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,    43,
    44,    45,    -1,    -1,    48,    49,    -1,    51,    -1,    53,
    -1,    55,    -1,    57,    -1,    59,    60,    -1,    62,    63,
    64,    65,    66,    67,    -1,    -1,    -1,    -1,    72,    -1,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
    -1,    95,    96,    -1,    -1,    99,    -1,   101,   102,   103,
    -1,   105,    -1,    -1,   108,     8,     9,    10,    11,    12,
    -1,    14,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,
    -1,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
    -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,
    43,    44,    45,    -1,    -1,    48,    49,    -1,    51,    -1,
    53,    -1,    55,    -1,    57,    -1,    59,    60,    -1,    62,
    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    72,
    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   101,   102,
   103,    -1,   105,    -1,    -1,   108
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */


/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
{ yyoutput = yyvsp[-1].t; YYACCEPT; ;
    break;}
case 2:
{ yyoutput = OZ_atom("parseError"); YYABORT; ;
    break;}
case 3:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 4:
{ yyval.t = consList(newCTerm("fSynTopLevelProductionTemplates",
					   yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 5:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 6:
{ yyval.t = consList(newCTerm("fFunctor",newCTerm("fDollar",yyvsp[-2].t),
					   yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 7:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 8:
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-3].t,newCTerm("fSkip",yyvsp[-1].t),
					   yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 9:
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 10:
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-2].t,
					   newCTerm("fSkip",yyvsp[-1].t),yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 11:
{ yyval.t = nilAtom; ;
    break;}
case 12:
{ yyval.t = newCTerm("dirSwitch",yyvsp[0].t); ;
    break;}
case 13:
{ yyval.t = newCTerm("dirLocalSwitches"); ;
    break;}
case 14:
{ yyval.t = newCTerm("dirPushSwitches"); ;
    break;}
case 15:
{ yyval.t = newCTerm("dirPopSwitches"); ;
    break;}
case 16:
{ yyval.t = nilAtom; ;
    break;}
case 17:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 18:
{ if (!strcmp(xytext,"gump"))
		      xy_gumpSyntax = 1;
		    if (!strcmp(xytext,"allowdeprecated"))
		      xy_allowDeprecated = 1;
		    yyval.t = newCTerm("on",newCTerm(xytext),pos());
		  ;
    break;}
case 19:
{ if (!strcmp(xytext,"gump"))
		      xy_gumpSyntax = 0;
		    if (!strcmp(xytext,"allowdeprecated"))
		      xy_allowDeprecated = 0;
		    yyval.t = newCTerm("off",newCTerm(xytext),pos());
		  ;
    break;}
case 20:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 21:
{ yyval.t = newCTerm("fAnd",yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 22:
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 23:
{ yyval.t = newCTerm("fAssign",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 24:
{ yyval.t = newCTerm("fOrElse",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 25:
{ yyval.t = newCTerm("fAndThen",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 26:
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 27:
{ yyval.t = newCTerm("fFdCompare",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 28:
{ yyval.t = newCTerm("fFdIn",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 29:
{ yyval.t = makeCons(yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 30:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 31:
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("#"),yyvsp[-1].t),
				  consList(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 32:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 33:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 34:
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 35:
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 36:
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 37:
{ yyval.t = newCTerm("fObjApply",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 38:
{ yyval.t = newCTerm("fOpApply",newCTerm("~"),
				  consList(yyvsp[0].t,nilAtom),yyvsp[-1].t); ;
    break;}
case 39:
{ yyval.t = newCTerm("fOpApply",newCTerm("."),
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 40:
{ yyval.t = newCTerm("fOpApply",newCTerm("."),
				  consList(yyvsp[-1].t,consList(makeInt(xytext,pos()),
						       nilAtom)),pos()); ;
    break;}
case 41:
{ yyval.t = newCTerm("fOpApply",newCTerm("^"),
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 42:
{ yyval.t = newCTerm("fAt",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 43:
{ yyval.t = newCTerm("fOpApply",newCTerm("!!"),
				  consList(yyvsp[0].t,nilAtom),yyvsp[-1].t); ;
    break;}
case 44:
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 45:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 46:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 47:
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 48:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 49:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 50:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 51:
{ yyval.t = newCTerm("fSelf",pos()); ;
    break;}
case 52:
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 53:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 54:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 55:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 56:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 57:
{ yyval.t = newCTerm("fRecord",newCTerm("fAtom",newCTerm("|"),
						     makeLongPos(yyvsp[-4].t,yyvsp[0].t)),
				  consList(yyvsp[-3].t,consList(yyvsp[-2].t,nilAtom))); ;
    break;}
case 58:
{ yyval.t = newCTerm("fApply",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 59:
{ yyval.t = newCTerm("fProc",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-7].t,makeLongPos(yyvsp[-8].t,yyvsp[0].t)); ;
    break;}
case 60:
{ yyval.t = newCTerm("fFun",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-7].t,makeLongPos(yyvsp[-8].t,yyvsp[0].t)); ;
    break;}
case 61:
{ yyval.t = newCTerm("fFunctor",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 62:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 63:
{ yyval.t = newCTerm("fLocal",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t); ;
    break;}
case 64:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 65:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 66:
{ yyval.t = newCTerm("fLock",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 67:
{ yyval.t = newCTerm("fLockThen",yyvsp[-4].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 68:
{ yyval.t = newCTerm("fThread",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 69:
{ yyval.t = newCTerm("fTry",yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 70:
{ yyval.t = newCTerm("fRaise",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 71:
{ yyval.t = newCTerm("fSkip",pos()); ;
    break;}
case 72:
{ yyval.t = newCTerm("fFail",pos()); ;
    break;}
case 73:
{ yyval.t = newCTerm("fNot",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 74:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 75:
{ yyval.t = newCTerm("fOr",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 76:
{ yyval.t = newCTerm("fDis",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 77:
{ yyval.t = newCTerm("fChoice",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 78:
{ yyval.t = newCTerm("fCondis",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 79:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 80:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 81:
{ yyval.t = nilAtom; ;
    break;}
case 82:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 83:
{ yyval.t = nilAtom; ;
    break;}
case 84:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 85:
{ yyval.t = consList(newCTerm("fRequire",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 86:
{ yyval.t = consList(newCTerm("fPrepare",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 87:
{ yyval.t = consList(newCTerm("fPrepare",yyvsp[-1].t,
					   newCTerm("fSkip",yyvsp[-2].t),yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 88:
{ yyval.t = consList(newCTerm("fImport",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 89:
{ yyval.t = consList(newCTerm("fExport",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 90:
{ yyval.t = consList(newCTerm("fDefine",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 91:
{ yyval.t = consList(newCTerm("fDefine",yyvsp[-1].t,
					   newCTerm("fSkip",yyvsp[-2].t),yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 92:
{ yyval.t = nilAtom; ;
    break;}
case 93:
{ yyval.t = consList(newCTerm("fImportItem",yyvsp[-2].t,nilAtom,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 94:
{ yyval.t = consList(newCTerm("fImportItem",yyvsp[-5].t,yyvsp[-3].t,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 95:
{ yyval.t = newCTerm("fVar",OZ_atom(xytext),yyvsp[0].t); ;
    break;}
case 96:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 97:
{ yyval.t = consList(pair(yyvsp[0].t,yyvsp[-2].t),nilAtom); ;
    break;}
case 98:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 99:
{ yyval.t = consList(pair(yyvsp[-1].t,yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 100:
{ yyval.t = newCTerm("fNoImportAt"); ;
    break;}
case 101:
{ yyval.t = newCTerm("fImportAt",yyvsp[0].t); ;
    break;}
case 102:
{ yyval.t = nilAtom; ;
    break;}
case 103:
{ yyval.t = consList(newCTerm("fExportItem",yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 104:
{ yyval.t = consList(newCTerm("fExportItem",
					   newCTerm("fColon",yyvsp[-3].t,yyvsp[-1].t)),yyvsp[0].t); ;
    break;}
case 105:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 106:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 107:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 108:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 109:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 110:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 111:
{ yyval.t = newCTerm("fLocal",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 112:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 113:
{ yyval.t = nilAtom; ;
    break;}
case 114:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 115:
{ yyval.t = newCTerm("fAtom",nilAtom,yyvsp[0].t); ;
    break;}
case 116:
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("|"),yyvsp[-2].t),
				  consList(yyvsp[-1].t,consList(yyvsp[0].t,nilAtom))); ;
    break;}
case 117:
{ yyval.t = newCTerm("fNoCatch"); ;
    break;}
case 118:
{ yyval.t = newCTerm("fCatch",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 119:
{ yyval.t = newCTerm("fNoFinally"); ;
    break;}
case 120:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 121:
{
		    yyval.t = newCTerm(OZ_isTrue(yyvsp[-2].t)? "fOpenRecord": "fRecord",
				  newCTerm("fAtom",yyvsp[-6].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)),yyvsp[-3].t);
		  ;
    break;}
case 122:
{
		    yyval.t = newCTerm(OZ_isTrue(yyvsp[-2].t)? "fOpenRecord": "fRecord",
				  makeVar(yyvsp[-6].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)),yyvsp[-3].t);
		  ;
    break;}
case 123:
{ yyval.t = OZ_atom(xytext); ;
    break;}
case 124:
{ yyval.t = OZ_unit(); ;
    break;}
case 125:
{ yyval.t = OZ_true(); ;
    break;}
case 126:
{ yyval.t = OZ_false(); ;
    break;}
case 127:
{ yyval.t = OZ_atom(xytext); ;
    break;}
case 128:
{ yyval.t = nilAtom; ;
    break;}
case 129:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 130:
{ yyval.t = consList(newCTerm("fColon",yyvsp[-3].t,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 131:
{ yyval.t = OZ_false(); ;
    break;}
case 132:
{ yyval.t = OZ_true(); ;
    break;}
case 133:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 134:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 135:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 136:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 137:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 138:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 139:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 140:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 141:
{ yyval.t = newCTerm("fBoolCase",yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 142:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 143:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 144:
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 145:
{ yyval.t = newCTerm("fSkip",pos()); ;
    break;}
case 146:
{ checkDeprecation(yyvsp[-3].t);
		    yyval.t = newCTerm("fBoolCase",yyvsp[-5].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-6].t,yyvsp[0].t));
		  ;
    break;}
case 147:
{ yyval.t = newCTerm("fCase",yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 148:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 149:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 150:
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 151:
{ yyval.t = newCTerm("fNoElse",pos()); ;
    break;}
case 152:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 153:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 154:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 155:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 156:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 157:
{ yyval.t = newCTerm("fCaseClause",yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 158:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 159:
{ yyval.t = newCTerm("fSideCondition",yyvsp[-3].t,
				  newCTerm("fSkip",yyvsp[-1].t),yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 160:
{ yyval.t = newCTerm("fSideCondition",yyvsp[-5].t,yyvsp[-2].t,yyvsp[0].t,yyvsp[-3].t); ;
    break;}
case 161:
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 162:
{ yyval.t = makeCons(yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 163:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 164:
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("#"),yyvsp[-1].t),
				  consList(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 165:
{ yyval.t = newCTerm("fClass",yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 166:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 167:
{ yyval.t = newCTerm("fDollar",yyvsp[0].t); ;
    break;}
case 168:
{ yyval.t = nilAtom; ;
    break;}
case 169:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 170:
{ yyval.t = newCTerm("fFrom",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 171:
{ yyval.t = newCTerm("fAttr",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 172:
{ yyval.t = newCTerm("fFeat",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 173:
{ yyval.t = newCTerm("fProp",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 174:
{ yyval.t = nilAtom; ;
    break;}
case 175:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 176:
{ yyval.t = pair(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 177:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 178:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 179:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 180:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 181:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 182:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 183:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 184:
{ yyval.t = nilAtom; ;
    break;}
case 185:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 186:
{ yyval.t = newCTerm("fMeth",yyvsp[-2].t,yyvsp[-1].t,yyvsp[-3].t); ;
    break;}
case 187:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 188:
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 189:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 190:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 191:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 192:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 193:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 194:
{ yyval.t = newCTerm("fRecord",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 195:
{ yyval.t = newCTerm("fOpenRecord",yyvsp[-4].t,yyvsp[-2].t); ;
    break;}
case 196:
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 197:
{ yyval.t = makeVar(xytext); ;
    break;}
case 198:
{ yyval.t = newCTerm("fEscape",makeVar(xytext),yyvsp[-1].t); ;
    break;}
case 199:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 200:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 201:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 202:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 203:
{ yyval.t = nilAtom; ;
    break;}
case 204:
{ yyval.t = newCTerm("fMethArg",yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 205:
{ yyval.t = newCTerm("fMethColonArg",yyvsp[-3].t,yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 206:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 207:
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 208:
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 209:
{ yyval.t = newCTerm("fDefault",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 210:
{ yyval.t = newCTerm("fNoDefault"); ;
    break;}
case 211:
{ yyval.t = newCTerm("fCond",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 212:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 213:
{ yyval.t = newCTerm("fNoElse",pos()); ;
    break;}
case 214:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 215:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 216:
{ yyval.t = newCTerm("fClause",newCTerm("fSkip",yyvsp[-1].t),yyvsp[-3].t,yyvsp[0].t); ;
    break;}
case 217:
{ yyval.t = newCTerm("fClause",yyvsp[-4].t,yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 218:
{ yyval.t = consList(yyvsp[-2].t,consList(yyvsp[0].t,nilAtom)); ;
    break;}
case 219:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 220:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 221:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 222:
{ yyval.t = newCTerm("fFdCompare",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 223:
{ yyval.t = newCTerm("fFdIn",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 224:
{ yyval.t = consList(yyvsp[-2].t,consList(yyvsp[0].t,nilAtom)); ;
    break;}
case 225:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 226:
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[0].t),
				  yyvsp[-1].t,newCTerm("fNoThen",yyvsp[0].t)); ;
    break;}
case 227:
{ yyval.t = newCTerm("fClause",yyvsp[-3].t,yyvsp[-1].t,newCTerm("fNoThen",yyvsp[0].t)); ;
    break;}
case 228:
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[-2].t),yyvsp[-3].t,yyvsp[0].t); ;
    break;}
case 229:
{ yyval.t = newCTerm("fClause",yyvsp[-4].t,yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 230:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 231:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 232:
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 233:
{ yyval.t = makeVar(xytext); ;
    break;}
case 234:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 235:
{ yyval.t = newCTerm("fEscape",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 236:
{ yyval.t = makeString(xytext,pos()); ;
    break;}
case 237:
{ yyval.t = makeInt(xytext,pos()); ;
    break;}
case 238:
{ yyval.t = makeInt(xytext[0],pos()); ;
    break;}
case 239:
{ yyval.t = newCTerm("fFloat",OZ_CStringToFloat(xytext),pos()); ;
    break;}
case 240:
{ yyval.t = pos(); ;
    break;}
case 241:
{ yyval.t = pos(); ;
    break;}
case 242:
{ OZ_Term prefix =
		      scannerPrefix? scannerPrefix: OZ_atom("zy");
		    yyval.t = newCTerm("fScanner",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,prefix,
				  makeLongPos(yyvsp[-6].t,yyvsp[0].t)); ;
    break;}
case 243:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 244:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 245:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 246:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 247:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 248:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 249:
{ yyval.t = newCTerm("fLexicalAbbreviation",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 250:
{ yyval.t = newCTerm("fLexicalAbbreviation",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 251:
{ yyval.t = newCTerm("fLexicalRule",yyvsp[-2].t,yyvsp[-1].t); ;
    break;}
case 252:
{ yyval.t = OZ_string(xytext); ;
    break;}
case 253:
{ yyval.t = OZ_string(xytext); ;
    break;}
case 254:
{ yyval.t = newCTerm("fMode",yyvsp[-2].t,yyvsp[-1].t); ;
    break;}
case 255:
{ yyval.t = nilAtom; ;
    break;}
case 256:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 257:
{ yyval.t = newCTerm("fInheritedModes",yyvsp[0].t); ;
    break;}
case 258:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 259:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 260:
{ OZ_Term expect = parserExpect? parserExpect: OZ_int(0);
		    yyval.t = newCTerm("fParser",yyvsp[-6].t,yyvsp[-5].t,yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,expect,
				  makeLongPos(yyvsp[-7].t,yyvsp[0].t)); ;
    break;}
case 261:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 262:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 263:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 264:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 265:
{ yyval.t = newCTerm("fToken",nilAtom); ;
    break;}
case 266:
{ yyval.t = newCTerm("fToken",yyvsp[0].t); ;
    break;}
case 267:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 268:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 269:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 270:
{ yyval.t = pair(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 271:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 272:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 273:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 274:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 275:
{ *prodKey[depth]++ = '='; ;
    break;}
case 276:
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,yyvsp[-7].t); ;
    break;}
case 277:
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 278:
{ *prodKey[depth]++ = '='; ;
    break;}
case 279:
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,yyvsp[-7].t); ;
    break;}
case 280:
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,newCTerm("none")); ;
    break;}
case 281:
{ yyval.t = consList(yyvsp[-1].t,nilAtom); ;
    break;}
case 282:
{ yyval.t = consList(yyvsp[-1].t,nilAtom); ;
    break;}
case 283:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 286:
{ prodName[depth] = OZ_string(OZ_atomToC(OZ_getArg(yyvsp[-1].t,0))); ;
    break;}
case 287:
{ *prodKey[depth]++ = '('; depth++; ;
    break;}
case 288:
{ depth--; ;
    break;}
case 289:
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 290:
{ *prodKey[depth]++ = '['; depth++; ;
    break;}
case 291:
{ depth--; ;
    break;}
case 292:
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 293:
{ *prodKey[depth]++ = '{'; depth++; ;
    break;}
case 294:
{ depth--; ;
    break;}
case 295:
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 296:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 297:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 298:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 299:
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 300:
{ *prodKey[depth - 1]++ = '/'; *prodKey[depth - 1]++ = '/'; ;
    break;}
case 303:
{ *prodKey[depth]++ = xytext[0]; ;
    break;}
case 304:
{ *prodKey[depth]++ = xytext[0]; ;
    break;}
case 305:
{ *prodKey[depth] = '\0';
		    yyval.t = pair(prodName[depth],OZ_string(prodKeyBuffer[depth]));
		    prodName[depth] = newCTerm("none");
		    prodKey[depth] = prodKeyBuffer[depth];
		  ;
    break;}
case 306:
{ yyval.t = nilAtom; ;
    break;}
case 307:
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 308:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 309:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 310:
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-2].t,nilAtom,yyvsp[-1].t); ;
    break;}
case 311:
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-2].t,nilAtom,yyvsp[-1].t); ;
    break;}
case 312:
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-5].t,yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 313:
{ yyval.t = nilAtom; ;
    break;}
case 314:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 315:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 316:
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 317:
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 318:
{ yyval.t = newCTerm("fSynAlternative", yyvsp[0].t); ;
    break;}
case 319:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 320:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 321:
{ OZ_Term t = yyvsp[0].t;
		    while (terms[depth]) {
		      t = consList(newCTerm("fSynApplication", terms[depth]->term, nilAtom), t);
		      TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		    }
		    yyval.t = newCTerm("fSynSequence", decls[depth], t, yyvsp[-1].t);
		    decls[depth] = nilAtom;
		  ;
    break;}
case 322:
{ yyval.t = newCTerm("fSynSequence", nilAtom, yyvsp[0].t, yyvsp[-1].t); ;
    break;}
case 323:
{ yyval.t = nilAtom; ;
    break;}
case 324:
{ yyval.t = consList(newCTerm("fSynAction",yyvsp[0].t),nilAtom); ;
    break;}
case 325:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 326:
{ yyval.t = consList(newCTerm("fSynTemplateInstantiation", yyvsp[0].t,
					   consList(newCTerm("fSynApplication",
							     terms[depth]->term,
							     nilAtom),
						    nilAtom),
					   yyvsp[-2].t),
				  yyvsp[-1].t);
		    TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		  ;
    break;}
case 327:
{ yyval.t = consList(newCTerm("fSynAssignment", terms[depth]->term, yyvsp[-1].t),
				  yyvsp[0].t);
		    TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		  ;
    break;}
case 328:
{ while (terms[depth]) {
		      decls[depth] = consList(terms[depth]->term, decls[depth]);
		      TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		    }
		    yyval.t = yyvsp[0].t;
		  ;
    break;}
case 329:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 330:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 331:
{ terms[depth] = new TermNode(yyvsp[0].t, terms[depth]); ;
    break;}
case 332:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 333:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 334:
{ yyval.t = newCTerm("fSynAssignment",yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 335:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 336:
{ yyval.t = newCTerm("fSynApplication",yyvsp[0].t,nilAtom); ;
    break;}
case 337:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(newCTerm("fSynApplication",yyvsp[-3].t,
						    nilAtom),
					   nilAtom),yyvsp[-1].t);
		  ;
    break;}
case 338:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 339:
{ yyval.t = newCTerm("fSynAssignment",
				  newCTerm("fEscape",yyvsp[-2].t,yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 340:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 341:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 342:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(yyvsp[-2].t,nilAtom),yyvsp[-3].t);
		  ;
    break;}
case 343:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(yyvsp[-3].t,nilAtom),yyvsp[-1].t);
		  ;
    break;}
case 344:
{ *prodKey[depth]++ = '('; depth++; ;
    break;}
case 345:
{ depth--; ;
    break;}
case 346:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 347:
{ *prodKey[depth]++ = '['; depth++; ;
    break;}
case 348:
{ depth--; ;
    break;}
case 349:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 350:
{ *prodKey[depth]++ = '{'; depth++; ;
    break;}
case 351:
{ depth--; ;
    break;}
case 352:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 353:
{ yyval.t = newCTerm("fSynApplication",yyvsp[0].t,nilAtom); ;
    break;}
case 354:
{ yyval.t = newCTerm("fSynApplication",yyvsp[-4].t,yyvsp[-1].t); ;
    break;}
case 355:
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 356:
{ yyval.t = makeVar(xytext); ;
    break;}
case 357:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 358:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}


void checkDeprecation(OZ_Term coord) {
  char *msg = "use `if' instead of `case' for boolean conditionals";
  if (xy_allowDeprecated) {
    xyreportWarning("deprecation warning",msg,coord);
  } else {
    xyreportError("deprecation error",msg,coord);
  }
}

void xyreportWarning(char *kind, char *msg, OZ_Term coord) {
  OZ_Term args = OZ_cons(OZ_pairA("coord",coord),
			 OZ_cons(OZ_pairAA("kind",kind),
				 OZ_cons(OZ_pairAA("msg",msg),OZ_nil())));
  xy_errorMessages = OZ_cons(OZ_recordInit(OZ_atom("warn"),args),
			     xy_errorMessages);
}

void xyreportError(char *kind, char *msg, OZ_Term coord) {
  OZ_Term args = OZ_cons(OZ_pairA("coord",coord),
			 OZ_cons(OZ_pairAA("kind",kind),
				 OZ_cons(OZ_pairAA("msg",msg),OZ_nil())));
  xy_errorMessages = OZ_cons(OZ_recordInit(OZ_atom("error"),args),
			     xy_errorMessages);
}

void xyreportError(char *kind, char *msg, const char *file,
		   int line, int column) {
  xyreportError(kind,msg,OZ_mkTupleC("pos",3,OZ_atom((char*)file),
				     OZ_int(line),OZ_int(column)));
}

static void xyerror(char *s) {
  char *news;
  if (!strncmp(s, "parse error", 11)) {
    if (strlen(s) > 13) {
      xyreportError("parse error", s + 13, xyFileName, xylino, xycharno());
    } else if (yychar != YYEMPTY) {
      int yychar1 = YYTRANSLATE(yychar);
      char *s2 = new char[30 + strlen(yytname[yychar1])];
      sprintf(s2, "unexpected token `%s'", yytname[yychar1]);
      xyreportError("parse error", s2, xyFileName, xylino, xycharno());
      delete[] s2;
    } else {
      xyreportError("parse error", s, xyFileName, xylino, xycharno());
    }
  } else {
    xyreportError("parse error", s, xyFileName, xylino, xycharno());
  }
}

static OZ_Term init_options(OZ_Term optRec) {
  OZ_Term x;

  x = OZ_subtree(optRec, OZ_atom("gump"));
  xy_gumpSyntax = x == 0? 0: OZ_eq(x, OZ_true());

  x = OZ_subtree(optRec, OZ_atom("allowdeprecated"));
  xy_allowDeprecated = x == 0? 1: OZ_eq(x, OZ_true());

  OZ_Term defines = OZ_subtree(optRec, OZ_atom("defines"));
  return defines;
}

static OZ_Term parse() {
  nilAtom = OZ_nil();

  int i;
  for (i = 0; i < DEPTH; i++) {
    prodKey[i] = prodKeyBuffer[i];
    prodName[i] = OZ_atom("none");
    terms[i] = 0;
    decls[i] = nilAtom;
  }
  depth = 0;
  for (i = 0; i < DEPTH; i++)
    terms[i] = 0;

  xyparse();

  // in case there was a syntax error during the parse, delete garbage:
  xy_exit();
  for (i = 0; i < DEPTH; i++)
    while (terms[i]) {
      TermNode *tmp = terms[i]; terms[i] = terms[i]->next; delete tmp;
    }

  return OZ_pair2(yyoutput, xy_errorMessages);
}

OZ_BI_define(parser_parseFile, 2, 1)
{
  // {ParseFile FileName OptRec ?(AST#ReporterMessages)}
  OZ_declareVirtualString(0, file);
  OZ_declareDetTerm(1, optRec);
  if (!OZ_isRecord(optRec))
    return OZ_typeError(1, "ParseOptions");
  OZ_Term defines = init_options(optRec);
  if (defines == 0 || !OZ_isDictionary(defines))
    return OZ_typeError(1, "ParseOptions");
  if (!xy_init_from_file(file, defines))
    OZ_RETURN(OZ_pair2(OZ_atom("fileNotFound"), OZ_nil()));
  else
    OZ_RETURN(parse());
}
OZ_BI_end

OZ_BI_define(parser_parseVirtualString, 2, 1)
{
  // {ParseVirtualString VS OptRec ?(AST#ReporterMessages)}
  OZ_declareVirtualString(0, str);
  OZ_declareDetTerm(1, optRec);
  if (!OZ_isRecord(optRec))
    return OZ_typeError(1, "ParseOptions");
  OZ_Term defines = init_options(optRec);
  if (defines == 0 || !OZ_isDictionary(defines))
    return OZ_typeError(1, "ParseOptions");
  xy_init_from_string(str, defines);
  OZ_RETURN(parse());
}
OZ_BI_end

OZ_BI_define(parser_expandFileName, 1, 1)
{
  OZ_declareVirtualString(0, in);
  char *out = xy_expand_file_name(in);
  OZ_RETURN(out == NULL? OZ_false(): OZ_atom(out));
}
OZ_BI_end

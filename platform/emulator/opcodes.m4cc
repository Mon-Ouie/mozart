/*
 *  Authors:
 *    Ralf Scheidhauer (Ralf.Scheidhauer@ps.uni-sb.de)
 *
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 *
 *  Copyright:
 *    Organization or Person (Year(s))
 *
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 *
 *  This file is part of Mozart, an implementation
 *  of Oz 3:
 *     $MOZARTURL$
 *
 *  See the file "LICENSE" or
 *     $LICENSEURL$
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */
#include "opcodes.hh"
#include "base.hh"

define(Size,`ifelse($1,`',0,
                    $1,Cache,CacheSize,
                    1)')

define(makeInstr,
     `ifelse($1,0,case $2:,
             $1,1,case $2X: case $2Y: case $2G:,
             $1,2,case $2XX: case $2XY: case $2XG: case $2YX: case $2YY:
                  case $2YG: case $2GX: case $2GY: case $2GG:)') dnl

define(readArg,$1)
define(writeArg,$1)
define(instruction,
       `makeInstr(eval(numOfRegs($2)+numOfRegs($3)+numOfRegs($4)),TOUPPER($1)) return dnl
        eval(1+Size($2)+Size($3)+Size($4)+Size($5)+Size($6)+Size($7)+Size($8))dnl
;')




int sizeOf(Opcode oc)
{
  switch(oc) {
   include(OZINCDIR/instrDefs.m4)

  default:
    warning("sizeOf: unknown opcode: %d",oc);
    return 1;
  }

  return -1;
}

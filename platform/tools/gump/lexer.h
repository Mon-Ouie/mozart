//
// Author:
//   Leif Kornstaedt <kornstae@ps.uni-sb.de>
//
// Copyright:
//   Leif Kornstaedt, 1996, 1997
//
// Last change:
//   $Date$ by $Author$
//   $Revision$
//
// This file is part of Mozart, an implementation of Oz 3:
//    $MOZARTURL$
//
// See the file "LICENSE" or
//    $LICENSEURL$
// for information on usage and redistribution
// of this file, and for a DISCLAIMER OF ALL
// WARRANTIES.
//

//
// This file is included by lexers generated by Gump.
//

#include "oz.h"

static void setEmptyBuffer(yyFlexLexer *i) {
  static yy_buffer_state *p = 0;
  if (!p) {
    p = new yy_buffer_state;
    p->yy_input_file = 0;
    p->yy_ch_buf = new char[2];
    p->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    p->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    p->yy_buf_pos = &p->yy_ch_buf[0];
    p->yy_buf_size = 0;
    p->yy_n_chars = 0;
    p->yy_is_our_buffer = 1;
    p->yy_is_interactive = 0;
    p->yy_at_bol = 1;
    p->yy_fill_buffer = 0;
    p->yy_buffer_status = YY_BUFFER_NEW;
  }
  i->yy_switch_to_buffer(p);
}

OZ_C_proc_begin(yy_lexer_create, 1)
{
  yyFlexLexer *flexLexer = new yyFlexLexer();
  setEmptyBuffer(flexLexer);
  return OZ_unify(OZ_getCArg(0), OZ_int((int) flexLexer));
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_delete, 1)
{
  OZ_declareIntArg(0, i)
  yyFlexLexer *obj = (yyFlexLexer *) i;
  if (obj)
    delete obj;
  return PROCEED;
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_getNextMatch, 2)
{
  OZ_declareIntArg(0, i)
  yyFlexLexer *obj = (yyFlexLexer *) i;

  return OZ_unify(OZ_getCArg(1), OZ_int(obj->yylex()));
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_getAtom, 2)
{
  OZ_declareIntArg(0, i)
  yyFlexLexer *obj = (yyFlexLexer *) i;

  return OZ_unify(OZ_getCArg(1), OZ_atom((char *) obj->YYText()));
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_getString, 2)
{
  OZ_declareIntArg(0, i)
  yyFlexLexer *obj = (yyFlexLexer *) i;
  const char *yytext;
  OZ_Term str;

  // this does not use OZ_string because we don't necessarily want to
  // stop at the first NUL:
  i = obj->YYLeng();
  yytext = obj->YYText();
  str = OZ_nil();
  for (i--; i >= 0; i--)
    str = OZ_cons(OZ_int(yytext[i]), str);
  return OZ_unify(OZ_getCArg(1), str);
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_getLength, 2)
{
  OZ_declareIntArg(0, i)
  yyFlexLexer *obj = (yyFlexLexer *) i;
  return OZ_unify(OZ_getCArg(1), OZ_int(obj->YYLeng()));
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_switchToBuffer, 2)
{
  OZ_declareIntArg(0, i)
  OZ_declareIntArg(1, j)
  if (i) {
    if (j)
      ((yyFlexLexer *) i)->yy_switch_to_buffer((yy_buffer_state *) j);
    else
      setEmptyBuffer((yyFlexLexer *) i);
    return PROCEED;
  } else
    return FAILED;
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_setMode, 2)
{
  OZ_declareIntArg(0, i);
  OZ_declareIntArg(1, j);
  if (i) {
    yyFlexLexer *flexLexer = (yyFlexLexer *) i;
    flexLexer->yy_start = j * 2 + 1;
    return PROCEED;
  } else
    return FAILED;
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_currentMode, 2)
{
  OZ_declareIntArg(0, i);
  if (i) {
    yyFlexLexer *flexLexer = (yyFlexLexer *) i;
    return OZ_unify(OZ_int((flexLexer->yy_start - 1) / 2), OZ_getCArg(1));
  } else
    return FAILED;
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_input, 2)
{
  OZ_declareIntArg(0, i);
  if (i) {
    yyFlexLexer *flexLexer = (yyFlexLexer *) i;
    return OZ_unify(OZ_int(flexLexer->yyinput()), OZ_getCArg(1));
  } else
    return FAILED;
}
OZ_C_proc_end

OZ_C_proc_begin(yy_lexer_unput, 2)
{
  OZ_declareIntArg(0, i);
  OZ_declareIntArg(1, j);
  if (i) {
    char c = j;
    yyFlexLexer *flexLexer = (yyFlexLexer *) i;
    flexLexer->yyunput(1, &c);
    return PROCEED;
  } else
    return FAILED;
}
OZ_C_proc_end

#!/bin/sh -x
#
#  Authors:
#    Christian Schulte <schulte@ps.uni-sb.de>
# 
#  Copyright:
#    Christian Schulte, 1998
# 
#  Last change:
#    $Date$ by $Author$
#    $Revision$
# 
#  This file is part of Mozart, an implementation 
#  of Oz 3:
#     http://mozart.ps.uni-sb.de
# 
#  See the file "LICENSE" or
#     http://mozart.ps.uni-sb.de/LICENSE.html
#  for information on usage and redistribution 
#  of this file, and for a DISCLAIMER OF ALL 
#  WARRANTIES.
#

RPMROOT=/usr/src/redhat
RPMSRC=$RPMROOT/SOURCES
RPMSPEC=$RPMROOT/SPECS
TMPDIR=/tmp

#
# Read dir
#
if test $# -lt 2
then
   echo "usage: create-rpm <src-dir> <dst-dir>" 1>&2;
   exit 1;
fi
BUILDDIR=$1
SRCTAR=`ls ${BUILDDIR}/mozart-*.*-src.tar.gz`
DOCTAR=`ls ${BUILDDIR}/mozart-*.*-doc.tar.gz`
DSTDIR=$2
OZHOME=/usr/lib/mozart

#
# Find version
#

VERSION=`(echo ${SRCTAR} | sed 's/.*mozart-\(.*\..*\)-src.tar.gz/\1/')`
BUILD=1


#
# Build sh files
#

cd $TMPDIR

cat > oz.sh <<EOF
export PATH=${OZHOME}/bin:\${PATH}
EOF

cat > oz.csh <<EOF
setenv PATH ${OZHOME}/bin:\${PATH}
EOF

chmod a+x oz.sh oz.csh
tar cf - oz.csh oz.sh | gzip -9 -c > ${RPMSRC}/mozart-profiles.tar.gz
rm -f oz.sh oz.csh


#
# Build xpm
#

cat > ${RPMSRC}/mozart.xpm <<EOF
/* XPM */
static char * mozart_xpm[] = {
"80 34 40 1",
" 	c None",
".	c #FFFFFF",
"+	c #FFFFCC",
"@	c #FFFF99",
"#	c #FFCCFF",
"$	c #FFCCCC",
"%	c #FFCC99",
"&	c #FFCC66",
"*	c #FFCC33",
"=	c #FF9999",
"-	c #FF9966",
";	c #FF9933",
">	c #CCCCFF",
",	c #CCCCCC",
"'	c #CCCC99",
")	c #CC9933",
"!	c #CC6633",
"~	c #99CCCC",
"{	c #9999CC",
"]	c #999999",
"^	c #999966",
"/	c #999933",
"(	c #996633",
"_	c #993333",
":	c #669999",
"<	c #666699",
"[	c #666666",
"}	c #666633",
"|	c #666600",
"1	c #663333",
"2	c #663300",
"3	c #333366",
"4	c #333333",
"5	c #333300",
"6	c #330033",
"7	c #330000",
"8	c #003333",
"9	c #003300",
"0	c #000033",
"a	c #000000",
"                                                                                ",
"                                     ;;;                                        ",
"                                   =;&-;                                        ",
"                                  ;;  ;;;                                       ",
"                                ;;    %-;                                       ",
"                              ;;      ;;;-                                      ",
"                            $;%       ;;;;$                                     ",
"                           ;;;-  ;;   ;;;;;                                     ",
"                         ---;;;+;;;   ;;;;;;                                    ",
"                       -;7a1;;;;;-;   ;;;;;-                                 ,  ",
"                     -;aaaaaa4-;-;;   ;-- &;;                              aaa  ",
"                    ;;aaaaaaaa5;-;-   ;+   -;$                             aaa  ",
"                  --;aaa;;;aaaa;;;;       %;;;                             aaa  ",
"aaa4>aaaa  aaaa  &;;;aaa;;;;aaaa;;-      ;aa;;;        aaaaaa,   ]aa4aa4 aaaaaaa",
"aaa4aaaaaaaaaaaa  ;-;aaa-;--aaaa;;%    ;)aaa4;;       aaaaaaaa[  ]aa4aa4 aaaaaaa",
"aaaaa,aaaaa]aaaa,  ;;aaaa;;;-aaa;;-  ;-aaaaa(;-;     aaa4  aaaa  ]aaaaa4 aaaaaaa",
"aaaa   aaa   aaa[  -;aaaa;-;;aaa-;;;;aaaaaaa;---      [a    aaa  ]aaaa    ,aaa  ",
"aaaa   aaa   aaa]   --aaaa;;;aaa;-;;-aaa;aaa;;;-;       ,aaaaaa  [aaa     ]aaa  ",
"aaaa   aaa   aaa]   ;;7aaaa5aaa;--;;-a;-;aaa;;;;;-    aaaaaaaaa  [aaa     ]aaa  ",
"aaaa   aaa   aaa]    ;;aaaaaaa!-;;--;;;-;aaa;;-;;;   aaaa   aaa  <aaa     {aaa  ",
"aaaa   aaa   aaa]    +;;;aaaa%     -;-;;-aaa;;;;;;;  aaa    aaa  <aaa     {aaa  ",
"aaaa   aaa   aaa]     ;;--;-        ;;;;-aaa;;aaa-;  aaa   aaaa  <aaa     ,aaa  ",
"aaaa   aaa   aaa]      ;;-;&  -;-    ;;--aaaaaaaa;;  aaaaaaaaaa  <aaa      aaaaa",
"aaaa   aaa   aaa]      ;;;-   ;;--    ;;-aaaaaa;;    ]aaaaa aaa  <aaa      aaaaa",
"                        ;;;   ;;;-    -;}aaaa5;+                                ",
"                        &--   --;;;   ;;;aaa;*                                  ",
"                         --    ;-;-   ;;;;;;                                    ",
"                          -;    ;-;   --;;                                      ",
"                          ;;     -%  +;;                                        ",
"                           -;        ;%                                         ",
"                           ;;;     &;                                           ",
"                            ;;;;;;-                                             ",
"                            +;;-;                                               ",
"                             ;;&                                                "};
EOF

cp ${SRCTAR} ${DOCTAR} ${RPMSRC}

# Generate redhat spec file
cd $TMPDIR
cat > ${RPMSPEC}/mozart-$VERSION-$BUILD.spec <<EOF
# Spec file for Mozart, an efficient and distributed implementation of Oz
# Author: Christian Schulte, 1998
# Copyright: Christian Schulte, 1998
Name: mozart
Version: ${VERSION}
Release: ${BUILD}
Summary: Mozart, an efficient and distributed implementation of Oz
Copyright: More liberal than GPL (see LICENSE)
Vendor: DFKI GmbH
Url: http://mozart.ps.uni-sb.de/
Group: Development/Languages
Packager: Christian Schulte <schulte@ps.uni-sb.de>
Icon: mozart.xpm

Source0: mozart-${VERSION}-src.tar.gz
Source1: mozart-${VERSION}-doc.tar.gz
Source2: mozart-profiles.tar.gz

BuildRoot: /var/tmp/mozart-${VERSION}

%description
The Mozart platform implements Oz, a concurrent object-oriented
language with dataflow synchronization. Oz combines concurrent and
distributed programming with logical inference, making it a unique
choice for developing multi-agent systems. It is an ideal platform for
both general-purpose distributed application development as well as for
problems requiring sophisticated optimization and inferencing
abilities.  We have developed applications in scheduling, placement,
configuration, in natural language and knowledge representation, as
well as sophisticated collaborative tools.

Mozart has been jointly developed by DFKI, SICS, and Université de Louvain. 

This package contains all you need to run and develop Oz programs with
Mozart.
%package doc
Summary: Mozart documentation
Group: Development/Languages
requires: mozart
%description doc
The Mozart platform implements Oz, a concurrent object-oriented
language with dataflow synchronization. Oz combines concurrent and
distributed programming with logical inference, making it a unique
choice for developing multi-agent systems. It is an ideal platform for
both general-purpose distributed application development as well as for
problems requiring sophisticated optimization and inferencing
abilities.  We have developed applications in scheduling, placement,
configuration, in natural language and knowledge representation, as
well as sophisticated collaborative tools.

Mozart has been jointly developed by DFKI, SICS, and Université de Louvain. 

This package contains the extensive online documentation as a set of
HTML pages. It also contains demo applications that can directly be
started the pages.
%package contrib
Summary: Mozart contributions
Group: Development/Languages
requires: mozart
%description contrib
The Mozart platform implements Oz, a concurrent object-oriented
language with dataflow synchronization. Oz combines concurrent and
distributed programming with logical inference, making it a unique
choice for developing multi-agent systems. It is an ideal platform for
both general-purpose distributed application development as well as for
problems requiring sophisticated optimization and inferencing
abilities.  We have developed applications in scheduling, placement,
configuration, in natural language and knowledge representation, as
well as sophisticated collaborative tools.

Mozart has been jointly developed by DFKI, SICS, and Université de Louvain. 

This package contains a collection of contributed software packages that might come in handy for applications like a regular expression package, data base interfaces, and so on.
%prep
rm -rf \$RPM_BUILD_DIR/mozart-${VERSION} 
%setup -c -D -T -a 0
mkdir tmp-doc
cd tmp-doc
gzip -dc \$RPM_SOURCE_DIR/mozart-${VERSION}-doc.tar.gz | tar xf -
mv mozart/doc ..
cd ..
chown -R root .
chgrp -R root .
chmod -R a+rX,g-w,o-w .
rm -rf tmp-doc 
%setup -c -D -T -a 2

%build
cd mozart
CFLAGS="\$RPM_OPT_FLAGS" CXXFLAGS="\$RPM_OPT_FLAGS" ./configure --prefix=\$RPM_BUILD_ROOT$OZHOME

make

%install
PREFIX=\$RPM_BUILD_ROOT$OZHOME
rm -rf \$PREFIX
mkdir -p \$PREFIX
# install docs
rm -rf doc/demo/applets
cp -a doc \$PREFIX
# Generic install
(cd mozart && make install)

# With this installation stripping works fine

%ifarch i386

(cd \$PREFIX/platform/linux-i486 && \
	strip *.exe && \
	strip *.so )

(cd \$PREFIX/contrib && \
	strip ./*/*.so-linux-i486 && \
	strip *.so-linux-i486 )

%endif

# config files
mkdir -p \$RPM_BUILD_ROOT/etc/profile.d
cp -a oz.sh oz.csh \$RPM_BUILD_ROOT/etc/profile.d

%clean
rm -rf \$RPM_BUILD_ROOT
%files
%doc mozart/README mozart/LICENSE mozart/LICENSE.html
%config /etc/profile.d/oz.sh
%config /etc/profile.d/oz.csh
$OZHOME/LICENSE
$OZHOME/LICENSE.html
$OZHOME/bin
$OZHOME/cache
$OZHOME/include
$OZHOME/platform
$OZHOME/share
%files doc
$OZHOME/doc
$OZHOME/examples
%files contrib
$OZHOME/contrib
EOF

#
# No we have all what we need, go and build rpms
#

rpm -ba --clean ${RPMSPEC}/mozart-$VERSION-$BUILD.spec
rm -f ${RPMSPEC}/mozart-$VERSION-$BUILD.spec
rm -f ${RPMSRC}/mozart-$VERSION.tar.gz
rm -f ${RPMSRC}/mozart-doc-$VERSION.tar.gz
rm -f ${RPMSRC}/mozart-profiles.tar.gz

#
# Move the created rpms to destination
#

mv ${RPMROOT}/RPMS/i386/mozart-{,doc-,contrib-}$VERSION-$BUILD.i386.rpm ${DSTDIR}
mv ${RPMROOT}/SRPMS/mozart-$VERSION-$BUILD.src.rpm ${DSTDIR}




BUILDTOP	= @BUILDTOP@
VPATH		= @srcdir@
SRCDIR		= @srcdir@

PREFIX		= @prefix@
OZPREFIX	= $(PREFIX)

OZBIN		= $(PREFIX)/bin
OZLIB		= $(PREFIX)/lib
IMAGESDIR	= $(OZLIB)/images
SHELL		= /bin/sh
LN_S		= @LN_S@
M4		= @M4@

INSTALL		= @INSTALL@
INSTALL_FILE	= $(INSTALL) -m 444
INSTALL_BIN	= $(INSTALL) -m 555
INSTALL_SRC	= @INSTALL_SRC@
INSTALL_DIR	= @INSTALL_DIR@

OZENGINE        = @OZENGINE@

OZFLAGS		= 
OZC		= @OZC@

SCOMPILE	= $(OZC) $(OZFLAGS) -c
COMPILE		= $(OZC) $(OZFLAGS) -l Standard -c
EXEC		= $(OZC) $(OZFLAGS)
EXECWITHSTD	= $(OZC) $(OZFLAGS) \
	-l Application=$(SRCDIR)/Application.ozf,Standard
OZMA		= $(OZC) $(OZFLAGS) -DOZM --ozma

# exports
export BUILDTOP
export SRCDIR
export OZPREFIX
export OZLIB
export OZMAINIT = Init.ozp
export OZMAFILE = -u ozc.ozp
export OZPATH = .:$(SRCDIR)
export OZ_PI = 1
export OZ_LIB = $(OZLIB)
export OZ_LOAD = root=.:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(OZ_LIB)/

SPSRC = System Debug Foreign Error Finalize
OPSRC = OS Open Pickle
APSRC = Application
CPSRC = Search FD Schedule FS
DPSRC = Connection Remote
WPSRC = Tk TkTools
MISCSRC = Misc

RUNFUNCTORS = \
	$(SPSRC:%=%.ozf) \
	$(OPSRC:%=%.ozf) \
	$(APSRC:%=%.ozf) \
	$(CPSRC:%=%.ozf)

FUNCTORS = \
	$(RUNFUNCTORS) \
	$(DPSRC:%=%.ozf) \
	$(WPSRC:%=%.ozf) \
	$(MISCSRC:%=%.ozf) \
	Compiler.ozf 

PEANUTS = \
	System OS Pickle Finalize

PEANUTSFUNCTORS = \
	$(PEANUTS:%=%.ozf)

SYSLETS = \
	ozc ozserver # ozvsserver

.PHONY: all install clean

all: $(FUNCTORS) $(SYSLETS)


#---------------------------------------------------------------------
# Init
#---------------------------------------------------------------------

INITSRC1 = URL.oz Prop.oz
INITSRC = $(INITSRC1:%=init/%) Init.oz

Init.ozp: $(INITSRC)
	OZMAINIT="" $(SCOMPILE) Init.oz -o Init.ozp

#---------------------------------------------------------------------
# Standard
#---------------------------------------------------------------------

STANDARDSRC1 = \
	Forward.oz \
	Record.oz Unit.oz Tuple.oz Atom.oz Name.oz Procedure.oz \
	Int.oz Float.oz Number.oz Bool.oz List.oz Chunk.oz \
	Literal.oz Value.oz Cell.oz Lock.oz Char.oz String.oz \
	VirtualString.oz Object.oz Class.oz Loop.oz Port.oz \
	Time.oz Thread.oz Match.oz Type.oz Space.oz \
	Array.oz Dictionary.oz Exception.oz Lazy.oz Promise.oz \
	Functor.oz BitArray.oz
STANDARDSRC = $(STANDARDSRC1:%=standard/%) Standard.oz

Standard.ozf: $(STANDARDSRC)
	$(EXEC) Standard.oz



#---------------------------------------------------------------------
# Remaining functors
#---------------------------------------------------------------------

$(FUNCTORS): Standard.ozf Init.ozp

Standard.ozf: Init.ozp

%.ozf: sp/%.oz
	$(COMPILE) $< -o $@
%.ozf: op/%.oz
	$(COMPILE) $< -o $@
%.ozf: ap/%.oz
	$(COMPILE) $< -o $@
%.ozf: cp/%.oz
	$(COMPILE) $< -o $@
%.ozf: dp/%.oz
	$(COMPILE) $< -o $@
%.ozf: wp/%.oz
	$(COMPILE) $< -o $@
%.ozf: misc/%.oz
	$(COMPILE) $< -o $@
%.ozf: %.oz
	$(COMPILE) $< -o $@

# ap dependencies
Application.ozf: ap/ArgParser.oz init/Module.oz init/RURL.oz 

Application.ozf: $(PEANUTSFUNCTORS) module-Peanuts.oz

Application.ozf: ../url-defaults.oz

module-Peanuts.oz: 
	echo "[$(PEANUTS:%='%')]" > module-Peanuts.oz

# op dependencies
Open.ozf: op/HtmlTable.oz

# wp dependencies
Tk.ozf: wp/TkInit.oz wp/TkOptions.oz
TkTools.ozf: ../url-defaults.oz

# compiler dependencies
COMPILERSRC1 = \
	InsertAll.oz CompilerClass.oz Misc.oz Reporter.oz ParseOz.oz \
	FormatStrings.oz Builtins.oz CoreLanguage.oz Annotate.oz \
	StaticAnalysis.oz POTypes.oz CodeGen.oz CodeStore.oz \
	CodeEmitter.oz BindingAnalysis.oz TupleSyntax.oz Unnester.oz \
	UnnestFD.oz Assembler.oz Interface.oz \
	GenericInterface.oz QuietInterface.oz

COMPILERSRCNOVER = \
	$(COMPILERSRC1:%=compiler/%) \
	compiler-Builtins.oz compiler-Opcodes.oz compiler-Env.oz \
	Compiler.oz

COMPILERSRC = $(COMPILERSRCNOVER) compiler-Version.oz

compiler-Version.oz: $(COMPILERSRCNOVER) compiler/Opcodes.m4oz
	echo 'DATE = '\'`date '+%h %d 19%y (%T)'`\' > $@ \
	|| (rm -f $@; exit 1)

compiler-Builtins.oz: ../../platform/emulator/bidecl.perl
	$(PERL) $< -oztable \
	-exclude wif,fd,libfd,libschedule,fset,libfset,libparser > $@

compiler-Opcodes.oz: compiler/Opcodes.m4oz ../../platform/emulator/instrDefs.m4
	$(M4) -DEMUDIR=$(SRCDIR)/../../platform/emulator < $< > $@ \
	|| (rm -f $@; exit 1)

functor2env: $(RUNFUNCTORS) Standard.ozf MakeFunctorToEnv.oz 
	$(EXECWITHSTD) MakeFunctorToEnv.oz

compiler-Env.oz: $(RUNFUNCTORS) Standard.ozf functor2env
	$(OZENGINE) functor2env -in=Standard.ozf -out=compiler-Env.oz

Compiler.ozf: $(COMPILERSRC) 



#---------------------------------------------------------------------
# Syslets
#---------------------------------------------------------------------

$(SYSLETS): $(RUNFUNCTORS)

ozc: Standard.ozf MakeBatch.oz BatchCompile.oz
	$(EXECWITHSTD) MakeBatch.oz

ozserver: Standard.ozf MakeOzServer.oz
	$(EXECWITHSTD) MakeOzServer.oz

ozvsserver: Standard.ozf MakeOzVSServer.oz
	$(EXECWITHSTD) MakeOzVSServer.oz

#---------------------------------------------------------------------
# Boot compiler
#---------------------------------------------------------------------

ozc.ozm: 
# Don't use this as target: compiler-Env.oz compiler-Opcodes.oz compiler-Builtins.oz 
	$(OZMA) -o /tmp/$$$$.ozm MakeAssembly.oz && \
	mv -f /tmp/$$$$.ozm $@

ozc.ozp: ozc.ozm
	OZMAINIT="" OZMAFILE="-b $<" $(SRCDIR)/ozc.sh

#---------------------------------------------------------------------
# Installation
#---------------------------------------------------------------------

LIBFUNCTORS = \
	$(FUNCTORS:%=$(OZLIB)/%) $(OZLIB)/Init.ozp
BINFILES = \
	$(SYSLETS:%=$(OZBIN)/%)
STAGEEXTRAFILES = \
	$(OZLIB)/Standard.ozf $(OZLIB)/ozc.ozm \
	$(OZLIB)/ozc.ozp

.PHONY: install install-stage install-main install-images install-cache

install: install-main install-images install-cache


install-stage: install-main $(STAGEEXTRAFILES)

install-main: all \
	$(OZLIB) $(LIBFUNCTORS) \
	$(OZBIN) $(BINFILES)

IMAGES1 = mini-dec.xbm mini-inc.xbm
IMAGES = $(IMAGES1:%=$(IMAGESDIR)/%)

install-images: \
	$(IMAGESDIR) $(IMAGES)

CACHEDIR  = $(PREFIX)/cache/http/www.ps.uni-sb.de
CACHELINK = $(CACHEDIR)/ozhome

install-cache: \
	$(CACHEDIR) $(CACHELINK)

$(CACHEDIR):
	$(INSTALL_DIR) $(CACHEDIR)

$(CACHELINK): $(CACHEDIR)
	$(LN_S)  $(PREFIX) $(CACHELINK)

$(OZLIB) $(IMAGESDIR) $(OZBIN):
	$(INSTALL_DIR) $@

$(OZLIB)/%.ozf: %.ozf
	$(INSTALL_FILE) $< $@

$(OZLIB)/%.ozp: %.ozp
	$(INSTALL_FILE) $< $@

$(OZLIB)/%.ozm: %.ozm
	$(INSTALL_FILE) $< $@

$(IMAGESDIR)/%: images/%
	$(INSTALL_FILE) $< $@

$(OZBIN)/%: %
	$(INSTALL_BIN) $< $@

#---------------------------------------------------------------------
# Automatic Makefile update
#---------------------------------------------------------------------

Makefile: Makefile.in ../config.status
	cd .. && ./config.status

../config.status: ../configure
	cd .. && ./config.status --recheck


#---------------------------------------------------------------------
# Cleaning up
#---------------------------------------------------------------------

.PHONY: clean veryclean distclean tags

clean:
	-rm -f *~ *.bak
	-rm -f compiler-Version.oz compiler-Builtins.oz 
	-rm -f compiler-Opcodes.oz
	-rm -f module-Peanuts.oz
	-rm -f envgen compiler-Env.oz
	-rm -f $(FUNCTORS) Standard.ozf Init.ozp
	-rm -f $(SYSLETS)

veryclean: clean
	-rm -f -r TAGS $(STAGE1) $(STAGE2) $(STAGE2B) $(STAGE3) $(STAGE3B)

distclean: veryclean
	-rm -f Makefile

tags:
	etags --language=none \
	--regex='/[ \t]*proc\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*fun\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*class[ \t]+!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*meth\([ \t]+\|[ \t]*![ \t]*\)\([A-Za-z0-9][A-Za-z0-9_]*\|`.+`|'\''.+'\''\)/\2/' \
	$(ALLSRCS)

#---------------------------------------------------------------------
# Bootstrapping and Testing Functors Locally
#---------------------------------------------------------------------
#    make check   or   make thorough-check
# Test a new emulator with
#    make check OZEMULATOR=$(HOME)/Oz/Emulator/oz.emulator.bin

.PHONY: bootstrap stage1 stage2 stage2b stage3 stage3b check thorough-check newozma

URL=http\\://www.ps.uni-sb.de/ozhome

# use Ozma to create the functors
bootstrap:
	$(MAKE) ozc.ozp all \
	OZC=$(SRCDIR)/ozc.sh \
	OZINIT=Init.ozp \
	OZ_LIB=. \
	OZ_LOAD=root=.:prefix=$(URL)/lib/=./:=

STAGE1=./stage1
STAGE2=./stage2
STAGE2B=./stage2b
STAGE3=./stage3
STAGE3B=./stage3b

# stage1: create the initial functors using the installed ones
stage1:
	$(MAKE) install-main PREFIX=$(STAGE1)

# stage2: recreate the functors and Ozma file using the stage1 functors
stage2:
	mv $(SRCDIR)/ozc.ozm ozc.ozm.save
	trap "s=$$?;mv ozc.ozm.save $(SRCDIR)/ozc.ozm; trap 0 1 2 15; exit $$s" 0 1 2 15; \
	$(MAKE) install-stage PREFIX=$(STAGE2) \
	OZ_LOAD=prefix=$(URL)/lib/=$(STAGE1)/lib/:.:=\
	OZC=$(STAGE1)/bin/ozc \
	OZINIT=$(STAGE1)/lib/Init.ozp


# stage2b: recreate the functors and Ozma file using the stage2 functors
stage2b:
	mv $(SRCDIR)/ozc.ozm ozc.ozm.save
	trap "s=$$?;mv ozc.ozm.save $(SRCDIR)/ozc.ozm; trap 0 1 2 15; exit $$s" 0 1 2 15; \
	$(MAKE) install-stage PREFIX=$(STAGE2B) \
	OZ_LOAD=prefix=$(URL)/lib/=$(STAGE2)/lib/:prefix=$(URL)/tools/=$(URL)/tools/:.:=\
	OZC=$(STAGE2)/bin/ozc \
	OZINIT=$(STAGE2)/lib/Init.ozp

# stage3: recreate the functors and Ozma file using the stage2 Ozma file
stage3:
	$(MAKE) ozc.ozp install-stage PREFIX=$(STAGE3) \
	OZ_LOAD=all=.:all=tyc/lib:all=tyc/tools:prefix=$(URL)/tools/=$(URL)/tools/:= \
	OZC=$(SRCDIR)/ozc.sh \
	OZINIT=$(STAGE2)/lib/Init.ozp \
	OZMAINIT=$(STAGE2)/lib/Init.ozp \
	OZMAFILE="-u $(STAGE2)/lib/ozc.ozp"

# stage3b: recreate the functorss and Ozma file using the stage3 functors
stage3b:
	$(MAKE) install-stage PREFIX=$(STAGE3B) \
	OZ_LOAD=prefix=$(URL)/lib/=$(STAGE3)/lib/:prefix=$(URL)/tools/=$(URL)/tools/:.:=\
	OZC=$(STAGE3)/bin/ozc \
	OZINIT=$(STAGE3)/lib/Init.ozp

# for making incompatible changes to instructions
#  1. make newozma                 # create new ozc.ozm with old emulator
#  2. make bootstrap OZEMULATOR=.. # bootstrap again with new emulator
newozma:
	$(MAKE) clean
	$(MAKE) stage1 OZFLAGS="-DNO_ASSEMBLER"
	$(MAKE) clean
	$(MAKE) ozc.ozm \
	 OZ_LOAD=prefix=$(URL)/lib/=$(STAGE1)/lib/:.:=\
	 OZC=$(STAGE1)/bin/ozc \
	 OZINIT=$(STAGE1)/lib/Init.ozp

check:
	$(MAKE) bootstrap stage1 && \
	$(MAKE) clean stage2 && \
	$(MAKE) clean stage3

thorough-check:
	$(MAKE) clean bootstrap stage1 && \
	$(MAKE) clean stage2 && \
	$(MAKE) clean stage2b && \
	$(MAKE) clean stage3 && \
	$(MAKE) clean stage3b

# no suffixes needed
.SUFFIXES:

#
# Currently unused
#

#---------------------------------------------------------------------
# Compiler

#FunMisc.ozp: compiler/Misc.oz $(STANDARD)
#
#FunBuiltins.ozp: compiler/Builtins.oz compiler-Builtins.oz $(STANDARD)
#
#FunSA.ozp: SP-new.env CP-new.env compiler/Misc-new.env \
#	compiler/POTypes.oz compiler/StaticAnalysis.oz $(STANDARD)
#
#FunCode.ozp: SP-new.env compiler/Misc-new.env compiler/CodeStore.oz \
#	compiler/CodeEmitter.oz compiler/CodeGen.oz $(STANDARD)
#
#FunCore.ozp: SP-new.env compiler/Misc-new.env compiler/Annotate.oz \
#	compiler/CoreLanguage.oz $(STANDARD)
#
#FunUnnest.ozp: CP-new.env compiler/Misc-new.env compiler/TupleSyntax.oz \
#	compiler/BindingAnalysis.oz compiler/UnnestFD.oz compiler/Unnester.oz \
#	$(STANDARD)
#
#FunAssembler.ozp: SP-new.env compiler/Assembler.oz compiler-Opcodes.oz \
#	$(STANDARD)
#
#FunCompiler.ozp: SP-new.env compiler/Misc-new.env \
#	compiler/FormatStrings.oz compiler/Reporter.oz compiler/ParseOz.oz \
#	compiler/Interface.oz compiler/CompilerClass.oz \
#	compiler/GenericInterface.oz compiler/QuietInterface.oz \
#	compiler-Version.oz $(STANDARD)
#
#COMPILER_BIG = @COMPILER_BIG@
#COMPILER_FUN = @COMPILER_FUN@
#
#$(COMPILER_BIG): $(DUMPINTRO) $(COMPILERSRC) SP.env CP.env \
#	../tools/Gump.env Compiler.env Init.ozp
#
#$(COMPILER_FUN): $(DUMPINTRO) SP.env CP.env ../tools/Gump.env Compiler.env \
#	Init.ozp FunMisc.ozp FunBuiltins.ozp FunSA.ozp FunCode.ozp \
#	FunCore.ozp FunUnnest.ozp FunAssembler.ozp FunCompiler.ozp \
#	compiler/FunMake.oz $(TYCS)
#	$(OZC) $(OZFLAGS) --include=DumpIntro.oz -l OP \
#	-c compiler/FunMake.oz -o Compiler.ozp
#









BUILDTOP        = @BUILDTOP@
BUILDDIR        = $(BUILDTOP)/share/lib
BUILDEMU        = $(BUILDTOP)/platform/emulator
VPATH           = @srcdir@
SRCDIR          = @srcdir@
HOMEURL         = @HOMEURL@
BOOTURL         = x-oz://boot
SYSTEMURL       = x-oz://system
PLATFORM        = @PLATFORM@

PREFIX          = @prefix@
OZPREFIX        = @prefix@

OZBIN           = $(PREFIX)/bin
OZLIB           = $(PREFIX)/share
IMAGESDIR       = $(OZLIB)/images
SHELL           = /bin/sh
LN_S            = @LN_S@
M4              = @M4@
PERL            = @PERL@
THEGZIP         = @THEGZIP@

INSTALL         = @INSTALL@
INSTALL_FILE    = $(INSTALL) -m 444
INSTALL_BIN     = $(INSTALL) -m 555
INSTALL_DIR     = @INSTALL_DIR@

OZENGINE        = @OZENGINE@

COMPRESSLEVEL   = @oz_picklecompression@
COMPRESSFLAGS   = -z $(COMPRESSLEVEL)

EXE_EXT         = @EXE_EXT@

DENYS_EVENTS    = @DENYS_EVENTS@
ifeq ($(DENYS_EVENTS),yes)
DENYS_FLAGS     = -DDENYS_EVENTS
DENYS_SPSRCS    = EventSIGCHLD Timer
DENYS_DPSRCS    = VirtualSite Perdio
else
DENYS_FLAGS     =
DENYS_SPSRCS    =
DENYS_DPSRCS    =
endif
SITE_PROPERTY   = @SITE_PROPERTY@
ifeq ($(SITE_PROPERTY),yes)
SITE_PROPERTY_FLAGS     = -DSITE_PROPERTY
SITE_PROPERTY_SRCS      = SiteProperty
else
SITE_PROPERTY_FLAGS     =
SITE_PROPERTY_SRCS      =
endif

GTK_ENABLED     = @GTK_ENABLED@
ifeq ($(GTK_ENABLED),yes)
GTK_FLAGS       = -DGTK_ENABLED
else
GTK_FLAGS       =
endif

QTK_ENABLED     = @QTK_ENABLED@
ifeq ($(QTK_ENABLED),yes)
QTK_FLAGS       = -DQTK_ENABLED
else
QTK_FLAGS       =
endif

OZCFLAGS        = $(COMPRESSFLAGS) $(DENYS_FLAGS) $(SITE_PROPERTY_FLAGS) $(GTK_FLAGS) $(QTK_FLAGS)
OZC             = @OZC@

OZLOADSEP       = @OZLOADSEP@
OZLOADWIN       = @OZLOADWIN@
OZLOADCACHE     = @OZLOADCACHE@
CYGPATH         = $(SRCDIR)/cygpath.sh

CYG_SRCDIR      = $(shell $(CYGPATH) $(SRCDIR))
CYG_BUILDDIR    = $(shell $(CYGPATH) $(BUILDDIR))
CYG_PREFIX      = $(shell $(CYGPATH) $(PREFIX))
CYG_BUILDEMU    = $(shell $(CYGPATH) $(BUILDEMU))
ifeq ($(OZLOADCACHE),)
CYG_OZCACHE     =
else
CYG_OZCACHE     = %cache=$(shell $(CYGPATH) $(OZLOADCACHE))/cache
endif

COMPILENOMODE   = $(OZC) $(OZCFLAGS) -l Base=$(CYG_SRCDIR)/Base.ozf -b $(CYG_BUILDDIR)/
COMPILE         = $(COMPILENOMODE) -c
COMPILEEXEC     = $(COMPILENOMODE) -x @OZEXECFILE@

OZLFLAGS        = $(COMPRESSFLAGS)
OZL             = @OZL@

P2T             = $(SRCDIR)/p2t.sh
T2P             = $(SRCDIR)/t2p.sh

# exports
export BUILDTOP
export SRCDIR
export OZPREFIX
export OZLIB
export OZPATH = .$(OZLOADSEP)$(shell $(CYGPATH) $(SRCDIR))
export OZ_PI = 1
export OZ_LIB = $(OZLIB)
export OZ_LOAD = $(subst %,$(OZLOADSEP),root=.%prefix=$(CYG_SRCDIR)/=$(CYG_BUILDDIR)/%cache=$(CYG_PREFIX)/cache%prefix=/=/$(OZLOADWIN)$(CYG_OZCACHE)%=)

export OZMAKE_COPYALWAYS        = no
export OZMAKE_VERBOSE           = no

SPSRC   = Error ErrorFormatters Finalize Service $(DENYS_SPSRCS)
OPSRC   = Open
APSRC   = Application
CPSRC1  = Search FD FS Combinator RecordC
CPSRC2  = Schedule ParSearch ParWorker ParLogging
DPSRC   = Connection Discovery Remote RemoteServer Fault URL DPStatistics DPInit ConnectionFunctor AcceptFunctor ConnectAcceptModule DPControl $(DENYS_DPSRCS)
WPSRC   = Tk TkTools Tix
GTKSRC  = GTK GDK Glade GnomeCanvas GTKSimpleBuilder
ifeq ($(QTK_ENABLED),yes)
QTKSRC  = QTk QTkDevel
else
QTKSRC  =
endif
SUPPSRC = Type Narrator Listener ErrorListener DefaultURL ObjectSupport
MACSRC  = Macro BackquoteMacro LoopMacro

RUNFUNCTORS1 = \
        $(SPSRC:%=%.ozf) \
        $(OPSRC:%=%.ozf) \
        $(APSRC:%=%.ozf) \
        $(CPSRC1:%=%.ozf) \
        $(MACSRC:%=%.ozf)
RUNFUNCTORS = $(RUNFUNCTORS1) Init.ozf

FUNCTORS1 = \
        $(RUNFUNCTORS1) \
        $(DPSRC:%=%.ozf) \
        $(WPSRC:%=%.ozf) \
        $(GTKSRC:%=%.ozf) \
        $(SUPPSRC:%=%.ozf) \
        $(CPSRC2:%=%.ozf) \
        $(QTKSRC:%=%.ozf) \
        Compiler.ozf

FUNCTORS = $(FUNCTORS1) Init.ozf

SYSLETS0 = ozc ozl
SYSLETS = $(SYSLETS0:%=%$(EXE_EXT))

.PHONY: all

all: $(FUNCTORS) $(SYSLETS)

#---------------------------------------------------------------------
# Automatic Makefile update
#---------------------------------------------------------------------

Makefile: Makefile.in ../config.status
        cd .. && ./config.status

support/DefaultURL.oz: support/DefaultURL.oz.in ../config.status
        cd .. && ./config.status

../config.status: ../configure
        cd .. && ./config.status --recheck

#---------------------------------------------------------------------
# Init
#---------------------------------------------------------------------

INITSRC0 = Init Resolve Prop Module ModuleAbstractions UrlExpand

INITSRC = $(INITSRC0:%=init/%.oz)

Init.ozf: URL.ozf DefaultURL.ozf $(INITSRC)
        $(COMPILE) init/Init.oz -o Init.ozf

#---------------------------------------------------------------------
# Base
#---------------------------------------------------------------------

.PHONY: new-base

BASESRC1 = \
        Record Unit Tuple Atom Name Procedure \
        Int Float Number Bool List Chunk \
        Literal Value Cell Lock Char String \
        VirtualString Object Loop Port \
        Time Thread Array Dictionary WeakDictionary \
        Exception Functor BitArray BitString \
        ByteString ForeignPointer $(SITE_PROPERTY_SRCS) Base

BASESRC = $(BASESRC1:%=base/%.oz)

new-base: $(BASESRC)
        $(OZC) $(OZCFLAGS) -c base/Base.oz -o $(SRCDIR)/Base.ozf

#---------------------------------------------------------------------
# Remaining functors
#---------------------------------------------------------------------

$(FUNCTORS): Base.ozf

%.ozf: sp/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

%.ozf: op/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

%.ozf: ap/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

Search.ozf: cp/Search.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@
CpSupport.ozf: cp/CpSupport.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@
%.ozf: cp/%.oz CpSupport.ozf Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

PARSEARCHFUNCTORS = \
        ParBarChart.ozf ParFindLimit.ozf ParGetColor.ozf \
        ParLogging.ozf ParManager.ozf ParProcess.ozf \
        ParSearch.ozf ParServer.ozf ParStatistics.ozf \
        ParTraceSpace.ozf ParWorker.ozf
ParBarChart.ozf: ParGetColor.ozf ParFindLimit.ozf ParServer.ozf
ParLogging.ozf: ParStatistics.ozf
ParStatistics.ozf: ParBarChart.ozf
ParManager.ozf: ParLogging.ozf
ParSearchTmp.ozf: cp/par/ParSearch.oz \
        ParServer.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@
ParWorkerTmp.ozf: cp/par/ParWorker.oz \
        ParLogging.ozf ParTraceSpace.ozf ParServer.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@
ParLoggingTmp.ozf: cp/par/ParLogging.oz
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@
ParWorker.ozf: ParWorkerTmp.ozf ozl$(EXE_EXT)
        $(OZENGINE) ozl$(EXE_EXT) $(COMPRESSFLAGS) $< -o $@
ParLogging.ozf: ParLoggingTmp.ozf ParStatistics.ozf ozl$(EXE_EXT)
        $(OZENGINE) ozl$(EXE_EXT) $(COMPRESSFLAGS) $< -o $@
ParSearch.ozf: ParSearchTmp.ozf ParProcess.ozf ParManager.ozf ozl$(EXE_EXT)
        $(OZENGINE) ozl$(EXE_EXT) $(COMPRESSFLAGS) $< -o $@
%.ozf: cp/par/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@


%.ozf: dp/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

%.ozf: wp/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

%.ozf: gtk/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

%.ozf: qtk/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

%.ozf: %.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

%.ozf: compiler/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

%.ozf: support/%.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

# support dependencies
DefaultURL.ozf: URL.ozf

# op dependencies
Open.ozf: op/HtmlTable.oz

# wp dependencies
Tk.ozf: wp/Tk.oz wp/TkInit.oz wp/TkOptions.oz
        $(COMPILE) --norecordhoist $(shell $(CYGPATH) "$<") -o $@
TkTools.ozf: DefaultURL.ozf

# gtk dependencies and rules
SPECS_PATH         = $(VPATH)/gtk/specs
GTK_SPECS          = $(SPECS_PATH)/gtk/*.spec
GDK_SPECS          = $(SPECS_PATH)/gdk/*.spec
GNOME_CANVAS_SPECS = $(SPECS_PATH)/gnome-canvas/*.spec
BUILDER_SRC        = $(VPATH)/gtk/builder.perl
BUILDER            = $(PERL) $(BUILDER_SRC)

GTK.ozf: gtkclasses.oz gtkexports.oz

gtkclasses.oz: $(GTK_SPECS) $(BUILDER_SRC)
        $(BUILDER) --oz-classes $(GTK_SPECS) > $@

gtkexports.oz: $(GTK_SPECS) $(BUILDER_SRC)
        $(BUILDER) --oz-exportlist $(GTK_SPECS) > $@

GDK.ozf: gdkclasses.oz gdkexports.oz

gdkclasses.oz: $(GDK_SPECS) $(BUILDER_SRC)
        $(BUILDER) --oz-classes $(GDK_SPECS) > $@

gdkexports.oz: $(GDK_SPECS) $(BUILDER_SRC)
        $(BUILDER) --oz-exportlist $(GDK_SPECS) > $@

GnomeCanvas.ozf: gnome-canvas-classes.oz gnome-canvas-exports.oz

gnome-canvas-classes.oz: $(GNOME_CANVAS_SPECS) $(BUILDER_SRC)
        $(BUILDER) --oz-classes $(GNOME_CANVAS_SPECS) > $@

gnome-canvas-exports.oz: $(GNOME_CANVAS_SPECS) $(BUILDER_SRC)
        $(BUILDER) --oz-exportlist $(GNOME_CANVAS_SPECS) > $@

# QTk dependencies

QTKDEPS1        = \
        QTkDevel.ozf QTkImage.ozf QTkMenu.ozf QTkSpace.ozf QTkLabel.ozf \
        QTkButton.ozf QTkCheckbutton.ozf QTkRadiobutton.ozf             \
        QTkScale.ozf QTkScrollbar.ozf QTkEntry.ozf QTkCanvas.ozf        \
        QTkListbox.ozf QTkText.ozf

QTKDEPS2        = $(QTKDEPS1)   \
        QTkPlaceholder.ozf      \
        QTkPanel.ozf QTkRubberframe.ozf QTkScrollframe.ozf QTkToolbar.ozf

QTKDEPS3        = $(QTKDEPS2)   \
        QTkDropdownlistbox.ozf QTkNumberentry.ozf

ifeq ($(QTK_ENABLED),yes)
QTKCLEAN        = $(QTKDEPS3) QTkBare.ozf QTkDropdownbutton_bitmap.ozf \
        QTkDropdownbutton_gen_bitmap.ozf QTkImageLibBoot.ozf \
        QTkNumberentry_bitmap.ozf QTkNumberentry_gen_bitmap.ozf \
        mini-dec.xbm mini-down.xbm mini-inc.xbm
else
QTKCLEAN        =
endif


QTkBare.ozf:qtk/QTk.oz qtk/Frame.oz qtk/QTkClipboard.oz qtk/QTkFont.oz qtk/QTkDialogbox.oz
        $(COMPILE) --define=FULLLOAD $(shell $(CYGPATH) "$<") -o $@

QTkDevel.ozf:qtk/QTkDevel.oz
        $(COMPILE) --define=DEBUG $(shell $(CYGPATH) "$<") -o $@

mini-down.xbm:qtk/mini-down.xbm
        cp $< $@

mini-dec.xbm:qtk/mini-dec.xbm
        cp $< $@

mini-inc.xbm:qtk/mini-inc.xbm
        cp $< $@

QTkDropdownbutton_bitmap.ozf: \
        QTkImageLibBoot.ozf $(QTKDEPS2) \
        QTkDropdownbutton_gen_bitmap.ozf mini-down.xbm
        $(OZENGINE) QTkDropdownbutton_gen_bitmap.ozf

QTkDropdownlistbox.ozf: \
        qtk/QTkDropdownlistbox.oz \
        QTkBare.ozf QTkImage.ozf QTkDevel.ozf \
        QTkDropdownbutton_bitmap.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

QTkNumberentry_bitmap.ozf: \
        QTkImageLibBoot.ozf $(QTKDEPS2) \
        QTkNumberentry_gen_bitmap.ozf mini-inc.xbm mini-dec.xbm
        $(OZENGINE) QTkNumberentry_gen_bitmap.ozf

QTkNumberentry.ozf: QTkNumberentry_bitmap.ozf

QTk.ozf: QTkBare.ozf $(QTKDEPS3) ozl$(EXE_EXT)
        $(OZENGINE) ozl$(EXE_EXT) $(COMPRESSFLAGS) $< -o $@


# compiler dependencies
COMPILERSRC1 = \
        CompilerClass.oz PrintName.oz ParseOz.oz FormatStrings.oz \
        CheckTupleSyntax.oz GroundZip.oz Builtins.oz Core.oz Annotate.oz \
        StaticAnalysis.oz POTypes.oz PatternMatching.oz CodeGen.oz \
        CodeStore.oz CodeEmitter.oz BindingAnalysis.oz TupleSyntax.oz \
        Unnester.oz UnnestFD.oz Assembler.oz Interface.oz Abstractions.oz \
        Errors.oz RunTime.oz ForLoop.oz

COMPILERSRCEXTRA = compiler-Builtins.oz

COMPILERSRCNOVER = \
        $(COMPILERSRC1:%=compiler/%) $(COMPILERSRCEXTRA)

# NOTE: update this list also in platform/emulator/Makefile.in
BIMODSPECS = \
        Array Atom BitArray Bool Cell Char Chunk Class \
        Dictionary Exception Float ForeignPointer Int List Literal \
        Lock Name Number Object Port Procedure Record \
        String Thread Time Tuple Unit Value VirtualString \
        BitString ByteString Word InterFault \
        WeakDictionary Alice $(SITE_PROPERTY_SRCS)

EMUSRCDIR=$(SRCDIR)/../../platform/emulator
BIDECL=$(EMUSRCDIR)/bidecl.perl
BIMODFILES = $(BIMODSPECS:%=$(EMUSRCDIR)/mod%.spec)

first: $(COMPILERSRCEXTRA)

compiler-Builtins.oz: $(BIMODFILES)
        $(PERL) $(BIDECL) -srcdir $(EMUSRCDIR) -builtins $(BIMODSPECS) > $@

FUNFUNCTORS = PrintName.ozf Builtins.ozf Unnester.ozf Core.ozf \
        StaticAnalysis.ozf CodeGen.ozf Assembler.ozf \
        Main.ozf RunTime.ozf Annotate.ozf GroundZip.ozf \
        ForLoop.ozf

PrintName.ozf: compiler/PrintName.oz

GroundZip.ozf: compiler/GroundZip.oz

Builtins.ozf: compiler/Builtins.oz GroundZip.ozf compiler-Builtins.oz

Unnester.ozf: compiler/Unnester.oz compiler/TupleSyntax.oz \
        compiler/BindingAnalysis.oz compiler/UnnestFD.oz

Annotate.ozf: compiler/Annotate.oz

Core.ozf: compiler/Core.oz Annotate.ozf

StaticAnalysis.ozf: compiler/StaticAnalysis.oz compiler/POTypes.oz \
        Search.ozf FD.ozf FS.ozf
        $(COMPILE) compiler/StaticAnalysis.oz -o $@

CodeGen.ozf: compiler/CodeGen.oz compiler/PatternMatching.oz \
        compiler/CodeStore.oz compiler/CodeEmitter.oz

Assembler.ozf: compiler/Assembler.oz

Main.ozf: compiler/Main.oz compiler/FormatStrings.oz \
        compiler/CheckTupleSyntax.oz compiler/ParseOz.oz \
        compiler/CompilerClass.oz compiler/Interface.oz \
        compiler/Abstractions.oz compiler/Errors.oz \
        Base.ozf

RunTime.ozf: compiler/RunTime.oz Base.ozf
        $(COMPILE) $(shell $(CYGPATH) "$<") -o $@

Compiler.ozf: $(FUNFUNCTORS) ozl$(EXE_EXT)
        $(OZENGINE) ozl$(EXE_EXT) $(COMPRESSFLAGS) Main.ozf -o Compiler.ozf

#---------------------------------------------------------------------
# Syslets
#---------------------------------------------------------------------

$(SYSLETS): $(RUNFUNCTORS)

ozc$(EXE_EXT): Base.ozf ozbatch/Compile.oz
        $(COMPILEEXEC) ozbatch/Compile.oz -o $@

ozl$(EXE_EXT): Base.ozf DefaultURL.ozf \
        linker/Print.oz linker/Main.oz linker/Link.oz
        $(COMPILEEXEC) linker/Main.oz -o $@

#---------------------------------------------------------------------
# Installation
#---------------------------------------------------------------------

.PHONY: install install-main install-images install-cache

LIBFUNCTORS = \
        $(FUNCTORS:%=$(OZLIB)/%)

BINFILES = \
        $(SYSLETS:%=$(OZBIN)/%)

BOOTINITTXT     = boot-init.ozt
BOOTOZCTXT      = boot-ozc.ozt

install: install-main install-images install-cache

install-main: all $(OZBIN) $(BINFILES)

NEWCACHEDIR = $(PREFIX)/cache/x-oz/system
IMAGES1 = mini-dec.xbm mini-inc.xbm
IMAGES = $(IMAGES1:%=$(IMAGESDIR)/%)
NEWIMAGESDIR = $(NEWCACHEDIR)/images
NEWIMAGES = $(IMAGES1:%=$(NEWIMAGESDIR)/%)

install-images:

#install-images: \
#       $(IMAGESDIR) $(IMAGES)

HOMECACHE = @HOMECACHE@
CACHEDIR  = $(PREFIX)/cache/$(HOMECACHE)

NEWFUNCTORS = $(FUNCTORS1:%=$(NEWCACHEDIR)/%)
NEWINIT = $(OZLIB)/Init.ozf

install-cache: $(NEWCACHEDIR) $(NEWFUNCTORS) \
        $(OZLIB) $(NEWINIT) \
        $(NEWIMAGESDIR) $(NEWIMAGES)

$(NEWCACHEDIR) $(NEWIMAGESDIR):
        $(INSTALL_DIR) $@

$(NEWCACHEDIR)/%: %
        $(INSTALL_FILE) $< $@

$(CACHEDIR):
        $(INSTALL_DIR) $(CACHEDIR)
        -rm -rf $(CACHEDIR)
        $(LN_S) ../../.. $(CACHEDIR)

$(OZLIB) $(IMAGESDIR) $(OZBIN):
        $(INSTALL_DIR) $@

$(OZLIB)/%.ozf: %.ozf
        $(INSTALL_FILE) $< $@

$(IMAGESDIR)/%: images/%
        $(INSTALL_FILE) $< $@

$(OZBIN)/%: %
        $(INSTALL_BIN) $< $@

$(OZLIB)/boot-%: boot-%
        $(INSTALL_FILE) $< $@

#---------------------------------------------------------------------
# Cleaning up
#---------------------------------------------------------------------

.PHONY: clean veryclean distclean

CLEANFILES = \
        $(COMPILERSRCEXTRA) \
        CpSupport.ozf ParWorkerTmp.ozf ParLoggingTmp.ozf ParSearchTmp.ozf \
        $(FUNCTORS) $(FUNFUNCTORS) $(PARSEARCHFUNCTORS) \
        $(SYSLETS) $(BOOTINITTXT) $(BOOTOZCTXT) boot-init boot-ozc \
        gtkclasses.oz gtkexports.oz $(QTKCLEAN)

clean:
        -rm -f $(CLEANFILES)

veryclean: clean

distclean: veryclean
        @echo To really make distclean, please use \"cd ..\; make distclean\".

#---------------------------------------------------------------------
# Bootstrapping
#---------------------------------------------------------------------

.PHONY: bootstrap check

# use the boot compiler to create the functors
bootstrap:
        $(MAKE) boot-unzip boot-init boot-ozc boot-all

boot-all:
        $(MAKE) all \
                OZC=$(SRCDIR)/boot-ozc.sh \
                OZENGINE=$(SRCDIR)/oze.sh \
                OZINIT=Init.ozf \
                OZ_LIB=. \
                OZ_LOAD="$(subst %,$(OZLOADSEP),root=.%prefix=$(CYG_SRCDIR)/=$(CYG_BUILDDIR)/%prefix=/=/%prefix=./=./$(OZLOADWIN)%all=.%all=$(CYG_BUILDEMU)/%=)"

boot--%:
        $(MAKE) $* \
                OZC=$(SRCDIR)/boot-ozc.sh \
                OZENGINE=$(SRCDIR)/oze.sh \
                OZINIT=Init.ozf \
                OZ_LIB=. \
                OZ_LOAD="$(subst %,$(OZLOADSEP),root=.%prefix=$(CYG_SRCDIR)/=$(CYG_BUILDDIR)/%prefix=/=/%prefix=./=./$(OZLOADWIN)%all=.%all=$(CYG_BUILDEMU)/%=)"

check:

#---------------------------------------------------------------------
# Boot compiler
#---------------------------------------------------------------------
# The boot compiler is simply the ordinary compiler with all functors
# packaged together using the linker.  There is also a a boot init
# file which is just the ordinary Init functor.  Both are provided in
# the text-pickle format from which the boot functors are obtained
# using text2pickle.
#---------------------------------------------------------------------

.PHONY: new-boot

$(BOOTINITTXT):
        $(MAKE) boot-init.linked && \
        $(P2T) < boot-init.linked > $@ && \
        rm -f boot-init.linked

$(BOOTOZCTXT):
        $(MAKE) boot-ozc.linked && \
        $(P2T) < boot-ozc.linked > $@ && \
        rm -f boot-ozc.linked

new-boot:
        -rm -f $(BOOTINITTXT) $(BOOTOZCTXT)
        $(MAKE) $(BOOTINITTXT) $(BOOTOZCTXT)
        $(THEGZIP) < $(BOOTINITTXT) > $(SRCDIR)/$(BOOTINITTXT).gz
        $(THEGZIP) < $(BOOTOZCTXT) > $(SRCDIR)/$(BOOTOZCTXT).gz

boot-unzip:
        rm -f $(BOOTINITTXT) $(BOOTOZCTXT)
        $(THEGZIP) -d < $(SRCDIR)/$(BOOTINITTXT).gz > $(BOOTINITTXT)
        $(THEGZIP) -d < $(SRCDIR)/$(BOOTOZCTXT).gz > $(BOOTOZCTXT)

BOOTINITTXTFROM = $(BOOTINITTXT)
BOOTOZCTXTFROM  = $(BOOTOZCTXT)

boot-ozc: $(BOOTOZCTXTFROM)
        $(T2P) -o $@ < $< \
        || (rm -f $@; exit 1)

boot-init: $(BOOTINITTXTFROM)
        $(T2P) -o $@ < $< \
        || (rm -f $@; exit 1)

boot-ozc.linked: ozc$(EXE_EXT) ozl$(EXE_EXT) Compiler.ozf $(SUPPSRC:%=%.ozf)
        OZINIT=Init.ozf OZ_LOAD="$(subst %,$(OZLOADSEP),root=.%prefix=/=/%prefix=./=./$(OZLOADWIN)%prefix=x-oz://system/=./%pattern=x-oz://system/?{x}=./?{x}.ozf%prefix=x-oz://system/=../tools/%pattern=x-oz://system/?{x}=../tools/?{x}.ozf%prefix=x-oz://boot/=$(CYG_BUILDEMU)/%=)" $(SRCDIR)/oze.sh ozl$(EXE_EXT) --verbose --include=x-oz://system --exclude=x-oz://boot,x-oz://system/Module,x-oz://system/Property,x-oz://system/System,x-oz://system/Space,x-oz://system/OS,x-oz://system/Resolve,x-oz://system/Pickle,x-oz://system/Gump,x-oz://system/ProductionTemplates $< -o $@

boot-init.linked: Init.ozf
        cp $< $@

# no suffixes needed
.SUFFIXES:

.PHONY: depend
depend:

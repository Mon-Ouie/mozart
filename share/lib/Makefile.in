BUILDTOP        = @BUILDTOP@
VPATH           = @srcdir@
SRCDIR          = @srcdir@

PREFIX          = @prefix@
OZPREFIX        = $(PREFIX)

OZBIN           = $(PREFIX)/bin
OZLIB           = $(PREFIX)/share
IMAGESDIR       = $(OZLIB)/images
SHELL           = /bin/sh
LN_S            = @LN_S@
M4              = @M4@
PERL            = @PERL@
GZIP            = @GZIP@

INSTALL         = @INSTALL@
INSTALL_FILE    = $(INSTALL) -m 444
INSTALL_BIN     = $(INSTALL) -m 555
INSTALL_DIR     = @INSTALL_DIR@

OZENGINE        = @OZENGINE@

OZFLAGS         =
OZC             = @OZC@

COMPILE         = $(OZC) $(OZFLAGS) -l Standard -c
EXEC            = $(OZC) $(OZFLAGS)
COMPILESYSLET   = $(OZC) $(OZFLAGS) -l Standard -x

P2T             = $(SRCDIR)/p2t.sh
T2P             = $(SRCDIR)/t2p.sh
OZAR            = ozar

# exports
export BUILDTOP
export SRCDIR
export OZPREFIX
export OZLIB
export OZPATH = .:$(SRCDIR)
export OZ_PI = 1
export OZ_LIB = $(OZLIB)
export OZ_LOAD = root=.:prefix=http\://www.ps.uni-sb.de/ozhome/share/=$(OZ_LIB)/
export OZMAKE_COPYALWAYS        = no
export OZMAKE_VERBOSE           = no

SPSRC   = Foreign Error ErrorRegistry Finalize
OPSRC   = Open
APSRC   = GetArgs Syslet Servlet Applet Application
CPSRC   = Search FD Schedule FS
DPSRC   = Connection Remote RemoteServer Fault URL
WPSRC   = Tk TkTools
MISCSRC = Misc
SUPPSRC = Type

RUNFUNCTORS = \
        $(SPSRC:%=%.ozf) \
        $(OPSRC:%=%.ozf) \
        $(APSRC:%=%.ozf) \
        $(CPSRC:%=%.ozf) \
        Init.ozf

FUNCTORS = \
        $(RUNFUNCTORS) \
        $(DPSRC:%=%.ozf) \
        $(WPSRC:%=%.ozf) \
        $(SUPPSRC:%=%.ozf) \
        $(MISCSRC:%=%.ozf) \
        Compiler.ozf

SYSLETS = ozc ozar

.PHONY: all

all: $(FUNCTORS) $(SYSLETS)

#---------------------------------------------------------------------
# Automatic Makefile update
#---------------------------------------------------------------------

Makefile: Makefile.in ../config.status
        cd .. && ./config.status

../config.status: ../configure
        cd .. && ./config.status --recheck

#---------------------------------------------------------------------
# Init
#---------------------------------------------------------------------

INITSRC1 = Resolve.oz Prop.oz Module.oz
INITSRC = $(INITSRC1:%=init/%) Init.oz \
        ../url-defaults.oz ../functor-defaults.oz

Init.ozf: URL.ozf $(INITSRC)
        $(COMPILE) -l URL=URL.ozf Init.oz -o Init.ozf

#---------------------------------------------------------------------
# Standard
#---------------------------------------------------------------------

STANDARDSRC1 = \
        Record.oz Unit.oz Tuple.oz Atom.oz Name.oz Procedure.oz \
        Int.oz Float.oz Number.oz Bool.oz List.oz Chunk.oz \
        Literal.oz Value.oz Cell.oz Lock.oz Char.oz String.oz \
        VirtualString.oz Object.oz Class.oz Loop.oz Port.oz \
        Time.oz Thread.oz Space.oz Array.oz Dictionary.oz \
        Exception.oz Functor.oz BitArray.oz
STANDARDSRC = $(STANDARDSRC1:%=standard/%) Standard.oz

Standard.ozf: $(STANDARDSRC) StandardBuiltins.ozf
        $(OZC) $(OZFLAGS) -l StandardBuiltins -c Standard.oz -o $@

StandardBuiltins.ozf: StandardBuiltins.oz
        $(OZC) $(OZFLAGS) -c $< -o $@

#---------------------------------------------------------------------
# Remaining functors
#---------------------------------------------------------------------

$(FUNCTORS): Standard.ozf

%.ozf: sp/%.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: op/%.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: ap/%.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: cp/%.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: dp/%.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: wp/%.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: misc/%.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: %.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: compiler/%.oz Standard.ozf
        $(COMPILE) $< -o $@
%.ozf: support/%.oz Standard.ozf
        $(COMPILE) $< -o $@

# op dependencies
Open.ozf: op/HtmlTable.oz

# wp dependencies
Tk.ozf: wp/TkInit.oz wp/TkOptions.oz
TkTools.ozf: ../url-defaults.oz

# compiler dependencies
COMPILERSRC1 = \
        CompilerClass.oz PrintName.oz Reporter.oz ParseOz.oz FormatStrings.oz \
        CheckTupleSyntax.oz Builtins.oz Core.oz Annotate.oz \
        StaticAnalysis.oz POTypes.oz CodeGen.oz CodeStore.oz \
        CodeEmitter.oz BindingAnalysis.oz TupleSyntax.oz Unnester.oz \
        UnnestFD.oz Assembler.oz GenericInterface.oz QuietInterface.oz \
        Abstractions.oz Errors.oz RunTime.oz

COMPILERSRCEXTRA = compiler-Builtins.oz compiler-Opcodes.oz compiler-Env.oz

COMPILERSRCNOVER = \
        $(COMPILERSRC1:%=compiler/%) $(COMPILERSRCEXTRA)

compiler-Version.oz: $(COMPILERSRCNOVER) compiler/Opcodes.m4oz
        echo 'DATE = '\'`date '+%h %d %Y (%T)'`\' > $@ \
        || (rm -f $@; exit 1)

# NOTE: update this list also in platform/emulator/Makefile.in
BIMODSPECS = \
        Boot Array Atom BitArray Bool Cell Char Chunk Class \
        Dictionary Exception Float ForeignPointer Int Literal \
        Lock Name Number Object Port Procedure Record Space \
        String Thread Time Tuple Unit Value VirtualString \
        BitString ByteString

EMUSRCDIR=$(SRCDIR)/../../platform/emulator
BIDECL=$(EMUSRCDIR)/bidecl.perl
BIMODFILES = $(BIMODSPECS:%=$(EMUSRCDIR)/mod%.spec)

compiler-Builtins.oz: $(BIMODFILES)
        perl $(BIDECL) -srcdir $(EMUSRCDIR) -builtins $(BIMODSPECS) > $@

compiler-Opcodes.oz: compiler/Opcodes.m4oz $(EMUSRCDIR)/instrDefs.m4
        $(M4) -DEMUDIR=$(EMUSRCDIR) < $< > $@ \
        || (rm -f $@; exit 1)

functor2env: $(RUNFUNCTORS) Standard.ozf MakeFunctorToEnv.oz
        $(COMPILESYSLET) MakeFunctorToEnv.oz -o $@

compiler-Env.oz: $(RUNFUNCTORS) Standard.ozf functor2env
        $(OZENGINE) functor2env -in=Standard.ozf -out=compiler-Env.oz

FUNFUNCTORS = PrintName.ozf Builtins.ozf Unnester.ozf Core.ozf \
        StaticAnalysis.ozf CodeGen.ozf Assembler.ozf Main.ozf RunTime.ozf

PrintName.ozf: compiler/PrintName.oz

Builtins.ozf: compiler/Builtins.oz compiler-Builtins.oz

Unnester.ozf: compiler/Unnester.oz compiler/TupleSyntax.oz \
        compiler/BindingAnalysis.oz compiler/UnnestFD.oz

Core.ozf: compiler/Core.oz compiler/Annotate.oz

StaticAnalysis.ozf: compiler/StaticAnalysis.oz compiler/POTypes.oz Search.ozf
        $(COMPILE) -l Search=Search.ozf compiler/StaticAnalysis.oz -o $@

CodeGen.ozf: compiler/CodeGen.oz compiler/CodeStore.oz compiler/CodeEmitter.oz

Assembler.ozf: compiler/Assembler.oz compiler-Opcodes.oz

Main.ozf: compiler/Main.oz compiler-Env.oz compiler/FormatStrings.oz \
        compiler/CheckTupleSyntax.oz compiler/Reporter.oz compiler/ParseOz.oz \
        compiler/CompilerClass.oz compiler/GenericInterface.oz \
        compiler/QuietInterface.oz compiler/Abstractions.oz \
        compiler/Errors.oz compiler-Version.oz

RunTime.ozf: compiler/RunTime.oz Standard.ozf StandardBuiltins.ozf
        $(OZC) -l Standard,StandardBuiltins -c $< -o $@

Compiler.ozf: $(FUNFUNCTORS) ozar
        $(OZENGINE) ozar --in=Main.ozf --out=Compiler.ozf

#---------------------------------------------------------------------
# Syslets
#---------------------------------------------------------------------

$(SYSLETS): $(RUNFUNCTORS)

ozc: Standard.ozf MakeBatch.oz BatchCompile.oz
        $(COMPILESYSLET) MakeBatch.oz -o $@

ozar: URL.ozf ar/Print.oz ar/Main.oz ar/Archiver.oz ../functor-defaults.oz \
        ../url-defaults.oz
        $(COMPILESYSLET) -l URL=URL.ozf ar/Main.oz -o $@

#---------------------------------------------------------------------
# Installation
#---------------------------------------------------------------------

.PHONY: install install-stage install-main install-images install-cache

LIBFUNCTORS = \
        $(FUNCTORS:%=$(OZLIB)/%)
BINFILES = \
        $(SYSLETS:%=$(OZBIN)/%)

BOOTINITTXT     = boot-init.ozt
BOOTOZCTXT      = boot-ozc.ozt

STAGEEXTRAFILES = \
        $(OZLIB)/Standard.ozf $(OZLIB)/$(BOOTINITTXT) $(OZLIB)/$(BOOTOZCTXT)

install: install-main install-images install-cache

install-stage: install-main $(STAGEEXTRAFILES)

install-main: all \
        $(OZLIB) $(LIBFUNCTORS) \
        $(OZBIN) $(BINFILES)

IMAGES1 = mini-dec.xbm mini-inc.xbm
IMAGES = $(IMAGES1:%=$(IMAGESDIR)/%)

install-images: \
        $(IMAGESDIR) $(IMAGES)

CACHEDIR  = $(PREFIX)/cache/http/www.ps.uni-sb.de
CACHELINK = $(CACHEDIR)/ozhome

install-cache: \
        $(CACHEDIR) $(CACHELINK)

$(CACHEDIR):
        $(INSTALL_DIR) $(CACHEDIR)

$(CACHELINK): $(CACHEDIR)
        rm -f $(CACHELINK)
        $(LN_S)  $(PREFIX) $(CACHELINK)

$(OZLIB) $(IMAGESDIR) $(OZBIN):
        $(INSTALL_DIR) $@

$(OZLIB)/%.ozf: %.ozf
        $(INSTALL_FILE) $< $@

$(OZLIB)/%.ozm: %.ozm
        $(INSTALL_FILE) $< $@

$(OZLIB)/%.ozp: %.ozp
        $(INSTALL_FILE) $< $@

$(IMAGESDIR)/%: images/%
        $(INSTALL_FILE) $< $@

$(OZBIN)/%: %
        $(INSTALL_BIN) $< $@

$(OZLIB)/boot-%: boot-%
        $(INSTALL_FILE) $< $@

#---------------------------------------------------------------------
# Cleaning up
#---------------------------------------------------------------------

.PHONY: clean veryclean distclean

CLEANFILES = \
        compiler-Version.oz compiler-Builtins.oz \
        compiler-Opcodes.oz \
        functor2env compiler-Env.oz \
        Standard.ozf StandardBuiltins.ozf \
        $(FUNCTORS) $(FUNFUNCTORS) \
        $(SYSLETS) $(BOOTINITTXT) $(BOOTOZCTXT) boot-init boot-ozc

clean:
        -rm -f $(CLEANFILES)

veryclean: clean
        -rm -rf $(STAGE1) $(STAGE2) $(STAGE3) $(SAVE)

distclean: veryclean
        @echo To really make distclean, please use \"cd ..\; make distclean\".

#---------------------------------------------------------------------
# Bootstrapping and Testing Functors Locally
#---------------------------------------------------------------------
#    make check
# Test a new emulator with
#    make check OZEMULATOR=$(HOME)/Oz/Emulator/oz.emulator.bin

.PHONY: bootstrap stage1 stage2 stage3
.PHONY: save restore
.PHONY: check

URL=http\\://www.ps.uni-sb.de/ozhome

# use the boot compiler to create the functors
bootstrap:
        $(MAKE) boot-unzip boot-init boot-ozc all \
        OZC=$(SRCDIR)/boot-ozc.sh \
        OZENGINE=$(SRCDIR)/oze.sh \
        OZINIT=Init.ozf \
        OZ_LIB=. \
        OZ_LOAD=root=.:prefix=/=/:prefix=$(URL)/share/=./:=

STAGE1=./stage1
STAGE2=./stage2
STAGE3=./stage3

# stage1: create the initial functors using the installed ones
stage1:
        $(MAKE) install-main PREFIX=$(STAGE1)

# stage2: recreate the functors and boot compiler using the stage1 functors
stage2:
        $(MAKE) install-stage PREFIX=$(STAGE2) \
        OZ_LOAD=prefix=$(URL)/share/=$(STAGE1)/share/:.:= \
        OZC="$(SRCDIR)/oze.sh $(STAGE1)/bin/ozc" \
        OZINIT=$(STAGE1)/share/Init.ozf \
        OZAR=$(STAGE1)/bin/ozar

# stage3: recreate the functors and boot compiler using the stage2
# boot compiler -- we should compare the generated boot-*.txt files
# but we don't have a stable comparator yet
stage3:
        $(MAKE) boot-init boot-ozc install-stage \
        PREFIX=$(STAGE3) \
        OZ_LOAD=prefix=$(URL)/share/=./:.:prefix=/=/:= \
        OZC=$(SRCDIR)/boot-ozc.sh \
        OZINIT=Init.ozf \
        OZAR=ozar \
        BOOTINITTXTFROM=$(STAGE2)/share/$(BOOTINITTXT) \
        BOOTOZCTXTFROM=$(STAGE2)/share/$(BOOTOZCTXT)

SAVE=./save

save:
        -mkdir $(SAVE)
        -mv -f $(CLEANFILES) save

restore: clean
        -mv -f $(SAVE)/* .
        -rmdir $(SAVE)

check:
        $(MAKE) clean bootstrap stage1 || exit 1
        $(MAKE) clean stage2 || exit 1
        $(MAKE) clean stage3

#---------------------------------------------------------------------
# Boot compiler
#---------------------------------------------------------------------
# The boot compiler is simply the ordinary compiler with all functors
# packaged together using the archiver.  There is also a a boot init
# file which is just the ordinary Init functor.  Both are provided in
# the text-pickle format from which the boot functors are obtained
# using text2pickle.
#---------------------------------------------------------------------

.PHONY: new-boot

$(BOOTINITTXT):
        $(MAKE) boot-init.ar && \
        $(P2T) < boot-init.ar > $@ && \
        rm -f boot-init.ar

$(BOOTOZCTXT):
        $(MAKE) boot-ozc.ar && \
        $(P2T) < boot-ozc.ar > $@ && \
        rm -f boot-ozc.ar

new-boot:
        $(MAKE) $(BOOTINITTXT) $(BOOTOZCTXT)
        gzip $(BOOTINITTXT) $(BOOTOZCTXT)

boot-unzip:
        rm -f $(BOOTINITTXT) $(BOOTOZCTXT)
        $(GZIP) -d < $(SRCDIR)/$(BOOTINITTXT).gz > $(BOOTINITTXT)
        $(GZIP) -d < $(SRCDIR)/$(BOOTOZCTXT).gz > $(BOOTOZCTXT)

BOOTINITTXTFROM = $(BOOTINITTXT)
BOOTOZCTXTFROM  = $(BOOTOZCTXT)

boot-ozc: $(BOOTOZCTXTFROM)
        $(T2P) < $< > $@ \
        || (rm -f $@; exit 1)

boot-init: $(BOOTINITTXTFROM)
        $(T2P) < $< > $@ \
        || (rm -f $@; exit 1)

# OZMAKE_COPYALWAYS=yes causes the emulator to always copy functors
# regardless of whether they have `prop once' or not.  This is required
# for the archiver when it must package functors for modules that are
# currently linked in the system: else the bytecode of these functors
# may have been side-effected and may contains stateful stuff

boot-ozc.ar: ozc ozar Compiler.ozf Type.ozf
        OZMAKE_COPYALWAYS=yes OZINIT=Init.ozf OZ_LOAD=root=.:prefix=http\\://www.ps.uni-sb.de/ozhome/share/=./:pattern=x-oz\\://system/\?\{x\}.ozf=./\?\{x\}.ozf:pattern=x-oz\\://system/\?\{x\}=./\?\{x\}.ozf:pattern=x-oz\\://system/\?\{x\}.ozf=../tools/\?\{x\}.ozf:pattern=x-oz\\://system/\?\{x\}=../tools/\?\{x\}.ozf:= $(SRCDIR)/oze.sh $(OZAR) --verbose --include=x-oz://system --exclude=x-oz://boot,x-oz://system/Module,x-oz://system/Property,x-oz://system/System,x-oz://system/OS,x-oz://system/Resolve,x-oz://system/Pickle,x-oz://system/Gump,x-oz://system/ProductionTemplates --in=$< --out=$@

boot-init.ar: Init.ozf
        cp $< $@

# no suffixes needed
.SUFFIXES:

.PHONY: depend
depend:

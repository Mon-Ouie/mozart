<!--
  - Authors:
  -   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
  -
  - Copyright:
  -   Thorsten Brunklaus, 2001
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://www.mozart-oz.org
  -
  - See the file "LICENSE" or
  -    http://www.mozart-oz.org/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->

<CHAPTER id="chapter.configure"><TITLE/API Reference/
  <P>
    This section is still incomplete.
  <SECTION id="section.configure.mappings"><TITLE/Mapping Functions/
    <P>
      Writing mapping functions is easy: Every function follows the
      pattern below.
      <CODE DISPLAY>
fun {MyMapFunction Value MaxWidth MaxDepth}
   if {WantToMap Value} then
      &ellipsis; /* computations */ &ellipsis;
   else Value
   end
end
      </CODE>
    <P>
      <CODE>MaxWidth</CODE> and <CODE>MaxDepth</CODE> are integers denoting
      the node's width and depth limits.  This allows to handle cycles
      independently of the fact whether they would have been recognized or
      not.  Keep in mind that mapping functions should not have side-effects
      on the value.
    <SUBSECTION><TITLE/Registering a Mapping Function/
  <SECTION id="section.configure.actions"><TITLE/Action Procedures/
    <P>
      Action procedures follow the pattern below.
      <CODE DISPLAY>
proc {MyAction Value}
   &ellipsis; /* computations */ &ellipsis;
end
      </CODE>
    <SUBSECTION><TITLE/Registering an Action Procedure/
  <SECTION id="section.configure.relations"><TITLE/Equivalence Relations/
</CHAPTER>

<Appendix id="appendix.queries">
  <Title/Recognized Queries/
  <P>
    This appendix documents the queries understood by the Mozart Compiler.
  <Section>
    <Title/Macro Definitions/
    <P>
      <List>
	<Entry><<macroDefine(?+{V})>>
	<Item>
	  Add ?_{V} to the list of defined macro names.
	<Entry><<macroUndef(?+{V})>>
	<Item>
	  Remove ?_{V} from the list of defined macro names.
	<Entry><<getDefines(??{Vs})>>
	<Item>
	  Return the list of currently defined macro names.
      </List>
  <Section>
    <Title/Compiler Switches/
    <P>
      <List>
	<Entry><<setSwitch(?+{A} ?+{B})>>
	<Item>
	  Set the state of the switch named&nbsp;?_{A} to either <Q class=quasi
	  /on/, if <<?_{B} == true>>, or to <Q class=quasi/off/, if
	  <<?_{B} == false>>.
	<Entry><<getSwitch(?+{A} ??{B})>>
	<Item>
	  Return the state of the switch named&nbsp;?_{A}.
	<Entry><<pushSwitches()>>
	<Item>
	  Save the current settings of all switches onto the internal switch
	  state stack.
	<Entry><<popSwitches()>>
	<Item>
	  Restore all switch settings from the topmost element of the
	  internal switch state stack, provided it is not empty, else do
	  nothing.
	<Entry><<setMaxNumberOfErrors(?+{I})>>
	<Item>
	  Set the maximal number of errors to report for any one compilation
	  before aborting it to&nbsp;?_{I}.  A negative value means never to
	  abort.
	<Entry><<getMaxNumberOfErrors(??{I})>>
	<Item>
	  Return the maximal number of errors to report for any one
	  compilation before aborting it.
      </List>
  <Section>
    <Title/The Environment/
    <P>
      <List>
	<Entry><<addToEnv(?+{PrintName} ?_{X})>>
	<Item>
	  Add a binding for a variable with the given print name
	  (specified as an atom ?_{PrintName}) and bound to&nbsp;?_{X}
	  to the environment.
	<Entry><<lookupInEnv(?+{PrintName} ?_{X})>>
	<Item>
	  Look up the binding for the variable with the given print name
	  (specified as an atom ?_{PrintName}) in the environment and
	  bind ?_{X} to the value it's bound to.  If it does not exist,
	  report an error.
	<Entry><<removeFromEnv(?+{PrintName})>>
	<Item>
	  Remove the binding for the variable with the given print name
	  (specified as an atom ?_{PrintName}) from the environment if it
	  exists.
	<Entry><<putEnv(?+{Env})>>
	<Item>
	  Replace the current environment by the one given by the record
	  ?_{Env} mapping only valid print names to values.
	<Entry><<mergeEnv(?+{Env})>>
	<Item>
	  Adjoin the given record to the current environment.
	<Entry><<getEnv(??{Env})>>
	<Item>
	  Return the current environment as a record mapping print names
	  to values.
      </List>
  <Section>
    <Title/Feeding Source Text/
    <P>
      <List>
	<Entry><<feedVirtualString(?+{V})>>
	<Item>
	  Evaluate the Oz source code given by the virtual string&nbsp;?_{V}.
	<Entry><<feedVirtualString(?+{V} ?+{R})>>
	<Item>
	  Evaluate the Oz source code given by the virtual string&nbsp;?_{V},
	  returning the resulting value in <<?_{R}.result>> (if the
	  <Code><Span class=ignore>\switch +</Span>expression</Code>
	  switch is set).
	<Entry><<feedFile(?+{V})>>
	<Item>
	  Evaluate the Oz source code contained in the file with
	  name&nbsp;?_{V}.
	<Entry><<feedFile(?+{V} ?+{R})>>
	<Item>
	  Evaluate the Oz source code contained in the file with
	  name&nbsp;?_{V}, returning the resulting value in <<?_{R}.result>>
	  (if the <Code><Span class=ignore>\switch +</Span>expression</Code
	  > switch is set).
      </List>
  <Section>
    <Title/Synchronization/
    <P>
      <List>
	<Entry><<ping(??{U})>>
	<Item>
	  Bind the variable ?_{U} to <<unit>> on execution of this
	  query.  This allows to synchronize on the work of the compiler,
	  &eg;, to be informed when a compilation is finished.
      </List>
</Appendix>

<Section id="section.reference.queries">
  <Title/Recognized Queries/
  <P>
    This section summarizes the queries currently understood by the
    Mozart Compiler.
  <SubSection>
    <Title/Macro Definitions/
      <P>
	<List>
	  <Entry><<macroDefine(?+{VS})>>
	  <Item>
	    Add <<VS>> to the list of defined macro names.
	  <Entry><<macroUndef(?+{VS})>>
	  <Item>
	    Remove <<VS>> from the list of defined macro names.
	  <Entry><<getDefines(??{VSs})>>
	  <Item>
	    Return the list of currently defined macro names.
	</List>
  <SubSection>
    <Title/Compiler Switches/
      <P>
	<List>
	  <Entry><<setSwitch(?+{SwitchName} ?+{B})>>
	  <Item>
	    Set the state of a switch, specified by an atom <<SwitchName>>
	    to either <Q class=quasi/on/, if <<B == true>>, or to
	    <Q class=quasi/off/, if <<B == false>>.
	  <Entry><<getSwitch(?+{SwitchName} ??{B})>>
	  <Item>
	    Return the state of a switch, specified by an atom
	    <<SwitchName>>.
	  <Entry><<pushSwitches()>>
	  <Item>
	    Save the state of all switches.
	  <Entry><<popSwitches()>>
	  <Item>
	    Restore the last saved state of all switches; if no state is
	    saved, do nothing.
	  <Entry><<setMaxNumberOfErrors(?+{N})>>
	  <Item>
	    Set the maximal number of errors to report for any one
	    compilation before aborting it to <<N>> (an integer).
	    A negative value means never to abort.
	  <Entry><<getMaxNumberOfErrors(??{N})>>
	  <Item>
	    Return the maximal number of errors to report for any one
	    compilation before aborting it.
	</List>
  <SubSection>
    <Title/The Environment/
      <P>
	<List>
	  <Entry><<addToEnv(?+{PrintName} ?{Value})>>
	  <Item>
	    Add a binding for a variable with the given print name
	    (specified as an atom <<PrintName>>), and bound to <<Value>>,
	    to the environment.
	  <Entry><<lookupInEnv(?+{PrintName} ??{Value})>>
	  <Item>
	    Look up the binding for the variable with the given print name
	    (specified as an atom <<PrintName>>) in the environment and
	    bind <<Value>> to the value it's bound to.  If it does not exist,
	    report an error through the standard means (see below).
	  <Entry><<removeFromEnv(?+{PrintName})>>
	  <Item>
	    Remove the binding for the variable with the given print name
	    (specified as an atom <<PrintName>>) from the environment if it
	    exists.
	  <Entry><<putEnv(?+{Env})>>
	  <Item>
	    Replace the current environment by the one given by the record
	    <<Env>> mapping valid print names to values.
	  <Entry><<mergeEnv(?+{Env})>>
	  <Item>
	    Adjoin the given record to the current environment.
	  <Entry><<getEnv(??{Env})>>
	  <Item>
	    Return the current environment as a record.
	</List>
  <SubSection>
    <Title/Feeding Source Text/
      <P>
	<List>
	  <Entry><<feedVirtualString(?+{VS})>>
	  <Item>
	    Evaluate the Oz source code given by the virtual string <<VS>>.
	  <Entry><<feedVirtualString(?+{VS} ?+{Return})>>
	  <Item>
	    Evaluate the Oz source code given by the virtual string <<VS>>,
	    returning the resulting value in <<Return.result>> (if the
	    <Code><Span class=ignore>\switch +</Span>expression</Code> switch
	    is set).
	  <Entry><<feedFile(?+{VS})>>
	  <Item>
	    Evaluate the Oz source code contained in the file with
	    name <<VS>>.
	  <Entry><<feedFile(?+{VS} ?+{Return})>>
	  <Item>
	    Evaluate the Oz source code contained in the file with
	    name <<VS>>, returning the resulting value in <<Return.result>>
	    (if the <Code><Span class=ignore>\switch +</Span>expression</Code
	    > switch is set).
	</List>
  <SubSection>
    <Title/Synchronization/
      <P>
	<List>
	  <Entry><<ping(??{HereIAm})>>
	  <Item>
	    Bind the variable <<HereIAm>> to <<unit>> on execution of this
	    query.  This allows to synchronize on the work of the compiler,
	    &eg;, to be informed when a compilation is finished.
	</List>
</Section>

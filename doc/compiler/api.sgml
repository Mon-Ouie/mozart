<Chapter id="chapter.api">
  <Title/Application Programmer's Interface/
  <P>
    The compiler is available through the module <<Compiler>>, described
    in <Ptr to="section.api.module">.  The material in this section should
    prove sufficient for most uses.
  <P>
    The remainder of this chapter is intended for advanced users.
    We distinguish between <Def/Compiler Engines/, described in <Ptr
    to="section.api.engines">, which store the state of a compiler
    and perform the compilation proper, and <Def/Compiler Interfaces/,
    described in <Ptr to="section.api.interfaces">, which allow to
    observe the activities of Compiler Engines and to react to them.
  <P>
    Finally, serving the purpose of examples, the provided abstractions
    are explained in terms of compiler engines and interfaces in <Ptr
    to="section.api.abstractions">.
  <Section id="section.api.module">
    <Title/The <<Compiler>> Module/
    <P>
      <List>
	<Entry><<evalExpression>>
	<Synopsis>
	  <<{Compiler.evalExpression ?+{V} ?+{EnvR} ??{KillP} ?_{X}}>>
	<Item>
	  evaluates an expression, given as a virtual string&nbsp;?_{VS}, in
	  a given environment ?_{EnvR}, either returning the result ?_{X}
	  of the evaluation or raising an exception.  Furthermore, the variable
	  ?_{KillP} is bound to a nullary procedure which, when applied,
	  interrupts compilation.

	<Entry><<virtualStringToValue>>
	<Synopsis>
	  <<{Compiler.virtualStringToValue ?+{V} ?_{X}}>>
	<Item>
	  is a replacement for <<System.virtualStringToValue>>, which
	  was available in Mozart's predecessor DFKI Oz.
	<P>
	  Note that you are discouraged from using this for large
	  data structures:  Because it is much more powerful than
	  <<System.virtualStringToValue>>, it can also be much less
	  efficient.  Rather, you should use pickling and unpickling
	  of data structures.
      </List>
  &engines;
  &interfaces;
  <Section id="section.api.abstractions">
    <Title/A Look into the Provided Abstractions/
    <P>
      <Code.Extern display to="EvalExpression.oz">
      <Code.Extern display to="VirtualStringToValue.oz">
</Chapter>

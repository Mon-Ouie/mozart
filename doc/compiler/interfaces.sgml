<Section id="section.api.interfaces">
  <Title/Compiler Interfaces/
  <P>
    A compiler engine by itself may suffice to instruct a compiler to do
    something, but the possibilities to react to its output are very limited.
    This is the purpose of <Def/compiler interfaces/.
  <P>
    With each compiler engine&nbsp;?_{E} an arbitrary number of interfaces
    can be registered.  All of ?_{E}'s registered interfaces are notified of
    its output or changes of its state.
  <SubSection>
    <Title/The Generic Interface/
    <P>
      The class <<Compiler.genericInterface>> is an abstraction
      simplifying the creation of new interfaces.  The generic
      interface takes over the registering and the unregistering,
      automatically handling the creation and termination of the
      interface's server thread.  New interfaces should be written
      by subclassing the generic interface.
      <List>
        <Entry><<enqueue(?+{T})>>
        <Item>
          forwards the enqueue request to the compiler engine with
          which the interface is currently registered.
      </List>
  <SubSection>
    <Title/Sent Notifications/
    <Para class=apropos><Title/Query Queue/
      <List>
        <Entry><<newQuery(?_{I} ?_{T})>>
        <Item>
          A new query ?_{T} with identification ?_{I} has been enqueued.
        <Entry><<runQuery(?_{I} ?_{T})>>
        <Item>
          The query ?_{T} with identification ?_{I} is now being executed.
        <Entry><<removeQuery(?_{I})>>
        <Item>
          The query with identification ?_{I} has been removed from the query
          queue, either because it finished executing or because it was
          dequeued by a user program.
      </List>
    <Para class=apropos><Title/Compiler Activity/
      <List>
        <Entry><<busy()>>
        <Item>
          The compiler is currently busy (&ie;, executing a query).
        <Entry><<idle()>>
        <Item>
          The compiler is currently idle (&ie;, waiting for a query to
          be enqueued).
      </List>
    <Para class=apropos><Title/State Change/
      <List>
        <Entry><<switch(?_{SwitchName} ?_{B})>>
        <Item>
          The given switch has been set to&nbsp;?_{B}.
        <Entry><<switches(?_{R})>>
        <Item>
          The settings of all switches is transmitted as a record mapping
          each switch name to its setting.
        <Entry><<maxNumberOfErrors(?_{I})>>
        <Item>
          The maximum number of errors after which to abort compilation
          has been set to ?_{I}.
        <Entry><<env(?_{Env})>>
        <Item>
          The environment has been set to ?_{Env}.
      </List>
    <Para class=apropos><Title/Output/
      <List>
        <Entry><<info(?_{V})>>
        <Item>
          An information message&nbsp;?_{V} is to be output.
        <Entry><<info(?_{V} ?_{Coord})>>
        <Item>
          An information message&nbsp;?_{V}, related to the source coordinates
          ?_{Coord}, is to be output.
        <Entry><<message(?_{R} ?_{Coord})>>
        <Item>
          An error or warning message&nbsp;?_{R}, related to the source
          coordinates ?_{Coord}, is to be output.  ?_{R}&nbsp;has the
          standard error message format, described in
          <File>mozart/share/lib/sp/Error.oz</File>.
        <Entry><<insert(?_{V} ?_{Coord})>>
        <Item>
          During parsing, the file named&nbsp;?_{V} has been read.
          The corresponding <<\insert>> directive (if any) was at source
          coordinates ?_{Coord}.
        <Entry><<displaySource(?_{TitleV} ?_{ExtV} ?_{V})>>
        <Item>
          A source text&nbsp;?_{V} with title&nbsp;?_{TitleV} is to be
          displayed; its format is the one for which the file extension
          ?_{ExtV} is typically used (such as <File/oz/ or <File/ozm/).
        <Entry><<attention()>>
        <Item>
          <!--** neu -->
          The error output buffer should be raised with the cursor at
          the current output coordinates (an error message should follow).
      </List>
    <Para class=apropos><Title/Synchronization/
      <List>
        <Entry><<pong()>>
        <Item>
          This is sent in response to a <<ping(_)>> query
          (see <Ptr to="section.api.engines">).
      </List>
  <SubSection>
    <Title/Interfaces defined in the Mozart Library and Tools/
    <Para class=apropos><Title/The <Q/Quiet/ Interface/
      <Code.Extern display to="QuietInterface.oz">
    <Para class=apropos><Title/The Compiler Panel/
      <Code.Extern display to="CompilerPanel.oz">
</Section>

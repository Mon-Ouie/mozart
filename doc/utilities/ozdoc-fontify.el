(defvar ozdoc-face-to-tag-alist
  '((font-lock-comment-face       . comment)
    (font-lock-keyword-face       . keyword)
    (font-lock-string-face        . string)
    (font-lock-variable-face      . variable)
    (font-lock-function-name-face . function)
    (font-lock-builtin-name       . builtin)
    (font-lock-reference-face     . reference)
    (font-lock-type-face          . type)
    (font-lock-warning-face       . warning)
    (nil                          . text)))

(defun ozdoc-face-to-tag (face)
  (cdr (assq face ozdoc-face-to-tag-alist)))

(defun ozdoc-fontify ()
  (let ((in  (nth 0 command-line-args-left))
        (out (nth 1 command-line-args-left)))
    (ozdoc-fontify-internal in out)))

(defun ozdoc-fontify-internal (in out)
  (let ((tmp-buffer (get-buffer-create "*ozdoc-tmp*"))
        (src-buffer (find-file-noselect in t t))
        (out-buffer (get-buffer-create "*ozdoc-out*"))
        mode start stop face next chunks)
    (set-buffer src-buffer)
    (goto-char (point-min))
    (while (looking-at "\\([^\004]+\\)\004")
      (setq mode (buffer-substring-no-properties
                  (match-beginning 1) (match-end 1)))
      (setq mode
            (or (let ((m (intern-soft mode)))
                  (and m (fboundp m) m))
                (let ((m (intern-soft (concat mode "-mode"))))
                  (and m (fboundp m) m))
                'fundamental-mode))
      (setq start (match-end 0))
      (goto-char start)
      (skip-chars-forward "^\004")
      (setq stop (point))
      (if (eq (char-after stop) 4) (forward-char 1))
      (save-excursion
        (set-buffer tmp-buffer)
        (widen)
        (erase-buffer)
        (kill-all-local-variables)
        (insert-buffer-substring src-buffer start stop)
        (funcall mode)
        (font-lock-fontify-buffer)
        (goto-char (point-min))
        (setq chunk nil)
        (while (not (eobp))
          (setq face (get-text-property (point) 'face))
          (setq next (or (next-single-property-change (point) 'face)
                         (point-max)))
          (setq chunks (cons (cons (ozdoc-face-to-tag face)
                                   (buffer-substring-no-properties
                                    (point) next))
                             chunks))
          (goto-char next))
        (setq chunks (reverse chunks))
        (set-buffer out-buffer)
        (while chunks
          (insert (symbol-name (car (car chunks))) 4
                  (cdr (car chunks)) 4)
          (setq chunks (cdr chunks)))
        (insert 4)))
    (set-buffer out-buffer)
    (write-file out)))

<!--
  - Authors:
  -   Christian Schulte <schulte@ps.uni-sb.de>
  -
  - Copyright:
  -   Christian Schulte, 1998
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://mozart.ps.uni-sb.de
  -
  - See the file "LICENSE" or
  -    http://mozart.ps.uni-sb.de/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->

<Chapter id="Chapter.Deployment">
  <Title/Application Deployment/


  <Section id="Section.Deployment.Linking">
    <Title/Linking Functors/

    <P>
      Application development can be considerably eased by splitting
      the application in a large number of orthogonal and reusable
      functors. However, deployment of an application gets harder in
      the presence of a large number of functors:
    </P>
    
    <P>
      <List>
        <Item>Installing the application requires correct installation
        of a large number of functors.
        <Item>Execution might be slow due to frequent file- or even
        network accesses.
      </List>
    </P>
    
    <P>
      The commandline tool <Kbd/ozl/ eases deployment by creating a
      new functor that includes imported functors in a prelinked
      fashion: it is possible to collapse a hierarchy of functors into
      a single equivalent one. The model that should be kept in mind,
      is that the newly created functor employs an internal, private
      module manager that excutes the toplevel
      application functor together with all included functors.
    </P>

    <P>
      The linker can be invoked on the input functor <Var/In/ in order
      to create an output functor <Var/Out/ as follows:
      <<<ozl <Var/In/ -o <Var/Out/>>>
    </P>

  </Section>

  <Section id="Section.Deployment.compressed">
    <Title/Compressed Pickled Functors/

  </Section>

  <Section id="Section.Deployment.unix">
    <Title/Executing Functors under Unix/

  </Section>


</Chapter>

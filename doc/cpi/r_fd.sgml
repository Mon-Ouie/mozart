<section id="r_fd">
<title/The class <<OZ_FiniteDomain>>/
<p>
Instances of this class represent the domains for finite domain integer
variables. A domain may have holes and can range from <math/0/ to
<<OZ_getFDSup()>>, which is currently <math/134\;217\;726/.

<p>
The representation of a finite domain consists of two parts. As long as
there are no holes in the domain it suffices to store the lower and
upper bound of the domain. Holes are stored in the so-called extension
of the domain representation. This extension is either a bit-vector or a
list of intervals. The kind of extension used is automatically
determined and not visible outside.

<p>
The smallest element of a domain <math/d/ is denoted by <math/min(d)/ and
the largest element by <math/max(d)/.

<p>
<subsection id="r_fd.misc">
<title/Miscellaneous/

<p>
<para class=apropos><title/<<OZ_FDState>>/
<em/enumerable type/<p>
<<
enum OZ_FDState {fd_empty, fd_full, fd_bool, fd_singl};
>>
<p>
Values of this enumerable type are used when constructing an instance
of the class <<OZ_FiniteDomain>> or in conjunction with operators
<<==>> &resp <<!=>>.
<p>

<table>
<tr> <th/value/ <th/explanation/
<tr> <td/<<fd_empty>>/ <td/The domain does not contain any element/
<tr> <td/<<fd_full>>/ <td/The domain contains all elements possible,
&ie <math/0, \ldots, OZ\_getFDSup()/
<tr> <td/<<fd_bool>>/ <td/The domain contains <math/0/ and <math/1/./
<tr> <td/<<fd_singl>>/ <td/The domain contains a single element./
</table>

<!--

<para class=apropos><title/<<operator &lt;&lt;>>/
<em/operator/<p>
<<
ostream &amp&;operator &lt;&lt (ostream &amp;ofile,
                      const OZ_FiniteDomain &amp;fd);
>>
<p>
This operator outputs the finite domain <<fd>> to the stream
<<ofile>>.
<p>

-->

<subsection id="r_fd.member">
<title/Constructor Member Functions/

<para class=apropos><title/<<OZ_FiniteDomain>>/
<em/default constructor/<p>
<<
OZ_FiniteDomain(void);
>>
<p>
This default constructor creates an <em/uninitialized/ instance.
<p>
<em/copy constructor/<p>
<<
OZ_FiniteDomain(const OZ_FiniteDomain &amp;d);
>>
<p>
This copy constructor copies the current domain of <<d>> to
<<*this>>, so that <<d>> and <<*this>> denote the same domain
but are independent representations of it.
<p>
<em/overloaded constructor/<p>
<<
OZ_FiniteDomain(OZ_FDState state);
>>
<p>
This constructor creates an object which represents a domain according
to the value of <<state>>. Valid values for <<state>> are
<<fd_empty>> and <<fd_full>>.
<p>
<<
OZ_FiniteDomain(OZ_Term t);
>>
<p>
This constructor is the composition of the default constructor and the
member function <<initDescr()>>.
<p>
<em/constructor/<p>
<<
OZ_FiniteDomain(const OZ_FSetValue &amp;fs);
>>
<p>
This constructor initialises <<*this>> with the values contained in
the finite set <<fs>>.
<p>


<subsection id="r_fd.init">
<title/Initialisation Member Functions/
<p>

The return value of all initialisation member functions is the size of
the domain they initialised.
<p>

<para class=apropos><title/<<initRange>>/
<em/member function/<p>
<<
int OZ_FiniteDomain::initRange(int l, int u);
>>
<p>
Initialises an instance of class <<OZ_FiniteDomain>> to the domain
<math/\{l, \ldots, u\}/. In case <<l>> &gt; <<u>>, the
domain is set to be empty.
<p>

<para class=apropos><title/<<initSingleton>>/
<em/member function/<p>
<<
int OZ_FiniteDomain::initSingleton(int l);
>>
<p>
Initialises an instance of class <<OZ_FiniteDomain>> to the domain
<math/\{l\}/.
<p>

<para class=apropos><title/<<initDescr>>/
<em/member function/<p>
<<
int OZ_FiniteDomain::initDescr(OZ_Term d);
>>
<p>
Initialises an instance of class <<OZ_FiniteDomain>> to a domain
according to the domain description <<d>>. The domain description
must be conform with <em/level4/ (see syntax definition of a domain
description in <ptr to="expect.checkconstr">, entry <<expectDomDesc>>).
<p>

<para class=apropos><title/<<initFull>>/
<em/member function/<p>
<<
int OZ_FiniteDomain::initFull(void);
>>
<p>
Initialises an instance of class <<OZ_FiniteDomain>> to the domain
<math/\{0, \ldots, OZ\_getFDSup()\}/.
<p>

<para class=apropos><title/<<initEmpty>>/
<em/member function/<p>
<<
int OZ_FiniteDomain::initEmpty(void);
>>
<p>
Initialises an instance of class <<OZ_FiniteDomain>> to the empty
domain.
<p>

<para class=apropos><title/<<initBool>>/
<em/member function/<p>
<<
int OZ_FiniteDomain::initBool(void);
>>
<p>
Initialises an instance of class <<OZ_FiniteDomain>> to the domain
<math/\{0,1\}/.
<p>


<subsection id="r_fd.reflect">
<title/Reflection Member Functions/
<p>

<para class=apropos><title/<<getMidElem>>/
<em/constant member function/<p>
<<
int getMidElem(void) const;
>>
<p>
This member function returns the element in the middle of the
domain. For the domain <math/d/
it is <math/(max(d)-min(d))\; div\; 2/. If this value
happens to be a hole the element closest to it will be returned. In case
there are two elements with the same distance to the middle of the
domain the smaller one will be taken.
<p>

<para class=apropos><title/<<getNextSmallerElem>>/
<em/constant member function/<p>
<<
int getNextSmallerElem(int v) const;
>>
<p>
This member function returns the largest element in the domain smaller
than <<v>>.  In case <<v>> is the smallest element it returns
<math/-1/.
<p>

<para class=apropos><title/<<getNextLargerElem>>/
<em/constant member function/<p>
<<
int getNextLargerElem(int v) const;
>>
<p>
This member function returns the smallest element in the domain larger
than <<v>>.  In case <<v>> is the largest element it returns <math/-1/.
<p>

<para class=apropos><title/<<getLowerIntervalBd>>/
<em/constant member function/<p>
<<
int getLowerIntervalBd(int v) const;
>>
<p>
This member function returns the smallest value of the interval <<v>>
belongs to. In case <<v>> does not belong to any interval the
function returns <math/-1/.
<p>

<para class=apropos><title/<<getUpperIntervalBd>>/
<em/constant member function/<p>
<<
int getUpperIntervalBd(int v) const;
>>
<p>
This member function returns the largest value of the interval <<v>>
belongs to. In case <<v>> does not belong to any interval the
function returns <math/-1/.
<p>

<para class=apropos><title/<<getSize>>/
<em/constant member function/<p>
<<
int getSize(void) const;
>>
<p>
This member function returns the size of the domain, &ie the number of
elements in the domain.
<p>

<para class=apropos><title/<<getMinElem>>/
<em/constant member function/<p>
<<
int getMinElem(void) const;
>>
<p>
This member function returns the smallest element of the domain.
<p>

<para class=apropos><title/<<getMaxElem>>/
<em/constant member function/<p>
<<
int getMaxElem(void) const;
>>
<p>
This member function returns the largest element of the domain.
<p>

<para class=apropos><title/<<getSingleElem>>/
<em/constant member function/<p>
<<
int getSingleElem(void) const;
>>
<p>
This member function returns the element of a singleton domain. In case
the domain is not a singleton domain it returns <math/-1/.
<p>


<subsection id="r_fd.op">
<title/Operator Member Functions/
<p>

<para class=apropos><title/<<operator =>>/
<em/operator member function/<p>
<<
const OZ_FiniteDomain &amp;operator = (const OZ_FiniteDomain &amp;fd);
>>
<p>
This assignment operator copies <<fd>> to its left hand side, so that
both domains are the same but are independent of each other.
<p>

<para class=apropos><title/<<operator ==>>/
<em/constant operator member function/<p>
<<
OZ_Boolean operator == (const OZ_FDState s) const;
>>
<p>
This operator returns <<OZ_TRUE>> if the domain corresponds to the value of
<<s>>. Otherwise it returns <<OZ_FALSE>>.
<p>
<<
OZ_Boolean operator == (const int i) const;
>>
<p>
This operator returns <<OZ_TRUE>> if the domain contains only
<<i>>. Otherwise it returns <<OZ_FALSE>>.
<p>

<para class=apropos><title/<<operator !=>>/
<em/constant operator member function/<p>
<<
OZ_Boolean operator != (const OZ_FDState s) const;
>>
<p>
This operator returns <<OZ_TRUE>> if the domain does <em/not/ correspond to
the value of <<s>>. Otherwise it returns <<OZ_FALSE>>.
<p>
<<
OZ_Boolean operator != (const int i) const;
>>
<p>
This operator returns <<OZ_TRUE>> if the domain does <em/not/ contain
<<i>> or contains more than one element. Otherwise it returns
<<OZ_FALSE>>.
<p>

<para class=apropos><title/<<operator &amp;>>/
<em/constant operator member function/<p>
<<
OZ_FiniteDomain operator &amp; (const OZ_FiniteDomain &amp;y) const;
>>
<p>
This member function returns the intersection of the finite domains
represented by <<y>> and <<*this>>.
<p>

<para class=apropos><title/<<operator |>>/
<em/constant operator member function/<p>
<<
OZ_FiniteDomain operator | (const OZ_FiniteDomain &amp;y) const;
>>
<p>
This member function returns the union of the finite domains represented
by <<y>> and <<*this>>.
<p>

<para class=apropos><title/<<operator ~>>/
<em/constant operator member function/<p>
<<
OZ_FiniteDomain operator ~ (void) const;
>>
<p>
This member function returns the negation of the finite domain
represented by <<*this>>. The negation is computed by removing all
elements contained in <<*this>> from <math/\{0, \ldots, OZ\_getFDSup()\}/.
<p>

<para class=apropos><title/<<operator &amp;=>>/
<em/overloaded operator member function/<p>
<<
int operator &= (const OZ_FiniteDomain &amp;y);
int operator &= (const int y);
>>
<p>
This member function computes the intersection of the finite domains
represented by <<y>> and <<*this>> and assigns the result to
<<*this>>. Further, the size of the updated domain is returned.
<p>

<para class=apropos><title/<<operator +=>>/
<em/operator member function/<p>
<<
int operator += (const int y);
>>
<p>
This member function adds the element <<y>> to the domain represented
by <<*this>> and returns the size of the updated domain.
<p>

<para class=apropos><title/<<operator -=>>/
<em/overloaded operator member function/<p>
<<
int operator -= (const int y);
>>
<p>
This member function removes the element <<y>> from the domain
represented by <<*this>> and returns the size of the updated domain.
<p>
<<
int operator -= (const OZ_FiniteDomain &amp;y);
>>
<p>
This member function removes all elements contained in the domain
represented by <<y>> from the domain represented by <<*this>> and
returns the size of the updated domain.
<p>

<para class=apropos><title/<<operator &lt;=>>/
<em/operator member function/<p>
<<
int operator &lt;= (const int y);
>>
<p>
This member function removes all elements being larger than <<y>>
from the domain represented by <<*this>> and returns the size of the
updated domain.
<p>

<para class=apropos><title/<<operator &gt;=>>/
<em/operator member function/<p>
<<
int operator &gt;= (const int y);
>>
<p>
This member function removes all elements being smaller than <<y>>
from the domain represented by <<*this>> and returns the size of the
updated domain.
<p>


<subsection id="r_fd.aux">
<title/Auxiliary Member Functions/
<p>

<para class=apropos><title/<<intersectWithBool>>/
<em/member function/<p>
<<
int intersectWithBool(void);
>>
<p>
This member function intersects the current domain with the domain
<math/\{0,1\}/ and produces the following return value.
<p>

<table>
<tr> <th/return value/ <th/meaning/
<tr> <td/<math/-2// <td/The resulting domain is empty./
<tr> <td/<math/-1// <td/The resulting domain is <math/\{0,1\}//
<tr> <td/otherwise/ <td/The remaining element is returned.
</table>
<p>

<para class=apropos><title/<<constrainBool>>/
<em/member function/<p>
<<
int constrainBool(void);
>>
<p>
This member function intersects the current domain with the domain
<math/\{0,1\}/ and returns the size of resulting domain.
<p>

<para class=apropos><title/<<isIn>>/
<em/constant member function/<p>
<<
OZ_Boolean isIn(int i) const;
>>
<p>
This member function returns <<OZ_TRUE>> if <<i>> is contained
in the domain
represented by <<*this>>. Otherwise it returns <<OZ_FALSE>>.
<p>

<para class=apropos><title/<<copyExtension>>/
<em/member function/<p>
<<
void copyExtension(void);
>>
<p>
This member function replaces the current extension of the domain
representation by a copy of it.
<p>

<para class=apropos><title/<<disposeExtension>>/
<em/member function/<p>
<<
void disposeExtension(void);
>>
<p>
This member function frees the heap memory occupied by the extension of
the domain.
<p>

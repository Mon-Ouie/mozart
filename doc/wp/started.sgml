<!--
  - Authors:
  -   Michael Mehl <mehl@dfki.de>
  -   Christian Schulte <schulte@dfki.de>
  -
  - Contributors:
  -   Daniel Simon <dansim@ps.uni-sb.de>
  -   Andy Walter <anwalt@ps.uni-sb.de>
  -   
  - Copyright:
  -   Michael Mehl, 1998
  -   Christian Schulte, 1998
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://mozart.ps.uni-sb.de
  -
  - See the file "LICENSE" or
  -    http://mozart.ps.uni-sb.de/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->

<Chapter id="chapter.started">
  <Title/Getting Started/

  <P>
    This chapter shows a small graphical application from which we can
    identify the most important concepts found in the window
    interface. 

  <Section>
    <Title/Our First Graphical Application/

    <P>
      The main application window contains a toplevel
      widget.  A widget is a graphical component.  Toplevel widgets
      serve as containers for other widgets.  In our example, it
      contains an 
      entry widget, &ie;, a single-line in which the user can enter
      text, and a button widget.  Pressing the button replaces all
      upper-case letters by lower-case letters in the entry and vice versa.

    <P>
      <Ptr to="figure.intro.start"> shows a screendump of our first graphical
      application.  To the left the window after the user has entered the text
      <Samp>Mozart and Graphics!</Samp> in the entry is shown.  After pressing
      the button, the window looks as shown to the right.

    <p>
      <Figure id="figure.intro.start">
	<Table class=dyptic>
	  <TR>
	    <TD><Picture.Extern to="lower.gif" type=gif>
	    <TD><Picture.Extern to="upper.gif" type=gif>
	</Table>
      </Figure>

    <P>
      The program for our graphical application is shown in <Ptr
      to="program.intro.start">.  The definition of the function that maps
      a character to its upper-case or lower-case counterpart is left out.
      However, the full example is included in the <ref.extern
      to="WindowProgramming.oz"/demo file/ for this 
      document.

    <p>
      <Figure class=program id="program.intro.start">
		 <Caption/Program that creates a capitalization window./
		 <p>
<chunk><title/Change capitalization/
fun {$ I}
   case {Char.type I}
   of lower then {Char.toUpper I}
   [] upper then {Char.toLower I}
   else I
   end
end
</chunk>
<chunk class=anonymous><title/Capitalization/
T = {New Tk.toplevel tkInit(title:'Capitalization')}
E = {New class $ from Tk.entry
            meth capitalize
               S={self tkReturn(get $)}
            in
               {self tk(delete 0 'end')}
               {self tk(insert 0 {Map S <chunk.ref/Change capitalization/})}
            end
         end
     tkInit(parent: T)}
B = {New Tk.button tkInit(parent: T
                          text:   'Change Capitalization'
                          action: proc {$} {E capitalize} end)}
{Tk.send pack(E B fill:x padx:4 pady:4)}
</chunk>
      </Figure>

    <P>
      <Ptr to="program.intro.start"> is structured as follows.  For each of
      the widgets a object is created.  The objects are created from a class
      corresponding to the type of the widget.  All objects are initialized
      with a <Span class=index/<<tkInit>>/ message.



<![ %EXTRA; [
<section><title/Examples/
<p>
<chunk><title/EXAMPLES/
%%%
%%% Chapter: Getting started
%%%

declare
<chunk.ref/Capitalization/




</chunk>
]]>


</Chapter>


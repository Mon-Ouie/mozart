<!--
  - Authors:
  -   Michael Mehl <mehl@dfki.de>
  -   Christian Schulte <schulte@dfki.de>
  -
  - Contributors:
  -   Daniel Simon <dansim@ps.uni-sb.de>
  -   Andy Walter <anwalt@ps.uni-sb.de>
  -
  - Copyright:
  -   Michael Mehl, 1998
  -   Christian Schulte, 1998
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://mozart.ps.uni-sb.de
  -
  - See the file "LICENSE" or
  -    http://mozart.ps.uni-sb.de/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->


<Chapter id="chapter.canvas">
  <Title/Canvas Widgets/

  <p>
    A canvas widget allows to create and manipulate graphical
    items. In particular, arbitrary widgets can be embedded within canvas
    widgets.

  <section id="section.canvas.widgets">
    <title/Getting Started/

    <p>
      A canvas widget displays <def/items/. An item is created
      with the <<create>> command, followed by coordinates and options. The
      number of coordinates and the options depend on
      the particular type of item to be created. An item is of one the
      following types:
      <list>
      <entry><<arc>>
      <item> An arc item displays a piece of a circle.
      <entry><<bitmap>>
      <item> A bitmap item displays a bitmap with a given name.
      <entry><<image>>
      <item> Displays an image.
      <entry><<line>>
      <item> A line item consists of several connected segments. It is
      possible to configure line items such that B\'{e}zier splines are used.
      <entry><<oval>>
      <item> An oval can either be a circle or am ellipsis.
      <entry><<polygon>>
      <item> A polygon is described by three or more line segments. As
      with line items, it is possible to use B\'{e}zier splines.
      <entry><<rectangle>>
      <item> Displays a rectangle.
      <entry><<text>>
      <item> Displays text consisting of a single or several lines.
      <entry><<window>>
      <item> Displays a widget in the canvas where the canvas widget
      serves as geometry manager for the widget.
      </list>

    <p>
      For example,
<chunk class=anonymous><title/canvas/
C = {New Tk.canvas tkInit(parent:T)}
{Tk.send pack(C)}
{C tk(create rectangle 10 10 1#c 1#c fill:red outline:blue)}
</chunk>
      creates a red rectangle with a blue outline near to the upper
      left corner of the canvas widget <<C>>.

  <section id="section.canvas.barchart">
    <title/Example: Drawing Barcharts/

    <p>
As a more interesting example let us consider a program to draw bar
charts. The definition of a class to display barcharts is shown in
<ptr to="figure.canvas.barchart">. Before any item is created in the
canvas by the method <<bars>>, the canvas widget is configured such that
the scrollable region is just large enough for the barchart to be drawn.

      <figure id="figure.canvas.barchart">
        <caption/A canvas for displaying bar charts./
<chunk><title/Definition of BarCanvas/
local
   O=if Tk.isColor then o(fill:wheat)
     else               o(stipple:gray50 fill:black)
     end
   D=10  W=2*D
in
   class BarCanvas from Tk.canvas
      meth DrawBars(Ys H X)
         case Ys of nil then skip
         [] Y|Yr then
            {self tk(create rectangle X H X+D H-Y*W O)}
            {self tk(create text      X H+D text:Y anchor:w)}
            {self DrawBars(Yr H X+W)}
         end
      end
      meth bars(Ys)
         WY=W*{Length Ys} HY=W*{FoldL Ys Max 0}
      in
         {self tk(configure scrollregion:q(0 ~10 W+WY D+HY+10))}
         {self DrawBars(Ys HY D)}
      end
   end
end
</chunk>
      </figure>


<p>
The method <<DrawBars>> creates for each element of the list <<Ys>> a
rectangle item as well as a text item, which both correspond to the
value of the particular item. The value of <<O>> is used as option
for the rectangle items. This value depends on <<Tk.isColor>> which is
<<true>> if the screen is a color screen, and <<false>> otherwise. For a
color screen the rectangle items are filled with the color
<<wheat>>. For a black and white screen, the rectangle items are
drawn in a stippled fashion: only those pixels are drawn with the fill
color (that is <<black>>) where the stipple bitmap contains a pixel.

<p>
  <ptr to="figure.canvas.usebar">.

    <p>
      <Figure id="figure.canvas.usebar">
        <Caption/Using a canvas for drawing barcharts./
        <P>
          <Picture.Extern to="barchart.gif" type=gif>
<chunk class=anonymous><title/barchart/
C={New BarCanvas    tkInit(parent:T bg:white width:300 height:120)}
H={New Tk.scrollbar tkInit(parent:T orient:horizontal)}
V={New Tk.scrollbar tkInit(parent:T orient:vertical)}
{Tk.addXScrollbar C H} {Tk.addYScrollbar C V}
{Tk.batch [grid(C row:0 column:0)
           grid(H row:1 column:0 sticky:we)
           grid(V row:0 column:1 sticky:ns)]}
{C bars([1 3 4 5 3 4 2 1 7 2 3 4 2 4
         5 6 7 7 8 4 3 5 6 7 7 8 4 3])}
</chunk>
      </p>

<section id="section.canvas.tags">
 <title/Canvas Tags/

<p>
Each item in a canvas is identified by an unique integer. This integer
can be returned by using the <<tkReturnInt>> method for creating items
rather than the <<tk>> method. The returned integer can then be used to
manipulate the corresponding item. However,
returning values from the graphics engine involves latency. But there are
some good news here, since it is not necessary to refer to items
by numbers.

<p>
Canvas widgets offer a more powerful and easier method to manipulate
single items or even goups of items. Items can be refered to by
<def/tags/. A single item can be refered to by as many
tags as you like to. Tags are provided as objects in &Oz;. Before an
item can be added to a tag, the tag object must be created from the class
<<Tk.canvasTag>> and initialized with respect to a particular canvas.

<![ %EXTRA; [
<section><title/Examples/
<p>
<chunk><title/EXAMPLES/
%%%
%%% Chapter: Canvas Widgets
%%%

%%
%% Getting started
%%

declare
T={New Tk.toplevel tkInit}
<chunk.ref/canvas/



%%
%% Example: Drawing Barcharts
%%

declare
<chunk.ref/Definition of BarCanvas/

declare
T={New Tk.toplevel tkInit}
<chunk.ref/barchart/




</chunk>
]]>

</Chapter>

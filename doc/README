[1] General structure of a document according to the ozdoc DTD

<!DOCTYPE BOOK SYSTEM ozdoc.dtd [
<!-- entity declarations -->
]>
<BOOK>
<FRONT>
        <TITLE>...</TITLE>
        <AUTHOR>...</AUTHOR>
        <AUTHOR>...</AUTHOR>
        <META name=comic content="foo.ps">
        <ABSTRACT>...</ABSTRACT>
<BODY>
<CHAPTER><TITLE>...</TITLE>
...
<PART>   <TITLE>...</TITLE>
<CHAPTER><TITLE>...</TITLE>
...
<CHAPTER><TITLE>...</TITLE>
...
<PART>   <TITLE>...</TITLE>
<CHAPTER><TITLE>...</TITLE>
...
<CHAPTER><TITLE>...</TITLE>
...
</BOOK>

[2] All sectionning elements require a title, but also have an anonymous
    counterpart which does not.  Thus <CHAPTER> requires a <TITLE>, but
    <CHAPTER.ANON> takes none.

[3] <P> does not take a <TITLE>.  It has a counterpart called <PARA>
    which does require a <TITLE>.  For example here is one way to
    code a paragraph which is `apropos' of Kinded variables:

        <PARA class=apropos><TITLE>Kinded variables</TITLE>...

    This might be formated with the `title' in the margin instead of
    bold face inline.

[4] All elements have the following common optional attributes:
        ID      uniquely identifies this occurrence
        CLASS   a space separated sequence of identifiers that further
                specify the interpretation of the element
        INFO    arbitrary data, just in case -- the use of CLASS
                should be preferred

[5] Almost everything that is not a sectionning element is paragraph
    level data which is normally intended to be presented as inline
    material.  Many such elements are equipped with an attribute
    that determines whether they contain `inline' or `displayed'
    material.  The default is what you normally expect: thus
    <MATH>...</MATH> encodes inline math material whereas
    <MATH DISPLAY>...</MATH> indicates that it should be displayed.
    For <LIST> the default is to be displayed; thus, if you wish an
    inline enumeration, you should write <LIST INLINE ENUM>...</LIST>.

[6] Since code snipets are a frequent occurrence in Oz documentation,
    there is special support for them. <CODE>...</CODE> indicates
    inline code.  For displayed material use <CODE DISPLAY>...</CODE>.
    <CODE> does not interpret its contents.  Sometimes this is not
    sufficient: it is often desired to annotate variables with mode
    information. <CODE.ANNOTATED>...</CODE.ANNOTATED> allows the
    occurrence of <VAR> elements.  For convenience, you may write
    <<...>> instead of <CODE.ANNOTATED>...</CODE.ANNOTATED> and
    <<<...>>> instead of <CODE.ANNOTATED DISPLAY>...</CODE.ANNOTATED>.

    ?+{X}       abbreviates     <VAR mode=in>X</VAR>
    ??{X}                       <VAR mode=out>X</VAR>
    ?*{X}                       <VAR mode=cin>X</VAR>
    ?@{X}                       <VAR mode=cnin>X</VAR>
    ?_{X}                       <VAR>X</VAR>
    ?{X}                        <VAR type=meta>X</VAR>

    Thus you can write: <<{List.map ?+{L1} ?+{F} ??{L2}}>>

    Attribute PROGLANG may be used to further specify the programming
    language: this is intended to help provide automatic highlighting
    of keywords etc...

    An environment variable may be marked <VAR type=env>OZHOME</VAR>
    or simply <VAR env>OZHOME</VAR>.

[7] Math: marking up math is tedious and tricky; so is its formatting
    on multiple media.  For this reason, the ozdoc DTD does not prescribe
    a marking scheme; instead it lets the author pick a notation.  This
    notation is indicated by attribute TYPE and defaults to LATEX.  Thus
    you can just write <MATH>x^2+y^2=z^2</MATH>.

    Since rendering math on different media can be tricky, the author
    may also supply a choice of alternative notations:

                <MATH.CHOICE>
                <MATH LATEX>x^2+y^2=z^2</MATH>
                <MATH HTML>X&lt;SUP>2&lt;/SUP>+Y&lt;SUP>2&lt;/SUP>=Z&lt;SUP>2&lt;/SUP></MATH>
                <MATH.EXTERN TO="file:fermat.gif" TYPE=gif>
                </MATH.CHOICE>

    Here the same math material is coded using three different notations.
    The last one refers to an external resource: the gif file fermat.gif.
    Note that <MATH>...</MATH> has content, but <MATH.EXTERN> is empty.

[8] Cross-References are of two kinds: (1) within the current document
    or (2) to external resources.  Within the same document, cross
    references use the ID mechanism: if you equip an element with an
    ID then you can refer to it using this id.  For example:

        The precise modalities of use are detailed in
        <REF TO="foo.def">the definition of foo</REF>
        ...
        ...
        <PARA class=definition id=foo.def><TITLE>Procedure <<foo>></TITLE>
        ...

    When the reference does not have content, you should use PTR instead.

        See <PTR TO="foo.def" class=page> for further details.

    Here we specify class=page with the intention that when printed on
    paper we should get a page reference.  For online presentation,
    a page number would be meaningless and some other technique must
    be used (perhaps an icon, or text constructed from the element
    pointed to).

    References to external resources are made using <REF.EXTERN> and
    <PTR.EXTERN>.  They cannot use the ID mechanism: instead the TO
    attribute contains data which it is up to the processing system
    to properly interpret, perhaps helped by a CLASS attribute.  Often,
    TO will contain a url:

        Visit <REF.EXTERN TO="http://www.ps.uni-sb.de/oz/">the Oz home
        page</REF.EXTERN>

    But it can contain other data for which we have decided on a
    conventional interpretation:

        For details about IO programming, see <PTR.EXTERN
        TO="ozdoc:open">.

[9] Lists.  The ozdoc DTD provided a single very flexible element
    for marking up lists of all kinds.  What you known as itemize in
    LaTeX is simply:

        <LIST>
        <ITEM>...
        <ITEM>...
        </LIST>

    If you intend the list to be numbered, as in LaTeX's enumerate,
    just specify attribute ENUM:

        <LIST ENUM>...</LIST>

    Normally a list counts as `displayed' material.  If you want an
    inline enumeration, use <LIST INLINE ENUM>...</LIST>.

    If you need a list a la description in LaTeX:

        <LIST>
        <ENTRY>...
        <ITEM>...
        <ENTRY>...
        <ENTRY>...
        <ITEM>
        </LIST>

    Note that, unlike LaTeX, here you can have several ENTRY for the
    same ITEM.

    For convenience in describing procedures a SYNOPSIS element is
    allowed to follow an ENTRY:

        <LIST class=interface>
        <ENTRY>...
        <SYNOPSIS>...
        <ITEM>...
        <ENTRY>...
        <SYNOPSIS>...
        <ITEM>...
        </LIST>

    ENTRY indicates the subject of this ITEM, SYNOPSIS provides
    e.g. the general form of the procedure call, and ITEM contains
    the actual explanation.  Note above, the use of the CLASS
    attribute to further indicate the purpose of the list.

[10] Floating material is not intended to be presented in the main
    flow of the document.  You should equip a float with an id, to
    be able to refer to it.  It is also a good idea to use the CLASS
    attribute to indicate what kind of float it is.

        <FLOAT ID="foo.fig" CLASS=figure>
        <TITLE>...</TITLE>
        <P>...
        </FLOAT>

    There is a second category of floating material: <NOTE>.  The
    difference is that a NOTE typically leaves a trace in the main
    flow of the document: for example, a footnote typically leaves
    a superscripted number in a printed document.  Since footnotes
    are in fact the main application, you can use attribute FOOT
    instead of CLASS=foot:

        <NOTE FOOT>...</NOTE>

[11] Indexing.  The INDEX element creates an index entry pointing
    back to where it occurred in the document (just like in LaTeX).
    Each INDEX may contain several levels of indexing separated by
    <AND>, as in:

        <INDEX>foo<AND>bar<AND>baz</INDEX>

    Optionally, it may also contain a <SEE> element:

        <INDEX>bar<AND>baz<SEE>foo<AND>bar<AND>baz</INDEX>

    Sometimes it is desired to index a range of pages.  This can be
    achieved with:

        <INDEX.BEGIN ID=id1>foo<AND>bar</INDEX>
        ...
        <INDEX.END TO=id1>

    where INDEX.BEGIN indicates the start of the range as well as the
    way it should be indexed and INDEX.END indicates the end of the
    range started by INDEX element with ID id1.
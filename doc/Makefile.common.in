# -*- Makefile -*-

PREFIX          = @prefix@
SRCTOP          = @SRCTOP@
BUILDTOP        = @BUILDTOP@
OZENGINE        = @OZENGINE@
OZDOC           = @OZDOC@
HOMEURL         = @HOMEURL@

OZDOCFLAGS      =
DOCIFY          = $(OZENGINE) $(OZDOC) $(OZDOCFLAGS)

DOCDIR          = $(PREFIX)/doc/$(WHAT)

INSTALL         = @INSTALL@
INSTALL_FILE    = $(INSTALL) -m 444
INSTALL_BIN     = $(INSTALL) -m 555
INSTALL_DIR     = @INSTALL_DIR@

JAVA_BIN        = @JAVA_BIN@
JAVA_THREADS    = @JAVA_THREADS@
JAVA            = $(JAVA_BIN)java  $(JAVA_THREADS)
JAVAC           = $(JAVA_BIN)javac $(JAVA_THREADS)
JAR             = $(JAVA_BIN)jar   $(JAVA_THREADS)

HTMLSUPPORTFILES0 = \
        ozdoc.css page.gif $(HTMLEXTRASUPPORTFILES)
HTMLSUPPORTFILES = \
        $(addprefix $(SRCTOP)/doc/utilities/,$(HTMLSUPPORTFILES0))

.PHONY: all bootstrap bootquick quick validate verify install clean veryclean distclean

all:: Makefile ../Makefile.common $(WHAT)-html/index.html

include $(SRCTOP)/share/Makefile.boot

bootstrap: boot-all

bootquick: boot-quick

Makefile: $(SRCDIR)/Makefile.in ../config.status
        cd .. && ./config.status

../Makefile.common: $(SRCTOP)/doc/Makefile.common.in ../config.status
        cd .. && ./config.status

$(WHAT)-html/index.html: $(MAIN) $(SGMLSRCS) $(HTMLEXTRAFILES)
        rm -f latex.db && \
        $(DOCIFY) $(OZDOCHTMLFLAGS) --in=$< --out=$(WHAT)-html \
        --type=html-stylesheets --stylesheet=ozdoc.css --top=../index.html \
        --bib-path=$(SRCDIR):$(SRCTOP)/doc \
        --bst-path=$(SRCTOP)/doc/utilities \
        --latexdb=latex.db \
        --xrefdb=../xref.db --xrefdir=$(WHAT) --indexdb=../index.db && \
        cp -p $(HTMLSUPPORTFILES) $(WHAT)-html && \
        for i in $(addprefix $(SRCTOP)/doc/$(WHAT)/,$(HTMLEXTRAFILES)) NONE; \
        do { test $$i = NONE || cp -p $$i $(WHAT)-html; } done

$(WHAT)-tex/$(WHAT).ps: $(MAIN) $(SGMLSRCS) $(TEXEXTRAFILES)
        $(DOCIFY) $(OZDOCTEXFLAGS) --in=$< --out=$(WHAT)-tex \
        --type=latex \
        --bib-path=$(SRCDIR):$(SRCTOP)/doc \
        --bst-path=$(SRCTOP)/doc/utilities && \
        for i in $(addprefix $(SRCTOP)/doc/$(WHAT)/,$(TEXEXTRAFILES)) NONE; \
        do { test $$i = NONE || cp -p $$i $(WHAT)-tex; } done

quick:: $(MAIN) $(SGMLSRCS) $(HTMLEXTRAFILES)
        $(DOCIFY) $(OZDOCHTMLFLAGS) --in=$< --out=$(WHAT)-html \
        --type=html-stylesheets --stylesheet=ozdoc.css --top=../ \
        --bib-path=$(SRCDIR):$(SRCTOP)/doc \
        --bst-path=$(SRCTOP)/doc/utilities \
        --latexdb=latex.db --keeppictures \
        --xrefdb=../xref.db --xrefdir=$(WHAT) && \
        cp -p $(HTMLSUPPORTFILES) $(WHAT)-html && \
        for i in $(addprefix $(SRCTOP)/doc/$(WHAT)/,$(HTMLEXTRAFILES)) NONE; \
        do { test $$i = NONE || cp -p $$i $(WHAT)-html; } done

verify: $(MAIN)
        nsgmls -s -c$(PREFIX)/share/doc/catalog $<

validate: $(WHAT)-html/index.html
        nsgmls -cHTML4.soc -sB $(WHAT)-html/*.html

install:: $(WHAT)-html/index.html $(DOCDIR)
        for i in $(WHAT)-html/*; do $(INSTALL_FILE) $$i $(DOCDIR); done

$(DOCDIR):
        $(INSTALL_DIR) $@

clean::
        -rm -rf $(WHAT)-html $(WHAT)-tex *~ $(WHAT).{xml,tex,aux,dvi,ps,toc,log,idx}

veryclean: clean
        -rm -f latex.db

distclean: veryclean
        -rm -f Makefile

OZDOC2XML       = $(SRCTOP)/doc/xsl/ozdoc2xml
CLASSPATH       = $(SRCTOP)/doc/xsl/oz.jar

$(WHAT).xml: $(MAIN) $(SGMLSRCS) $(TEXEXTRAFILES)
        nsgmls -c../catalog $< | $(OZDOC2XML) > $@
$(WHAT).tex: $(WHAT)-defaced.xml
        $(JAVA) -cp $(CLASSPATH) com.jclark.xsl.sax.Driver $< $(SRCTOP)/doc/xsl/ozdoc.xsl $@

export TEXINPUTS = $(SRCDIR):$(SRCTOP)/doc/xsl:$(shell echo $$TEXINPUTS)
export BSTINPUTS = .:$(SRCDIR):$(shell echo $$BSTINPUTS)
export BIBINPUTS = .:$(SRCDIR):$(shell echo $$BIBINPUTS)

WARN_REF= 'There were undefined references'
WARN_LTX= 'Rerun to get cross-references right|There were undefined references'

$(WHAT).dvi: $(WHAT).tex $(WHAT).pics
        latex $< || { rm $@; exit -1; }
        if egrep -s $(WARN_REF) $*.log; then echo > $*.stamp; fi
        if egrep -s '\\bibdata{' $*.aux; then make $*.bbl; fi
        if egrep -s $(WARN_LTX) $*.log; then latex $< || { rm $@; exit -1; } fi
        if egrep -s $(WARN_REF) $*.log; then echo > $*.stamp; fi
        if egrep -s '\\bibdata{' $*.aux; then make $*.bbl; fi
        if egrep -s $(WARN_LTX) $*.log; then latex $< || { rm $@; exit -1; } fi
        if egrep -s $(WARN_REF) $*.log; then echo > $*.stamp; fi
        if egrep -s '\\bibdata{' $*.aux; then make $*.bbl; fi
        if egrep -s $(WARN_LTX) $*.log; then latex $< || { rm $@; exit -1; } fi
%.bbl:  %.bib
        bibtex $*
$(WHAT).ps: $(WHAT).dvi
        dvips $< -o $@
ps: $(WHAT).ps
$(WHAT).pics: $(WHAT).xml
        $(JAVA) -cp $(CLASSPATH) com.jclark.xsl.sax.Driver $< $(SRCTOP)/doc/xsl/ozdoc-picture.xsl $@
        for f in `cat $(WHAT).pics`; do $(MAKE) $$f.ps; done
%.gif.ps: %.gif
        giftopnm $< | pnmtops -noturn > $@
%.gif.ps: pictures/%.gif
        giftopnm $< | pnmtops -noturn > $@

$(WHAT).code: $(WHAT).xml
        $(JAVA) -cp $(CLASSPATH) com.jclark.xsl.sax.Driver $< $(SRCTOP)/doc/xsl/codereq.xsl $@

# create an annotated version of the input

$(WHAT)-annotated.xml: $(WHAT).xml
        $(JAVA) -cp $(CLASSPATH) com.jclark.xsl.sax.Driver $< $(SRCTOP)/doc/xsl/ozdoc-annotate.xsl $@ || { rm -f $@ }

# extract file of elisp for performing hiliting

$(WHAT)-hilite.el: $(WHAT)-annotated.xml
        $(JAVA) -cp $(CLASSPATH) com.jclark.xsl.sax.Driver $< $(SRCTOP)/doc/xsl/ozdoc-hilite.xsl $@ || { rm -f $@ }

# generate hilited code

EMACSDO1= "(setq load-path (cons \"$(PREFIX)/share/elisp\" load-path))"
EMACSDO2= "(setq load-path (cons \"$(SRCDIR)/../xsl\" load-path))"
EMACSDO3= "(setq load-path (cons \"../xsl\" load-path))"
EMACSDO4= "(setq load-path (cons \"$(BUILDTOP)/share/elisp\" load-path))"
EMACSDO5= "(load \"ozdoc-fontify\")"

EMACSDIR1= "(defvar ozdoc-file-path nil)"
EMACSDIR2= "(setq ozdoc-file-path (cons \"$(SRCDIR)\" ozdoc-file-path))"
EMACSDIR3= "(setq ozdoc-file-path (cons \".\" ozdoc-file-path))"

$(WHAT)-hilite.xml: $(WHAT)-hilite.el
        emacs --batch \
                --eval $(EMACSDIR1) \
                --eval $(EMACSDIR2) \
                --eval $(EMACSDIR3) \
                --eval $(EMACSDO1) \
                --eval $(EMACSDO2) \
                --eval $(EMACSDO3) \
                --eval $(EMACSDO4) \
                --eval $(EMACSDO5) \
                --load $(WHAT)-hilite.el > $@ || { rm -f $@ }

# create document with preface of hilited code

$(WHAT)-prefaced.xml: $(WHAT)-hilite.xml $(WHAT)-annotated.xml
        echo '<HILITE.BOOK><HILITE.PREFACE>'    > $@
        cat $(WHAT)-hilite.xml                  >> $@
        echo '</HILITE.PREFACE>'                >> $@
        cat $(WHAT)-annotated.xml               >> $@
        echo '</HILITE.BOOK>'                   >> $@

# now replace code with hilited code

$(WHAT)-defaced.xml: $(WHAT)-prefaced.xml
        $(JAVA) -cp $(CLASSPATH) com.jclark.xsl.sax.Driver $< $(SRCTOP)/doc/xsl/ozdoc-deface.xsl $@ || { rm -f $@ }

clean::
        -rm -f $(WHAT).xml $(WHAT)-annotated.xml $(WHAT)-hilite.el
        -rm -f $(WHAT)-hilite.xml $(WHAT)-prefaced.xml $(WHAT)-defaced.xml

<Chapter id="chapter.pel">
  <Title/Propagation Engine Library/

<!-- ********************************************************************** -->
<Section id="pel.overview">
    <Title/Overview/
<P>
<List proglang=cc>

<Entry class="enumtype"><<pf_return_t>>
<Index class=proglang><<pf_return_t>> </Index>
<Synopsis><<typedef enum { pf_failed, pf_entailed, pf_sleep } pf_return_t;>>
<Item> gaga

<Entry class="fncttype"><<pf_fnct_t>>
<Index class=proglang><<pf_fnct_t>> </Index>
<Synopsis><<typedef pf_return_t (* pf_fnct_t)(int *, PEL_SuspVar * []);>>
<Item> gaga

</List>

<!-- ********************************************************************** -->
<Section id="pel.paramtable">
<title/The class <<PEL_ParamTable>>/
<p>

<List proglang=cc>

<Entry class="member function"><<add>>
<Index class=proglang><<PEL_ParamTable>> <And> <<add>> </Index>
<Synopsis><<int add(int i);>>
<Item> gaga

<Entry class="member function"><<getHigh>>
<Index class=proglang><<PEL_ParamTable>> <And> <<getHigh>> </Index>
<Synopsis><<int getHigh(void);>>
<Item> gaga

<Entry class="operator member function"><<operator []>>
<Index class=proglang><<PEL_ParamTable>> <And> <<operator []>> </Index>
<Synopsis><<int &amp;operator [] (int i);>>
<Item> gaga

</List>

</Section>

<!-- ********************************************************************** -->
<Section id="pel.eventlist">
<title/The class <<PEL_EventList>>/
<p>
<List proglang=cc>

<Entry class="member function"><<add>>
<Index class=proglang><<PEL_EventList>> <And> <<add>> </Index>
<Synopsis><<int add(int i);>>
<Item> gaga

<Entry class="member function"><<wakeup>>
<Index class=proglang><<PEL_EventList>> <And> <<wakeup>> </Index>
<Synopsis><<void wakeup(PEL_PropQueue *pq, PEL_PropFnctTable * pft[]);>>
<Item> gaga

<Entry class="member function"><<getHigh>>
<Index class=proglang><<PEL_EventList>> <And> <<getHigh>> </Index>
<Synopsis><<int getHigh(void);>>
<Item> gaga

<Entry class="operator member function"><<operator []>>
<Index class=proglang><<PEL_EventList>> <And> <<operator []>> </Index>
<Synopsis><<int &amp;operator [] (int i);>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.propfncttableentry">
<title/The class <<PEL_PropFnctTableEntry>>/
<p>
<List proglang=cc>

<Entry class="constructor"><<PEL_PropFnctTableEntry>>
<Index class=proglang><<PEL_PropFnctTableEntry>> </Index>
<Synopsis><<PEL_PropFnctTableEntry(pf_fnct_t fn, int idx);>>
<Item> gaga

<Entry class="member function"><<isScheduled>>
<Index class=proglang><<PEL_PropFnctTableEntry>> <And> <<isScheduled>> </Index>
<Synopsis><<void isScheduled(void);>>
<Item> gaga

<Entry class="member function"><<setScheduled>>
<Index class=proglang><<PEL_PropFnctTableEntry>> <And> <<setScheduled>> </Index>
<Synopsis><<void setScheduled(void);>>
<Item> gaga

<Entry class="member function"><<unsetScheduled>>
<Index class=proglang><<PEL_PropFnctTableEntry>> <And> <<unsetScheduled>> </Index>
<Synopsis><<void unsetScheduled(void);>>
<Item> gaga

<Entry class="member function"><<isDead>>
<Index class=proglang><<PEL_PropFnctTableEntry>> <And> <<isDead>> </Index>
<Synopsis><<int isDead(void);>>
<Item> gaga

<Entry class="member function"><<setDead>>
<Index class=proglang><<PEL_PropFnctTableEntry>> <And> <<setDead>> </Index>
<Synopsis><<void setDead(void);>>
<Item> gaga

<Entry class="member function"><<getFnct>>
<Index class=proglang><<PEL_PropFnctTableEntry>> <And> <<getFnct>> </Index>
<Synopsis><<pf_fnct_t getFnct(void);>>
<Item> gaga

<Entry class="member function"><<getParamIdx>>
<Index class=proglang><<PEL_PropFnctTableEntry>> <And> <<getParamIdx>> </Index>
<Synopsis><<int getParamIdx(void);>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.propfncttable">
<title/The class <<PEL_PropFnctTable>>/
<p>
<List proglang=cc>

<Entry class="constructor"><<PEL_PropFnctTable>>
<Index class=proglang><<PEL_PropFnctTable>> </Index>
<Synopsis><<PEL_PropFnctTable(void);>>
<Item> gaga

<Entry class="member function"><<add>>
<Index class=proglang><<PEL_PropFnctTable>><And><<add>> </Index>
<Synopsis>
<<
int add(PEL_ParamTable &amp;pt, PEL_PropQueue &amp;pq,
        pf_fnct_t fnct, int x, int y);
>>
<Item> gaga

<Entry class="member function"><<add>>
<Index class=proglang><<PEL_PropFnctTable>><And><<add>> </Index>
<Synopsis>
<<
int add(PEL_ParamTable &amp;pt, PEL_PropQueue &amp;pq,
        pf_fnct_t fnct, int x, int y, int z);
>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.propqueue">
<title/The class <<PEL_PropQueue>>/
<p>
<List proglang=cc>

<Entry class="constructor"><<PEL_PropQueue>>
<Index class=proglang><<PEL_PropQueue>> </Index>
<Synopsis><<PEL_PropQueue(void);>>
<Item> gaga

<Entry class="member function"><<enqueue>>
<Index class=proglang><<PEL_PropQueue>> <And> <<enqueue>> </Index>
<Synopsis><<void enqueue(int fnct_idx);>>
<Item> gaga

<Entry class="member function"><<dequeue>>
<Index class=proglang><<PEL_PropQueue>> <And> <<dequeue>> </Index>
<Synopsis><<int dequeue(void);>>
<Item> gaga

<Entry class="member function"><<apply>>
<Index class=proglang><<PEL_PropQueue>> <And> <<apply>> </Index>
<Synopsis><<
pf_return_t apply(PEL_PropFnctTable &amp;pft,
                  PEL_ParamTable &amp;pt,
                  PEL_SuspVar * []);
>>
<Item> gaga

<Entry class="member function"><<isEmpty>>
<Index class=proglang><<PEL_PropQueue>> <And> <<isEmpty>> </Index>
<Synopsis><<int isEmpty(void);>>
<Item> gaga

<Entry class="member function"><<setFailed>>
<Index class=proglang><<PEL_PropQueue>> <And> <<setFailed>> </Index>
<Synopsis><<void setFailed(void);>>
<Item> gaga

<Entry class="member function"><<isFailed>>
<Index class=proglang><<PEL_PropQueue>> <And> <<isFailed>> </Index>
<Synopsis><<int isFailed(void);>>
<Item> gaga

<Entry class="member function"><<isBasic>>
<Index class=proglang><<PEL_PropQueue>> <And> <<isBasic>> </Index>
<Synopsis><<int isBasic(void);>>
<Item> gaga

<Entry class="member function"><<incAPF>>
<Index class=proglang><<PEL_PropQueue>> <And> <<incAPF>> </Index>
<Synopsis><<void incAPF(void);>>
<Item> gaga

<Entry class="member function"><<decAPF>>
<Index class=proglang><<PEL_PropQueue>> <And> <<decAPF>> </Index>
<Synopsis><<void decAPF(void);>>
<Item> gaga

<Entry class="member function"><<reset>>
<Index class=proglang><<PEL_PropQueue>> <And> <<reset>> </Index>
<Synopsis><<void reset(void);>>
<Item> gaga

<Entry class="member function"><<getSize>>
<Index class=proglang><<PEL_PropQueue>> <And> <<getSize>> </Index>
<Synopsis><<int getSize(void);>>
<Item> gaga

</List>

</Section>

<!-- ********************************************************************** -->
<Section id="pel.fsetprofile">
<title/The class <<PEL_FSetProfile>>/
<p>
<List proglang=cc>

<Entry class="constructor"><<PEL_FSetProfile>>
<Index class=proglang><<PEL_FSetProfile>> </Index>
<Synopsis><<PEL_FSetProfile(void);>>
<Item> gaga

<Entry class="member function"><<init>>
<Index class=proglang><<PEL_FSetProfile>> <And> <<init>> </Index>
<Synopsis><<void init(OZ_FSetConstraint &amp;fset);>>
<Item> gaga

<Entry class="member function"><<isTouched>>
<Index class=proglang><<PEL_FSetProfile>> <And> <<isTouched>> </Index>
<Synopsis><<int isTouched(OZ_FSetConstraint &amp;fset);>>
<Item> gaga

<Entry class="member function"><<isTouchedSingleValue>>
<Index class=proglang><<PEL_FSetProfile>> <And> <<isTouchedSingleValue>> </Index>
<Synopsis><<int isTouchedSingleValue(OZ_FSetConstraint &amp;fset);>>
<Item> gaga

<Entry class="member function"><<isTouchedLowerBound>>
<Index class=proglang><<PEL_FSetProfile>> <And> <<isTouchedLowerBound>> </Index>
<Synopsis><<int isTouchedLowerBound(OZ_FSetConstraint &amp;fset);>>
<Item> gaga

<Entry class="member function"><<isTouchedUpperBound>>
<Index class=proglang><<PEL_FSetProfile>> <And> <<isTouchedUpperBound>> </Index>
<Synopsis><<int isTouchedUpperBound(OZ_FSetConstraint &amp;fset);>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.fseteventlists">
<title/The class <<PEL_FSetEventLists>>/
<p>
<List proglang=cc>

<Entry class="member function"><<getLowerBound>>
<Index class=proglang><<PEL_FSetProfile>> <And> <<getLowerBound>> </Index>
<Synopsis><<PEL_EventList &amp;getLowerBound(void);>>
<Item> gaga

<Entry class="member function"><<getUpperBound>>
<Index class=proglang><<PEL_FSetEventList>> <And> <<getUpperBound>> </Index>
<Synopsis><<PEL_EventList &amp;getUpperBound(void);>>
<Item> gaga

<Entry class="member function"><<getSingleValue>>
<Index class=proglang><<PEL_FSetEventList>> <And> <<getSingleValue>> </Index>
<Synopsis><<PEL_EventList &amp;getSingleValue(void);>>
<Item> gaga

<Entry class="member function"><<gc>>
<Index class=proglang><<PEL_FSetEventList>> <And> <<gc>> </Index>
<Synopsis><<void gc(void);>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.fdprofile">
<title/The class <<PEL_FDProfile>>/
<p>
<List proglang=cc>

<Entry class="constructor"><<PEL_FDProfile>>
<Index class=proglang><<PEL_FDProfile>> </Index>
<Synopsis><<PEL_FDProfile(void);>>
<Item> gaga

<Entry class="member function"><<init>>
<Index class=proglang><<PEL_FDProfile>> <And> <<init>> </Index>
<Synopsis><<void init(OZ_FDConstraint &amp;fd);>>
<Item> gaga

<Entry class="member function"><<isTouched>>
<Index class=proglang><<PEL_FDProfile>> <And> <<isTouched>> </Index>
<Synopsis><<int isTouched(OZ_FDConstraint &amp;fd);>>
<Item> gaga

<Entry class="member function"><<isTouchedWidth>>
<Index class=proglang><<PEL_FDProfile>> <And> <<isTouchedWidth>> </Index>
<Synopsis><<int isTouchedWidth(OZ_FDConstraint &amp;fd);>>
<Item> gaga

<Entry class="member function"><<isTouchedLowerBound>>
<Index class=proglang><<PEL_FDProfile>> <And> <<isTouchedLowerBound>> </Index>
<Synopsis><<int isTouchedLowerBound(OZ_FDConstraint &amp;fd);>>
<Item> gaga

<Entry class="member function"><<isTouchedUpperBound>>
<Index class=proglang><<PEL_FDProfile>> <And> <<isTouchedUpperBound>> </Index>
<Synopsis><<int isTouchedUpperBound(OZ_FDConstraint &amp;fd);>>
<Item> gaga

<Entry class="member function"><<isTouchedBounds>>
<Index class=proglang><<PEL_FDProfile>> <And> <<isTouchedBounds>> </Index>
<Synopsis><<int isTouchedBounds(OZ_FDConstraint &amp;fd);>>
<Item> gaga

<Entry class="member function"><<isTouchedSingleValue>>
<Index class=proglang><<PEL_FDProfile>> <And> <<isTouchedSingleValue>> </Index>
<Synopsis><<int isTouchedSingleValue(OZ_FDConstraint &amp;fd);>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.fdeventlists">
<title/The class <<PEL_FDEventLists>>/
<p>
<List proglang=cc>

<Entry class="member function"><<getBounds>>
<Index class=proglang><<PEL_FDProfile>> <And> <<getBounds>> </Index>
<Synopsis><<PEL_EventList &amp;getBounds(void);>>
<Item> gaga

<Entry class="member function"><<getSingleValue>>
<Index class=proglang><<PEL_FDEventList>> <And> <<getSingleValue>> </Index>
<Synopsis><<PEL_EventList &amp;getSingleValue(void);>>
<Item> gaga

<Entry class="member function"><<gc>>
<Index class=proglang><<PEL_FDEventList>> <And> <<gc>> </Index>
<Synopsis><<void gc(void);>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.suspvar">
<title/The class <<PEL_SuspVar>>/
<p>
<List proglang=cc>

<Entry class="purevirtual member function"><<wakeup>>
<Index class=proglang><<PEL_SuspVar>> <And> <<wakeup>> </Index>
<Synopsis><<virtual int wakeup(void) = 0;>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.suspfsetvar">
<title/The class <<PEL_SuspFSetVar>>/
<p>
<List proglang=cc>

<Entry class="constructor"><<PEL_SuspFSetVar>>
<Index class=proglang><<PEL_SuspFSetVar>> </Index>
<Synopsis><<PEL_SuspFSetVar(void);>>
<Item> gaga

<Entry class="constructor"><<PEL_SuspFSetVar>>
<Index class=proglang><<PEL_SuspFSetVar>> </Index>
<Synopsis>
<<
PEL_SuspFSetVar(PEL_FSetProfile &amp;fsetp, OZ_FSetConstraint &amp;fset,
                PEL_FSetEventLists &amp;fsetel, PEL_PropQueue &amp;pq,
                PEL_PropFnctTable &amp;pft, int first = 1);
>>
<Item> gaga

<Entry class="constructor"><<PEL_SuspFSetVar>>
<Index class=proglang><<PEL_SuspFSetVar>> </Index>
<Synopsis>
<<
PEL_SuspFSetVar(OZ_FSetConstraint &amp;fsetl, PEL_FSetEventLists &amp;fsetel,
                PEL_PropQueue &amp;pq, PEL_PropFnctTable &amp;pft);
>>
<Item> gaga

<Entry class="member function"><<init>>
<Index class=proglang><<PEL_SuspFSetVar>> <And> <<init>> </Index>
<Synopsis>
<<
PEL_SuspFSetVar * init(PEL_FSetProfile &amp;fsetp, OZ_FSetConstraint &amp;fset,
                       PEL_FSetEventLists &amp;fsetel, PEL_PropQueue &amp;pq,
                       PEL_PropFnctTable &amp;pft, int first = 1);
>>
<Item> gaga

<Entry class="member function"><<init>>
<Index class=proglang><<PEL_SuspFSetVar>> <And> <<init>> </Index>
<Synopsis>
<<
PEL_SuspFSetVar * init(OZ_FSetConstraint &amp;fsetl, PEL_FSetEventLists &amp;fsetel,
                       PEL_PropQueue &amp;pq, PEL_PropFnctTable &amp;pft);
>>
<Item> gaga

<Entry class="member function"><<propagate_to>>
<Index class=proglang><<PEL_SuspFSetVar>> <And> <<propagate_to>> </Index>
<Synopsis><<int propagate_to(OZ_FSetConstraint &amp;fset, int first = 0);>>
<Item> gaga

<Entry class="member function"><<wakeup>>
<Index class=proglang><<PEL_SuspFSetVar>> <And> <<wakeup>> </Index>
<Synopsis><<virtual int wakeup(int first = 0);>>
<Item> gaga

<Entry class="operator member function"><<operator *>>
<Index class=proglang><<PEL_SuspFSetVar>> <And> <<operator *>> </Index>
<Synopsis><<OZ_FSetConstraint &amp;operator * (void);>>
<Item> gaga

<Entry class="operator member function"><<operator -> >>
<Index class=proglang><<PEL_SuspFSetVar>> <And> <<operator -> >> </Index>
<Synopsis><<OZ_FSetConstraint * operator -> (void);>>
<Item> gaga

</List>
</Section>

<!-- ********************************************************************** -->
<Section id="pel.suspfdintvar">
<title/The class <<PEL_SuspFDIntVar>>/
<p>
<List proglang=cc>

<Entry class="constructor"><<PEL_SuspFDVar>>
<Index class=proglang><<PEL_SuspFDVar>> </Index>
<Synopsis><<PEL_SuspFDVar(void);>>
<Item> gaga

<Entry class="constructor"><<PEL_SuspFDVar>>
<Index class=proglang><<PEL_SuspFDVar>> </Index>
<Synopsis>
<<
PEL_SuspFDIntVar(PEL_FDProfile &amp;fdp, OZ_FiniteDomain &amp;fdv,
                 PEL_FDEventLists &amp;fdel, PEL_PropQueue &amp;pd,
                 PEL_PropFnctTable &amp;pft, int first = 1);
>>
<Item> gaga

<Entry class="constructor"><<PEL_SuspFDVar>>
<Index class=proglang><<PEL_SuspFDVar>> </Index>
<Synopsis>
<<
PEL_SuspFDIntVar(OZ_FiniteDomain &amp;fdl, PEL_FDEventLists &amp;fdel,
                 PEL_PropQueue &amp;pd, PEL_PropFnctTable &amp;pft);
>>
<Item> gaga

<Entry class="member function"><<init>>
<Index class=proglang><<PEL_SuspFDVar>> <And> <<init>> </Index>
<Synopsis>
<<
PEL_SuspFDIntVar * init(PEL_FDProfile &amp;fdp, OZ_FiniteDomain &amp;fd,
                        PEL_FDEventLists &amp;fdel, PEL_PropQueue &amp;pq,
                        PEL_PropFnctTable &amp;pft, int first = 1);
>>
<Item> gaga

<Entry class="member function"><<init>>
<Index class=proglang><<PEL_SuspFDVar>> <And> <<init>> </Index>
<Synopsis>
<<
PEL_SuspFDIntVar * init(OZ_FiniteDomain &amp;fdl, PEL_FDEventLists &amp;fdel,
                        PEL_PropQueue &amp;pq, PEL_PropFnctTable &amp;pft);
>>
<Item> gaga

<Entry class="member function"><<propagate_to>>
<Index class=proglang><<PEL_SuspFDVar>> <And> <<propagate_to>> </Index>
<Synopsis><<int propagate_to(OZ_FiniteDomain &amp;fd, int first = 0);>>
<Item> gaga

<Entry class="member function"><<wakeup>>
<Index class=proglang><<PEL_SuspFDVar>> <And> <<wakeup>> </Index>
<Synopsis><<virtual int wakeup(int first = 0);>>
<Item> gaga

<Entry class="operator member function"><<operator *>>
<Index class=proglang><<PEL_SuspFDVar>> <And> <<operator *>> </Index>
<Synopsis><<OZ_FiniteDomain &amp;operator * (void);>>
<Item> gaga

<Entry class="operator member function"><<operator -> >>
<Index class=proglang><<PEL_SuspFDVar>> <And> <<operator -> >> </Index>
<Synopsis><<OZ_FiniteDomain * operator -> (void);>>
<Item> gaga


</List>
</Section>

</Chapter>

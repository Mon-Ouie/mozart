<!DOCTYPE Book SYSTEM "ozdoc.dtd" [

<!-- Extension to the DTD -->
<!ENTITY % proglang.values.local "|sh">

<!-- Abbreviations -->
<!ENTITY amp "&">
<!ENTITY OPI "OPI">

<!-- Processing Instructions -->
<!ENTITY ellipsis PI "ellipsis">
<!ENTITY slash PI "slash">
<!ENTITY nbsp PI "nbsp">
<!ENTITY eg PI "eg">
<!ENTITY ie PI "ie">
<!ENTITY wrt PI "wrt">
<!ENTITY resp PI "resp">

]>

<Book proglang=elisp>
  <Front>
    <!-- Splitting the document into different HTML nodes -->
    <Meta name="html.split" value="chapter.intro">
    <Meta name="html.split" value="chapter.start">
    <Meta name="html.split" value="chapter.editing">
    <Meta name="html.split" value="chapter.running">
    <Meta name="html.split" value="chapter.tools">
    <Meta name="html.split" value="chapter.gdb">
    <Meta name="html.split" value="chapter.internals">
    <Meta name="html.split.bib" value="">

    <Meta name=ozversion value="3.0">
    <Meta name=status value=draft>
    <Title/The Oz Programming Interface/
    <Author.Extern to="author.db" key="Leif.Kornstaedt">
    <Abstract>
      <P.silent><!--**-->
	The Oz Programming Interface (&OPI;) is the primary tool for
	interaction with the Mozart development system.  It offers special
	support for editing Oz code, running Mozart as a sub-process, and
	running Mozart's development tools.
    </Abstract>
  <Body>
    <Chapter id="chapter.intro">
      <Title/Introduction/
      <P>
	The Mozart Programming System provides a powerful environment for
	the development of software systems, called the <Q/Oz Programming
	Interface/ (&OPI;).  The &OPI; is built around the extensible Emacs
	editor and runs (at least) under GNU Emacs, Version&nbsp;19.28 or
	greater, and XEmacs, Version&nbsp;19.14 or greater.  Its main
	features are:
      <Para class=apropos><Title/Features/
	<List>
	  <Entry>Editing Oz code.
	  <Item>
	    <P.silent><!--**-->
	      The &OPI; automatically indents program lines and colorizes
	      Oz source code to ease reading and writing of Oz programs.
	      Due to its awareness of the syntactical structure of Oz, one
	      can navigate through programs by jumping over whole constructs
	      such as procedure or class definitions.
	  <Entry>Running Mozart as a sub-process.
	  <Item>
	    <P.silent><!--**-->
	      The &OPI; handles input to and output from a Mozart sub-process,
	      providing a convenient interface for the interactive use of the
	      Mozart system and for explorative programming.
	  <Entry>Starting Mozart's development tools.
	  <Item>
	    <P.silent><!--**-->
	      The &OPI; provides menus and shortcuts to interact with the
	      development system's graphical tools, &eg;, setting breakpoints
	      for the thread debugger or displaying the current position in
	      the source file being debugged.
	  <!--** it also will allow to invoke online documentation -->
	</List>
      <Para class=apropos><Title/The Manual's Structure/
	This manual is structured as follows.  First, <Ptr to="chapter.start">
	will give an overview about the general integration of the &OPI;
	into the standard framework provided by Emacsen<Note foot><Q/Emacsen/
	is the plural of <Q/Emacs/.  This term is used in this manual when the
	described feature applies to both GNU Emacs and XEmacs.</Note>.  Then
	will follow <Ptr to="chapter.editing">, <Ptr to="chapter.running"> and
	<Ptr to="chapter.tools">, dedicated to the three main points mentioned
	above respectively.  <Ptr to="chapter.gdb"> details how to run Mozart
	under <Name type=tool/gdb/.  Finally, <Ptr to="chapter.internals">
	documents some internal functions of the &OPI; that might be useful
	for users who want to write their own editing commands.
      <Para class=apropos><Title/Learning Emacs/
	In order to exploit the power of the &OPI; you will have to get
	some acquaintance with Emacs.  A good place to start is the Emacs
	on-line tutorial, available from the Emacs Help menu.  This manual
	will assume some familiarity with the general editing commands of
	Emacsen.
      <Section class=unnumbered>
	<Title/Acknowledgements/
	<P>
	  The Oz Programming Interface of the Mozart system is an
	  extension and partial redesign of the Oz Programming Interface
	  of DFKI Oz, Versions 1.1 and&nbsp;2.0.  Credit has to go to the
	  following people:
	  <List>
	    <Item>
	      <P.silent><!--**-->
		Michael Mehl, for initially providing editing support
		(indentation, fontification),
	    <Item>
	      <P.silent><!--**-->
		Ralf Scheidhauer, for running Oz as a sub-process,
	    <Item>
	      <P.silent><!--**-->
		Benjamin Lorenz, for the interaction with the Oz debugger,
	    <Item>
	      <P.silent><!--**-->
		Jochen Dörre, for initially providing Oz expression
		editing commands and jumping to compiler error messages.
	  </List>
	  Leif Kornstaedt is the person now responsible for the entirety
	  of Mozart's &OPI;.  Please address any remarks to him.
    <Chapter id="chapter.start">
      <Title/Getting Started/
      <Section>
	<Title/Starting the &OPI; in the Unix Environment/
	  <P>
	    The easiest way to start the &OPI; is to type the following
	    command at the shell prompt<Note foot>The percent sign
	    (<Samp/%/) represents the shell prompt; it is not part of
	    the command.</Note>:
	    <Code display proglang=sh
	      >% oz <Var type=grammar/emacs args/</Code>
	    This starts up an Emacs process, passing to it all arguments
	    given on the command line, creates a new buffer named <Name
	    type=buffer/Oz/, and runs Mozart as a sub-process.
	  <Para class=apropos><Title/Which Emacs to Use/
	    The command used to invoke Emacs is determined through the
	    following steps:
	    <List enum>
	      <Item>
		<P.silent><!--**-->
		  If the environment variable <Var type=env/OZEMACS/ is
		  set, its contents is used.
	      <Item>
		<P.silent><!--**-->
		  Else, if a command named <File/emacs/ is found in the
		  <Var type=env/PATH/, this is used.
	      <Item>
		<P.silent><!--**-->
		  Else, if a command named <File/xemacs/ is found in the
		  <Var type=env/PATH/, this is used.
	      <Item>
		<P.silent><!--**-->
		  Else, if a command named <File/lemacs/ is found in the
		  <Var type=env/PATH/, this is used.
	    </List>
      <Section>
	<Title/Starting the &OPI; Under Windows/
	  <P>
	    The installation procedure will have created a program group
	    for the Mozart system.  The &OPI; is started by launching the
	    <Name type=program/Mozart/ item.
      <Section>
	<Title/Starting the &OPI; From Within Emacs/
	  <P>
	    You can also configure your Emacs so that you can use all of
	    the &OPI;'s functionality without using the <File/oz/ script.
	    Here's what you would typically add to your Emacs startup file
	    (usually called <File>~/.emacs</File> under Unix and <File
	    >C:\_emacs</File> under Windows):
	    <Code.Extern display to="oz.el">
      <Section>
	<Title/The Oz and Oz-Gump Major Modes/
	  <P>
	    All of the &OPI;'s functions are accessible in the following two
	    major modes:
	    <List>
	      <Entry class=command><<oz-mode>>
	      <Item>
		<P.silent><!--**-->
		  This is the major mode for editing Oz code.  Loading a file
		  with extension <File/.oz/ automatically puts a buffer into
		  Oz mode.  You can tell a buffer is in Oz mode by the string
		  <Samp/Oz/ in its mode line.
	      <Entry class=command><<oz-gump-mode>>
	      <Item>
		<P.silent><!--**-->
		  This is the major mode for editing Oz code with embedded
		  Gump specifications&nbsp;<Ptr to="kornstaedt96">.  Loading
		  a file with extension <File/.ozg/ automatically puts a
		  buffer in Oz-Gump mode.  You can tell a buffer is in
		  Oz-Gump mode by the string <Samp/Oz-Gump/ in its mode line.
	    </List>
	  <Para class=apropos><Title/Oz Mode Hook/
	    To both of these, the following hook applies.
	    <List>
	      <Entry class=useroption><<oz-mode-hook>>
	      <Item>
		<P.silent><!--**-->
		  A list of functions to be run when either Oz mode or Oz-Gump
		  mode is activated.  These functions are applied without
		  arguments.  Change using Emacs functions <<add-hook>> and
		  <<remove-hook>>.
	    </List>
      <Section>
	<Title/Inspecting the &OPI;'s Commands and User Options/
	  <Para class=apropos><Title/The Oz Menu/
	    The Oz major modes add a menu called <Samp/Oz/ to the menu bar
	    (see <Ptr to="figure.menu">); in XEmacs, this menu is also
	    accessible by pressing the right mouse button in an Oz buffer.
	    Many of the commands described in the next chapters are accessible
	    through this menu.
	    <Figure float id="figure.menu" class=figure>
	      <Caption>The Oz Menu.</Caption>
	      <P><!--**-->
		<Picture.Extern GIF display to="menu.gif">
	    </Figure>
	  <Para class=apropos><Title/Emacs Conventions/
	    The Oz modes conform to the following Emacs conventions:
	    <List>
	      <Item>
		<P.silent><!--**-->
		  Nearly all functions and variables start with
		  <<oz-&ellipsis>>
	      <Item>
		<P.silent><!--**-->
		  If the documentation string of a variable starts with an
		  asterisk, then its value is meant for the user to modify
		  at will (a so-called <Def/user option/).
		  The documentation string of a variable can be inspected
		  with <Key/M-x describe-variable/ (<Key/C-h v/).
	      <Item>
		<P.silent><!--**-->
		  If a function has a documentation string, then it is
		  meant for the user to use directly if she so wishes.
		  Inspect the documentation string of a function with
		  <Key/M-x describe-function/ (<Key/C-h f/); if a command
		  is bound to a key, you can examine its documentation
		  string with <Key/M-x describe-key/ (<Key/C-h k/).
	      <Item>
		<P.silent><!--**-->
		  The &OPI; provides the feature <Code><Span class=ignore
		  /(provide '/oz<Span class=ignore/)/</Code>.  See Emacs'
		  <Code><Span class=ignore/(/require</Code> function for
		  more details.
	    </List>
	  <Para class=apropos><Title/Customization/
	    New Emacsen offer a feature called <Def/customization/, which
	    serves the purpose of setting the user options pertaining to a
	    mode in a structured way.  You can access this feature by
	    <Key/M-x customize/; look at the group <Name type=buffer
	    /Programming/&slash;<Name type=buffer/Languages/&slash;<Name
	    type=buffer/Oz/.  You can also access this group directly via
	    <Key/M-x customize-group RET oz/.
	  <Para class=apropos><Title/Key Bindings/
	    A short description of the current major mode and its key
	    bindings can be obtained through Emacs' <Key/M-x describe-mode/
	    (<Key/C-h m/).  In this manual, the key sequences a command is
	    bound to by default will always be shown in parenthesis following
	    the command name.  The following user option affects which key
	    bindings are installed by default.
	    <List>
	      <Entry class=useroption><<oz-pc-keys>> (default: <<nil>>)
	      <Item>
		<P.silent><!--**-->
		  If non-<<nil>>, use only <Q class=quasi/politically correct/
		  key bindings.  This means that <Key/M-l/ and <Key/M-r/ are
		  not locally rebound in Oz buffers, and that no command will
		  be bound to <Key/C-c/ followed by a letter.  Note that this
		  user option must be set before the <File/oz/ library is
		  loaded.
	      <Entry class=useroption><<oz-mode-map>>
	      <Item>
		<P.silent><!--**-->
		  Keymap used in the Oz modes.
	    </List>
    <Chapter id="chapter.editing">
      <Title/Editing Oz Code/
      <Section>
	<Title/Managing Oz Buffers/
	  <P>
	    The Oz modes offer commands for creating new interactive buffers
	    and quickly switching between Oz buffers:
	    <List>
	      <Entry class=command><<oz-new-buffer>> (<Key/C-c C-n/)
	      <Item>
		<P.silent><!--**-->
		  Create a new buffer using the Oz major mode.
		  Note that this buffer has no associated file name,
		  so quitting Emacs will kill it without warning.
	      <Entry class=command><<oz-previous-buffer>> (<Key/M-p/)
	      <Item>
		<P.silent><!--**-->
		  Switch to the previous buffer in the buffer list that
		  runs in an Oz mode.  If no such buffer exists, an error
		  is signalled.
	      <Entry class=command><<oz-next-buffer>> (<Key/M-n/)
	      <Item>
		<P.silent><!--**-->
		  Switch to the next buffer in the buffer list that runs
		  in an Oz mode.  If no such buffer exists, an error is
		  signalled.
	    </List>
      <Section>
	<Title/Indentation/
	  <P>
	    The preferred indentation style can currently be customized
	    through the following user option:
	    <List>
	      <Entry class=useroption><<oz-indent-chars>> (default: <<3>>)
	      <Item>
		<P.silent><!--**-->
		  Number of columns that statements are indented &wrt;
		  the block containing them.
	    </List>
	    Several commands assist in indenting existing Oz code.
	    <List>
	      <Entry class=command><<oz-indent-line &amp;optional COUNT>>
		(<Key/TAB/)
	      <Item>
		<P.silent><!--**-->
		  Indent the current line.  If <<COUNT>> is given, reindent
		  that many lines above and below point as well.
	      <Entry class=command><<oz-indent-region>>
	      <Item>
		<P.silent><!--**-->
		  Indent all lines at least partly covered by the current
		  region.
	      <Entry class=command><<oz-indent-buffer>>
	      <Item>
		<P.silent><!--**-->
		  Indent every line in the buffer.
	      <Entry class=command><<indent-oz-expr>> (<Key/M-C-q/)
	      <Item>
		<P.silent><!--**-->
		  Indent all lines at least partly covered by the Oz
		  expression following point.  For a description of
		  what constitutes an Oz expression, see <Ptr
		  to="section.expression-commands">.
	    </List>
	    The following command assists in authoring Oz code.
	    <List>
	      <Entry class=command><<oz-electric-terminate-line>> (<Key/RET/)
	      <Item>
		<P.silent><!--**-->
		  Terminate the current line, &ie;, delete all whitespace
		  around point and break the line.  If the user option
		  <<oz-auto-indent>> is non-<<nil>>, indent both lines.
	      <Entry class=useroption><<oz-auto-indent>> (default: <<t>>)
	      <Item>
		<P.silent><!--**-->
		  See <<oz-electric-terminate-line>>.
	    </List>
	    Additionally, <Key/DEL/ is bound to the Emacs command
	    <<backward-delete-char-untabify>>.
      <Section>
	<Title/Fontification/
	  <P>
	    <Def/Fontification/ is the term used in Emacs for displaying
	    text in different faces, depending on syntactical properties,
	    to ease reading of code.  For example, comments and strings may
	    be displayed in different colours.
	  <P>
	    Many major modes in Emacs provide several levels of fontification
	    with increasing use of colours, but also increasing resource
	    consumption.  In the Oz modes, there are three levels.  You can
	    select one using the <<font-lock-maximum-decoration>> user option,
	    &eg;, add the following line to your <File/.emacs/:
	    <<<(setq font-lock-maximum-decoration 3)>>>
	  <P>
	    The following user option and command control automatic
	    fontification in the &OPI;.
	    <List>
	      <Entry class=useroption><<oz-want-font-lock>> (default: <<t>>)
	      <Item>
		<P.silent><!--**-->
		  If non-<<nil>>, automatically invoke <<font-lock-mode>> when
		  any of the Oz modes is activated.
	      <Entry class=command><<oz-fontify-buffer &amp;optional ARG>>
		(<Key/M-l/)
	      <Item>
		<P.silent><!--**-->
		  Center point in window, redisplay frame and re-fontify
		  buffer.  The <<ARG>> is interpreted just as with the
		  <<recenter>> command (usually bound to <Key/C-l/).
	    </List>
	    You might like the following user option and command if you care
	    about superfluous (usually invisible) spaces:
	    <List>
	      <Entry class=useroption><<oz-pedantic-spaces>>
		(default: <<nil>>)
	      <Item>
		<P.silent><!--**-->
		  If non-nil, highlight ill-placed whitespace.  Note that this
		  user option must be set before the <File/oz/ library is
		  loaded.
	      <Entry class=face><<oz-space-face>>
	      <Item>
		<P.silent><!--**-->
		  The face in which ill-placed whitespace is highlighted.
	      <Entry class=command><<oz-remove-annoying-spaces>>
	      <Item>
		<P.silent><!--**-->
		  Remove all ill-placed whitespace from the current buffer.
		  This is all the whitespace that is highlighted in
		  <<oz-space-face>>.
	    </List>
      <Section>
	<Title/Comments/
	  <P>
	    <List>
	      <Entry class=command><<oz-fill-paragraph &amp;optional JUSTIFY>>
	      <Item>
		<P.silent><!--**-->
		  Like the <<fill-paragraph>> command, but handles Oz comments.
		  If any of the current line is a comment, fill the comment
		  or the paragraph of it that point is in, preserving the
		  comment's indentation and initial percent signs.  Bound to
		  the buffer-local variable <<fill-paragraph-function>>.
	      <Entry class=command>
		<<oz-comment-region START END &amp;optional ARG>>
	      <Item>
		<P.silent><!--**-->
		  Comment or uncomment each line in the region.  With just
		  <Key/C-u/ as prefix argument, uncomment each line in region.
		  A numeric prefix argument <<ARG>> means use <<ARG>> comment
		  characters.  If <<ARG>> is negative, delete that many
		  comment characters instead.  Blank lines do not get
		  comments.
	      <Entry class=command>
		<<oz-uncomment-region START END &amp;optional ARG>>
	      <Item>
		<P.silent><!--**-->
		  Comment or uncomment each line in the region.  See the
		  <<oz-comment-region>> command for more information; note
		  that the prefix argument is negated though.
	    </List>
      <Section id="section.expression-commands">
	<Title/Expression-Level Commands/
	  <P>
	    In this section, we use the term <Def/Oz definition/ to stand
	    for the text from a <<proc>>, <<fun>>, <<class>> or <<meth>>
	    keyword up to its matching <<end>>.  Also, we use the term
	    <Def/Oz expression/ to stand for the text corresponding to
	    either a bracketed Oz construct (such as <<proc &ellipsis; end>>
	    or <<local &ellipsis end>>) or a single word.
	    <List>
	      <Entry class=command><<forward-oz-expr &amp;optional COUNT>>
		(<Key/M-C-f/)
	      <Item>
		<P.silent><!--**-->
		  Move forward one balanced Oz expression.  With <<COUNT>>, do
		  it that many times.  Negative <<COUNT>> means backwards.
	      <Entry class=command><<backward-oz-expr &amp;optional COUNT>>
		(<Key/M-C-b/)
	      <Item>
		<P.silent><!--**-->
		  Move backward one balanced Oz expression.  With <<COUNT>>, do
		  it that many times.  <<COUNT>> must be positive.
	      <Entry class=command><<mark-oz-expr COUNT>>
		(<Key/M-C-@/, <Key/M-C-SPC/)
	      <Item>
		<P.silent><!--**-->
		  Set mark <<COUNT>> balanced Oz expressions from point.  The
		  place mark goes to is the same place the <<forward-oz-expr>>
		  command would move to with the same argument.
	      <Entry class=command><<transpose-oz-exprs ARG>> (<Key/M-C-t/)
	      <Item>
		<P.silent><!--**-->
		  Like the <<transpose-words>> command (usually bound to
		  <Key/M-t/) but applies to balanced Oz expressions.  Caveat:
		  This might not produce nice results in all cases.
	      <Entry class=command><<kill-oz-expr COUNT>> (<Key/M-C-k/)
	      <Item>
		<P.silent><!--**-->
		  Kill the balanced Oz expression following point.  With
		  <<COUNT>>, kill that many Oz expressions after point.
		  Negative <<COUNT>> means kill <<-COUNT>> Oz expressions
		  before point.
	      <Entry class=command><<backward-kill-oz-expr COUNT>>
		(<Key/M-C-DEL/)
	      <Item>
		<P.silent><!--**-->
		  Kill the balanced Oz expression preceding point.  With
		  <<COUNT>>, kill that many Oz expressions before point.
		  Negative <<COUNT>> means kill <<-COUNT>> Oz expressions
		  after point.
	      <Entry class=command><<oz-beginning-of-defun>> (<Key/M-C-a/)
	      <Item>
		<P.silent><!--**-->
		  Move to the start of the Oz definition point is in.
		  If point is not inside an Oz definition, move to start of
		  buffer.  Returns <<t>> unless search stops due to beginning
		  or end of buffer.
	      <Entry class=command><<oz-end-of-defun>> (<Key/M-C-e/)
	      <Item>
		<P.silent><!--**-->
		  Move to the end of the Oz definition point is in.
		  If point is not inside an Oz definition, move to end of
		  buffer.
	    </List>
    <Chapter id="chapter.running">
      <Title/Running Mozart from the &OPI;/
      <P>
	The &OPI; allows to run Mozart directly from the &OPI;.  A sub-process
	is started that executes <File/ozengine/ with a single root functor
	argument, by default called <File/OPI.ozf/.  In particular,
	<Code proglang=oz>{Property.get argv}</Code> will always return
	<Code proglang=oz/nil/.
      <Para class=apropos><Title/Emulator and Compiler/
	The output of the process is redirected into an Emacs buffer called
	<Name type=buffer/*Oz Emulator*/.  Additionally, the <File/OPI.ozf/
	program instantiates an Oz compiler and attaches its input and
	output to an Emacs buffer called <Name type=buffer/*Oz Compiler*/;
	communication, in this case, is done via a socket.  The compiler
	might also create a new buffer for output of source code, called
	<Name type=buffer /*Oz Temp*/.
      <P>
	When we speak of the <Q/Oz Emulator/ and <Q/Oz Compiler/ buffers
	in this manual, we mean the buffers called <Name type=buffer
	/*Oz Emulator*/ and <Name type=buffer/*Oz Compiler*/ respectively.
      <P>
	In order to run the Mozart system, the &OPI; has to know its
	installation path.  This is normally found through the environment
	variable <Var type=env/OZHOME/; it will have been set by the
	<File/oz/ shell script if you started the &OPI; with it.
	If it is not set, the value of the following variable will be used
	instead.
	<List>
	  <Entry class=useroption><<OZ-HOME>>
	    (default: <File>/usr/local/oz</File>)
	  <Item>
	    <P.silent><!--**-->
	      Directory where Oz is installed.  Only used as fallback when
	      the environment variable <Var type=env/OZHOME/ is not set.
	</List>
      <Section>
	<Title/Running and Halting/
	<P>
	  The following commands are used to start and halt the Mozart
	  sub-process.
	  <List>
	    <Entry class=command><<run-oz>>
	    <Item>
	      <P.silent><!--**-->
		Start Mozart as a sub-process if it is not already running.
		Handle input and output via the Oz Emulator buffer.  If the
		current buffer is not running in an Oz mode, create a new
		buffer in Oz mode.
	    <Entry class=useroption><<oz-change-title>> (default: <<nil>>)
	    <Item>
	      <P.silent><!--**-->
		If non-<<nil>>, change the Emacs frame's title while a Mozart
		sub-process is running.
	    <Entry class=useroption><<oz-frame-title>>
	      (default: <<"Oz Programming Interface (&ellipsis;)">>)
	    <Item>
	      <P.silent><!--**-->
		String to use as Emacs frame title while a Mozart sub-process
		is running.  In the default shown above, the old frame title
		will be inserted in place of the ellipsis.
	    <Entry class=command><<oz-halt FORCE>>
	    <Item>
	      <P.silent><!--**-->
		Halt the Mozart sub-process.  If <<FORCE>> is <<nil>>, send a
		<Code proglang=oz>{System.exit 0}</Code> statement and wait
		for the process to terminate.  Waiting time is limited by the
		user option <<oz-halt-timeout>>; after this delay, the process
		is simply killed if still living.  If <<FORCE>> is non-<<nil>>,
		kill it immediately.
	    <Entry class=useroption><<oz-halt-timeout>> (default: <<30>>)
	    <Item>
	      <P.silent><!--**-->
		Number of seconds to wait for shutdown in command <<oz-halt>>.
	  </List>
      <Section>
	<Title/Mozart's Output Buffers/
	<P>
	  Several commands make inspecting the Oz Emulator and Oz Compiler
	  buffers easier.
	  <List>
	    <Entry class=command><<oz-toggle-emulator>>
	    <Entry class=command><<oz-toggle-compiler>>
	    <Entry class=command><<oz-toggle-temp>>
	    <Item>
	      <P.silent><!--**-->
		Toggle visibility of the Oz Emulator, Compiler or Temporary
		window respectively.  If the buffer is not visible in any
		window, then display it.  If it is, then delete the
		corresponding window.
	    <Entry class=useroption><<oz-other-buffer-size>> (default: <<35>>)
	    <Item>
	      <P.silent><!--**-->
		Percentage of screen to use for Oz Compiler, Emulator or
		Temp window.
	  </List>
      <Section>
	<Title/Feeding Code to the Compiler/
	<Para class=apropos><Title/Feedable Regions/
	  The commands that send regions of the current buffer to the Oz
	  Compiler for compilation come in four flavors:
	  <List>
	    <Item>
	      <P.silent><!--**-->
		Feeding the whole buffer.  More specifically, the region the
		buffer has been narrowed to is fed.
	    <Item>
	      <P.silent><!--**-->
		Feeding the currently marked region, &ie;, the text contained
		between point and mark.
	    <Item>
	      <P.silent><!--**-->
		Feeding the line point is in.  If a numeric prefix argument
		is given, that many lines are fed; if the prefix argument is
		negative, that many preceding lines as well as the current
		line are fed.
	    <Item>
	      <P.silent><!--**-->
		Feeding the paragraph point is in (or after, if it is not
		inside any paragraph).  A paragraph is a region of text
		delimited by empty lines, &ie;, lines not even containing
		whitespace.  If a numeric prefix argument is given, that
		many paragraphs are fed; if the prefix argument is negative,
		that many preceding paragraphs as well as the current
		paragraph are fed.
	  </List>
	  <List>
	    <Entry class=command><<oz-feed-buffer>>
	    <Entry class=command><<oz-feed-region START END>>
	    <Entry class=command><<oz-feed-line COUNT>>
	    <Entry class=command><<oz-feed-paragraph COUNT>>
	    <Item>
	      <P.silent><!--**-->
		The corresponding text region is fed to the compiler and
		processed with its currently active switches.
	    <Entry class=command><<oz-to-coresyntax-buffer>>
	    <Entry class=command><<oz-to-coresyntax-region START END>>
	    <Entry class=command><<oz-to-coresyntax-line COUNT>>
	    <Entry class=command><<oz-to-coresyntax-paragraph COUNT>>
	    <Item>
	      <P.silent><!--**-->
		The corresponding text region is prefixed by
		<Code.Extern display proglang=oz to="coresyntax.oz">
		and fed to the Oz Compiler.  If compilation succeeds, the
		resulting source file will be displayed in the Oz Temporary
		buffer.
	    <Entry class=command><<oz-to-emulatorcode-buffer>>
	    <Entry class=command><<oz-to-emulatorcode-region START END>>
	    <Entry class=command><<oz-to-emulatorcode-line COUNT>>
	    <Entry class=command><<oz-to-emulatorcode-paragraph COUNT>>
	    <Item>
	      <P.silent><!--**-->
		The corresponding text region is prefixed by
		<Code.Extern display proglang=oz to="emulatorcode.oz">
		and fed to the Oz Compiler.  If compilation succeeds, the
		resulting source file will be displayed in the Oz Temporary
		buffer.
	    <Entry class=command><<oz-send-string STRING &amp;optional SYSTEM>>
	    <Item>
	      <P.silent><!--**-->
		Feed <<STRING>> to the Oz Compiler, restarting it if it died.
		If <<SYSTEM>> is non-<<nil>>, it is a command for the system
		and is prefixed by
		<Code.Extern display proglang=oz to="system.oz">
	    <Entry class=useroption><<oz-prepend-line>> (default: <<t>>)
	    <Item>
	      <P.silent><!--**-->
		If non-<<nil>>, prepend a <Code proglang=oz>\line</Code>
		directive to all Oz queries, specifying the file name (or
		buffer name, if there's no associated file) and the line
		number.  This information is used by the compiler to output
		meaningful error messages and to include debugging information
		in the generated machine code.
	  </List>
      <Section>
	<Title/Dealing With Errors/
	  <P>
	    An <Def/error message/ is either an error or warning message
	    issued by the Oz Compiler or an exception displayed by the
	    Emulator.  Where available, <Def/error coordinates/ are associated
	    with error messages, consisting of the file name (or buffer name)
	    and line number of the corresponding Oz source code.
	    <List>
	      <Entry class=useroption><<oz-popup-on-error>> (default: <<t>>)
	      <Item>
		<P.silent><!--**-->
		  If non-nil, pop up Compiler &resp; Emulator buffer upon an
		  error message.
	      <Entry class=command><<oz-goto-next-error>> (<Key/C-x `/)
	      <Item>
		<P.silent><!--**-->
		  If in an Oz mode buffer, visit next compilation error
		  message and corresponding source code.  Applies to most
		  recent compilation, started with one of the feed commands.
		<P>
		  When in Emulator buffer, visit place indicated in next
		  call stack frame.
		<P>
		  When in Compiler buffer, visit error message surrounding
		  point.
	      <Entry class=command><<oz-mouse-goto-error EVENT>>
	      <Item>
		<P.silent>
		  Visit the error coordinates associated with the error message
		  clicked on, either a call stack frame (if the click went into
		  the Emulator buffer) or a compilation error message (if the
		  click went into the Compiler buffer).
	    </List>
    <Chapter id="chapter.tools">
      <Title/Interacting with Mozart's Development Tools/
      <P>
<!--**
 - oz-browse-{buffer,region,line,paragraph}
 - oz-open-panel
 - oz-open-compiler-panel
 - oz-debugger, oz-breakpoint-at-point, oz-breakpoint-mouse-{set,delete},
   oz-bar-remove
 - oz-profiler
-->
    <Chapter id="chapter.gdb">
      <Title/Running Mozart under gdb/
      <P>
<!--**
 Testing Locally
 - oz-emulator, oz-components-path, oz-root-functor,
   oz-set-other, oz-set-emulator, oz-set-components,
   oz-other, oz-other-emulator, oz-other-components
 Running Under gdb
 - oz-gdb, oz-gdb-autostart
-->
    <Chapter id="chapter.internals">
      <Title/Internal Functions/
      <P>
<!--**
 - oz-is-quoted
 - oz-backward-keyword, oz-forward-keyword
 - oz-backward-begin, oz-forward-end,
   oz-backward-paren, oz-forward-paren
-->
  <Back>
    <Bib.Extern id="kornstaedt96" to="../gump/gump.bib" key="kornstaedt96">
</Book>

<!--
  - Authors:
  -   Christian Schulte <schulte@dfki.de>
  -
  - Contributors (sgml translation):
  -   Daniel Simon <dansim@ps.uni-sb.de>
  -   Andy Walter <anwalt@ps.uni-sb.de>
  -
  - Copyright:
  -   Christian Schulte, 1998
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://mozart.ps.uni-sb.de
  -
  - See the file "LICENSE" or
  -    http://mozart.ps.uni-sb.de/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->

<Chapter id="chapter.intro">
  <Title/Introduction/
  <P>
    This document describes how to connect Mozart to the rest of the
    computational world.  Sometimes this is paraphrased as <Span
    class=index/interoperability/.
  <P>
    Interoperability is supported in Mozart by the modules <<Open>> and
    <<OS>>.  The module <<Open>> provides the following classes:
    <List enum>
      <Item>
        The class <<Open.file>> for reading and writing files.
      <Item>
        The class <<Open.socket>> for sending and receiving data over the
        Internet.
      <Item>
        The class <<Open.pipe>> to create operating system processes and to
        communicate with them.
      <Item>
        The class <<Open.text>> for reading and writing texts character by
        character or line by line.  This class can be combined with any of
        the classes from above.
    </List>
  <P>
    Each of these classes is described by a chapter on its own (<Ptr
    to="chapter.files">, <Ptr to="chapter.sockets">, <Ptr to="chapter.pipe">, and <Ptr to="chapter.text">).  The chapters explain
    the basic concepts to use the classes and contain a small example.
    Reference information to the classes can be found as usual
    in the document <Ptr.Extern to="ozdoc:system" key="chapter.open">.
  <P>
    The module <<OS>> provides procedures for random numbers, for manipulating
    files, directories, sockets, and the like.  The module makes functionality
    found in the operating system available within &Oz;.  Since &Oz; runs both
    on Unix based and Windows based platforms, the functionality provided is
    limited to what is defined by the POSIX.1 Standard&nbsp;<Ptr to="Posix1">.
    Its documentation can be found in  <Ptr.Extern to="ozdoc:system" key="chapter.os">.
  <P>
    It is important to understand the data structures needed for reading,
    writing, and sending.  For this reason <Ptr to="chapter.data"> discusses
    these data structures in some detail.
  <Section>
    <Title/Local Computation Spaces/
    <P>
      There is very little to say about local computation spaces and
      input&slash;output:
    <P class=danger>
      input and output do <Em/not/ work in local computation spaces!
  <Section>
    <Title/Conventions/
    <P>
      Throughout this document we refer to Unix <Span class=index/manual
      pages/ for further information.  For example, <File/open(2)/ means that
      you should look up the manual page with title <Q/open/ in Section&nbsp;2.
      Type <Code proglang=sh/man 2 open/<Note foot/On some systems you have to
      type <Code proglang=sh/man -s 2 open/ instead./ to your Unix shell to
      see the manual page.  In case you are running a Windows based system,
      information can be found in a good Unix book or a book describing the
      POSIX.1 standard (&eg;, <Ptr to="Lewine.91">).
    <P>
      Whenever we explain procedures or object methods, we use the same
      notational conventions as in&nbsp;<Ptr to="Mozart-Base">.
    <P>
      A variable name of an argument possibly starts with a prefix giving
      the purpose of the variable, and ends with a letter combination giving
      the expected type(s) of the argument.  We will use ?_{A} for atoms,
      ?_{B}&nbsp;for boolean values, ?_{I}&nbsp;for integers, ?_{S}&nbsp;for
      strings, ?_{R}&nbsp;for records, ?_{T}&nbsp;for tuples, ?_{V}&nbsp;for
      virtual strings, and ?_{X}, ?_{Y}, and&nbsp;?_{Z} for any type.  Lists
      of a certain type are marked by appending ?_{s} to the latter.  So for
      instance, the argument with name ?_{ArgsVs} is supposed to be a list
      of virtual strings.  The arguments may be preceeded by ?+{} (an input
      argument) or ??{} (an output argument).  For more information on this,
      see&nbsp;<Ptr to="Mozart-Base">.
    <P class=danger>
      This sign means that the described features and functionality is either
      difficult to use, or needs special attention in using.
    <P>
  <Section>
    <Title/The Examples/
    <P>
      This paper contains quite a number of examples.  It is recommended to
      read this document and try the examples while reading.
      All the examples collected into a single file can be found
      <Ref.Extern to="OpenProgramming.oz"/here/.
    <P>
      In the presentation of the paper the necessary declarations of variables
      are left out for readability.  In the demo file you will find all the
      declarations in place.
</Chapter>

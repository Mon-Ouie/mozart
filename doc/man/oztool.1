.\" Copyright stuff
.TH oztool 1
.SH NAME
oztool \- oz DLL builder
.SH SYNOPSIS
.B oztool [\|c++|cc|ld|platform] .\|.\|.
.PP
\fBoztool\fP facilitates the creation of native functors (see Part VI
of \fI``Application Programming''\fP and \fI``Interfacing to C and
C++''\fP). A native functor is a DLL, i. e. a library that is
dynamically loaded by the Oz emulator and interfaces with it. Creating
a native functor often involves complicated compilation and linking
technicalities (e. g. options). oztool takes care of these details for
you.
.TP
.B oztool c++ .\|.\|.
Instead of calling the C++ compiler directly, you should invoke it
through oztool. The advantages are: it calls the right compiler, with
the right options, and also extends the include search path to find
the Mozart specific includes such as \fImozart.h\fP. Normally, you
would compile a native functor implemented in \fIfoo.cc\fP using:
.ce
.B oztool c++ -c foo.cc
.TP
.B oztool cc .\|.\|.
Same idea, but for the C compiler
.TP
.B oztool ld .\|.\|.

Instead of calling the linker directly, you should also invoke it
through \fBoztool\fP. Again, the advantages are that it calls the
right linker, with the right options. Normally, you would create a DLL
from \fIfoo.o\fP as follows:
.ce
.B oztool ld -o foo.so foo.o
.TP
.B oztool platform
The default Resolution mechanism locates architecture specific DLLs as
follows: If the system needs a native functor called (abstractly)
foo.so, then it will look for a DLL called \fIfoo.so-linux-i486\fP on
a Linux machine, \fIfoo.so-solaris-sparc\fP on a Solaris machine, or
\fIfoo.so-win32\fP on a Windows machine, etc.\|.\|. Thus, when you
create a DLL, you should install it with a name where the machine's
architecture is appended. Invoking \fBoztool\fP platform simply prints
out the appropriate architecture name for your machine. In this
respect, \fBoztool\fP helps you write portable Makefiles: to create a
DLL from file \fIfoo.cc\fP you would normally invoke:
.nf

oztool c++ -c foo.cc
oztool ld -o foo.so-`oztool platform` foo.o

.fi

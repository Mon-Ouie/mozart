.\" Copyright stuff
.TH ozl 1
.SH NAME
ozl \- oz linker
.SH SYNOPSIS
.B ozl \fIFILE options .\|.\|.\fP
.PP
Application development can be considerably eased by splitting the
application in a large number of orthogonal and reusable
functors. However, deployment of an application gets harder in the
presence of a large number of functors: (1) Installing the application
requires correct installation of a large number of functors, (2)
Execution might be slow due to frequent file- or even network
accesses.
.PP
The commandline tool \fBozl\fP eases deployment by creating a new functor
that includes imported functors in a prelinked fashion: it is possible
to collapse a hierarchy of functors into a single equivalent one. The
model that should be kept in mind, is that the newly created functor
employs an internal, private module manager that excutes the toplevel
application functor together with all included functors.
.PP
It is usually invoked as follows:
.ce
.B ozl \fIIN\fP \-o \fIOUT\fP
where \fIIN\fP is the input functor and \fIOUT\fP is the resulting
collapsed functor.  \fBozl\fP understands the following options:
.TP
.B \-\-relative (default), \-\-norelative
All functors that are referred to by relative urlss are included.
.TP
.B \-\-include=URL,.\|.\|.,URL
Include all functors whose url matches one of the comma separated url prefixes.
.TP
.B \-\-exclude=URL,.\|.\|.,URL
Exclude all functors whose url matches one of the comma separated url prefixes.
.PP

Note that multiple \fB\-\-include\fP and \fB\-\-exclude\fP directives
can be given on the commandline. They have cummulative effect, with
the policy that later directives take precedence over earlier ones.
For example:
.nf

ozl --include=/foo/ --exclude=/foo/bar/ .\|.\|.

.fi
causes all imports from files below directory /foo to be included
except those under directory /foo/bar. We can further refine this
policy by introducing an exception to the last exclusion pattern and
request inclusion of modules imported from below directory
/foo/bar/baz:
.nf

ozl --include=/foo/ --exclude=/foo/bar/ --include=/foo/bar/baz/ .\|.\|.

.fi
.TP
.B \-\-compress=\fIN\fP, \-z \fIN\fP
The created pickle is compressed with level \fIN\fP (a single digit). By
default the compression level \fIN\fP is 0, that is, no compression is
employed.
.TP
.B \-\-executable (\-x), \-\-noexecutable (default)
Output the pickled functor as being executable (that is, with an
additional header).
.TP
.B \-\-execheader=\fISTRING\fP
When invoked with option \fB-x\fP the linker first outputs a header so
that the output file may be interpreted by the operating system as an
executable. Under Unix, the default behaviour is to use the following
as header:
.nf

#!/bin/sh
exec ozengine $0 "$@"

.fi
The \fB\-\-execheader\fP option allows you to specify a different
header.
.TP
.B \-\-execpath=\fISTRING\fP
Uses the header given above in the description of
\fB\-\-execheader\fP, except that \fBozengine\fP is replaced by
\fISTRING\fP.
.TP
.B \-\-execfile=\fIFILE\fP
Reads in \fIFILE\fP and uses this as header. Under Windows, the
default behaviour is to use the file provided in
\fIozhome/bin/ozwrapper.bin\fP, where \fIozhome\fP is Mozart's
installation folder. \fIozwrapper.bin\fP is a Windows executable that
launches \fBozengine\fP.
.TP
.B \-\-execwrapper=\fIFILE\fP
Reads in \fIozhome/bin/FILE\fP and uses it as header for executable
files. Apart from \fIozwrapper.bin\fP, an \fIozwrapperw.bin\fP is
supplied that launches \fBozenginew\fP instead of \fBozengine\fP. This
option provides a convenient way to use this alternative wrapper.
.TP
.B \-\-sequential, \-\-nosequential (default)
Do not create a thread per executed functor body, rather execute all
functor bodies in the same thread in a bottom up fashion. Use with
care! In case the functors included have cyclic imports, it is not
used.

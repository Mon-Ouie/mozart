<BOOK PROGLANG="OZ"><FRONT><META NAME="HTML.SPLIT" VALUE="chapter.introduction"/><META NAME="HTML.SPLIT" VALUE="chapter.httpclient"/><META NAME="HTML.SPLIT" VALUE="chapter.examples"/><META NAME="HTML.SPLIT" VALUE="chapter.applications"/><META NAME="HTML.SPLIT.BIB" VALUE=""/><META NAME="OZVERSION" VALUE="3.0"/><META NAME="STATUS" VALUE="draft"/><TITLE>HttpClient Package</TITLE><AUTHOR>Valentin Mesaros</AUTHOR></FRONT><BODY><CHAPTER ID="CHAPTER.INTRODUCTION"><FRONT><TITLE>Introduction</TITLE></FRONT><P>
The <CODE DISPLAY="INLINE"><HILITE ID="N39"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package implements the HTTP 0.9 and HTTP 1.0 protocols, conform <REF.EXTERN TO="http://www.faqs.org/rfcs/rfc1945.html">RFC 1945</REF.EXTERN>, providing a flexible programming interface. Its interface is related with the retrieving of the documents over the network, as well as with accessing their transmission rate.
</P><P>
The <CODE DISPLAY="INLINE"><HILITE ID="N49"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package was written in <EM DISPLAY="INLINE">Oz 3</EM> and compiled with <EM DISPLAY="INLINE">Mozart Compiler 1.1.0 (19991213) and (20000111)</EM>.

</P><P>
The <CODE DISPLAY="INLINE"><HILITE ID="N63"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package consists of the following modules:

<LIST DISPLAY="DISPLAY"><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N71"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE>: is the main programming interface of the <CODE DISPLAY="INLINE"><HILITE ID="N75"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package. It deals with the parse of the input and output parameters, initiate of HTTP 0.9 and HTTP 1.0 compliant communications and transmission rate control. The <CODE DISPLAY="INLINE"><HILITE ID="N79"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> module is described in <PTR TO="CHAPTER.HTTPCLIENT"/>.
</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N88"><HILITE.FACE NAME="TEXT">HttpReqRep</HILITE.FACE></HILITE></CODE>: deals with the HTTP reqests and responses.
</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N94"><HILITE.FACE NAME="TEXT">HttpHeader</HILITE.FACE></HILITE></CODE>: stores the HTTP header formats as well as input and output default parameters.
</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N100"><HILITE.FACE NAME="TEXT">ListUtils</HILITE.FACE></HILITE></CODE>: consists of some useful List processing tools.
</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N106"><HILITE.FACE NAME="TEXT">OpenConnection</HILITE.FACE></HILITE></CODE>: deals with socket connections and files, as well as with transmission rate computation. This module can be used apart of this package in order to implement other transmission protocols (i.e. FTP).
</P.SILENT></ITEM></LIST></P><P><PTR TO="CHAPTER.EXAMPLES"/> describes some basic examples using the classes and functionalities of the <CODE DISPLAY="INLINE"><HILITE ID="N114"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> module.
</P></CHAPTER><CHAPTER ID="CHAPTER.HTTPCLIENT"><FRONT><TITLE PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N122"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> Module</TITLE></FRONT><P>The <CODE DISPLAY="INLINE"><HILITE ID="N128"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> module is the main programming interface of the <CODE DISPLAY="INLINE"><HILITE ID="N132"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package. It deals with the input and output parameters parsing, HTTP 0.9 and HTTP 1.0 compliant communications initialisation and transmission rate control. In the followings we enumerate and describe the classes this module consists of. </P><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N137"><HILITE.FACE NAME="TEXT">Service</HILITE.FACE></HILITE></CODE> is the base class for all the other classes present in this module. Hence, all the other classes (<CODE DISPLAY="INLINE"><HILITE ID="N141"><HILITE.FACE NAME="TEXT">CgiGET</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N145"><HILITE.FACE NAME="TEXT">CgiPOST</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N149"><HILITE.FACE NAME="TEXT">CgiISINDEX</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N153"><HILITE.FACE NAME="TEXT">UrlGET</HILITE.FACE></HILITE></CODE> and <CODE DISPLAY="INLINE"><HILITE ID="N157"><HILITE.FACE NAME="TEXT">UrlHEAD</HILITE.FACE></HILITE></CODE>) will inherit its public and protected methods. The programmer is advised to use them instead of <CODE DISPLAY="INLINE"><HILITE ID="N161"><HILITE.FACE NAME="TEXT">Service</HILITE.FACE></HILITE></CODE>.  </P><SECTION ID="SECTION.EXCEPTIONS"><FRONT><TITLE>Exceptions</TITLE></FRONT><P>The exceptions raised by the methods of the classes present in <CODE DISPLAY="INLINE"><HILITE ID="N172"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package are atoms.     </P><SUBSECTION ID="SUBSECTION.GENEXCEPTIONS"><FRONT><TITLE>General exceptions</TITLE></FRONT><P>
These exceptions are raised by all vulnerable methods. They are as follows:
<LIST ENUM="ENUM" DISPLAY="DISPLAY"><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N188"><HILITE.FACE NAME="TEXT">conPremClosed</HILITE.FACE></HILITE></CODE> : the socket connection was closed by the peer while still reading it. </P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N194"><HILITE.FACE NAME="TEXT">errCloseCon</HILITE.FACE></HILITE></CODE> : there was a problem when closing the connection.</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N200"><HILITE.FACE NAME="TEXT">errCloseFile</HILITE.FACE></HILITE></CODE> : there was a problem when closing the file.</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N206"><HILITE.FACE NAME="TEXT">errReadSocket</HILITE.FACE></HILITE></CODE> : there was a problem when reading the socket.</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N212"><HILITE.FACE NAME="TEXT">errRemFile</HILITE.FACE></HILITE></CODE> : there was a problem when removing the file.</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N218"><HILITE.FACE NAME="TEXT">errOpenCon</HILITE.FACE></HILITE></CODE> : there was a problem while trying to open the connection.</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N224"><HILITE.FACE NAME="TEXT">errOpenFile</HILITE.FACE></HILITE></CODE> : there was a problem while trying to open the file.</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N230"><HILITE.FACE NAME="TEXT">errWriteFile</HILITE.FACE></HILITE></CODE> : there was a problem when writing the file.</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N236"><HILITE.FACE NAME="TEXT">errWriteSocket</HILITE.FACE></HILITE></CODE> : there was a problem when writing the socket.</P.SILENT></ITEM></LIST></P></SUBSECTION><SUBSECTION ID="SUBSECTION.CGIEXCEPTIONS"><FRONT><TITLE>Cgi exceptions</TITLE></FRONT><P>
These exceptions are raised by the vulnerable methods involved in CGI parameters and <EM DISPLAY="INLINE">URL</EM> strings parsing. They are as follows:
<LIST ENUM="ENUM" DISPLAY="DISPLAY"><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N256"><HILITE.FACE NAME="TEXT">errCgiPrms</HILITE.FACE></HILITE></CODE> : there is a problem with the CGI parameters. </P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N262"><HILITE.FACE NAME="TEXT">errLargeCgiPrms</HILITE.FACE></HILITE></CODE> : the length of the CGI parameters is to large.</P.SILENT></ITEM><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N268"><HILITE.FACE NAME="TEXT">errUrlChrs</HILITE.FACE></HILITE></CODE> : the <EM DISPLAY="INLINE">URL</EM> contains special chars.</P.SILENT></ITEM></LIST></P></SUBSECTION></SECTION><SECTION ID="SECTION.INOUTPRMS"><FRONT><TITLE>Input &amp; Ouput parameters</TITLE></FRONT><P>In this section we describe the parameters found in most of the methods presented within this chapter.
</P><SUBSECTION ID="SUBSECTION.INPRMS"><FRONT><TITLE>Input parameters</TITLE></FRONT><P><LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N293"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N298"><HILITE.FACE NAME="TEXT">inPrms(file: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N302"><HILITE.FACE NAME="TEXT">FileName</HILITE.FACE></HILITE></VAR><HILITE ID="N303"><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">&lt;=</HILITE.FACE><HILITE.FACE NAME="TEXT"> given Url based
       rTime: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N307"><HILITE.FACE NAME="TEXT">RTime</HILITE.FACE></HILITE></VAR><HILITE ID="N308"><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">&lt;=</HILITE.FACE><HILITE.FACE NAME="TEXT"> 25
       smpl: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N312"><HILITE.FACE NAME="TEXT">Smpl</HILITE.FACE></HILITE></VAR><HILITE ID="N313"><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">&lt;=</HILITE.FACE><HILITE.FACE NAME="TEXT"> 45
       toFile: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N317"><HILITE.FACE NAME="TEXT">ToFile</HILITE.FACE></HILITE></VAR><HILITE ID="N318"><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">&lt;=</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">true</HILITE.FACE><HILITE.FACE NAME="TEXT">
       toStrm: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N322"><HILITE.FACE NAME="TEXT">ToStrm</HILITE.FACE></HILITE></VAR><HILITE ID="N323"><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">&lt;=</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">false</HILITE.FACE><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>The <CODE DISPLAY="INLINE"><HILITE ID="N329"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></CODE> record provides the programmer with a flexible interface. If not bound nor present, its features willbe given default values. </P.SILENT><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N334"><HILITE.FACE NAME="TEXT">FileName</HILITE.FACE></HILITE></VAR> is a string containing the path of the file the document will be put in. The file is written while the document is beeing transfered.</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N339"><HILITE.FACE NAME="TEXT">RTime</HILITE.FACE></HILITE></VAR> is an integer specifing the instanteous transmission rate checking periodicity. </P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N344"><HILITE.FACE NAME="TEXT">Smpl</HILITE.FACE></HILITE></VAR> is an integer specifing the number of the last instantaneously rates to be considered when computing the transmission rate (i.e. when method <CODE DISPLAY="INLINE"><HILITE ID="N348"><HILITE.FACE NAME="TEXT">fetchRate</HILITE.FACE></HILITE></CODE> is invoked, see <PTR TO="SECTION.HTTPCLIENT.SERVICE"/>).</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N356"><HILITE.FACE NAME="TEXT">ToFile</HILITE.FACE></HILITE></VAR> is a boolean specifing if the document should be saved into a file or not. </P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N361"><HILITE.FACE NAME="TEXT">ToStrm</HILITE.FACE></HILITE></VAR> is a boolean specifing if the document should be returned as a byte stream or not.
</P></ITEM></LIST></P><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N366"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></CODE> is a string specifing the <EM DISPLAY="INLINE">URL</EM> location of the document to be retrieved (e.g. <CODE DISPLAY="INLINE"><HILITE ID="N374"><HILITE.FACE NAME="STRING">"http://www.info.ucl.ac.be"</HILITE.FACE></HILITE></CODE> of <CODE DISPLAY="INLINE"><HILITE ID="N378"><HILITE.FACE NAME="STRING">"www.yahoo.com"</HILITE.FACE></HILITE></CODE>).
</P></SUBSECTION><SUBSECTION ID="SUBSECTION.OUTPRMS"><FRONT><TITLE>Output parameters</TITLE></FRONT><P><LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N392"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N397"><HILITE.FACE NAME="TEXT">httpPrms(server: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N401"><HILITE.FACE NAME="TEXT">Server</HILITE.FACE></HILITE></VAR><HILITE ID="N402"><HILITE.FACE NAME="TEXT">
         date: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N406"><HILITE.FACE NAME="TEXT">Date</HILITE.FACE></HILITE></VAR><HILITE ID="N407"><HILITE.FACE NAME="TEXT">
         last_modified: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N411"><HILITE.FACE NAME="TEXT">Last_Modified</HILITE.FACE></HILITE></VAR><HILITE ID="N412"><HILITE.FACE NAME="TEXT">
         location: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N416"><HILITE.FACE NAME="TEXT">Location</HILITE.FACE></HILITE></VAR><HILITE ID="N417"><HILITE.FACE NAME="TEXT">
         content_length: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N421"><HILITE.FACE NAME="TEXT">Content_Length</HILITE.FACE></HILITE></VAR><HILITE ID="N422"><HILITE.FACE NAME="TEXT">
         content_type: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N426"><HILITE.FACE NAME="TEXT">Content_Type</HILITE.FACE></HILITE></VAR><HILITE ID="N427"><HILITE.FACE NAME="TEXT">
         content_encoding: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N431"><HILITE.FACE NAME="TEXT">Content_Encoding</HILITE.FACE></HILITE></VAR><HILITE ID="N432"><HILITE.FACE NAME="TEXT">) </HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N437"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></CODE> record contains the HTTP 1.0 compliant headers. Each of its feature coresponds to a header and will be bound if it is provided by the peer, before the document is fetched. All parameters are strings.  </P.SILENT><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N442"><HILITE.FACE NAME="TEXT">Server</HILITE.FACE></HILITE></VAR> represents the name of the peer.</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N447"><HILITE.FACE NAME="TEXT">Date</HILITE.FACE></HILITE></VAR> represents the date and time the document was built by the peer. Its semantics is described in <REF.EXTERN TO="http://www.faqs.org/rfcs/rfc822.html">RFC 822</REF.EXTERN>.</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N456"><HILITE.FACE NAME="TEXT">Last_Modified</HILITE.FACE></HILITE></VAR> represents the date and time the document was last modified. Its semantics is described in <REF.EXTERN TO="http://www.faqs.org/rfcs/rfc822.html">RFC 822</REF.EXTERN>.</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N465"><HILITE.FACE NAME="TEXT">Location</HILITE.FACE></HILITE></VAR> represents the <EM DISPLAY="INLINE">URL</EM> where the requested document was temporarely or permanentely moved. When it is bound, the document is not sent by the peer.</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N474"><HILITE.FACE NAME="TEXT">Content_Length</HILITE.FACE></HILITE></VAR> represents the length of the document to be retrieved.</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N479"><HILITE.FACE NAME="TEXT">Content_Type</HILITE.FACE></HILITE></VAR> represents the MIME type of the document to be retrieved.</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N484"><HILITE.FACE NAME="TEXT">Content_Encoding</HILITE.FACE></HILITE></VAR> represents the additional content coding that has been applied to the document to be retrieved.
</P></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N490"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N495"><HILITE.FACE NAME="TEXT">outPrms(file: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N499"><HILITE.FACE NAME="TEXT">FileName</HILITE.FACE></HILITE></VAR><HILITE ID="N500"><HILITE.FACE NAME="TEXT">
        toFile: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N504"><HILITE.FACE NAME="TEXT">ToFile</HILITE.FACE></HILITE></VAR><HILITE ID="N505"><HILITE.FACE NAME="TEXT">
        toStrm: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N509"><HILITE.FACE NAME="TEXT">ToStrm</HILITE.FACE></HILITE></VAR><HILITE ID="N510"><HILITE.FACE NAME="TEXT">
        sOut: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N514"><HILITE.FACE NAME="TEXT">SOut</HILITE.FACE></HILITE></VAR><HILITE ID="N515"><HILITE.FACE NAME="TEXT">
        time: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N519"><HILITE.FACE NAME="TEXT">Time</HILITE.FACE></HILITE></VAR><HILITE ID="N520"><HILITE.FACE NAME="TEXT">
        status: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N524"><HILITE.FACE NAME="TEXT">Status</HILITE.FACE></HILITE></VAR><HILITE ID="N525"><HILITE.FACE NAME="TEXT">
        sizeRead: </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N529"><HILITE.FACE NAME="TEXT">SizeRead</HILITE.FACE></HILITE></VAR><HILITE ID="N530"><HILITE.FACE NAME="TEXT">) </HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Thre are some features within <CODE DISPLAY="INLINE"><HILITE ID="N536"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></CODE> record which can also be found within <CODE DISPLAY="INLINE"><HILITE ID="N540"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></CODE> record (see <PTR TO="SUBSECTION.INPRMS"/>), having the same fields if provided by the user or default ones, otherwise.
 </P.SILENT><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N548"><HILITE.FACE NAME="TEXT">SOut</HILITE.FACE></HILITE></VAR> is bound with a byte stream representing the retrieved document. If <CODE DISPLAY="INLINE"><HILITE ID="N552"><HILITE.FACE NAME="TEXT">toStrm</HILITE.FACE></HILITE></CODE> feature of the <CODE DISPLAY="INLINE"><HILITE ID="N556"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></CODE> record is set <CODE DISPLAY="INLINE"><HILITE ID="N560"><HILITE.FACE NAME="KEYWORD">false</HILITE.FACE></HILITE></CODE>, or when the requested document has been moved to an other <EM DISPLAY="INLINE">URL</EM>, or a <EM DISPLAY="INLINE">HEAD</EM> HTTP request is invoked, then <CODE DISPLAY="INLINE"><HILITE ID="N572"><HILITE.FACE NAME="TEXT">SOut</HILITE.FACE></HILITE></CODE> will not be bound.</P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N577"><HILITE.FACE NAME="TEXT">Time</HILITE.FACE></HILITE></VAR> is an integer and will be bound with the time when the service completes or fails. It is represented in secons since 00:00:00 GMT, Jan. 1, 1970.   </P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N582"><HILITE.FACE NAME="TEXT">Status</HILITE.FACE></HILITE></VAR> is a string and represents the HTTP status code given by the peer (i.e. <CODE DISPLAY="INLINE"><HILITE ID="N586"><HILITE.FACE NAME="STRING">"200"</HILITE.FACE></HILITE></CODE> for <EM DISPLAY="INLINE">OK</EM> or <CODE DISPLAY="INLINE"><HILITE ID="N594"><HILITE.FACE NAME="STRING">"301"</HILITE.FACE></HILITE></CODE> for <EM DISPLAY="INLINE">Moved Permanently</EM>).  </P><P PROGLANG="OZ"><VAR TYPE="PROG"><HILITE ID="N603"><HILITE.FACE NAME="TEXT">SizeRead</HILITE.FACE></HILITE></VAR> is an integer which will be bound with the length of the document actually read.
</P></ITEM></LIST></P></SUBSECTION></SECTION><SECTION ID="SECTION.HTTPCLIENT.SERVICE"><FRONT><TITLE PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N611"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">service</HILITE.FACE></HILITE></CODE> class </TITLE></FRONT><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N616"><HILITE.FACE NAME="TEXT">Service</HILITE.FACE></HILITE></CODE> is the base class for all the other classes present within this module. The reason we present it, is to describe the methods inhereted by the classes which specialise it.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N624"><HILITE.FACE NAME="TEXT">bytesRead</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N629"><HILITE.FACE NAME="TEXT">bytesRead(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N633"><HILITE.FACE NAME="TEXT">N</HILITE.FACE></HILITE></VAR><HILITE ID="N634"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Returns the number <VAR TYPE="PROG"><HILITE ID="N640"><HILITE.FACE NAME="TEXT">N</HILITE.FACE></HILITE></VAR> of bytes read of the document being tranfered.
</P.SILENT></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N646"><HILITE.FACE NAME="TEXT">closeAll</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N651"><HILITE.FACE NAME="TEXT">closeAll(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N655"><HILITE.FACE NAME="TEXT">Trace</HILITE.FACE></HILITE></VAR><HILITE ID="N656"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>This method is used when, before the service completeness, its stop is required. </P.SILENT><P>If <VAR TYPE="PROG"><HILITE ID="N664"><HILITE.FACE NAME="TEXT">Trace</HILITE.FACE></HILITE></VAR> is bound to <CODE DISPLAY="INLINE"><HILITE ID="N668"><HILITE.FACE NAME="KEYWORD">false</HILITE.FACE></HILITE></CODE>, the current communication will be closed and the opened file removed. Else, if <VAR TYPE="PROG"><HILITE ID="N672"><HILITE.FACE NAME="TEXT">Trace</HILITE.FACE></HILITE></VAR> is bound to <CODE DISPLAY="INLINE"><HILITE ID="N676"><HILITE.FACE NAME="KEYWORD">true</HILITE.FACE></HILITE></CODE>, the current communication and the opened file will be closed. It throws <CODE DISPLAY="INLINE"><HILITE ID="N680"><HILITE.FACE NAME="TEXT">errCloseCon</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N684"><HILITE.FACE NAME="TEXT">errCloseFile</HILITE.FACE></HILITE></CODE> or <CODE DISPLAY="INLINE"><HILITE ID="N688"><HILITE.FACE NAME="TEXT">errRemFile</HILITE.FACE></HILITE></CODE> exceptions (see <PTR TO="SUBSECTION.GENEXCEPTIONS"/>).
</P></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N697"><HILITE.FACE NAME="TEXT">fetchRate</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N702"><HILITE.FACE NAME="TEXT">fetchRate(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N706"><HILITE.FACE NAME="TEXT">Rate</HILITE.FACE></HILITE></VAR><HILITE ID="N707"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Returns the current transmission rate <VAR TYPE="PROG"><HILITE ID="N713"><HILITE.FACE NAME="TEXT">Rate</HILITE.FACE></HILITE></VAR> computed as the average of the last <VAR TYPE="PROG"><HILITE ID="N717"><HILITE.FACE NAME="TEXT">Smpl</HILITE.FACE></HILITE></VAR> (see <PTR TO="SUBSECTION.INPRMS"/>) instanteous rates.
</P.SILENT></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N726"><HILITE.FACE NAME="TEXT">init</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N731"><HILITE.FACE NAME="TEXT">init</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class.

</P.SILENT></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N739"><HILITE.FACE NAME="TEXT">service</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N744"><HILITE.FACE NAME="TEXT">service(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N748"><HILITE.FACE NAME="TEXT">Meth</HILITE.FACE></HILITE></VAR><HILITE ID="N749"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N753"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR><HILITE ID="N754"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N758"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N759"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N763"><HILITE.FACE NAME="TEXT">Pairs</HILITE.FACE></HILITE></VAR><HILITE ID="N764"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N768"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N769"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N773"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N774"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session according to the given method <VAR TYPE="PROG"><HILITE ID="N780"><HILITE.FACE NAME="TEXT">Meth</HILITE.FACE></HILITE></VAR> and fetches the document specified by the <VAR TYPE="PROG"><HILITE ID="N784"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR>. <VAR TYPE="PROG"><HILITE ID="N788"><HILITE.FACE NAME="TEXT">Meth</HILITE.FACE></HILITE></VAR> has to be one of the strings <CODE DISPLAY="INLINE"><HILITE ID="N792"><HILITE.FACE NAME="STRING">"GET"</HILITE.FACE></HILITE></CODE> or <CODE DISPLAY="INLINE"><HILITE ID="N796"><HILITE.FACE NAME="STRING">"POST"</HILITE.FACE></HILITE></CODE> for ordinary, gateway <EM DISPLAY="INLINE">GET</EM> and gateway <EM DISPLAY="INLINE">ISINDEX</EM> or gateway <EM DISPLAY="INLINE">POST</EM> HTTP requests, respectively. <VAR TYPE="PROG"><HILITE ID="N812"><HILITE.FACE NAME="TEXT">Pairs</HILITE.FACE></HILITE></VAR> has to be a list of <CODE DISPLAY="INLINE"><HILITE ID="N816"><HILITE.FACE NAME="STRING">"name=value"</HILITE.FACE></HILITE></CODE> strings in the case of gateway <EM DISPLAY="INLINE">GET</EM> and gateway <EM DISPLAY="INLINE">POST</EM>, a <CODE DISPLAY="INLINE"><HILITE ID="N828"><HILITE.FACE NAME="STRING">"value"</HILITE.FACE></HILITE></CODE> string in the case of gateway <EM DISPLAY="INLINE">ISINDEX</EM> or unbound in the case of ordinary HTTP requests. All the other classes present in this module specialise this method.</P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG"><HILITE ID="N838"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR> and the HTTP headers, namely <VAR TYPE="PROG"><HILITE ID="N842"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR>. It throws all the exceptions described in (see <PTR TO="SECTION.EXCEPTIONS"/>) but <CODE DISPLAY="INLINE"><HILITE ID="N849"><HILITE.FACE NAME="TEXT">errRemFile</HILITE.FACE></HILITE></CODE>.  </P><P>For the explanation of all the other method's parameters refer to <PTR TO="SECTION.INOUTPRMS"/>.
</P></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N860"><HILITE.FACE NAME="TEXT">startTemp</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N865"><HILITE.FACE NAME="TEXT">startTemp</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Continues the current communication session from the point <CODE DISPLAY="INLINE"><HILITE ID="N871"><HILITE.FACE NAME="TEXT">stopTemp</HILITE.FACE></HILITE></CODE> method temporarely stoped it.
</P.SILENT></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N877"><HILITE.FACE NAME="TEXT">stopTemp</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N882"><HILITE.FACE NAME="TEXT">stopTemp</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Temporarely stops the current communication session it. It can be continued by invoking the <CODE DISPLAY="INLINE"><HILITE ID="N888"><HILITE.FACE NAME="TEXT">startTemp</HILITE.FACE></HILITE></CODE> method.
</P.SILENT></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N895"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiGET</HILITE.FACE></HILITE></CODE> class </TITLE></FRONT><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N900"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiGET</HILITE.FACE></HILITE></CODE> is a specialisation of the <CODE DISPLAY="INLINE"><HILITE ID="N904"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">service</HILITE.FACE></HILITE></CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"/> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE"><HILITE ID="N913"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiGET</HILITE.FACE></HILITE></CODE> class provides the programmer with the possibility of retrieving documents over the network, associating the parameters parsing with the gateway <EM DISPLAY="INLINE">GET</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N925"><HILITE.FACE NAME="TEXT">init</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N930"><HILITE.FACE NAME="TEXT">init(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N934"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N935"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG"><HILITE ID="N941"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG"><HILITE ID="N947"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> refer to <PTR TO="SUBSECTION.INPRMS"/>.
</P></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N956"><HILITE.FACE NAME="TEXT">getService</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N961"><HILITE.FACE NAME="TEXT">getService(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N965"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR><HILITE ID="N966"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N970"><HILITE.FACE NAME="TEXT">CgiPairs</HILITE.FACE></HILITE></VAR><HILITE ID="N971"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N975"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N976"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N980"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N981"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session associating <VAR TYPE="PROG"><HILITE ID="N987"><HILITE.FACE NAME="TEXT">CgiPairs</HILITE.FACE></HILITE></VAR> parameters parsing with the gateway <EM DISPLAY="INLINE">GET</EM> HTTP requests and fetches the document specified by the <VAR TYPE="PROG"><HILITE ID="N995"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR>. <VAR TYPE="PROG"><HILITE ID="N999"><HILITE.FACE NAME="TEXT">CgiPairs</HILITE.FACE></HILITE></VAR> has to be a list of <CODE DISPLAY="INLINE"><HILITE ID="N1003"><HILITE.FACE NAME="STRING">"name=value"</HILITE.FACE></HILITE></CODE> strings (e.g. <CODE DISPLAY="INLINE"><HILITE ID="N1007"><HILITE.FACE NAME="TEXT">[</HILITE.FACE><HILITE.FACE NAME="STRING">"Age=35"</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="STRING">"Occupation=research assistant"</HILITE.FACE><HILITE.FACE NAME="TEXT">]</HILITE.FACE></HILITE></CODE>). </P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG"><HILITE ID="N1013"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR> and the HTTP headers, namely <VAR TYPE="PROG"><HILITE ID="N1017"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR>. It throws all the exceptions described in (see <PTR TO="SECTION.EXCEPTIONS"/>) but <CODE DISPLAY="INLINE"><HILITE ID="N1024"><HILITE.FACE NAME="TEXT">errRemFile</HILITE.FACE></HILITE></CODE>.  </P><P>For the explanation of all the other input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"/>.
</P></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1036"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiPOST</HILITE.FACE></HILITE></CODE> class </TITLE></FRONT><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1041"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiPOST</HILITE.FACE></HILITE></CODE> is a specialisation of the <CODE DISPLAY="INLINE"><HILITE ID="N1045"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">service</HILITE.FACE></HILITE></CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"/> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE"><HILITE ID="N1054"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiPOST</HILITE.FACE></HILITE></CODE> class provides the programmer with the possibility of retrieving documents over the network, associating the parameters parsing with the gateway <EM DISPLAY="INLINE">POST</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1066"><HILITE.FACE NAME="TEXT">init</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N1071"><HILITE.FACE NAME="TEXT">init(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1075"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1076"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG"><HILITE ID="N1082"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG"><HILITE ID="N1088"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> refer to <PTR TO="SUBSECTION.INPRMS"/>.
</P></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1097"><HILITE.FACE NAME="TEXT">getService</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N1102"><HILITE.FACE NAME="TEXT">getService(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1106"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR><HILITE ID="N1107"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1111"><HILITE.FACE NAME="TEXT">CgiPairs</HILITE.FACE></HILITE></VAR><HILITE ID="N1112"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N1116"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1117"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N1121"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1122"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session associating <VAR TYPE="PROG"><HILITE ID="N1128"><HILITE.FACE NAME="TEXT">CgiPairs</HILITE.FACE></HILITE></VAR> parameters parsing with the gateway <EM DISPLAY="INLINE">POST</EM> HTTP requests and fetches the document specified by the <VAR TYPE="PROG"><HILITE ID="N1136"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR>. <VAR TYPE="PROG"><HILITE ID="N1140"><HILITE.FACE NAME="TEXT">CgiPairs</HILITE.FACE></HILITE></VAR> has to be a list of <CODE DISPLAY="INLINE"><HILITE ID="N1144"><HILITE.FACE NAME="STRING">"name=value"</HILITE.FACE></HILITE></CODE> strings.</P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG"><HILITE ID="N1150"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR> and the HTTP headers, namely <VAR TYPE="PROG"><HILITE ID="N1154"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR>. It throws all the exceptions described in (see <PTR TO="SECTION.EXCEPTIONS"/>) but <CODE DISPLAY="INLINE"><HILITE ID="N1161"><HILITE.FACE NAME="TEXT">errRemFile</HILITE.FACE></HILITE></CODE>.  </P><P>For the explanation of all the other input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"/>.
</P></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1173"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiISINDEX</HILITE.FACE></HILITE></CODE> class </TITLE></FRONT><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1178"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiISINDEX</HILITE.FACE></HILITE></CODE> is a specialisation of the <CODE DISPLAY="INLINE"><HILITE ID="N1182"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">service</HILITE.FACE></HILITE></CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"/> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE"><HILITE ID="N1191"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiISINDEX</HILITE.FACE></HILITE></CODE> class provides the programmer with the possibility of retrieving documents over the network, associating the parameters parsing with the gateway <EM DISPLAY="INLINE">ISINDEX</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1203"><HILITE.FACE NAME="TEXT">init</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N1208"><HILITE.FACE NAME="TEXT">init(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1212"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1213"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG"><HILITE ID="N1219"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG"><HILITE ID="N1225"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> refer to <PTR TO="SUBSECTION.INPRMS"/>.
</P></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1234"><HILITE.FACE NAME="TEXT">getService</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N1239"><HILITE.FACE NAME="TEXT">getService(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1243"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR><HILITE ID="N1244"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1248"><HILITE.FACE NAME="TEXT">IndexPairs</HILITE.FACE></HILITE></VAR><HILITE ID="N1249"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N1253"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1254"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N1258"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1259"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session associating <VAR TYPE="PROG"><HILITE ID="N1265"><HILITE.FACE NAME="TEXT">IndexPairs</HILITE.FACE></HILITE></VAR> parameters parsing with the gateway <EM DISPLAY="INLINE">ISINDEX</EM> HTTP requests and fetches the document specified by the <VAR TYPE="PROG"><HILITE ID="N1273"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR>. <VAR TYPE="PROG"><HILITE ID="N1277"><HILITE.FACE NAME="TEXT">IndexPairs</HILITE.FACE></HILITE></VAR> has to be a <CODE DISPLAY="INLINE"><HILITE ID="N1281"><HILITE.FACE NAME="STRING">"value"</HILITE.FACE></HILITE></CODE> string (e.g. <CODE DISPLAY="INLINE"><HILITE ID="N1285"><HILITE.FACE NAME="STRING">"research assistant"</HILITE.FACE></HILITE></CODE>).</P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG"><HILITE ID="N1291"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR> and the HTTP headers, namely <VAR TYPE="PROG"><HILITE ID="N1295"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR>. It throws all the exceptions described in (see <PTR TO="SECTION.EXCEPTIONS"/>) but <CODE DISPLAY="INLINE"><HILITE ID="N1302"><HILITE.FACE NAME="TEXT">errRemFile</HILITE.FACE></HILITE></CODE>.  </P><P>For the explanation of all the other input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"/>.
</P></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1314"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">urlGET</HILITE.FACE></HILITE></CODE> class </TITLE></FRONT><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1319"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">urlGET</HILITE.FACE></HILITE></CODE> is a specialisation of the <CODE DISPLAY="INLINE"><HILITE ID="N1323"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">service</HILITE.FACE></HILITE></CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"/> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE"><HILITE ID="N1332"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">urlGET</HILITE.FACE></HILITE></CODE> class provides the programmer with the possibility of retrieving documents over the network using ordinary <EM DISPLAY="INLINE">GET</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1344"><HILITE.FACE NAME="TEXT">init</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N1349"><HILITE.FACE NAME="TEXT">init(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1353"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1354"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG"><HILITE ID="N1360"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG"><HILITE ID="N1366"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> refer to <PTR TO="SUBSECTION.INPRMS"/>.
</P></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1375"><HILITE.FACE NAME="TEXT">getService</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N1380"><HILITE.FACE NAME="TEXT">getService(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1384"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR><HILITE ID="N1385"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N1389"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1390"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N1394"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1395"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session and fetches the document specified by the <VAR TYPE="PROG"><HILITE ID="N1401"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR>.</P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG"><HILITE ID="N1407"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR> and the HTTP headers, namely <VAR TYPE="PROG"><HILITE ID="N1411"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR>. It throws all the exceptions described in (see <PTR TO="SUBSECTION.GENEXCEPTIONS"/>) but <CODE DISPLAY="INLINE"><HILITE ID="N1418"><HILITE.FACE NAME="TEXT">errRemFile</HILITE.FACE></HILITE></CODE>.  </P><P>For the entire explanation of the input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"/>.
</P></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1430"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">urlHEAD</HILITE.FACE></HILITE></CODE> class </TITLE></FRONT><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1435"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">urlHEAD</HILITE.FACE></HILITE></CODE> is a specialisation of the <CODE DISPLAY="INLINE"><HILITE ID="N1439"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">service</HILITE.FACE></HILITE></CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"/> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE"><HILITE ID="N1448"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">urlHEAD</HILITE.FACE></HILITE></CODE> class provides the programmer with the possibility of retrieving the HTTP headers of the documents over the network using <EM DISPLAY="INLINE">HEAD</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1460"><HILITE.FACE NAME="TEXT">init</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N1465"><HILITE.FACE NAME="TEXT">init(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1469"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1470"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG"><HILITE ID="N1476"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG"><HILITE ID="N1482"><HILITE.FACE NAME="TEXT">InPrms</HILITE.FACE></HILITE></VAR> refer to <PTR TO="SUBSECTION.INPRMS"/>.
</P></ITEM><ENTRY><P.SILENT PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1491"><HILITE.FACE NAME="TEXT">getService</HILITE.FACE></HILITE></CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT PROGLANG="OZ"><CODE DISPLAY="DISPLAY"><HILITE ID="N1496"><HILITE.FACE NAME="TEXT">getService(</HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="IN"><HILITE ID="N1500"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR><HILITE ID="N1501"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N1505"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1506"><HILITE.FACE NAME="TEXT"> </HILITE.FACE></HILITE><VAR TYPE="PROG" MODE="OUT"><HILITE ID="N1510"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR><HILITE ID="N1511"><HILITE.FACE NAME="TEXT">)</HILITE.FACE></HILITE></CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session and fetches the HTTP headers of the document specified by the <VAR TYPE="PROG"><HILITE ID="N1517"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></VAR>. Thus, the content of the document is not fetched.</P.SILENT><P>As output, it returns the <VAR TYPE="PROG"><HILITE ID="N1523"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE></HILITE></VAR> record with its <VAR TYPE="PROG"><HILITE ID="N1527"><HILITE.FACE NAME="TEXT">sOut</HILITE.FACE></HILITE></VAR> feature's field being unbound, and the <VAR TYPE="PROG"><HILITE ID="N1531"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE></HILITE></VAR> record containing the HTTP headers. It throws all the exceptions described in (see <PTR TO="SUBSECTION.GENEXCEPTIONS"/>) but <CODE DISPLAY="INLINE"><HILITE ID="N1538"><HILITE.FACE NAME="TEXT">errRemFile</HILITE.FACE></HILITE></CODE>.  </P><P>For the entire explanation of the input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"/>.
</P></ITEM></LIST></P></SECTION></CHAPTER><CHAPTER ID="CHAPTER.EXAMPLES"><FRONT><TITLE>Tutorial Examples</TITLE></FRONT><P>The examples given in this chapter are functors. As we've stated before, in <PTR TO="CHAPTER.HTTPCLIENT"/>, the main programming interface of the <CODE DISPLAY="INLINE"><HILITE ID="N1557"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package is provided by the specialised classes found within <CODE DISPLAY="INLINE"><HILITE ID="N1561"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> module, namely <CODE DISPLAY="INLINE"><HILITE ID="N1565"><HILITE.FACE NAME="TEXT">CgiGET</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N1569"><HILITE.FACE NAME="TEXT">CgiPOST</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N1573"><HILITE.FACE NAME="TEXT">CgiISINDEX</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N1577"><HILITE.FACE NAME="TEXT">UrlGET</HILITE.FACE></HILITE></CODE> and <CODE DISPLAY="INLINE"><HILITE ID="N1581"><HILITE.FACE NAME="TEXT">UrlHEAD</HILITE.FACE></HILITE></CODE>. In order to use them, we have to <CODE DISPLAY="INLINE"><HILITE ID="N1585"><HILITE.FACE NAME="KEYWORD">import</HILITE.FACE></HILITE></CODE> <CODE DISPLAY="INLINE"><HILITE ID="N1589"><HILITE.FACE NAME="STRING">'HttpClient.ozf'</HILITE.FACE></HILITE></CODE> module in our examples.
</P><SECTION><FRONT><TITLE>Download a document</TITLE></FRONT><P>This short example shows how a document located at <CODE DISPLAY="INLINE"><HILITE ID="N1599"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></CODE> can be downloaded using <CODE DISPLAY="INLINE"><HILITE ID="N1603"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">getUrl</HILITE.FACE></HILITE></CODE> class. The first step is the initialisation of the class, using <CODE DISPLAY="INLINE"><HILITE ID="N1607"><HILITE.FACE NAME="TEXT">init</HILITE.FACE></HILITE></CODE> method. Remark that the provided input parameters are unbound. In this case they will be given default values. The second step is calling the <CODE DISPLAY="INLINE"><HILITE ID="N1611"><HILITE.FACE NAME="TEXT">getService</HILITE.FACE></HILITE></CODE> method, thus invoking the service. We don't want to reach the output parameters so we unbound them.</P><P>The content of the donloaded document will be put into the file having the given <CODE DISPLAY="INLINE"><HILITE ID="N1617"><HILITE.FACE NAME="TEXT">Url</HILITE.FACE></HILITE></CODE> based name, <CODE DISPLAY="INLINE"><HILITE ID="N1621"><HILITE.FACE NAME="STRING">"index.html"</HILITE.FACE></HILITE></CODE> in our case.

 </P><PARA><TITLE><REF.EXTERN TO="exmpl1.oz">Source
File</REF.EXTERN></TITLE>
<CODE PROGLANG="OZ" TO="exmpl1.oz" DISPLAY="DISPLAY"><HILITE ID="N1629"><HILITE.FACE NAME="COMMENT">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simple use of HttpClient.urlGET class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">functor</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">import</HILITE.FACE><HILITE.FACE NAME="TEXT">
   System
   Application
   HttpClient(urlGET:UrlGET) </HILITE.FACE><HILITE.FACE NAME="KEYWORD">at</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="STRING">'HttpClient.ozf'</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">define</HILITE.FACE><HILITE.FACE NAME="TEXT">
   Url = </HILITE.FACE><HILITE.FACE NAME="STRING">"http://www.info.ucl.ac.be/index.html"</HILITE.FACE><HILITE.FACE NAME="TEXT">
   HttpObj
   ServiceEnd
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">in</HILITE.FACE><HILITE.FACE NAME="TEXT">
   HttpObj={New UrlGET init(_)}
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">try</HILITE.FACE><HILITE.FACE NAME="TEXT">
         {HttpObj getService(Url _ _)}
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">catch</HILITE.FACE><HILITE.FACE NAME="TEXT"> E </HILITE.FACE><HILITE.FACE NAME="KEYWORD">then</HILITE.FACE><HILITE.FACE NAME="TEXT">
         {System</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">show E}
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">finally</HILITE.FACE><HILITE.FACE NAME="TEXT">
         ServiceEnd=</HILITE.FACE><HILITE.FACE NAME="KEYWORD">unit</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
   {Wait ServiceEnd}
   {Application</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">exit 0}
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE></HILITE></CODE></PARA><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1636"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">getHEAD</HILITE.FACE></HILITE></CODE> class can be used in the same manner. In this case the content of the document will not be fetched, but its HTTP headers will be returned.
</P></SECTION><SECTION><FRONT><TITLE>Build CGI queries</TITLE></FRONT><P>This example shows how <CODE DISPLAY="INLINE"><HILITE ID="N1646"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiGET</HILITE.FACE></HILITE></CODE> class can be used to build CGI queries (i.e. to Yahoo web search engine). The query is given by <CODE DISPLAY="INLINE"><HILITE ID="N1650"><HILITE.FACE NAME="TEXT">CgiParams</HILITE.FACE></HILITE></CODE> which is a list of <CODE DISPLAY="INLINE"><HILITE ID="N1654"><HILITE.FACE NAME="STRING">"name=value"</HILITE.FACE></HILITE></CODE> strings. In our very case, we want to retrieve a list of all documents related with the keyword <CODE DISPLAY="INLINE"><HILITE ID="N1658"><HILITE.FACE NAME="STRING">"travel"</HILITE.FACE></HILITE></CODE>. Since the name of the file the retrieved document should be put is provided, it will be used. </P><P>The size of bytes of the requested document <CODE DISPLAY="INLINE"><HILITE ID="N1664"><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">sizeRead</HILITE.FACE></HILITE></CODE> read from the socket is displayed. Since it is a string, the name of the peer <CODE DISPLAY="INLINE"><HILITE ID="N1668"><HILITE.FACE NAME="TEXT">HttpPrms</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">server</HILITE.FACE></HILITE></CODE> is displayed as an atom, so we can easily see it.

 </P><PARA><TITLE><REF.EXTERN TO="exmpl2.oz">Source
File</REF.EXTERN></TITLE>
<CODE PROGLANG="OZ" TO="exmpl2.oz" DISPLAY="DISPLAY"><HILITE ID="N1676"><HILITE.FACE NAME="COMMENT">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simple use of HttpClient.cgiGET class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">functor</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">import</HILITE.FACE><HILITE.FACE NAME="TEXT">
   System
   Application
   HttpClient(cgiGET:CgiGET) </HILITE.FACE><HILITE.FACE NAME="KEYWORD">at</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="STRING">'HttpClient.ozf'</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">define</HILITE.FACE><HILITE.FACE NAME="TEXT">
   Url = </HILITE.FACE><HILITE.FACE NAME="STRING">"search.yahoo.com/bin/search"</HILITE.FACE><HILITE.FACE NAME="TEXT">
   CgiParams = [</HILITE.FACE><HILITE.FACE NAME="STRING">"p=travel"</HILITE.FACE><HILITE.FACE NAME="TEXT">]
   OutPrms
   HttpPrms
   HttpObj
   ServiceEnd
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">in</HILITE.FACE><HILITE.FACE NAME="TEXT">
   HttpObj={New CgiGET init(inPrms(file:</HILITE.FACE><HILITE.FACE NAME="STRING">"temp"</HILITE.FACE><HILITE.FACE NAME="TEXT">))}
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">try</HILITE.FACE><HILITE.FACE NAME="TEXT">
         {HttpObj getService(Url CgiParams OutPrms HttpPrms)}
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">catch</HILITE.FACE><HILITE.FACE NAME="TEXT"> E </HILITE.FACE><HILITE.FACE NAME="KEYWORD">then</HILITE.FACE><HILITE.FACE NAME="TEXT">
         {System</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">show E}
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">finally</HILITE.FACE><HILITE.FACE NAME="TEXT">
         ServiceEnd=</HILITE.FACE><HILITE.FACE NAME="KEYWORD">unit</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
   {Wait ServiceEnd}
   {System</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">show sizeread</HILITE.FACE><HILITE.FACE NAME="KEYWORD">#</HILITE.FACE><HILITE.FACE NAME="TEXT">OutPrms</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">sizeRead}
   {System</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">show http_server</HILITE.FACE><HILITE.FACE NAME="KEYWORD">#</HILITE.FACE><HILITE.FACE NAME="TEXT">{VirtualString</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">toAtom HttpPrms</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">server}}
   {Application</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">exit 0}
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE></HILITE></CODE></PARA><P/><P PROGLANG="OZ"><CODE DISPLAY="INLINE"><HILITE ID="N1684"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiPOST</HILITE.FACE></HILITE></CODE> and <CODE DISPLAY="INLINE"><HILITE ID="N1688"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">cgiISINDEX</HILITE.FACE></HILITE></CODE> classes can be used in the same manner. In the latter case <CODE DISPLAY="INLINE"><HILITE ID="N1692"><HILITE.FACE NAME="TEXT">CgiParams</HILITE.FACE></HILITE></CODE> has to be a string.
</P></SECTION><SECTION><FRONT><TITLE>Use of the module functionalities</TITLE></FRONT><P>Among the examples presented in this chapter, this one is the most complex and involves the use of the <CODE DISPLAY="INLINE"><HILITE ID="N1702"><HILITE.FACE NAME="TEXT">fetchRate</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N1706"><HILITE.FACE NAME="TEXT">bytesRead</HILITE.FACE></HILITE></CODE>, <CODE DISPLAY="INLINE"><HILITE ID="N1710"><HILITE.FACE NAME="TEXT">stopTemp</HILITE.FACE></HILITE></CODE> and <CODE DISPLAY="INLINE"><HILITE ID="N1714"><HILITE.FACE NAME="TEXT">startTemp</HILITE.FACE></HILITE></CODE> methods. It will display the transmission rate each 300 ms and the number of bytes of the document read at that time, by calling <CODE DISPLAY="INLINE"><HILITE ID="N1718"><HILITE.FACE NAME="TEXT">GetRate</HILITE.FACE></HILITE></CODE> procedure. </P><P>After a period of 850 ms the transmission will be temporarely stoped and continued after other 3000 ms period. </P><P>Since <CODE DISPLAY="INLINE"><HILITE ID="N1726"><HILITE.FACE NAME="TEXT">toStrm</HILITE.FACE></HILITE></CODE> feature is set <CODE DISPLAY="INLINE"><HILITE ID="N1730"><HILITE.FACE NAME="KEYWORD">true</HILITE.FACE></HILITE></CODE> and <CODE DISPLAY="INLINE"><HILITE ID="N1734"><HILITE.FACE NAME="TEXT">toFile</HILITE.FACE></HILITE></CODE> one is <CODE DISPLAY="INLINE"><HILITE ID="N1738"><HILITE.FACE NAME="KEYWORD">true</HILITE.FACE></HILITE></CODE> by default, the document will be both saved into the provided name <CODE DISPLAY="INLINE"><HILITE ID="N1742"><HILITE.FACE NAME="STRING">"temp"</HILITE.FACE></HILITE></CODE> file, and returned as a byte stream to be processed by the <CODE DISPLAY="INLINE"><HILITE ID="N1746"><HILITE.FACE NAME="TEXT">ProcessStrm</HILITE.FACE></HILITE></CODE> procedure.

 </P><PARA><TITLE><REF.EXTERN TO="exmpl3.oz">Source
File</REF.EXTERN></TITLE>
<CODE PROGLANG="OZ" TO="exmpl3.oz" DISPLAY="DISPLAY"><HILITE ID="N1754"><HILITE.FACE NAME="COMMENT">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simple use of the fetchRate, bytesRead, stopTemp
%% and startTemp methods of HttpClient.urlGET class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">functor</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">import</HILITE.FACE><HILITE.FACE NAME="TEXT">
   System
   Application
   HttpClient(urlGET:UrlGET) </HILITE.FACE><HILITE.FACE NAME="KEYWORD">at</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="STRING">'HttpClient.ozf'</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">define</HILITE.FACE><HILITE.FACE NAME="TEXT">
   Url = </HILITE.FACE><HILITE.FACE NAME="STRING">"Address of the document"</HILITE.FACE><HILITE.FACE NAME="TEXT">
   OutPrms
   ApplicEnd
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">proc</HILITE.FACE><HILITE.FACE NAME="VARIABLE"> </HILITE.FACE><HILITE.FACE NAME="TEXT">{</HILITE.FACE><HILITE.FACE NAME="FUNCTION">UseIt</HILITE.FACE><HILITE.FACE NAME="TEXT">}
      HttpObj
      ServiceEnd
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">proc</HILITE.FACE><HILITE.FACE NAME="VARIABLE"> </HILITE.FACE><HILITE.FACE NAME="TEXT">{</HILITE.FACE><HILITE.FACE NAME="FUNCTION">GetRate</HILITE.FACE><HILITE.FACE NAME="TEXT"> B}
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">if</HILITE.FACE><HILITE.FACE NAME="TEXT"> {IsDet B}</HILITE.FACE><HILITE.FACE NAME="KEYWORD">==false</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">then</HILITE.FACE><HILITE.FACE NAME="TEXT">
            {Delay 300}
            {System</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">show {HttpObj fetchRate($)}</HILITE.FACE><HILITE.FACE NAME="KEYWORD">#</HILITE.FACE><HILITE.FACE NAME="TEXT">{HttpObj bytesRead($)}}
            {GetRate B}
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">proc</HILITE.FACE><HILITE.FACE NAME="VARIABLE"> </HILITE.FACE><HILITE.FACE NAME="TEXT">{</HILITE.FACE><HILITE.FACE NAME="FUNCTION">ProcessStrm</HILITE.FACE><HILITE.FACE NAME="TEXT"> Stream}
         </HILITE.FACE><HILITE.FACE NAME="COMMENT">%% Processing the Stream
</HILITE.FACE><HILITE.FACE NAME="TEXT">         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">...</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">in</HILITE.FACE><HILITE.FACE NAME="TEXT">
      HttpObj={New UrlGET init(inPrms(file:</HILITE.FACE><HILITE.FACE NAME="STRING">"temp"</HILITE.FACE><HILITE.FACE NAME="TEXT"> toStrm:</HILITE.FACE><HILITE.FACE NAME="KEYWORD">true</HILITE.FACE><HILITE.FACE NAME="TEXT">))}
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT">
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">try</HILITE.FACE><HILITE.FACE NAME="TEXT">
            {HttpObj getService(Url OutPrms _)}
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">catch</HILITE.FACE><HILITE.FACE NAME="TEXT"> E </HILITE.FACE><HILITE.FACE NAME="KEYWORD">then</HILITE.FACE><HILITE.FACE NAME="TEXT">
            {System</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">show E}
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">finally</HILITE.FACE><HILITE.FACE NAME="TEXT">
            ServiceEnd=</HILITE.FACE><HILITE.FACE NAME="KEYWORD">unit</HILITE.FACE><HILITE.FACE NAME="TEXT">
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT"> {GetRate ServiceEnd} </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT"> {ProcessStrm OutPrms</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">sOut} </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      {Delay 850}
      </HILITE.FACE><HILITE.FACE NAME="COMMENT">%% temporarely stops the transmission
</HILITE.FACE><HILITE.FACE NAME="TEXT">      {HttpObj stopTemp}
      {Delay 3000}
      </HILITE.FACE><HILITE.FACE NAME="COMMENT">%% continues the transmission
</HILITE.FACE><HILITE.FACE NAME="TEXT">      {HttpObj startTemp}
      {Wait ServiceEnd}
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">in</HILITE.FACE><HILITE.FACE NAME="TEXT">
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT"> {UseIt} ApplicEnd=</HILITE.FACE><HILITE.FACE NAME="KEYWORD">unit</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
   {Wait ApplicEnd}
   {Application</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">exit 0}
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE></HILITE></CODE></PARA></SECTION><SECTION><FRONT><TITLE>Parallel documents retrieval</TITLE></FRONT><P>This small example shows how two services can be started in parallel in order to download the same document having different locations <CODE DISPLAY="INLINE"><HILITE ID="N1766"><HILITE.FACE NAME="TEXT">Url1</HILITE.FACE></HILITE></CODE> and <CODE DISPLAY="INLINE"><HILITE ID="N1770"><HILITE.FACE NAME="TEXT">Url2</HILITE.FACE></HILITE></CODE>. This will try to fetch the documents while each service runs within its own thread. When one of the services completes or fails, the application exits.

 </P><PARA><TITLE><REF.EXTERN TO="exmpl4.oz">Source
File</REF.EXTERN></TITLE>
<CODE PROGLANG="OZ" TO="exmpl4.oz" DISPLAY="DISPLAY"><HILITE ID="N1778"><HILITE.FACE NAME="COMMENT">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parallel document retrieval
%% using HttpClient.urlGET class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">functor</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">import</HILITE.FACE><HILITE.FACE NAME="TEXT">
   System
   Application
   HttpClient(urlGET:UrlGET) </HILITE.FACE><HILITE.FACE NAME="KEYWORD">at</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="STRING">'HttpClient.ozf'</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">define</HILITE.FACE><HILITE.FACE NAME="TEXT">
   Url1 = </HILITE.FACE><HILITE.FACE NAME="STRING">"Address of the document located in USA"</HILITE.FACE><HILITE.FACE NAME="TEXT">
   Url2 = </HILITE.FACE><HILITE.FACE NAME="STRING">"Address of the document located in Australia"</HILITE.FACE><HILITE.FACE NAME="TEXT">
   ApplicEnd
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">proc</HILITE.FACE><HILITE.FACE NAME="VARIABLE"> </HILITE.FACE><HILITE.FACE NAME="TEXT">{</HILITE.FACE><HILITE.FACE NAME="FUNCTION">UseIt</HILITE.FACE><HILITE.FACE NAME="TEXT">}
      HttpObj1
      HttpObj2
      Out1 Http1
      Out2 Http2
      ServiceEnd
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">in</HILITE.FACE><HILITE.FACE NAME="TEXT">
      HttpObj1={New UrlGET init(inPrms(file:</HILITE.FACE><HILITE.FACE NAME="STRING">"temp1"</HILITE.FACE><HILITE.FACE NAME="TEXT">))}
      HttpObj2={New UrlGET init(inPrms(file:</HILITE.FACE><HILITE.FACE NAME="STRING">"temp2"</HILITE.FACE><HILITE.FACE NAME="TEXT">))}
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT">
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">try</HILITE.FACE><HILITE.FACE NAME="TEXT">
            {HttpObj1 getService(Url1 Out1 Http1)}
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">catch</HILITE.FACE><HILITE.FACE NAME="TEXT"> E </HILITE.FACE><HILITE.FACE NAME="KEYWORD">then</HILITE.FACE><HILITE.FACE NAME="TEXT">
            {System</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">show E}
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">finally</HILITE.FACE><HILITE.FACE NAME="TEXT">
            ServiceEnd=</HILITE.FACE><HILITE.FACE NAME="KEYWORD">unit</HILITE.FACE><HILITE.FACE NAME="TEXT">
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT">
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">try</HILITE.FACE><HILITE.FACE NAME="TEXT">
            {HttpObj2 getService(Url2 Out2 Http2)}
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">catch</HILITE.FACE><HILITE.FACE NAME="TEXT"> E </HILITE.FACE><HILITE.FACE NAME="KEYWORD">then</HILITE.FACE><HILITE.FACE NAME="TEXT">
            {System</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">show E}
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">finally</HILITE.FACE><HILITE.FACE NAME="TEXT">
            ServiceEnd=</HILITE.FACE><HILITE.FACE NAME="KEYWORD">unit</HILITE.FACE><HILITE.FACE NAME="TEXT">
         </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
      {Wait ServiceEnd}
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">in</HILITE.FACE><HILITE.FACE NAME="TEXT">
   </HILITE.FACE><HILITE.FACE NAME="KEYWORD">thread</HILITE.FACE><HILITE.FACE NAME="TEXT"> {UseIt} ApplicEnd=</HILITE.FACE><HILITE.FACE NAME="KEYWORD">unit</HILITE.FACE><HILITE.FACE NAME="TEXT"> </HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
   {Wait ApplicEnd}
   {Application</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">exit 0}
</HILITE.FACE><HILITE.FACE NAME="KEYWORD">end</HILITE.FACE><HILITE.FACE NAME="TEXT">
</HILITE.FACE></HILITE></CODE></PARA></SECTION></CHAPTER><CHAPTER ID="CHAPTER.APPLICATIONS"><FRONT><TITLE>Demo Applications</TITLE></FRONT><P>In <PTR TO="CHAPTER.EXAMPLES"/> we described some useful examples of how to use <CODE DISPLAY="INLINE"><HILITE ID="N1794"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package. In this chapter we'll present some concrete applications which use this package.
</P><SECTION><FRONT><TITLE>Web Browser</TITLE></FRONT><P>In this section we present a simple application whose main goal is to provide a graphical user interface of <CODE DISPLAY="INLINE"><HILITE ID="N1804"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package. The flexibility of the package's interface is reflected within the main frame's menu. For example, the package's classes are accessible within <CODE DISPLAY="INLINE"><HILITE ID="N1808"><HILITE.FACE NAME="TEXT">Services</HILITE.FACE></HILITE></CODE> menu, and their optional parameters can me set by using <CODE DISPLAY="INLINE"><HILITE ID="N1812"><HILITE.FACE NAME="TEXT">Options</HILITE.FACE></HILITE></CODE> menu.
</P><P>As one can see in <PTR TO="FIGURE.BWOZGUI"/>, the fetched document is not interpreted but displayed as it is. Thus, in the case of compressed files (i.e *.gz, *.zip), only displayable characters will be displayed by the Tcl/Tk <CODE DISPLAY="INLINE"><HILITE ID="N1821"><HILITE.FACE NAME="TEXT">text</HILITE.FACE></HILITE></CODE> widget.

<FIGURE ID="FIGURE.BWOZGUI"><CAPTION><P.SILENT>The GUI of the Web browser</P.SILENT></CAPTION><PICTURE.EXTERN TYPE="GIF" TO="bwoz1.gif" DISPLAY="DISPLAY"/></FIGURE></P><P>For development of this application, <EM DISPLAY="INLINE">Mozart Compiler 1.1.0 (20000111) playing Oz 3</EM> was used. However, it works fine with <EM DISPLAY="INLINE">1.1.0 (19991213)</EM> version, too.
</P><P>The web browser (<REF.EXTERN TO="bwoz.oz">source in <CODE DISPLAY="INLINE"><HILITE ID="N1849"><HILITE.FACE NAME="TEXT">bwoz</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">oz</HILITE.FACE></HILITE></CODE></REF.EXTERN>) can be compiled as follows:
<CODE DISPLAY="DISPLAY"><HILITE ID="N1853"><HILITE.FACE NAME="TEXT">ozc </HILITE.FACE><HILITE.FACE NAME="KEYWORD">-</HILITE.FACE><HILITE.FACE NAME="TEXT">x bwoz</HILITE.FACE><HILITE.FACE NAME="KEYWORD">.</HILITE.FACE><HILITE.FACE NAME="TEXT">oz</HILITE.FACE></HILITE></CODE></P><P>and simply invoked as follows:
<CODE DISPLAY="DISPLAY"><HILITE ID="N1858"><HILITE.FACE NAME="TEXT">bwoz</HILITE.FACE></HILITE></CODE></P></SECTION><SECTION><FRONT><TITLE>Web based Service Combinators</TITLE></FRONT><P>This application was inspired from the paper "Service Combinators for Web Computing" written by Luca Cardelli and Rowan Davies. It has as a starting point the questions related with the possibility of developing a script algorithm which should implement the actions a user, sitting in front of (say) a browser, could perform. These actions can be modeled with the use of special desined web based service combinators and basic services for invoking an HTTP server. </P><P>The application is being developed by <REF.EXTERN TO="mailto:muh@info.ucl.ac.be">Hadim Mustapha</REF.EXTERN> and consists of two main packages. The first one, deals with the user (programmer) interactions, the service combinators formating and certain decisions regarding the status of these services. The latter one is <CODE DISPLAY="INLINE"><HILITE ID="N1873"><HILITE.FACE NAME="TEXT">HttpClient</HILITE.FACE></HILITE></CODE> package.
</P><P>It will be available in the near future ...

  </P></SECTION></CHAPTER></BODY></BOOK>

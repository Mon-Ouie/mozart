<BOOK PROGLANG="OZ"><FRONT><META NAME="HTML.SPLIT" VALUE="chapter.introduction"/><META NAME="HTML.SPLIT" VALUE="chapter.httpclient"/><META NAME="HTML.SPLIT" VALUE="chapter.examples"/><META NAME="HTML.SPLIT" VALUE="chapter.applications"/><META NAME="HTML.SPLIT.BIB" VALUE=""/><META NAME="OZVERSION" VALUE="3.0"/><META NAME="STATUS" VALUE="draft"/><TITLE>HttpClient Package</TITLE><AUTHOR>Valentin Mesaros</AUTHOR></FRONT><BODY><CHAPTER ID="CHAPTER.INTRODUCTION"><FRONT><TITLE>Introduction</TITLE></FRONT><P>
The <CODE DISPLAY="INLINE">HttpClient</CODE> package implements the HTTP 0.9 and HTTP 1.0 protocols, conform <REF.EXTERN TO="http://www.faqs.org/rfcs/rfc1945.html">RFC 1945</REF.EXTERN>, providing a flexible programming interface. Its interface is related with the retrieving of the documents over the network, as well as with accessing their transmission rate.
</P><P>
The <CODE DISPLAY="INLINE">HttpClient</CODE> package was written in <EM DISPLAY="INLINE">Oz 3</EM> and compiled with <EM DISPLAY="INLINE">Mozart Compiler 1.1.0 (19991213) and (20000111)</EM>.

</P><P>
The <CODE DISPLAY="INLINE">HttpClient</CODE> package consists of the following modules:

<LIST DISPLAY="DISPLAY"><ITEM><P.SILENT><CODE DISPLAY="INLINE">HttpClient</CODE>: is the main programming interface of the <CODE DISPLAY="INLINE">HttpClient</CODE> package. It deals with the parse of the input and output parameters, initiate of HTTP 0.9 and HTTP 1.0 compliant communications and transmission rate control. The <CODE DISPLAY="INLINE">HttpClient</CODE> module is described in <PTR TO="CHAPTER.HTTPCLIENT"></PTR>.
</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">HttpReqRep</CODE>: deals with the HTTP reqests and responses.
</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">HttpHeader</CODE>: stores the HTTP header formats as well as input and output default parameters.
</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">ListUtils</CODE>: consists of some useful List processing tools.
</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">OpenConnection</CODE>: deals with socket connections and files, as well as with transmission rate computation. This module can be used apart of this package in order to implement other transmission protocols (i.e. FTP).
</P.SILENT></ITEM></LIST></P><P><PTR TO="CHAPTER.EXAMPLES"></PTR> describes some basic examples using the classes and functionalities of the <CODE DISPLAY="INLINE">HttpClient</CODE> module.
</P></CHAPTER><CHAPTER ID="CHAPTER.HTTPCLIENT"><FRONT><TITLE><CODE DISPLAY="INLINE">HttpClient</CODE> Module</TITLE></FRONT><P>The <CODE DISPLAY="INLINE">HttpClient</CODE> module is the main programming interface of the <CODE DISPLAY="INLINE">HttpClient</CODE> package. It deals with the input and output parameters parsing, HTTP 0.9 and HTTP 1.0 compliant communications initialisation and transmission rate control. In the followings we enumerate and describe the classes this module consists of. </P><P><CODE DISPLAY="INLINE">Service</CODE> is the base class for all the other classes present in this module. Hence, all the other classes (<CODE DISPLAY="INLINE">CgiGET</CODE>, <CODE DISPLAY="INLINE">CgiPOST</CODE>, <CODE DISPLAY="INLINE">CgiISINDEX</CODE>, <CODE DISPLAY="INLINE">UrlGET</CODE> and <CODE DISPLAY="INLINE">UrlHEAD</CODE>) will inherit its public and protected methods. The programmer is advised to use them instead of <CODE DISPLAY="INLINE">Service</CODE>.  </P><SECTION ID="SECTION.EXCEPTIONS"><FRONT><TITLE>Exceptions</TITLE></FRONT><P>The exceptions raised by the methods of the classes present in <CODE DISPLAY="INLINE">HttpClient</CODE> package are atoms.     </P><SUBSECTION ID="SUBSECTION.GENEXCEPTIONS"><FRONT><TITLE>General exceptions</TITLE></FRONT><P>
These exceptions are raised by all vulnerable methods. They are as follows:
<LIST ENUM="ENUM" DISPLAY="DISPLAY"><ITEM><P.SILENT><CODE DISPLAY="INLINE">conPremClosed</CODE> : the socket connection was closed by the peer while still reading it. </P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errCloseCon</CODE> : there was a problem when closing the connection.</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errCloseFile</CODE> : there was a problem when closing the file.</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errReadSocket</CODE> : there was a problem when reading the socket.</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errRemFile</CODE> : there was a problem when removing the file.</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errOpenCon</CODE> : there was a problem while trying to open the connection.</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errOpenFile</CODE> : there was a problem while trying to open the file.</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errWriteFile</CODE> : there was a problem when writing the file.</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errWriteSocket</CODE> : there was a problem when writing the socket.</P.SILENT></ITEM></LIST></P></SUBSECTION><SUBSECTION ID="SUBSECTION.CGIEXCEPTIONS"><FRONT><TITLE>Cgi exceptions</TITLE></FRONT><P>
These exceptions are raised by the vulnerable methods involved in CGI parameters and <EM DISPLAY="INLINE">URL</EM> strings parsing. They are as follows:
<LIST ENUM="ENUM" DISPLAY="DISPLAY"><ITEM><P.SILENT><CODE DISPLAY="INLINE">errCgiPrms</CODE> : there is a problem with the CGI parameters. </P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errLargeCgiPrms</CODE> : the length of the CGI parameters is to large.</P.SILENT></ITEM><ITEM><P.SILENT><CODE DISPLAY="INLINE">errUrlChrs</CODE> : the <EM DISPLAY="INLINE">URL</EM> contains special chars.</P.SILENT></ITEM></LIST></P></SUBSECTION></SECTION><SECTION ID="SECTION.INOUTPRMS"><FRONT><TITLE>Input &#38; Ouput parameters</TITLE></FRONT><P>In this section we describe the parameters found in most of the methods presented within this chapter.
</P><SUBSECTION ID="SUBSECTION.INPRMS"><FRONT><TITLE>Input parameters</TITLE></FRONT><P><LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT><CODE DISPLAY="INLINE">InPrms</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">inPrms(file: <VAR TYPE="PROG" MODE="IN">FileName</VAR> &#60;= given Url based
       rTime: <VAR TYPE="PROG" MODE="IN">RTime</VAR> &#60;= 25
       smpl: <VAR TYPE="PROG" MODE="IN">Smpl</VAR> &#60;= 45
       toFile: <VAR TYPE="PROG" MODE="IN">ToFile</VAR> &#60;= true
       toStrm: <VAR TYPE="PROG" MODE="IN">ToStrm</VAR> &#60;= false)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>The <CODE DISPLAY="INLINE">InPrms</CODE> record provides the programmer with a flexible interface. If not bound nor present, its features willbe given default values. </P.SILENT><P><VAR TYPE="PROG">FileName</VAR> is a string containing the path of the file the document will be put in. The file is written while the document is beeing transfered.</P><P><VAR TYPE="PROG">RTime</VAR> is an integer specifing the instanteous transmission rate checking periodicity. </P><P><VAR TYPE="PROG">Smpl</VAR> is an integer specifing the number of the last instantaneously rates to be considered when computing the transmission rate (i.e. when method <CODE DISPLAY="INLINE">fetchRate</CODE> is invoked, see <PTR TO="SECTION.HTTPCLIENT.SERVICE"></PTR>).</P><P><VAR TYPE="PROG">ToFile</VAR> is a boolean specifing if the document should be saved into a file or not. </P><P><VAR TYPE="PROG">ToStrm</VAR> is a boolean specifing if the document should be returned as a byte stream or not.
</P></ITEM></LIST></P><P><CODE DISPLAY="INLINE">Url</CODE> is a string specifing the <EM DISPLAY="INLINE">URL</EM> location of the document to be retrieved (e.g. <CODE DISPLAY="INLINE">"http://www.info.ucl.ac.be"</CODE> of <CODE DISPLAY="INLINE">"www.yahoo.com"</CODE>).
</P></SUBSECTION><SUBSECTION ID="SUBSECTION.OUTPRMS"><FRONT><TITLE>Output parameters</TITLE></FRONT><P><LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT><CODE DISPLAY="INLINE">HttpPrms</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">httpPrms(server: <VAR TYPE="PROG" MODE="OUT">Server</VAR>
         date: <VAR TYPE="PROG" MODE="OUT">Date</VAR>
         last_modified: <VAR TYPE="PROG" MODE="OUT">Last_Modified</VAR>
         location: <VAR TYPE="PROG" MODE="OUT">Location</VAR>
         content_length: <VAR TYPE="PROG" MODE="OUT">Content_Length</VAR>
         content_type: <VAR TYPE="PROG" MODE="OUT">Content_Type</VAR>
         content_encoding: <VAR TYPE="PROG" MODE="OUT">Content_Encoding</VAR>) </CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT><CODE DISPLAY="INLINE">HttpPrms</CODE> record contains the HTTP 1.0 compliant headers. Each of its feature coresponds to a header and will be bound if it is provided by the peer, before the document is fetched. All parameters are strings.  </P.SILENT><P><VAR TYPE="PROG">Server</VAR> represents the name of the peer.</P><P><VAR TYPE="PROG">Date</VAR> represents the date and time the document was built by the peer. Its semantics is described in <REF.EXTERN TO="http://www.faqs.org/rfcs/rfc822.html">RFC 822</REF.EXTERN>.</P><P><VAR TYPE="PROG">Last_Modified</VAR> represents the date and time the document was last modified. Its semantics is described in <REF.EXTERN TO="http://www.faqs.org/rfcs/rfc822.html">RFC 822</REF.EXTERN>.</P><P><VAR TYPE="PROG">Location</VAR> represents the <EM DISPLAY="INLINE">URL</EM> where the requested document was temporarely or permanentely moved. When it is bound, the document is not sent by the peer.</P><P><VAR TYPE="PROG">Content_Length</VAR> represents the length of the document to be retrieved.</P><P><VAR TYPE="PROG">Content_Type</VAR> represents the MIME type of the document to be retrieved.</P><P><VAR TYPE="PROG">Content_Encoding</VAR> represents the additional content coding that has been applied to the document to be retrieved.
</P></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">OutPrms</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">outPrms(file: <VAR TYPE="PROG" MODE="OUT">FileName</VAR>
        toFile: <VAR TYPE="PROG" MODE="OUT">ToFile</VAR>
        toStrm: <VAR TYPE="PROG" MODE="OUT">ToStrm</VAR>
        sOut: <VAR TYPE="PROG" MODE="OUT">SOut</VAR>
        time: <VAR TYPE="PROG" MODE="OUT">Time</VAR>
        status: <VAR TYPE="PROG" MODE="OUT">Status</VAR>
        sizeRead: <VAR TYPE="PROG" MODE="OUT">SizeRead</VAR>) </CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Thre are some features within <CODE DISPLAY="INLINE">OutPrms</CODE> record which can also be found within <CODE DISPLAY="INLINE">InPrms</CODE> record (see <PTR TO="SUBSECTION.INPRMS"></PTR>), having the same fields if provided by the user or default ones, otherwise.
 </P.SILENT><P><VAR TYPE="PROG">SOut</VAR> is bound with a byte stream representing the retrieved document. If <CODE DISPLAY="INLINE">toStrm</CODE> feature of the <CODE DISPLAY="INLINE">InPrms</CODE> record is set <CODE DISPLAY="INLINE">false</CODE>, or when the requested document has been moved to an other <EM DISPLAY="INLINE">URL</EM>, or a <EM DISPLAY="INLINE">HEAD</EM> HTTP request is invoked, then <CODE DISPLAY="INLINE">SOut</CODE> will not be bound.</P><P><VAR TYPE="PROG">Time</VAR> is an integer and will be bound with the time when the service completes or fails. It is represented in secons since 00:00:00 GMT, Jan. 1, 1970.   </P><P><VAR TYPE="PROG">Status</VAR> is a string and represents the HTTP status code given by the peer (i.e. <CODE DISPLAY="INLINE">"200"</CODE> for <EM DISPLAY="INLINE">OK</EM> or <CODE DISPLAY="INLINE">"301"</CODE> for <EM DISPLAY="INLINE">Moved Permanently</EM>).  </P><P><VAR TYPE="PROG">SizeRead</VAR> is an integer which will be bound with the length of the document actually read.
</P></ITEM></LIST></P></SUBSECTION></SECTION><SECTION ID="SECTION.HTTPCLIENT.SERVICE"><FRONT><TITLE><CODE DISPLAY="INLINE">HttpClient.service</CODE> class </TITLE></FRONT><P><CODE DISPLAY="INLINE">Service</CODE> is the base class for all the other classes present within this module. The reason we present it, is to describe the methods inhereted by the classes which specialise it.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT><CODE DISPLAY="INLINE">bytesRead</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">bytesRead(<VAR TYPE="PROG" MODE="OUT">N</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Returns the number <VAR TYPE="PROG">N</VAR> of bytes read of the document being tranfered.
</P.SILENT></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">closeAll</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">closeAll(<VAR TYPE="PROG" MODE="IN">Trace</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>This method is used when, before the service completeness, its stop is required. </P.SILENT><P>If <VAR TYPE="PROG">Trace</VAR> is bound to <CODE DISPLAY="INLINE">false</CODE>, the current communication will be closed and the opened file removed. Else, if <VAR TYPE="PROG">Trace</VAR> is bound to <CODE DISPLAY="INLINE">true</CODE>, the current communication and the opened file will be closed. It throws <CODE DISPLAY="INLINE">errCloseCon</CODE>, <CODE DISPLAY="INLINE">errCloseFile</CODE> or <CODE DISPLAY="INLINE">errRemFile</CODE> exceptions (see <PTR TO="SUBSECTION.GENEXCEPTIONS"></PTR>).
</P></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">fetchRate</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">fetchRate(<VAR TYPE="PROG" MODE="OUT">Rate</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Returns the current transmission rate <VAR TYPE="PROG">Rate</VAR> computed as the average of the last <VAR TYPE="PROG">Smpl</VAR> (see <PTR TO="SUBSECTION.INPRMS"></PTR>) instanteous rates.
</P.SILENT></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">init</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">init</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class.

</P.SILENT></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">service</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">service(<VAR TYPE="PROG" MODE="IN">Meth</VAR> <VAR TYPE="PROG" MODE="IN">Url</VAR> <VAR TYPE="PROG" MODE="IN">InPrms</VAR> <VAR TYPE="PROG" MODE="IN">Pairs</VAR> <VAR TYPE="PROG" MODE="OUT">OutPrms</VAR> <VAR TYPE="PROG" MODE="OUT">HttpPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session according to the given method <VAR TYPE="PROG">Meth</VAR> and fetches the document specified by the <VAR TYPE="PROG">Url</VAR>. <VAR TYPE="PROG">Meth</VAR> has to be one of the strings <CODE DISPLAY="INLINE">"GET"</CODE> or <CODE DISPLAY="INLINE">"POST"</CODE> for ordinary, gateway <EM DISPLAY="INLINE">GET</EM> and gateway <EM DISPLAY="INLINE">ISINDEX</EM> or gateway <EM DISPLAY="INLINE">POST</EM> HTTP requests, respectively. <VAR TYPE="PROG">Pairs</VAR> has to be a list of <CODE DISPLAY="INLINE">"name=value"</CODE> strings in the case of gateway <EM DISPLAY="INLINE">GET</EM> and gateway <EM DISPLAY="INLINE">POST</EM>, a <CODE DISPLAY="INLINE">"value"</CODE> string in the case of gateway <EM DISPLAY="INLINE">ISINDEX</EM> or unbound in the case of ordinary HTTP requests. All the other classes present in this module specialise this method.</P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG">OutPrms</VAR> and the HTTP headers, namely <VAR TYPE="PROG">HttpPrms</VAR>. It throws all the exceptions described in (see <PTR TO="SECTION.EXCEPTIONS"></PTR>) but <CODE DISPLAY="INLINE">errRemFile</CODE>.  </P><P>For the explanation of all the other method's parameters refer to <PTR TO="SECTION.INOUTPRMS"></PTR>.
</P></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">startTemp</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">startTemp</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Continues the current communication session from the point <CODE DISPLAY="INLINE">stopTemp</CODE> method temporarely stoped it.
</P.SILENT></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">stopTemp</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">stopTemp</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Temporarely stops the current communication session it. It can be continued by invoking the <CODE DISPLAY="INLINE">startTemp</CODE> method.
</P.SILENT></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE><CODE DISPLAY="INLINE">HttpClient.cgiGET</CODE> class </TITLE></FRONT><P><CODE DISPLAY="INLINE">HttpClient.cgiGET</CODE> is a specialisation of the <CODE DISPLAY="INLINE">HttpClient.service</CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"></PTR> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE">HttpClient.cgiGET</CODE> class provides the programmer with the possibility of retrieving documents over the network, associating the parameters parsing with the gateway <EM DISPLAY="INLINE">GET</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT><CODE DISPLAY="INLINE">init</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">init(<VAR TYPE="PROG" MODE="IN">InPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG">InPrms</VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG">InPrms</VAR> refer to <PTR TO="SUBSECTION.INPRMS"></PTR>.
</P></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">getService</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">getService(<VAR TYPE="PROG" MODE="IN">Url</VAR> <VAR TYPE="PROG" MODE="IN">CgiPairs</VAR> <VAR TYPE="PROG" MODE="OUT">OutPrms</VAR> <VAR TYPE="PROG" MODE="OUT">HttpPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session associating <VAR TYPE="PROG">CgiPairs</VAR> parameters parsing with the gateway <EM DISPLAY="INLINE">GET</EM> HTTP requests and fetches the document specified by the <VAR TYPE="PROG">Url</VAR>. <VAR TYPE="PROG">CgiPairs</VAR> has to be a list of <CODE DISPLAY="INLINE">"name=value"</CODE> strings (e.g. <CODE DISPLAY="INLINE">["Age=35" "Occupation=research assistant"]</CODE>). </P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG">OutPrms</VAR> and the HTTP headers, namely <VAR TYPE="PROG">HttpPrms</VAR>. It throws all the exceptions described in (see <PTR TO="SECTION.EXCEPTIONS"></PTR>) but <CODE DISPLAY="INLINE">errRemFile</CODE>.  </P><P>For the explanation of all the other input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"></PTR>.
</P></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE><CODE DISPLAY="INLINE">HttpClient.cgiPOST</CODE> class </TITLE></FRONT><P><CODE DISPLAY="INLINE">HttpClient.cgiPOST</CODE> is a specialisation of the <CODE DISPLAY="INLINE">HttpClient.service</CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"></PTR> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE">HttpClient.cgiPOST</CODE> class provides the programmer with the possibility of retrieving documents over the network, associating the parameters parsing with the gateway <EM DISPLAY="INLINE">POST</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT><CODE DISPLAY="INLINE">init</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">init(<VAR TYPE="PROG" MODE="IN">InPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG">InPrms</VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG">InPrms</VAR> refer to <PTR TO="SUBSECTION.INPRMS"></PTR>.
</P></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">getService</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">getService(<VAR TYPE="PROG" MODE="IN">Url</VAR> <VAR TYPE="PROG" MODE="IN">CgiPairs</VAR> <VAR TYPE="PROG" MODE="OUT">OutPrms</VAR> <VAR TYPE="PROG" MODE="OUT">HttpPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session associating <VAR TYPE="PROG">CgiPairs</VAR> parameters parsing with the gateway <EM DISPLAY="INLINE">POST</EM> HTTP requests and fetches the document specified by the <VAR TYPE="PROG">Url</VAR>. <VAR TYPE="PROG">CgiPairs</VAR> has to be a list of <CODE DISPLAY="INLINE">"name=value"</CODE> strings.</P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG">OutPrms</VAR> and the HTTP headers, namely <VAR TYPE="PROG">HttpPrms</VAR>. It throws all the exceptions described in (see <PTR TO="SECTION.EXCEPTIONS"></PTR>) but <CODE DISPLAY="INLINE">errRemFile</CODE>.  </P><P>For the explanation of all the other input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"></PTR>.
</P></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE><CODE DISPLAY="INLINE">HttpClient.cgiISINDEX</CODE> class </TITLE></FRONT><P><CODE DISPLAY="INLINE">HttpClient.cgiISINDEX</CODE> is a specialisation of the <CODE DISPLAY="INLINE">HttpClient.service</CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"></PTR> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE">HttpClient.cgiISINDEX</CODE> class provides the programmer with the possibility of retrieving documents over the network, associating the parameters parsing with the gateway <EM DISPLAY="INLINE">ISINDEX</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT><CODE DISPLAY="INLINE">init</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">init(<VAR TYPE="PROG" MODE="IN">InPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG">InPrms</VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG">InPrms</VAR> refer to <PTR TO="SUBSECTION.INPRMS"></PTR>.
</P></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">getService</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">getService(<VAR TYPE="PROG" MODE="IN">Url</VAR> <VAR TYPE="PROG" MODE="IN">IndexPairs</VAR> <VAR TYPE="PROG" MODE="OUT">OutPrms</VAR> <VAR TYPE="PROG" MODE="OUT">HttpPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session associating <VAR TYPE="PROG">IndexPairs</VAR> parameters parsing with the gateway <EM DISPLAY="INLINE">ISINDEX</EM> HTTP requests and fetches the document specified by the <VAR TYPE="PROG">Url</VAR>. <VAR TYPE="PROG">IndexPairs</VAR> has to be a <CODE DISPLAY="INLINE">"value"</CODE> string (e.g. <CODE DISPLAY="INLINE">"research assistant"</CODE>).</P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG">OutPrms</VAR> and the HTTP headers, namely <VAR TYPE="PROG">HttpPrms</VAR>. It throws all the exceptions described in (see <PTR TO="SECTION.EXCEPTIONS"></PTR>) but <CODE DISPLAY="INLINE">errRemFile</CODE>.  </P><P>For the explanation of all the other input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"></PTR>.
</P></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE><CODE DISPLAY="INLINE">HttpClient.urlGET</CODE> class </TITLE></FRONT><P><CODE DISPLAY="INLINE">HttpClient.urlGET</CODE> is a specialisation of the <CODE DISPLAY="INLINE">HttpClient.service</CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"></PTR> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE">HttpClient.urlGET</CODE> class provides the programmer with the possibility of retrieving documents over the network using ordinary <EM DISPLAY="INLINE">GET</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT><CODE DISPLAY="INLINE">init</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">init(<VAR TYPE="PROG" MODE="IN">InPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG">InPrms</VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG">InPrms</VAR> refer to <PTR TO="SUBSECTION.INPRMS"></PTR>.
</P></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">getService</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">getService(<VAR TYPE="PROG" MODE="IN">Url</VAR> <VAR TYPE="PROG" MODE="OUT">OutPrms</VAR> <VAR TYPE="PROG" MODE="OUT">HttpPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session and fetches the document specified by the <VAR TYPE="PROG">Url</VAR>.</P.SILENT><P>As output, it returns two records containing both the content of the fetched document, namely <VAR TYPE="PROG">OutPrms</VAR> and the HTTP headers, namely <VAR TYPE="PROG">HttpPrms</VAR>. It throws all the exceptions described in (see <PTR TO="SUBSECTION.GENEXCEPTIONS"></PTR>) but <CODE DISPLAY="INLINE">errRemFile</CODE>.  </P><P>For the entire explanation of the input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"></PTR>.
</P></ITEM></LIST></P></SECTION><SECTION><FRONT><TITLE><CODE DISPLAY="INLINE">HttpClient.urlHEAD</CODE> class </TITLE></FRONT><P><CODE DISPLAY="INLINE">HttpClient.urlHEAD</CODE> is a specialisation of the <CODE DISPLAY="INLINE">HttpClient.service</CODE> class. All the public and protected methods described in <PTR TO="SECTION.HTTPCLIENT.SERVICE"></PTR> corespondes to this class, too.</P><P>The <CODE DISPLAY="INLINE">HttpClient.urlHEAD</CODE> class provides the programmer with the possibility of retrieving the HTTP headers of the documents over the network using <EM DISPLAY="INLINE">HEAD</EM> HTTP requests.

<LIST DISPLAY="DISPLAY"><ENTRY><P.SILENT><CODE DISPLAY="INLINE">init</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">init(<VAR TYPE="PROG" MODE="IN">InPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Initialise the class with the given <VAR TYPE="PROG">InPrms</VAR> input parameter.</P.SILENT><P>
For the entire explanation of <VAR TYPE="PROG">InPrms</VAR> refer to <PTR TO="SUBSECTION.INPRMS"></PTR>.
</P></ITEM><ENTRY><P.SILENT><CODE DISPLAY="INLINE">getService</CODE></P.SILENT></ENTRY><SYNOPSIS><P.SILENT><CODE DISPLAY="DISPLAY">getService(<VAR TYPE="PROG" MODE="IN">Url</VAR> <VAR TYPE="PROG" MODE="OUT">OutPrms</VAR> <VAR TYPE="PROG" MODE="OUT">HttpPrms</VAR>)</CODE></P.SILENT></SYNOPSIS><ITEM><P.SILENT>Opens an HTTP communication session and fetches the HTTP headers of the document specified by the <VAR TYPE="PROG">Url</VAR>. Thus, the content of the document is not fetched.</P.SILENT><P>As output, it returns the <VAR TYPE="PROG">OutPrms</VAR> record with its <VAR TYPE="PROG">sOut</VAR> feature's field being unbound, and the <VAR TYPE="PROG">HttpPrms</VAR> record containing the HTTP headers. It throws all the exceptions described in (see <PTR TO="SUBSECTION.GENEXCEPTIONS"></PTR>) but <CODE DISPLAY="INLINE">errRemFile</CODE>.  </P><P>For the entire explanation of the input and output parameters refer to <PTR TO="SECTION.INOUTPRMS"></PTR>.
</P></ITEM></LIST></P></SECTION></CHAPTER><CHAPTER ID="CHAPTER.EXAMPLES"><FRONT><TITLE>Tutorial Examples</TITLE></FRONT><P>The examples given in this chapter are functors. As we've stated before, in <PTR TO="CHAPTER.HTTPCLIENT"></PTR>, the main programming interface of the <CODE DISPLAY="INLINE">HttpClient</CODE> package is provided by the specialised classes found within <CODE DISPLAY="INLINE">HttpClient</CODE> module, namely <CODE DISPLAY="INLINE">CgiGET</CODE>, <CODE DISPLAY="INLINE">CgiPOST</CODE>, <CODE DISPLAY="INLINE">CgiISINDEX</CODE>, <CODE DISPLAY="INLINE">UrlGET</CODE> and <CODE DISPLAY="INLINE">UrlHEAD</CODE>. In order to use them, we have to <CODE DISPLAY="INLINE">import</CODE> <CODE DISPLAY="INLINE">'HttpClient.ozf'</CODE> module in our examples.
</P><SECTION><FRONT><TITLE>Download a document</TITLE></FRONT><P>This short example shows how a document located at <CODE DISPLAY="INLINE">Url</CODE> can be downloaded using <CODE DISPLAY="INLINE">HttpClient.getUrl</CODE> class. The first step is the initialisation of the class, using <CODE DISPLAY="INLINE">init</CODE> method. Remark that the provided input parameters are unbound. In this case they will be given default values. The second step is calling the <CODE DISPLAY="INLINE">getService</CODE> method, thus invoking the service. We don't want to reach the output parameters so we unbound them.</P><P>The content of the donloaded document will be put into the file having the given <CODE DISPLAY="INLINE">Url</CODE> based name, <CODE DISPLAY="INLINE">"index.html"</CODE> in our case.

 </P><PARA><TITLE><REF.EXTERN TO="exmpl1.oz">Source
File</REF.EXTERN></TITLE>
<CODE.EXTERN PROGLANG="OZ" TO="exmpl1.oz" DISPLAY="DISPLAY"/></PARA><P><CODE DISPLAY="INLINE">HttpClient.getHEAD</CODE> class can be used in the same manner. In this case the content of the document will not be fetched, but its HTTP headers will be returned.
</P></SECTION><SECTION><FRONT><TITLE>Build CGI queries</TITLE></FRONT><P>This example shows how <CODE DISPLAY="INLINE">HttpClient.cgiGET</CODE> class can be used to build CGI queries (i.e. to Yahoo web search engine). The query is given by <CODE DISPLAY="INLINE">CgiParams</CODE> which is a list of <CODE DISPLAY="INLINE">"name=value"</CODE> strings. In our very case, we want to retrieve a list of all documents related with the keyword <CODE DISPLAY="INLINE">"travel"</CODE>. Since the name of the file the retrieved document should be put is provided, it will be used. </P><P>The size of bytes of the requested document <CODE DISPLAY="INLINE">OutPrms.sizeRead</CODE> read from the socket is displayed. Since it is a string, the name of the peer <CODE DISPLAY="INLINE">HttpPrms.server</CODE> is displayed as an atom, so we can easily see it.

 </P><PARA><TITLE><REF.EXTERN TO="exmpl2.oz">Source
File</REF.EXTERN></TITLE>
<CODE.EXTERN PROGLANG="OZ" TO="exmpl2.oz" DISPLAY="DISPLAY"/></PARA><P></P><P><CODE DISPLAY="INLINE">HttpClient.cgiPOST</CODE> and <CODE DISPLAY="INLINE">HttpClient.cgiISINDEX</CODE> classes can be used in the same manner. In the latter case <CODE DISPLAY="INLINE">CgiParams</CODE> has to be a string.
</P></SECTION><SECTION><FRONT><TITLE>Use of the module functionalities</TITLE></FRONT><P>Among the examples presented in this chapter, this one is the most complex and involves the use of the <CODE DISPLAY="INLINE">fetchRate</CODE>, <CODE DISPLAY="INLINE">bytesRead</CODE>, <CODE DISPLAY="INLINE">stopTemp</CODE> and <CODE DISPLAY="INLINE">startTemp</CODE> methods. It will display the transmission rate each 300 ms and the number of bytes of the document read at that time, by calling <CODE DISPLAY="INLINE">GetRate</CODE> procedure. </P><P>After a period of 850 ms the transmission will be temporarely stoped and continued after other 3000 ms period. </P><P>Since <CODE DISPLAY="INLINE">toStrm</CODE> feature is set <CODE DISPLAY="INLINE">true</CODE> and <CODE DISPLAY="INLINE">toFile</CODE> one is <CODE DISPLAY="INLINE">true</CODE> by default, the document will be both saved into the provided name <CODE DISPLAY="INLINE">"temp"</CODE> file, and returned as a byte stream to be processed by the <CODE DISPLAY="INLINE">ProcessStrm</CODE> procedure.

 </P><PARA><TITLE><REF.EXTERN TO="exmpl3.oz">Source
File</REF.EXTERN></TITLE>
<CODE.EXTERN PROGLANG="OZ" TO="exmpl3.oz" DISPLAY="DISPLAY"/></PARA></SECTION><SECTION><FRONT><TITLE>Parallel documents retrieval</TITLE></FRONT><P>This small example shows how two services can be started in parallel in order to download the same document having different locations <CODE DISPLAY="INLINE">Url1</CODE> and <CODE DISPLAY="INLINE">Url2</CODE>. This will try to fetch the documents while each service runs within its own thread. When one of the services completes or fails, the application exits.

 </P><PARA><TITLE><REF.EXTERN TO="exmpl4.oz">Source
File</REF.EXTERN></TITLE>
<CODE.EXTERN PROGLANG="OZ" TO="exmpl4.oz" DISPLAY="DISPLAY"/></PARA></SECTION></CHAPTER><CHAPTER ID="CHAPTER.APPLICATIONS"><FRONT><TITLE>Demo Applications</TITLE></FRONT><P>In <PTR TO="CHAPTER.EXAMPLES"></PTR> we described some useful examples of how to use <CODE DISPLAY="INLINE">HttpClient</CODE> package. In this chapter we'll present some concrete applications which use this package.
</P><SECTION><FRONT><TITLE>Web Browser</TITLE></FRONT><P>In this section we present a simple application whose main goal is to provide a graphical user interface of <CODE DISPLAY="INLINE">HttpClient</CODE> package. The flexibility of the package's interface is reflected within the main frame's menu. For example, the package's classes are accessible within <CODE DISPLAY="INLINE">Services</CODE> menu, and their optional parameters can me set by using <CODE DISPLAY="INLINE">Options</CODE> menu.
</P><P>As one can see in <PTR TO="FIGURE.BWOZGUI"></PTR>, the fetched document is not interpreted but displayed as it is. Thus, in the case of compressed files (i.e *.gz, *.zip), only displayable characters will be displayed by the Tcl/Tk <CODE DISPLAY="INLINE">text</CODE> widget.

<FIGURE ID="FIGURE.BWOZGUI"><CAPTION><P.SILENT>The GUI of the Web browser</P.SILENT></CAPTION><PICTURE.EXTERN TYPE="GIF" TO="bwoz1.gif" DISPLAY="DISPLAY"/></FIGURE></P><P>For development of this application, <EM DISPLAY="INLINE">Mozart Compiler 1.1.0 (20000111) playing Oz 3</EM> was used. However, it works fine with <EM DISPLAY="INLINE">1.1.0 (19991213)</EM> version, too.
</P><P>The web browser (<REF.EXTERN TO="bwoz.oz">source in <CODE DISPLAY="INLINE">bwoz.oz</CODE></REF.EXTERN>) can be compiled as follows:
<CODE DISPLAY="DISPLAY">ozc -x bwoz.oz</CODE></P><P>and simply invoked as follows:
<CODE DISPLAY="DISPLAY">bwoz</CODE></P></SECTION><SECTION><FRONT><TITLE>Web based Service Combinators</TITLE></FRONT><P>This application was inspired from the paper "Service Combinators for Web Computing" written by Luca Cardelli and Rowan Davies. It has as a starting point the questions related with the possibility of developing a script algorithm which should implement the actions a user, sitting in front of (say) a browser, could perform. These actions can be modeled with the use of special desined web based service combinators and basic services for invoking an HTTP server. </P><P>The application is being developed by <REF.EXTERN TO="mailto:muh@info.ucl.ac.be">Hadim Mustapha</REF.EXTERN> and consists of two main packages. The first one, deals with the user (programmer) interactions, the service combinators formating and certain decisions regarding the status of these services. The latter one is <CODE DISPLAY="INLINE">HttpClient</CODE> package.
</P><P>It will be available in the near future ...

  </P></SECTION></CHAPTER></BODY></BOOK>

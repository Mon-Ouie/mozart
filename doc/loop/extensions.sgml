<!--
  - Authors:
  -   Denys Duchier     <duchier@ps.uni-sb.de>
  -
  - Copyright:
  -   Denys Duchier, 1999
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://www.mozart-oz.org
  -
  - See the file "LICENSE" or
  -    http://www.mozart-oz.org/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->
<chapter id=chapter.extensions>
  <title>Experimental Extensions</title>
  <p>There are 3 categories of experimental extensions: (1) more
general iterators, (2) control extensions, (3) support for loop
expressions and accumulation.</p>
  <section>
    <title/Iterators/
    <p>Some generators have a syntax which is not yet universally
loved.  For this reason they are described in this <q/experimental
section/.  Either the user community can suggest a better syntax or we
can promote the experimental syntax to official status.  However, a
proposal that requires the introduction of a new keyword is unlikely
to be looked upon favorably.
<list>
        <entry><code/X in ?{I}..?{J} ; ?{K}/
        <item>iterates upward from ?{I} to ?{J} by increments of ?{K}.
        <entry><code/X in ?{Init} ; ?{Next}/
        <item>initial value of <code/X/ is ?{Init}.  At each
subsequent iteration, <code/X/ is bound to the result of evaluating
?{Next} in the current scope of the loop.  Thus, an infinite integer
iterator starting at ?{I} and proceeding by increment of <code/K/ can
be written:
<code display/X in ?{I} ; X+K/
      </list>
For example, instead of
<code display/{List.forAllInd L proc {$ I X} ... end}/
you can write
<code display
/for
   X in L
   I in 1 ; I+1
do
   ...
end/
</p>
  </section>
  <section>
    <title/Control/
    <p>All extensions other than iterators use the new experimental
syntax <code/&lt;&lt; ... &gt;&gt;/.  The following extensions permit
finer control on the execution of the loop.  They may occur in the
body of the loop.
<list>
        <entry><code/&lt;&lt;leave&gt;&gt;/
        <entry><code/&lt;&lt;leave X&gt;&gt;/
        <item>immediately terminates the current loop (resp.&nbsp;the
loop identified by variable <code/X/)
        <entry><code/&lt;&lt;while ?{B}&gt;&gt;/
        <item>terminates the current loop when ?{B} evaluates to false.
        <entry><code/&lt;&lt;until ?{B}&gt;&gt;/
        <item>terminates the current loop when ?{B} evaluates to true.
        <entry><code/&lt;&lt;next&gt;&gt;/
        <entry><code/&lt;&lt;next X&gt;&gt;/
        <item>immediately goes on to the next iteration of the current
loop (resp.&nbsp;the loop identified by variable <code/X/)
        <entry><code/&lt;&lt;named X&gt;&gt;/
        <item>The current loop is identified by variable <code/X/.
      </list>
  </section>
  <section>
    <title/Loop Expressions and Accumulation/
    <p>Only loop statements are officially supported.  However loop
expressions are also very convenient; perhaps even more so than
statements.  In order to turn a loop into an expression, it needs to
return a value:  for this reason, each loop expression has a
<q/hidden accumulator/.  The content of this accumulator is returned
when the loop terminates.
<list>
        <entry><code/&lt;&lt;collect ?{E}&gt;&gt;/
        <item>the accumulator is of type <q/list/ and the value of
?{E} is inserted at the end of this list.
        <entry><code/&lt;&lt;append ?{L}&gt;&gt;/
        <item>same as above, except that the value of ?{L} is appended
to the end of the accumulator.
        <entry><code/&lt;&lt;count ?{B}&gt;&gt;/
        <item>the accumulator is of type <q/integer/ and it is
incremented iff ?{B} is true.
        <entry><code/&lt;&lt;sum ?{N}&gt;&gt;/
        <item>the accumulator is of type <q/integer/ and it is
incremented by the value of ?{N}.
        <entry><code/&lt;&lt;maximize ?{N}&gt;&gt;/
        <item>the accumulator is of type <q/integer/ and it records
the maximal value of ?{N}.
        <entry><code/&lt;&lt;minimize ?{N}&gt;&gt;/
        <item>the accumulator is of type <q/integer/ and it records
the minimal value of ?{N}.
      </list>
when <code/&lt;&lt;leave&gt;&gt;/ is executed in a loop expression,
the loop is terminated and the current value of the accumulator is
returned.
</p>
<p>Here is the loop version of <code/{List.zip L1 L2 fun {$ X Y} ... end}/:
<code display
/for X in L1
    Y in L2
do
   &lt;&lt;collect ...&gt;&gt;
end/
unlike <code/List.zip/, however, it doesn't complain if the lists are
of different lengths: it behaves as it the longer one had been
truncated to the length of the smaller one.</p>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
mode: auto-fill
sgml-default-dtd-file: "chapter.ced"
sgml-auto-activate-dtd: t
adaptive-fill-mode: nil
End:
-->

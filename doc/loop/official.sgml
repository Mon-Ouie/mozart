<!--
  - Authors:
  -   Denys Duchier     <duchier@ps.uni-sb.de>
  -
  - Copyright:
  -   Denys Duchier, 1999
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://www.mozart-oz.org
  -
  - See the file "LICENSE" or
  -    http://www.mozart-oz.org/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->
<chapter id=chapter.official>
  <title>Official Features</title>
  <p>In order to provide convenient syntax for loops, two new keywords
have been introduced in Mozart&nbsp;1.1.0: <code/for/ and <code/do/.
Thus, a new statement is introduced in the Oz language and its syntax is:
<code display/for ?{Iterators} do ... end/
where ?{Iterators} is a sequence of 1 or more iterators.  An iterator
has the form:
<code>?{X} in ?{Generator}</code>
where ?{Generator} describes how to generate the successive values for
variable ?{X}, which is a variable local to the loop.  The loop
terminates as soon as one of the generators runs out of values.
</p>
  <para><title/Iterators/
These are the iterators officially supported in Mozart&nbsp;1.1.0.
<list>
        <entry><code/X in ?{L}/
        <item>iterates over the elements of list ?{L}.  At each
iteration, <code/X/ is bound to the next element in ?{L}.  The
generator runs out when all elements in ?{L} have been consumed.
        <entry><code/X in ?{I}..?{J}/
        <item>iterates over the integers from ?{I} to ?{J} (both
inclusive).  At each iteration <code/X/ is bound to the next integer
in this sequence.  More precisely, the sequence starts at ?{I} and
proceeds by increments of 1 as long as it remains less than or equal
to ?{J}.
    </list>
</para>
</chapter>
<!--
Local Variables:
mode: sgml
mode: auto-fill
sgml-default-dtd-file: "chapter.ced"
sgml-auto-activate-dtd: t
adaptive-fill-mode: nil
End:
-->

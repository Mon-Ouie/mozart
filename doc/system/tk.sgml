<!--
  - Authors:
  -   Christian Schulte <schulte@dfki.de>
  -
  - Contributors:
  -   Daniel Simon <dansim@ps.uni-sb.de>
  -   Andy Walter <anwalt@ps.uni-sb.de>
  -
  - Copyright:
  -   Christian Schulte, 1998
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://mozart.ps.uni-sb.de
  -
  - See the file "LICENSE" or
  -    http://mozart.ps.uni-sb.de/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->

<chapter id="chapter.tk">
<title/The Module <<Tk>>/

  <p>
   This chapter contains reference information for the <<Tk>> module.

  <section id="section.tk.tickles">
    <title/Tickles/

    <p>
      <index class=module/tickles<and>id/ <def/Tickles/ are &Oz; values
      used to communicate with the graphics engine. The graphics engine
      receives and executes tickles. The graphics engine is
      implemented in Tcl/Tk (see <ptr to="Ousterhout.94">). In order
      to execute tickles the graphics engine first translates tickles
      into strings. This section defines tickles,
      defines how tickles are translated into strings, and presents
      the &Oz; procedures to send tickles.

    <subsection id="section.tk.tickles.syntax">
      <title/Syntax/

    <p>
      The set of tickles contains virtual strings, boolean values, and
      so-called tickle-objects. A tickle-object is an object which is
      created from a class the Tk module provides for (all classes but
      <<Tk.listener>>). Roughly spoken, the set of tickles is closed
      under record construction, where only records are allowed which
      do not contain names as features or as label. Proper records with
      the labels <<v>>, <<b>>, <<#>>, and <<|>> are special
      cases. Examples for tickles can be found in <ptr.extern
      to="ozdoc:wp" key="section.widgets-1.tickles">.

    <figure id="figure.tk.tickle-def">
      <caption/Procedure <<IsTcl>> tests whether a value is tickle./
<chunk class=anonymous><title/IsTcl/
fun {IsTcl X}
   {IsBool X} orelse {IsUnit X} orelse
   {IsVirtualString X} orelse
   {IsTclObject X} orelse
   {IsRecord X} andthen
   {Not {Some {Arity X} IsName}} andthen
   {Not {IsName {Label X}}} andthen
   case {Label X}
   of  v  then {Arity X}==[1] andthen {IsVirtualString X.1}
   []  b  then {Arity X}==[1] andthen {All X.1 IsTcl}
   []  c  then {Arity X}==[1 2 3] andthen
               {All X fun {$ I} I>=0 andthen I<=255 end}
   [] '#' then false
   [] '|' then false
   else {Record.all X IsTcl}
   end
end
</chunk>
    </figure>

    <p>
      The exact definition of a tickle is given by the procedure
      <<IsTcl>> which is shown in <Ptr to="figure.tk.tickle-def">. The
      procedure <<IsTcl>> returns <<true>>, if and only if <<X>> is a
      tickle. Otherwise <<false>> is returned. The procedure
      <<IsTclObject>> tests whether an object is a tickle-object. Note
      that records which have the labels <<#>> and <<|>> are treated
      as virtual strings.

    <subsection id="section.tk.tickles.translation">
      <title/Translation to Virtual Strings/

    <p>
      The translation of a tickle into a virtual string that then by the
      graphics agent is interpreted as a tcl command is shown in <ptr
      to="figure.tk.tickle-trans">. The used help routines are shown
      in <ptr to="figure.tk.tickle-trans-help">.

    <figure id="figure.tk.tickle-trans">
      <caption/Procedure <<TclToV>> translates a tickle into a virtual
       string./
<chunk class=anonymous><title/TclToV/
local
   fun {FieldToV AI Tcl}
      if {IsInt AI} then '' else '-'#{Quote AI}#' ' end # {TclToV Tcl}
   end
   fun {RecordToV R AIs}
      {FoldR AIs fun {$ AI V}
                    {FieldToV AI R.AI} # ' ' # V
                 end ''}
   end
in
   fun {TclToV Tcl}
      if {IsBool Tcl} then case Tcl then 0 else 1 end
      elseif Tcl==Unit then ''
      elseif {IsVirtualString Tcl} then {Quote Tcl}
      elseif {IsTclObject Tcl} then {TclObjectToV Tcl}
      else
        case {Label Tcl}
        of o then {RecordToV Tcl {Arity Tcl}}
        [] p then AI|AIs={Arity Tcl} in
           '{'#{FieldToV AI Tcl.AI}#'.'#{RecordToV Tcl AIs}#'}'
        [] b then {FoldR Tcl.1 fun {$ Tcl V}
                                  {TclToV Tcl}#' '#V
                               end ''}
        [] c then '#'#{Hex Tcl.1}#{Hex Tcl.2}#{Hex Tcl.3}
        [] v then Tcl.1
        [] s then '"'#{RecordToV Tcl {Arity Tcl}}#'"'
        [] l then '['#{RecordToV Tcl {Arity Tcl}}#']'
        [] q then '{'#{RecordToV Tcl {Arity Tcl}}#'}'
        else {Quote {Label Tcl}}#' '#{RecordToV Tcl {Arity Tcl}}
        end
      end
   end
end
</chunk>
    </figure>

    <figure id="figure.tk.tickle-trans-help">
      <caption/Help routines to translate a tickle into a virtual
       string./
<p>
<chunk><title/Definition of Octal/
fun {Octal I}
   [&\\ (I div 64 + &0) ((I mod 64) div 8 + &0) (I mod 8 + &0)]
end
</chunk>
<chunk><title/Definition of Quote/
fun {Quote V}
   case {VirtualString.toString V} of nil then "\"\""
   [] S then
      {FoldR S fun {$ I Ir}
                  if {Member I "{}[]\\$\";"} then &\\|I|Ir
                  elseif I<33 orelse I>127 then {Append {Octal I} Ir}
                  else I|Ir
                  end
               end nil}
   end
end
</chunk>
<chunk><title/Definition of Hex/
local
   fun {HexDigit I}
      I + if I>9 then &amp;a-10 else &amp;0 end
   end
in
   fun {Hex I}
      [{HexDigit I div 16} {HexDigit I mod 16}]
   end
end
</chunk>
    </figure>


    <subsection id="section.tk.tickles.send">
      <title/Sending Tickles/

      <p>
        Tickles can be send to the graphics engine with the following
        procedures. The graphics engine processes tickles in batches:
        it reads a batch of tickles and executes it. If no further
        batch can be read currently, it updates the graphics. After
        having updated the graphics, it checks whether user events are
        to be processed.

      <p>
        The Oz procedures to send tickles are asynchronous and
        preserve order: all tickles are processed in the same order
        they are send in. However, after the procedure has been
        executed, the graphics engine might not yet have executed the
        tickle.

      <p>
        <list>
          <entry><<send>> <index class=module/Tk<and>send/
          <synopsis>
            <<{Tk.send ?+{Tcl}}>>
          <item>
            Sends ?+{Tcl} to the graphics engine.

          <entry> <<batch>> <index class=module/Tk<and>batch/
          <synopsis>
            <<{Tk.batch ?+{TclS}}>>
          <item>
            Sends a list of list of tickles ?+{TclS} to the graphics
            engine. It is guaranteed that the graphics engine
            processes all tickles in ?_{TclS} in a single batch.
        </list>

    </subsection>

    <subsection id="section.tk.return-values">
      <title/Sending Tickles and Returning Values/

      <p>
        In the same way as sending tickles to graphics engine, the
        engine can asynchronously send back return values which are
        strings. The following procedures send tickles and
        return the values returned by executing the tickles by the
        graphics engine.

      <p>
        <list>
          <entry> <<returnString>>
            <index class=module/Tk<and>returnString/
          <synopsis>
            <<{Tk.returnString ?+{Tcl} ??{S}}>>
          <item>
            Returns the result of sending and executing ?+{Tcl} as string.

          <entry> <<return>> <index class=module/Tk<and>return/
          <synopsis>
            <<{Tk.return ?+{Tcl} ??{S}}>>
          <item>
            Shortcut for <<Tk.returnString>>.

          <entry> <<returnAtom>>
            <index class=module/Tk<and>returnAtom/
          <synopsis>
            <<{Tk.returnAtom ?+{Tcl} ??{A}}>>
          <item>
            Returns the result of sending and executing ?+{Tcl} as string.

          <entry> <<returnInt>>
            <index class=module/Tk<and>returnInt/
          <synopsis>
            <<{Tk.returnInt ?+{Tcl} ??{IB}}>>
          <item>
            Returns the result of sending and executing ?+{Tcl} as
            integer. If the result does not describe a number
            <<false>> is returned.

          <entry> <<returnFloat>>
            <index class=module/Tk<and>returnFloat/
          <synopsis>
            <<{Tk.returnFloat ?+{Tcl} ??{FB}}>>
          <item>
            Returns the result of sending and executing ?+{Tcl} as
            float. If the result does not describe a number <<false>>
            is returned.

          <entry> <<returnListString>>
            <index class=module/Tk<and>returnListString/
          <synopsis>
            <<{Tk.returnListString ?+{Tcl} ??{Ss}}>>
          <item>
            Returns the result of sending and executing ?+{Tcl} as
            list of strings.

          <entry> <<returnList>>
            <index class=module/Tk<and>returnList/
          <synopsis>
            <<{Tk.returnList ?+{Tcl} ??{Ss}}>>
          <item>
            Shortcut for <<Tk.returnListString>>.

          <entry> <<returnListAtom>>
            <index class=module/Tk<and>returnListAtom/
          <synopsis>
            <<{Tk.returnListAtom ?+{Tcl} ??{ABs}}>>
          <item>
            Returns the result of sending and executing ?+{Tcl} as
            list of atoms. If elements of the list do not form valid
            atoms, the list contains the element <<false>> instead.

          <entry> <<returnListInt>>
            <index class=module/Tk<and>returnListInt/
          <synopsis>
            <<{Tk.returnListInt ?+{Tcl} ??{IBs}}>>
          <item>
            Returns the result of sending and executing ?+{Tcl} as
            list of integers. If elements of the list do not form valid
            numbers, the list contains the element <<false>> instead.

          <entry> <<returnListFloat>>
            <index class=module/Tk<and>returnListFloat/
          <synopsis>
            <<{Tk.returnListFloat ?+{Tcl} ??{FBs}}>>
          <item>
            Returns the result of sending and executing ?+{Tcl} as
            list of integers. If elements of the list do not form valid
            numbers, the list contains the element <<false>> instead.

        </list>

      </subsection>

  </section>

  <section id="section.tk.objects">
    <title/Tickle Objects/

    <p>
      Rather than programming with tickles directly, all graphical
      entities are provided as classes. To these classes we refer to
      as <def/tickle classes/ and to their instances as <def/tickle
      objects/. Applying a tickle object to a message translates it
      in a straightforward way into a tickle.

    <figure id="figure.tk.hierarchy">
      <caption/Hierarchy of tickle objects./
<picture latex>
\newcommand{\OzClass}[3]{%
\rput(#1,#2){\psframe[fillcolor=lightgray,fillstyle=solid,boxsep=false,framearc=.3](-0.35,-0.4)(0.35,0.4)\makebox(0,0){\texttt{#3}}}}
\newcommand{\clc}[4]{\psline{-}(#1,#2)(#3,#4)}
\newcommand{\ViClass}[3]{%
\rput(#1,#2){\psframe[fillcolor=white,fillstyle=solid,boxsep=false,framearc=.3](-0.35,-0.4)(0.35,0.4)\makebox(0,0){\texttt{#3}}}}

\psset{xunit=3cm,yunit=0.55cm,runit=.26cm,framearc=0,linewidth=.75pt}% ,arcangle=15}
\begin{pspicture}(-0.5,-0.5)(3.5,23.5)\footnotesize
\OzClass{3}{23}{canvas}\OzClass{3}{22}{entry}
\OzClass{3}{21}{frame}\OzClass{3}{20}{label}
\OzClass{3}{19}{listbox}\OzClass{3}{18}{menu}
\OzClass{3}{17}{menubutton}\OzClass{3}{16}{message}
\OzClass{3}{15}{text}\OzClass{3}{14}{button}
\OzClass{3}{13}{checkbutton}\OzClass{3}{12}{radiobutton}
\OzClass{3}{11}{scale}\OzClass{3}{10}{scrollbar}
\ViClass{2}{19}{no action}
\clc{2.35}{19}{2.65}{23}\clc{2.35}{19}{2.65}{22}
\clc{2.35}{19}{2.65}{21}\clc{2.35}{19}{2.65}{20}
\clc{2.35}{19}{2.65}{19}\clc{2.35}{19}{2.65}{18}
\clc{2.35}{19}{2.65}{17}\clc{2.35}{19}{2.65}{16}
\clc{2.35}{19}{2.65}{15}
\ViClass{2}{12}{action}
\clc{2.35}{12}{2.65}{14}\clc{2.35}{12}{2.65}{13}
\clc{2.35}{12}{2.65}{12}\clc{2.35}{12}{2.65}{11}
\clc{2.35}{12}{2.65}{10}
\OzClass{2}{11}{toplevel}\OzClass{2}{10}{cascade}
\OzClass{2}{09}{checkbutton}\OzClass{2}{08}{command}
\OzClass{2}{07}{radiobutton}\OzClass{2}{06}{separator}
\OzClass{2}{05}{canvas tag}\OzClass{2}{04}{text tag}
\OzClass{2}{03}{text mark}
\ViClass{1}{15}{widget}
\clc{1.35}{15}{1.65}{19}\clc{1.35}{15}{1.65}{12}
\clc{1.35}{15}{1.65}{11}
\ViClass{1}{08}{menuentry}
\clc{1.35}{08}{1.65}{10}\clc{1.35}{08}{1.65}{09}
\clc{1.35}{08}{1.65}{08}\clc{1.35}{08}{1.65}{07}
\clc{1.35}{08}{1.65}{06}
\ViClass{1}{04}{tag or mark}
\clc{1.35}{04}{1.65}{05}\clc{1.35}{04}{1.65}{04}
\clc{1.35}{04}{1.65}{03}
\OzClass{1}{03}{image}\OzClass{1}{02}{font}
\OzClass{1}{01}{action}\OzClass{1}{00}{variable}
\ViClass{0}{09}{Tcl object}
\clc{0.35}{09}{0.65}{15}\clc{0.35}{09}{0.65}{08}
\clc{0.35}{09}{0.65}{04}\clc{0.35}{09}{0.65}{03}
\clc{0.35}{09}{0.65}{02}\clc{0.35}{09}{0.65}{01}
\clc{0.35}{09}{0.65}{00}
\end{pspicture}
      </picture>
      </figure>

    <p>
      The available tickle classes are shown in <ptr
      to="figure.tk.hierarchy">, where the classes that are shadowed
      gray are classes provided by the tk module, the others are just
      conceptual.

    <p>
      To give a convenient translation from the message to a tickle,
      we will use the following procedure that takes a <<Message>>,
      removes the features <<Remove>> of the <<Message>> and adjoins
      the record <<Add>> to it.

<figure id="figure.tk.tclify">
<caption/Procedure <<Tclify>> transforms a message into a tickle./
<<<fun {Tclify Message Remove Add}
   {Adjoin {FoldL Remove fun {$ F M}
                            {Record.subtract M F}
                         end
                  Message}
           Add}
end
>>>
</figure>

    <subsection id="section.tk.tkInit">
       <title/Initialization: <<tkInit>>/

    <subsection id="section.tk.tk">
       <title/Commands: <<tk>>/

    <subsection id="section.tk.tkReturn">
       <title/Commands with return value: <<tkReturn>>/

    <subsection id="section.tk.tkBind">
       <title/Event bindings: <<tkBind>>/


  <section id="section.tk.no-action">
    <title/No-Action Widgets/

    <p>
      <table>
        <tr/ <th/Widget/ <th/Example/ <th/Reference//
        <tr/ <td/canvas/
             <td/<ptr.extern to="ozdoc:wp" key="chapter.canvas"/
             <td/<ref.extern to="&tkcmd;/canvas.htm"/<file/canvas////
        <tr/ <td/entry/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-2.entry"/
             <td/<ref.extern to="&tkcmd;/entry.htm"/<file/entry////
        <tr/ <td/frame/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-1.frame"/
             <td/<ref.extern to="&tkcmd;/frame.htm"/<file/frame////
        <tr/ <td/label/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-1.label"/
             <td/<ref.extern to="&tkcmd;/label.htm"/<file/label////
        <tr/ <td/listbox/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-2.listbox"/
             <td/<ref.extern to="&tkcmd;/listbox.htm"/<file/listbox////
        <tr/ <td/menu/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-2.menu"/
             <td/<ref.extern to="&tkcmd;/menu.htm"/<file/menu////
        <tr/ <td/menubutton/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-2.menu"/
             <td/<ref.extern to="&tkcmd;/menubutton.htm"/<file/menubutton////
        <tr/ <td/message/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-1.messages"/
             <td/<ref.extern to="&tkcmd;/message.htm"/<file/message////
        <tr/ <td/text/
             <td/<ptr.extern to="ozdoc:wp" key="chapter.text"/
             <td/<ref.extern to="&tkcmd;/text.htm"/<file/text////
      </table>

  </section>


  <section id="section.tk.action-widget">
    <title/Action Widgets/

    <p>
      <table>
        <tr/ <th/Widget/ <th/Example/ <th/Reference//
        <tr/ <td/button/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-2.button"/
             <td/<ref.extern to="&tkcmd;/button.htm"/<file/button////
        <tr/ <td/checkbutton/
             <td/<ptr.extern to="ozdoc:wp"
                             key="section.widgets-2.otherbuttons"/
             <td/<ref.extern to="&tkcmd;/checkbutton.htm"/<file/checkbutton////
        <tr/ <td/radiobutton/
             <td/<ptr.extern to="ozdoc:wp"
                             key="section.widgets-2.otherbuttons"/
             <td/<ref.extern to="&tkcmd;/radiobutton.htm"/<file/radiobutton////
        <tr/ <td/scale/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-2.scale"/
             <td/<ref.extern to="&tkcmd;/scale.htm"/<file/scale////
        <tr/ <td/scrollbar/
             <td/<ptr.extern to="ozdoc:wp" key="section.widgets-2.listbox"/
             <td/<ref.extern to="&tkcmd;/scrollbar.htm"/<file/scrollbar////
      </table>

    <p>

  </section>


  <section id="section.tk.toplevel">
    <title/Toplevel Widgets/

    <p>

  </section>


  <section id="section.tk.menuentry">
    <title/Menu Entries/

    <p>

  </section>


  <section id="section.tk.tagmark">
    <title/Tags And Marks/

    <p>

  </section>


  <section id="section.tk.image">
    <title/Images/

    <p>

  </section>


  <section id="section.tk.font">
    <title/Fonts/

    <p>

  </section>


  <section id="section.tk.variable">
    <title/Variables/

    <p>

  </section>


  <section id="section.tk.action">
    <title/Actions/

    <p>

  </section>

  <section id="section.tk.listener">
    <title/Listeners/

    <p>

  </section>


  <section id="section.tk.strings">
    <title/Strings/

    <p>
    <Index scope="section.tk.strings"/Tk<and>string/

    <list>
      <entry> <<toAtom>>
        <index class=module/Tk<and>string<and>toAtom/
      <synopsis>
        <<{Tk.string.toAtom ?+{S} ??{A}}>>
      <item>
        Returns an atom corresponding to the string ?_{S}.

      <entry> <<toInt>>
        <index class=module/Tk<and>string<and>toInt/
      <synopsis>
        <<{Tk.string.toInt ?+{S} ??{IB}}>>
      <item>
        Returns an integer corresponding to the string ?_{S}. If ?_{S}
        does not form a valid number, <<false>> is returned.

      <entry> <<toFloat>>
        <index class=module/Tk<and>string<and>toFloat/
      <synopsis>
        <<{Tk.string.toFloat ?+{S} ??{FB}}>>
      <item>
        Returns a float corresponding to the string ?_{S}. If ?_{S}
        does not form a valid number, <<false>> is returned.

      <entry> <<toListString>>
        <index class=module/Tk<and>string<and>toListString/
      <synopsis>
        <<{Tk.string.toListString ?+{S} ??{Ss}}>>
      <item>
        Returns a list of strings that corresponds to the space
        separated substrings of ?_{S}.

      <entry> <<toListAtom>>
        <index class=module/Tk<and>string<and>toListAtom/
      <synopsis>
        <<{Tk.string.toListAtom ?+{S} ??{As}}>>
      <item>
        Returns a list of atoms that corresponds to the space
        separated substrings of ?_{S}.

      <entry> <<toListInt>>
        <index class=module/Tk<and>string<and>toListInt/
      <synopsis>
        <<{Tk.string.toListInt ?+{S} ??{IBs}}>>
      <item>
        Returns a list of integers that corresponds to the space
        separated number strings of ?_{S}. If one of the substrings
        does not form a valid number, the element will be <<false>>
        rather than an integer.

      <entry> <<toListFloat>>
        <index class=module/Tk<and>string<and>toListFloat/
      <synopsis>
        <<{Tk.string.toListFloat ?+{S} ??{FBs}}>>
      <item>
        Returns a list of floats that corresponds to the space
        separated number strings of ?_{S}. If one of the substrings
        does not form a valid number, the element will be <<false>>
        rather than a float.
    </list>

  </section>


  <section id="section.tk.misc">
    <title/Miscellaneous/
<p>

    <list>
      <entry> <<isColor>>
        <index class=module/Tk<and>isColor/
      <synopsis>
        <<Tk.isColor>>
      <item>
        Is <<true>>, if the current display supports colors.
      <p>
        Is defined as
        <<<Tk.isColor={Tk.returnInt winfo(depth '.')}&gt;1>>>

      <entry> <<addXScrollbar>>
        <index class=module/Tk<and>addXScrollbar/
      <synopsis>
        <<{Tk.addXScrollbar ?+{BarTcl} ?+{ToScrollTcl}}>>
      <item>
        Attaches a horizontal scrollbar defined by ?_{BarTcl} to a
        scrollable widget defined by ?_{ToScrollTcl}.

      <entry> <<addYScrollbar>>
        <index class=module/Tk<and>addYScrollbar/
      <synopsis>
        <<{Tk.addYScrollbar ?+{BarTcl} ?+{ToScrollTcl}}>>
      <item>
        Attaches a vertical scrollbar defined by ?_{BarTcl} to a
        scrollable widget defined by ?_{ToScrollTcl}.

      <entry> <<getId>>
        <index class=module/Tk<and>getId/
      <synopsis>
        <<{Tk.getId ?_{V}}>>
      <item>
        Returns a virtual string ?_{V} that can be used as new unique
        tickle identifier.

      <entry> <<getPrefix>>
        <index class=module/Tk<and>getPrefix/
      <synopsis>
        <<{Tk.getPrefix ?_{V}}>>
      <item>
        Returns a virtual string ?_{V} that can be used as prefix for
        new unique tickle identifiers. It is guaranteed that appending
        integers to ?_{V} yields unique identifiers.

    </list>
  </section>


</chapter>

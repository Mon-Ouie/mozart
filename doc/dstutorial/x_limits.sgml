
<CHAPTER ID="chapter.limits">
  <TITLE>Limitations and Modifications</TITLE>

<P>The current release has the following limitations
and modifications with respect to the specifications
of the distribution model and the failure model.
A <EM>limitation</EM> is an operation that is specified
but not possible in the current release.
A <EM>modification</EM> is an operation that is specified
but behaves differently in the current release.

<P>The limitations and modifications
listed here will be removed in future releases.

<SECTION><TITLE>Limitations</TITLE>

<P>The limitations are:
<list>
<item>The <<Remote>> module does not work under Windows.
Furthermore, on Solaris the number of virtual sites that a machine
can create is limited by the system-wide limit on the number of
shared memory pages.  Under Solaris, the default is
six shared pages per process and 100 system-wide.
This limit can be changed (this requires rebooting the machine).
The default value of six results in poor
performance if there are more than
three virtual sites connected together.

<item>Threads, dictionaries, arrays, and spaces are sited,
even though they are in base modules.
In future releases, they will be made unsited.

<item>When a reference to a constrained variable
(finite domain, finite set, or free record)
is passed to another site, then this reference
is converted to a <em>future</em>.
The future will be bound when the constrained
variable becomes determined.

<item>The distributed garbage collection
algorithm reclaims all unused entities
except those forming a reference cycle
that exists on at least two different owner sites
(a <EM>cross-site cycle</EM>).
For example, if two sites each own an object
that references the other,
then they will never be reclaimed.
It is up to the programmer to break the cycle
by updating one of the objects to no longer
reference the other.

<item>The code of functions, procedures, classes, and functors
(but not objects) is always inserted in messages,
even if the code is already present at the destination.
In future releases, the code will be copied
across the network only
if it is not present on the destination site.
In both current and future releases, at most a single copy
of the code can exist per site.

<item>If a site crashes that has references to entities created on
other sites, then these entities are not garbage-collected.
Future releases will incorporate a lease-based or similar
technique to recover such entities.

<item>The fault state <<tempFail>> is indicated only after
a long delay.
In future releases, the delay will be very short and
based on adaptive observation of actual network behavior.

<item>If an exception is raised or a handler or watcher
is invoked for an <EM>object</EM>,
then the <<Entity>> argument is undefined.
For handlers and watchers, this limitation can
be bypassed by giving the handler and watcher procedures
a reference to the object.

<item>If an exception is raised or a handler is invoked
for an <EM>object</EM>,
then the attempted object operation cannot be retried.

</list>

<SECTION><TITLE>Modifications</TITLE>

<P>There is currently only one modification:
<list>
<item>A handler installed on a <EM>variable</EM> will retry
the operation (i.e., bind or wait) after it returns.
That is, the handler is inserted before the operation
instead of replacing the operation.
</list>

</CHAPTER>

#! /usr/bin/env perl

%attr = ();

sub encode {
    my $txt = shift;
    $txt =~ s/([<>&üö])/&encodeChar($1)/ge;
    return $txt;
}

sub encodeChar {
    my $c = shift;
    if    ($c eq '<') { '&lt;';  }
    elsif ($c eq '>') { '&gt;';  }
    elsif ($c eq '&') { '&amp;'; }
    elsif ($c eq 'ä') { '&#228;';}
    elsif ($c eq 'ë') { '&#235;';}
    elsif ($c eq 'ï') { '&#239;';}
    elsif ($c eq 'ö') { '&#246;';}
    elsif ($c eq 'ü') { '&#252;';}
    elsif ($c eq 'á') { '&#225;';}
    elsif ($c eq 'é') { '&#233;';}
    elsif ($c eq 'í') { '&#237;';}
    elsif ($c eq 'ó') { '&#243;';}
    elsif ($c eq 'ú') { '&#250;';}
    elsif ($c eq 'à') { '&#224;';}
    elsif ($c eq 'è') { '&#232;';}
    elsif ($c eq 'ì') { '&#236;';}
    elsif ($c eq 'ò') { '&#242;';}
    elsif ($c eq 'ù') { '&#249;';}
    elsif ($c eq 'ß') { '&#223;';}
    else { die "bad encodeChar($c)"; }
}

sub decode {
    my $txt = shift;
    $txt =~ s/\\(\\|n|[0-7][0-7][0-7])/&decodeChar($1)/ge;
    return $txt;
}

sub decodeChar {
    my $c = shift;
    if    ($c eq '\\') { '\\'; }
    elsif ($c eq 'n' ) { "\n"; }
    else { chr(oct($c)); }
}

%empty = (
          'AUTHOR.EXTERN'       => 1,
          'META'                => 1,
          'BIBTEX.EXTERN'       => 1,
          'MATH.EXTERN'         => 1,
          'PICTURE.EXTERN'      => 1,
          'CODE.EXTERN'         => 1,
          'PTR.EXTERN'          => 1
          );

while (<>) {
    if (/^\((.+)$/) {
        my $tag = $1;
        print "<$tag";
        while (($key,$val) = each %attr) {
            $val=&encode($val);
            print " $key=\"$val\"";
        }
        %attr=();
        if ($empty{$tag}) { print "/>"; }
        else { print ">"; }
    }
    elsif (/^\)(.+)$/) {
        print "</$1>" unless $empty{$1};
        %attr=();
    }
    elsif (/^A(\S+) IMPLIED/) {}
    elsif (/^A(\S+) (\S+) /) {
        my $key = $1;
        my $val = $'; chop($val); $val=&decode($val);
        $attr{$key} = $val;
    }
    elsif (/^-/) {
        my $txt = $'; chop($txt);
        print &encode(&decode($txt));
    }
    elsif (/^\?/) {
        my $txt = $'; chop($txt);
        print "<?",&decode($txt),"?>";
    }
    elsif (/^s/) {}
    elsif (/^N/) {}
    elsif (/^C/) {}
    else { die "unexpected output from nsgmls: $_"; }
}

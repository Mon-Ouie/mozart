AC_INIT(gdbm.cc)
OZ_INIT
. ../conf.all
BUILDTOP=`cd ../.. && pwd`
AC_SUBST(BUILDTOP)
SRCDIR=`pwd`
AC_SUBST(SRCDIR)
AC_CANONICAL_HOST
AC_PROG_CXX
AC_PROG_CXXCPP
AC_LANG_CPLUSPLUS
AC_PROG_INSTALL
OZ_PATH_PROG(OZC,ozc,OZC=$BUILDTOP/share/lib/ozc.sh)
OZ_PATH_PROG(OZPLATFORM,ozplatform)
OZ_PATH_PROG(OZDYNLD,ozdynld)
OZ_PATH_PROG(MKINSTALLDIRS,mkinstalldirs)
PLATFORM=`$OZPLATFORM`
AC_SUBST(OZBATCH)
AC_SUBST(OZDYNLD)
AC_SUBST(PLATFORM)
AC_SUBST(MKINSTALLDIRS)
dnl
dnl check for --with-package-name=...
dnl
PACKAGE=www.ps.uni-sb.de/ozhome/contrib/gdbm
AC_MSG_CHECKING(for --with-package-name)
AC_ARG_WITH(package_name,[--with-package-name=PKG       default $PACKAGE])
if test -n "${with_package_name}"; then
  PACKAGE="${with_package_name}"
fi
AC_MSG_RESULT($PACKAGE)
AC_SUBST(PACKAGE)
dnl
dnl check for --with-protocol=...
dnl
AC_MSG_CHECKING(for --with-protocol)
PROTOCOL=http
AC_ARG_WITH(protocol,[--with-protocol=PROTO     default $PROTOCOL])
if test -n "${with_protocol}"; then
  PROTOCOL="${with_protocol}"
fi
AC_MSG_RESULT($PROTOCOL)
AC_SUBST(PROTOCOL)
dnl
dnl Try to find the gdbm.h header file
dnl
my_cppflags="$CPPFLAGS"
AC_MSG_CHECKING([for gdbm.h (default)])
AC_TRY_CPP([#include "gdbm.h"],
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no)
  AC_MSG_CHECKING([[for gdbm.h (/usr/local/include)]])
  CPPFLAGS="$my_cppflags -I/usr/local/include"
  AC_TRY_CPP([[#include "gdbm.h"]],
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no)
    AC_MSG_CHECKING([[[for gdbm.h (/opt/gnu/include)]]])
    CPPFLAGS="$my_cppflags -I/opt/gnu/include"
    AC_TRY_CPP([[[#include "gdbm.h"]]],
      AC_MSG_RESULT(yes),
      AC_MSG_RESULT(no)
   [[[echo 'could not find the gdbm.h header file.'
      echo 'try setting the CPPFLAGS environment variable.'
      echo 'if gdbm is not installed on your system, you can obtain'
      echo 'it from http://www.gnu.org/']]]
      AC_MSG_ERROR([gdbm.h header file not found]))))
dnl
dnl Attempt to find the gdbm library
dnl
my_libs="$LIBS"
LIBS="$LIBS -lgdbm -lc"
AC_MSG_CHECKING([for gdbm library (default)])
AC_TRY_LINK(,[gdbm_open()],
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no)
  LIBS="$my_libs -L/usr/lib -lgdbm -lc"
  AC_MSG_CHECKING([[for gdbm library (/usr/lib)]])
  AC_TRY_LINK(,[[gdbm_open()]],
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no)
    LIBS="$my_libs -L/usr/local/lib -lgdbm -lc"
    AC_MSG_CHECKING([[[for gdbm library (/usr/local/lib)]]])
    AC_TRY_LINK(,[[[gdbm_open()]]],
      AC_MSG_RESULT(yes),
      AC_MSG_RESULT(no)
      LIBS="$my_libs -L/opt/gnu/lib -lgdbm -lc"
      AC_MSG_CHECKING([[[[for gdbm library (/opt/gnu/lib)]]]])
      AC_TRY_LINK(,[[[[gdbm_open()]]]],
        AC_MSG_RESULT(yes),
        AC_MSG_RESULT(no)
     [[[echo 'could not find the gdbm library.'
        echo 'try setting the LDFLAGS environment variable.'
        echo 'if gdbm is not installed on your system you can obtain'
        echo 'it from http://www.gnu.org/']]]
        AC_MSG_ERROR([[[[[gdbm library not found]]]]])))))
AC_OUTPUT(Makefile gdbm.oz:gdbm.in)

errprint(ifdef([OZ_INIT],
 [],
 [autoconf failed: use 'autoconf -l ../..' to include ../aclocal.m4.
]))

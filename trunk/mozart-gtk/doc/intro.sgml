<!--
  - Authors:
  -   Thorsten Brunklaus  <brunklaus@ps.uni-sb.de>
  -   Leif Kornstaedt <kornstae@ps.uni-sb.de>
  -
  - Copyright:
  -   Thorsten Brunklaus, 2001
  -   Leif Kornstaedt, 2001
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation of Oz 3:
  -   http://www.mozart-oz.org
  -
  - See the file "LICENSE" or
  -   http://www.mozart-oz.org/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->

<Chapter id="chapter.intro">
  <Title/Introduction/
  <P>
    This manual describes the GTK+ language binding for Oz.
  <Para class=apropos><Title/Comparison to Tk/
    You may be wondering how GTK+ compares to Tk, for which a binding for Oz
    has been available for a long time.  The reasons to provide another library
    for Graphical User Interfaces (GUIs) are as follows:
    <List>
      <Item>We wanted to provide a more modern widget set.
      <Item>The Tcl/Tk binding uses an external process and inter-process
	communication to do the actual work.  In contrast, the GTK+ widgets
	run in the Mozart process itself.  It should therefore provide
	better performance.
    </List>
    Note that GTK+ should be available for all platforms supported by Mozart.
  <Section>
    <Title/Software Used/
    <Para class=apropos><Title/GTK+/
      GTK+ is a widget set for building graphical user interfaces.  It
      provides windows, buttons, text editing widgets, and many more.
      Its official web site is at <Ref.Extern to="http://www.gtk.org/"
      ><File>http://www.gtk.org/</File></Ref.Extern>.  The binding makes
      use of Version 1.2 (Unix) or 1.3 (Windows).
    <Para class=apropos><Title/GDK/
      GTK+ builds on a GDK, which provides low-level windowing functions,
      abstracting from the actual windowing environment used (X Window
      System or Microsoft Windows).
    <Para class=apropos><Title/GTK+ Canvas/
      The GTK+ Canvas used here is a patched version of the Gnome Canvas
      ripped out of the Gnome sources.
    <Para class=apropos><Title/GLib/
      GLib is a library of data types and utilities used by the other
      components.  Only the support functions required to use GTK+ and GDK
      are available through the binding.
  <Section>
    <Title/Example/
    <P>
      Let's look at a <Q/hello world/ type application using the
      GTK+ binding, to get a feeling of how this could look like.
<<<functor
import
   Application(exit)
   System(show)
   GTK
define
   %% Define Toplevel window class
   class MyToplevel from GTK.window
      meth new()
	 GTK.window, new(GTK.'WINDOW_TOPLEVEL')
	 GTK.window, setBorderWidth(10)
	 GTK.window, setTitle("Hello, World!")
	 {self signalConnect('delete-event'
			     deleteEvent _)}
      end
      meth deleteEvent(Args)
         %% Do cleanup stuff here
	 {System.show 'deleteEvent occured'}
	 {Application.exit 0}
      end
   end
   %% Define HelloButton class
   class HelloButton from GTK.button
      meth new()
	 GTK.button, newWithLabel("Hello, World!")
	 GTK.button, signalConnect('clicked'
				   clickedEvent _)
      end
      meth clickedEvent(Args)
	 {System.show 'ClickedEvent occured'}
      end
   end
   %% Create Class Instances
   Toplevel = {New MyToplevel new()}
   Button   = {New HelloButton new()}
   %% Make Butten child of Toplevel Container
   {Toplevel add(Button)}
   %% Make it all visible
   {Toplevel showAll()}
end>>>
    <P>
      If you are familiar with GUI programming, you will recognize a few
      things suchs as creating windows, adding children to them, and making
      them react to user input.
    <Para class=apropos><Title/More Examples/
      A number of examples can be found in the <File>examples/gtk</File>
      directory in Mozart's installation folder.
  <Section>
    <Title/Structure of the Manual/
    <P>
      We will first summarize the basics of the GTK+ user interface model
      in <Ptr to="chapter.basics">.  Next we'll explain how to access the
      actual API from Oz in <Ptr to="chapter.mapping"> and give a reference
      of the additional procedures provided by the binding in <Ptr
      to="chapter.reference">.  Finally, an abstraction is introduced
      in <Ptr to="chapter.builder"> that allows for declarative specification
      of user interfaces and obviates the need to know many of the fine
      details of the GTK+ API.
  <Section proglang=sh>
    <Title/Building from Sources/
    <P>
      The GTK+ language binding is available as a
      <Ref.Extern to="http://www.mozart-oz.org/download/view.cgi?action=rpm">
      <File>source RPM</File></Ref.Extern>
      or can be obtained directly from cvs via
      <<<cvs -d :pserver:anoncvs@cvs.mozart-oz.org:/services/mozart/CVS get mozart-gtk>>>
      To compile the CVS sources, use the following option to configure:
      <<<configure --with-gtk-canvas-dir=?{DIR}>>>
      where ?{DIR} is the directory in which the GTK Canvas has been
      installed. Otherwise, issue the
      <<<rpm --rebuild mozart-gtk&lt;version&gt;.rpm>>> command.
    <Para class=apropos><Title/Compiling the GTK Canvas/
      The GTK Canvas is available as a
      <Ref.Extern to="http://www.mozart-oz.org/download/view.cgi?action=rpm">
      <File>source RPM</File></Ref.Extern>
      or can be obtained directly from cvs via
      <<<cvs -d :pserver:anoncvs@cvs.mozart-oz.org:/services/mozart/CVS get gtk-canvas>>>
      To compile the CVS sources, use the standard
      <<configure; make; make install>> procedure.  The configure prefix
      used here yields the value of ?{DIR} above. Otherwise, issue the
      <<<rpm --rebuild gt-canvas&lt;version&gt;.rpm>>> command. 
    <Para class=apropos><Title/Windows/
      Compiling the sources on Windows requires a number of
      <Ref.Extern to="ftp://ftp.mozart-oz.org/pub/mozart/extras/wingtk.tar.gz"><File>libraries</File></Ref.Extern>.
      After downloading and extracting the archive,
      edit the gtk-config and imlib-config files
      in the freshly created bin directory to match your setup.
      Afterwards, using the cvs sources you should be able to compile the
      binding.
    <P>
      For user convenience, the gtk binding is shipped as part of
      the binary window distribution of mozart.
</Chapter>

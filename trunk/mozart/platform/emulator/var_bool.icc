/*
 *  Authors:
 *    Tobias Mueller (tmueller@ps.uni-sb.de)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     http://www.mozart-oz.org
 * 
 *  See the file "LICENSE" or
 *     http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */

#ifndef __FDBVAR_ICC__
#define __FDBVAR_ICC__

#if defined(INTERFACE) && !defined(OUTLINE)
#pragma interface
#endif

#include "var_fd.hh"
#include "unify.hh"

inline
void OzBoolVariable::dispose(void) {
  disposeS();
  freeListDispose(this, sizeof(OzBoolVariable));
}


inline
void OzBoolVariable::becomesSmallIntAndPropagate(TaggedRef * trPtr, int e)
{
  if (oz_isSmallInt(*trPtr)) return;
  propagate();
  DoBind(trPtr, newSmallInt(e));
  dispose();
}

inline
void OzBoolVariable::becomesSmallIntAndPropagate(TaggedRef * trPtr,
						  OZ_FiniteDomain & fd)
{
  becomesSmallIntAndPropagate(trPtr, fd.getSingleElem());
}


inline
void OzBoolVariable::installPropagators(OzFDVariable * glob_var)
{
  installPropagatorsG(glob_var);
  for (int i = 0; i < fd_prop_any; i += 1)
    suspList= oz_installPropagators(suspList,
				    glob_var->fdSuspList[i],
				    glob_var->getBoardInternal());
}

inline
void OzBoolVariable::installPropagators(OzBoolVariable * glob_var)
{
  installPropagatorsG(glob_var);
}


inline
Bool isGenBoolVar(TaggedRef term)
{
  GCDEBUG(term);
  return isCVar(term) && (tagged2CVar(term)->getType() == OZ_VAR_BOOL);
}

inline
Bool isGenBoolVar(TaggedRef term, TypeOfTerm tag)
{
  GCDEBUG(term);
  Assert(tag == tagTypeOf(term));
  return isCVar(tag) && (tagged2CVar(term)->getType() == OZ_VAR_BOOL);
}

inline
OzBoolVariable * tagged2GenBoolVar(TaggedRef term)
{
  GCDEBUG(term);
  return (OzBoolVariable *) tagged2CVar(term);
}

inline
void addSuspBoolVar(TaggedRef v, Suspendable * susp)
{
  tagged2GenBoolVar(v)->addSuspSVar(susp);
}

#endif /* __FDBVAR_ICC__ */

#define yy_create_buffer xy_create_buffer
#define yy_delete_buffer xy_delete_buffer
#define yy_scan_buffer xy_scan_buffer
#define yy_scan_string xy_scan_string
#define yy_scan_bytes xy_scan_bytes
#define yy_flex_debug xy_flex_debug
#define yy_init_buffer xy_init_buffer
#define yy_flush_buffer xy_flush_buffer
#define yy_load_buffer_state xy_load_buffer_state
#define yy_switch_to_buffer xy_switch_to_buffer
#define yyin xyin
#define yyleng xyleng
#define yylex xylex
#define yyout xyout
#define yyrestart xyrestart
#define yytext xytext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 217
#define YY_END_OF_BUFFER 218
static yyconst short int yy_accept[656] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  218,  216,
      213,  214,  212,  216,  212,    1,  216,  216,   79,   78,
      212,   79,   89,   89,  212,   82,  212,   82,  205,  212,
      216,  216,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  212,   85,
       86,    5,    6,    7,    7,   23,   22,   24,   26,   25,
       27,    1,   26,   31,   30,   32,   31,   29,   31,   28,
       37,   36,   38,   33,   34,   35,   41,   40,   42,   41,

       39,   41,   45,   44,   46,   43,   45,   53,   52,   54,
       51,   53,   57,   56,   58,   55,   57,   49,   48,   50,
       47,   49,   61,   60,   62,   61,   59,   65,   64,   66,
       63,   63,   65,   82,   76,    0,  209,    0,    0,    1,
      211,    0,    0,  201,    0,    0,    0,   71,   87,    2,
       77,   91,   89,    0,    0,    0,   89,   83,   73,   84,
       85,   74,   82,   82,   75,   86,  207,  205,   69,  215,
      215,  215,  215,  215,  215,  215,  215,  215,    0,    0,
      205,    0,  203,  201,  201,   97,  201,  201,  201,  201,
      201,  201,  200,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  142,  201,  146,  201,  201,  201,  201,  201,
      160,  162,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,   89,   89,    5,    4,    3,    0,
       29,    0,   28,   35,    0,   39,    0,   43,    0,    0,
       43,   51,    0,    0,   51,   55,    0,    0,   55,   47,
        0,    0,   47,    0,   59,    0,   59,   63,    0,    0,
       63,   63,   63,    0,    0,   73,   84,   85,   74,    0,
        0,  210,    0,    0,  210,    0,    0,  203,  202,    0,
        0,  202,   70,   90,   91,    0,   89,   89,   83,   72,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,    0,    0,  206,  207,  206,  201,   98,  201,
      201,  201,  201,  201,  201,  201,  201,  115,   80,  201,
      125,  201,  201,  201,  201,  201,  199,  201,  138,  143,
      201,  147,  148,  201,  201,  201,   80,  158,  161,  163,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  186,
      201,  201,  201,  201,  195,  201,   91,   89,    0,   89,
       29,   39,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   63,   63,   68,    0,   72,    0,    0,    0,
        0,  209,    0,    0,    0,    0,    0,    0,  201,  204,
        0,    0,    0,  204,   88,   91,    0,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
        0,    0,    0,  208,    0,  205,  208,  201,   99,  101,
      201,  201,  201,  109,  201,  201,  116,   81,  117,  126,
      201,  129,  201,  132,  201,  136,  139,  201,  201,  149,
      201,  152,  198,  154,  156,  159,  201,  201,  201,  170,
      172,  174,  201,  201,  201,  182,  184,  187,  188,  201,
      201,  194,  196,  197,   90,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      215,   18,  215,  215,  215,  215,  215,   12,  215,  215,
      215,  215,  215,    0,    0,  201,  100,  102,  103,  201,

      107,  110,  201,  201,  118,  201,  201,  201,  201,  130,
      131,  133,  201,  137,  201,  201,  150,  153,  155,  157,
      201,  201,  201,  171,  173,  175,  176,  201,  201,  183,
      185,  189,  201,  190,   93,   92,    0,    0,    0,    0,
        0,  215,   19,  215,  215,   16,  215,  215,  215,  215,
      215,  215,   15,    0,    0,  201,  104,  105,  108,  201,
      113,  201,  121,  123,  127,   94,  201,  201,  144,  151,
      164,  166,  201,  177,  201,  201,  192,  191,    0,   14,
      215,  215,   17,   13,  215,  215,  215,    8,   95,  106,
      111,  114,  201,  122,  124,  128,  134,  140,  145,  165,

      167,  168,  178,  180,  193,   67,  215,  215,  215,  215,
      215,   96,  112,  119,  135,  141,  169,  179,  181,  215,
      215,  215,  215,  215,  120,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,   10,  215,
      215,  215,  215,    9,  215,  215,   11,  215,  215,  215,
      215,   21,  215,   20,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   31,   31,   33,   34,
       35,   35,   35,   35,   35,   35,   35,   35,   36,   35,
       35,   35,   37,   35,   35,   35,   35,   38,   35,   35,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   54,   70,   71,   72,   73,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       75,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   76,   74,   74,   74,
       74,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   74,   77,   77,   77,   77,   77,
       77,   77,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   74,   78,   78,   78,
       78,   78,   78,   78,   78
    } ;

static yyconst int yy_meta[80] =
    {   0,
        1,    1,    2,    1,    1,    3,    4,    4,    4,    5,
        5,    6,    4,    7,    4,    4,    8,    8,    9,   10,
       10,   10,   11,    4,    4,   12,   13,   14,    4,    4,
       15,   15,   15,   15,   16,   16,   16,   17,    4,    5,
       18,    4,   19,    5,   20,   20,   15,   15,   15,   20,
       16,   16,   16,   16,   16,   16,   16,   17,   16,   16,
       16,   17,   16,   17,   16,   17,   16,   17,   16,    4,
        4,    4,    8,    4,    4,    4,   21,   21,   22
    } ;

static yyconst short int yy_base[758] =
    {   0,
        0,    0,   77,   78,   80,   82,   84,   86,  105,    0,
      184,    0,  263,    0,  341,  417,  493,  569,  645,  721,
      797,  873,  949, 1026,  343,  348, 1564, 1563, 1588, 3553,
     3553, 3553, 1582,  343, 3553,    0, 1546,  344, 3553, 3553,
      378,   80,  371,  336, 1561,  378,   74,  384, 1572, 1542,
      409,  308,  374, 1570,  385,  376,  412,  414,  428,  422,
      433,  355,  452,  421,  398,  444,  486,  348,  467, 3553,
     3553,    0, 3553, 1562, 1566, 3553, 3553, 3553, 3553, 3553,
     3553,    0, 1565, 3553, 3553, 3553,    0, 1560, 1104,  483,
     3553, 3553, 3553, 3553, 3553,    0, 3553, 3553, 3553,    0,

     1559, 1183, 3553, 3553, 3553,    0,  387, 3553, 3553, 3553,
        0,  402, 3553, 3553, 3553,    0,  467, 3553, 3553, 3553,
        0,  468, 3553, 3553, 3553,  350,    0, 3553, 3553, 3553,
      501,  495,  520,  538, 3553,  494, 3553, 1257, 1570,    0,
     3553,  529,  535, 1563, 1320, 1562,  588, 1550,  536, 3553,
     3553,  563,  598,  604,  489,    0,  610, 1543, 1549, 3553,
     3553, 3553, 1541, 3553, 3553, 3553, 3553, 1552, 3553,    0,
     1514,  357, 1497,  502,  294,  509, 1494, 1495,  536, 1383,
     1540, 1507, 3553, 1538,  472,  523,  576,  416,  549,  524,
      587,  586, 1537,  581,  541,  583,  611,  617,  626,  623,

      507,  629, 1536,  630, 1535,  624,  639,  633,  643,  638,
     1521,  644,  641,  645,  642,  646,  651,  649,  647,  648,
      659,  654,  660,  657,  694,  713,    0, 3553, 3553, 1513,
     1502, 1451,  721,    0, 1508, 1500, 1530,    0,  630,  725,
     3553,    0,  720,  728, 3553,    0,  727,  748, 3553,    0,
      732,  753, 3553,  688, 3553,  757,    0,  698,  717,    0,
      760,  781,  767,  778,    0,  798,  808, 1484,  814, 1476,
      647,  721,  788, 1604, 3553,  802,    0, 3553,  800,  835,
     1644, 1503, 3553, 1496,  838,  842,  823,    0, 3553, 3553,
     1463, 1449, 1463, 1453,  617, 1446, 1450, 1460, 1446, 1442,

     1451, 1455,  846, 1675,  833, 3553, 1490,  827, 3553,  689,
      839,  485,  840,  838,  866,  857,  867, 1489, 1488,  869,
     1487,  860,  868,  858,  870,  871, 1486,  656,  880, 3553,
      872, 3553, 1485,  877,  873,  874,  886, 1484, 3553, 3553,
      882,  883,  884,  911,  885,  888,  887,  890,  913, 1482,
      891,  916,  917,  918, 1477,  900, 1001,  954,  960,  966,
     1477, 1476,  921,    0,  934,    0,  941,    0,  948,    0,
      970,    0,  916,    0, 3553, 1480, 1014, 1449,  985,  944,
     1024, 3553, 1101, 1025, 1720, 1018,    0, 1021, 1472, 1022,
     1104, 1037, 1760, 3553, 3553, 1045, 1076, 1430, 1433, 1421,

     1413, 1423, 1423, 1421, 1420, 1423, 1417, 1398, 1384, 1397,
     1115, 1791, 1011, 1012, 1132, 1432, 3553,  927, 1431, 1430,
     1048, 1023,  981, 1428, 1024, 1089, 3553, 3553, 1189, 3553,
     1095, 1427, 1091, 1426, 1115, 1425, 3553, 1138, 1143, 3553,
     1148, 1424, 1423, 1422, 1420, 3553, 1151, 1137, 1161, 1419,
     1418, 1414, 1154, 1165, 1207, 1413, 1412, 3553, 1410, 1204,
     1208, 1408, 3553, 1407, 3553, 1208,    0, 1211,    0, 1217,
        0, 1223,    0, 1230,    0, 1384, 1249,    0, 1252,    0,
     1359,    0, 1366, 1078, 1365, 1365, 1351,    0, 1356, 1344,
     1373, 1362, 1358, 1260,    0, 1234, 3553, 3553, 1395, 1235,

     1394, 3553, 1153, 1244, 3553, 1263, 1214, 1264, 1222, 3553,
     1390, 3553, 1229, 3553, 1228, 1279, 1389, 3553, 3553, 3553,
     1278, 1155, 1276, 3553, 3553, 3553, 1388, 1277, 1280, 3553,
     3553, 3553, 1284, 1387, 3553, 3553, 1370, 1278,    0, 1284,
        0, 1348,    0, 1351, 1348,    0, 1342, 1327, 1353, 1334,
     1318, 1331,    0, 1289,    0, 1301, 3553, 1369, 3553, 1300,
     1368, 1282, 1367, 1365, 1364, 3553, 1152, 1305, 1363, 3553,
     1362, 1361, 1304, 3553, 1306, 1310, 1359, 3553, 1341,    0,
     1306, 1318,    0,    0, 1295, 1297, 1303,    0, 1342, 3553,
     1340, 3553, 1308, 3553, 3553, 3553, 1339, 1338, 3553, 3553,

     3553, 1336, 1335, 1334, 3553, 3553, 1281, 1279, 1283, 1288,
     1270, 3553, 3553, 1321, 3553, 3553, 3553, 3553, 3553, 1279,
     1266, 1171, 1116, 1115, 3553, 1099, 1109, 1109, 1102, 1050,
     1014,  987,  991,  978,  908,  739,  745,  748,    0,  729,
      725,  668,  648,    0,  530,  514,    0,  507,  427,  298,
       51,    0,   22,    0, 3553, 1841, 1863, 1885, 1907, 1929,
     1951, 1973, 1995, 2017, 2039, 2061, 2083, 2104, 2121, 2130,
     2150, 2167, 2188, 2208, 2222, 2233, 2251, 2265, 2276, 2297,
     2309, 2330, 2342, 2363, 2375, 2396, 2417, 2429, 2450, 2472,
     2494, 2514, 2534, 2556, 2569, 2584, 2591, 2611, 2633, 2650,

     2671, 2691, 2705, 2716, 2734, 2748, 2759, 2780, 2799, 2810,
     2831, 2850, 2861, 2882, 2901, 2912, 2933, 2952, 2972, 2991,
     3002, 3014, 3034, 3056, 3078, 3100, 3121, 3134, 3154, 3175,
     3188, 3194, 3214, 3236, 3252, 3271, 3290, 3302, 3313, 3324,
     3335, 3346, 3364, 3375, 3393, 3411, 3422, 3433, 3444, 3455,
     3466, 3477, 3488, 3499, 3510, 3521, 3532
    } ;

static yyconst short int yy_def[758] =
    {   0,
      655,    1,  656,  656,  657,  657,  658,  658,  655,    9,
      655,   11,  655,   13,  659,  659,  660,  660,  661,  661,
      662,  662,  663,  663,  664,  664,    1,    1,  655,  655,
      655,  655,  655,  665,  655,  666,  667,  668,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  669,  655,
      670,  671,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  655,  655,
      655,  673,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  666,  655,  655,  655,  655,  674,  675,  675,  675,
      655,  655,  655,  655,  655,  676,  655,  655,  655,  677,

      678,  678,  655,  655,  655,  679,  680,  655,  655,  655,
      681,  682,  655,  655,  655,  683,  684,  655,  655,  655,
      685,  686,  655,  655,  655,  687,  688,  655,  655,  655,
      655,  655,  655,  689,  655,  690,  655,  691,  691,  666,
      655,  692,  693,  655,  694,  694,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  695,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  696,  655,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  698,  699,
      655,  699,  655,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  655,  655,  701,  655,  655,  702,
      703,  703,  703,  704,  705,  706,  706,  707,  708,  709,
      655,  710,  711,  712,  655,  713,  714,  715,  655,  716,
      717,  718,  655,  719,  655,  720,  721,  655,  655,  722,
      655,  655,  655,  723,  724,  723,  723,  655,  723,  725,
      723,  726,  727,  727,  655,  655,  728,  655,  729,  730,
      730,  655,  655,  655,  655,  655,  655,  731,  655,  655,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  733,  733,  734,  655,  655,  735,  655,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  655,
      735,  655,  735,  735,  735,  735,  735,  735,  655,  655,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  655,  655,  655,  655,
      736,  737,  655,  738,  655,  739,  655,  740,  655,  741,
      655,  742,  655,  722,  655,  724,  723,  655,  725,  725,
      726,  655,  743,  727,  727,  655,  744,  729,  655,  729,
      745,  730,  730,  655,  655,  655,  655,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      733,  733,  734,  734,  746,  655,  655,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  655,  655,  735,  655,
      735,  735,  735,  735,  735,  735,  655,  735,  735,  655,
      735,  735,  735,  735,  735,  655,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  655,  735,  735,
      735,  735,  655,  735,  655,  655,  747,  655,  748,  655,
      749,  655,  750,  655,  751,  655,  655,  752,  655,  753,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  655,  754,  735,  655,  655,  735,  735,

      735,  655,  735,  735,  655,  735,  735,  735,  735,  655,
      735,  655,  735,  655,  735,  735,  735,  655,  655,  655,
      735,  735,  735,  655,  655,  655,  735,  735,  735,  655,
      655,  655,  735,  735,  655,  655,  655,  655,  755,  655,
      756,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  655,  757,  735,  655,  735,  655,  735,
      735,  735,  735,  735,  735,  655,  735,  735,  735,  655,
      735,  735,  735,  655,  735,  735,  735,  655,  655,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  735,  655,
      735,  655,  735,  655,  655,  655,  735,  735,  655,  655,

      655,  735,  735,  735,  655,  655,  732,  732,  732,  732,
      732,  655,  655,  735,  655,  655,  655,  655,  655,  732,
      732,  732,  732,  732,  655,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,    0,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655
    } ;

static yyconst short int yy_nxt[3633] =
    {   0,
       30,   31,   32,   31,   33,   34,   35,   35,   36,   37,
       38,   35,   35,   39,   40,   35,   40,   41,   42,   43,
       44,   44,   44,   45,   35,   46,   47,   48,   31,   35,
       49,   49,   49,   49,   49,   49,   49,   49,   50,   51,
       35,   35,   35,   52,   53,   54,   55,   56,   57,   58,
       54,   54,   59,   54,   54,   60,   61,   62,   63,   64,
       54,   65,   66,   67,   68,   54,   54,   54,   54,   35,
       35,   35,   69,   30,   70,   71,   49,   54,   30,   73,
       73,   77,   78,   77,   78,   80,   81,   80,   81,  654,
       74,   74,   82,  150,   82,   75,   75,  160,  151,  163,

      164,  165,   83,  653,   83,   84,   85,   86,   84,   84,
       84,   84,   84,   84,   84,   87,   84,   84,   84,   84,
       84,   88,   89,   88,   90,   90,   90,   90,   84,   84,
       84,   84,   84,   84,   84,   88,   88,   88,   88,   88,
       88,   88,   88,   84,   84,   84,   84,   88,   84,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   84,   84,   84,   88,   84,   84,
       84,   84,   84,   84,   91,   92,   93,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   94,   91,

       95,   91,   91,   96,   96,   96,   96,   91,   91,   91,
       91,   91,   91,   91,   96,   96,   96,   96,   96,   96,
       96,   96,   91,   91,   91,   91,   91,   91,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   97,   98,   99,   97,   97,   97,   97,
       97,   97,   97,  100,   97,   97,   97,   97,   97,  101,
      102,  101,  101,  101,  101,  101,   97,   97,   97,   97,
       97,   97,   97,  101,  101,  101,  101,  101,  101,  101,

      101,   97,   97,   97,   97,  101,   97,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,   97,   97,   97,  101,   97,   97,   97,   97,
       97,   97,  104,  105,  129,  130,  297,  180,  137,  129,
      130,  181,  298,  152,  144,  157,  157,  157,  157,  183,
      255,  652,  131,  132,  132,  132,  183,  131,  132,  132,
      132,  106,  106,  106,  106,  106,  106,  106,  106,  147,
      147,  147,  138,  145,  107,  183,  182,  183,  152,  256,
      153,  153,  153,  154,  159,  148,  183,  149,  149,  149,

      149,  160,  155,  161,  162,  224,  147,  160,  156,  183,
      163,  166,  292,  210,  293,  133,  155,  106,  104,  105,
      133,  139,  146,  183,  191,  183,  240,  183,  192,  187,
      241,  185,  183,  183,  193,  163,  188,  186,  156,  183,
      189,  244,  215,  190,  183,  245,  216,  106,  106,  106,
      106,  106,  106,  106,  106,  183,  171,  172,  197,  173,
      107,  174,  198,  183,  175,  213,  199,  194,  176,  195,
      206,  177,  200,  178,  313,  201,  651,  203,  202,  196,
      207,  208,  214,  183,  204,  205,  225,  226,  226,  226,
      217,  209,  218,  106,  109,  110,  183,  183,  219,  137,

      232,  211,  233,  233,  233,  233,  248,  252,  287,  287,
      249,  253,  220,  212,  261,  261,  261,  261,  183,  308,
      258,  258,  258,  111,  111,  111,  111,  111,  111,  111,
      111,  421,  259,  138,  309,  183,  112,  221,  260,  262,
      263,  263,  263,  265,  222,  144,  259,  223,  276,  276,
      276,  295,  183,  650,  266,  149,  149,  149,  149,  296,
      183,  267,  649,  268,  269,  328,  277,  299,  260,  111,
      109,  110,  139,  300,  145,  180,  270,  271,  648,  181,
      284,  315,  285,  285,  285,  285,  310,  183,  321,  147,
      147,  147,  183,  314,  183,  286,  277,  183,  183,  111,

      111,  111,  111,  111,  111,  111,  111,  149,  149,  149,
      149,  286,  112,  146,  182,  152,  147,  153,  153,  153,
      154,  152,  183,  154,  154,  154,  154,  152,  183,  157,
      157,  157,  157,  316,  183,  183,  317,  183,  311,  312,
      183,  183,  322,  320,  183,  111,  114,  115,  318,  183,
      183,  319,  183,  183,  183,  340,  183,  183,  183,  183,
      183,  325,  183,  323,  402,  183,  324,  183,  183,  240,
      183,  183,  264,  241,  403,  116,  116,  116,  116,  116,
      116,  116,  116,  326,  327,  334,  329,  264,  117,  331,
      337,  333,  341,  343,  345,  347,  336,  335,  255,  349,

      183,  338,  342,  344,  348,  350,  346,  351,  353,  356,
      647,  357,  436,  358,  358,  358,  359,  258,  258,  258,
      352,  116,  114,  115,  354,  155,  382,  256,  355,  646,
      357,  156,  360,  360,  360,  360,  373,  373,  232,  155,
      233,  233,  233,  233,  363,  363,  363,  365,  365,  365,
      419,  116,  116,  116,  116,  116,  116,  116,  116,  244,
      383,  156,  364,  245,  117,  366,  248,  367,  367,  367,
      249,  252,  369,  369,  369,  253,  371,  371,  371,  261,
      261,  261,  261,  265,  645,  368,  261,  261,  261,  261,
      370,  644,  364,  275,  372,  366,  643,  116,  119,  120,

      258,  258,  258,  265,  642,  375,  641,  384,  384,  384,
      389,  390,  259,  265,  377,  368,  270,  271,  260,  265,
      370,  386,  386,  386,  372,  375,  259,  121,  121,  121,
      121,  121,  121,  121,  121,  375,  270,  271,  183,  391,
      122,  375,  287,  287,  414,  282,  270,  271,  260,  183,
      183,  183,  270,  271,  392,  392,  392,  285,  285,  285,
      285,  396,  396,  396,  396,  411,  411,  411,  183,  183,
      286,  183,  415,  121,  119,  120,  416,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  286,  420,  183,  307,
      418,  437,  422,  183,  183,  183,  183,  428,  183,  183,

      423,  183,  183,  121,  121,  121,  121,  121,  121,  121,
      121,  183,  425,  424,  397,  435,  122,  429,  431,  426,
      433,  441,  183,  432,  183,  444,  438,  183,  183,  183,
      439,  442,  443,  434,  445,  373,  373,  447,  183,  456,
      466,  466,  466,  449,  455,  448,  655,  453,  459,  121,
      124,  125,  454,  468,  468,  468,  640,  450,  451,  126,
      470,  470,  470,  464,  460,  461,  462,  472,  472,  472,
      452,  357,  457,  358,  358,  358,  359,  357,  496,  359,
      359,  359,  359,  357,  379,  360,  360,  360,  360,  474,
      474,  474,  183,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  465,  265,
      285,  285,  285,  285,  380,  264,  127,  124,  125,  382,
      275,  389,  389,  286,  183,  183,  126,  141,  141,  141,
      639,  375,  638,  501,  136,  136,  136,  282,  637,  286,
      415,  415,  270,  271,  416,  416,  143,  143,  143,  183,
      391,  391,  636,  383,  396,  396,  396,  396,  503,  500,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  396,  396,  396,  396,  499,

      183,  635,  183,  127,  231,  231,  183,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      477,  477,  477,  479,  479,  479,  183,  231,  231,  231,
      231,  231,  231,  231,  179,  179,  179,  544,  478,  511,
      545,  480,  231,  231,  231,  231,  504,  231,  183,  183,
      634,  494,  494,  494,  183,  633,  509,  632,  307,  183,
      631,  630,  183,  183,  183,  183,  183,  629,  478,  495,
      513,  480,  183,  231,  231,  231,  183,  231,  231,  231,
      231,  231,  231,  236,  236,  522,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  495,

      505,  515,  527,  517,  516,  523,  236,  236,  236,  236,
      236,  236,  236,  521,  560,  183,  572,  528,  183,  183,
      597,  236,  236,  236,  236,  183,  236,  239,  239,  239,
      243,  243,  243,  183,  628,  506,  247,  247,  247,  183,
      183,  507,  251,  251,  251,  183,  183,  508,  533,  254,
      254,  254,  236,  236,  236,  183,  236,  236,  236,  236,
      236,  236,  272,  563,  529,  534,  136,  136,  538,  538,
      538,  540,  540,  540,  183,  183,  273,  273,  273,  554,
      554,  554,  556,  558,  567,  565,  568,  183,  183,  183,
      183,  183,  561,  183,  274,  183,  136,  381,  381,  381,

      136,  136,  136,  388,  388,  388,  136,  562,  413,  413,
      413,  183,  183,  564,  136,  183,  183,  183,  136,  183,
      136,  183,  136,  627,  274,  143,  571,  626,  576,  143,
      279,  577,  625,  624,  623,  622,  621,  573,  575,  280,
      280,  280,  569,  620,  593,  619,  618,  617,  591,  616,
      615,  613,  602,  612,  603,  611,  614,  281,  589,  143,
      610,  609,  608,  143,  143,  143,  598,  607,  606,  143,
      605,  604,  601,  600,  599,  596,  595,  143,  594,  592,
      590,  143,  588,  143,  587,  143,  586,  281,  179,  585,
      584,  583,  179,  179,  582,  581,  580,  579,  578,  574,

      570,  566,  303,  303,  303,  559,  557,  553,  552,  551,
      550,  549,  548,  547,  546,  543,  542,  537,  536,  535,
      304,  532,  179,  531,  530,  526,  305,  179,  179,  525,
      524,  520,  179,  519,  183,  518,  514,  512,  510,  502,
      179,  498,  497,  167,  179,  493,  179,  492,  179,  491,
      304,  231,  231,  490,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  489,  488,  487,
      486,  485,  484,  483,  231,  231,  231,  231,  231,  231,
      231,  482,  481,  183,  476,  264,  362,  361,  463,  231,
      231,  231,  231,  458,  231,  446,  440,  183,  430,  428,

      427,  417,  410,  409,  408,  407,  406,  405,  404,  401,
      400,  399,  398,  395,  394,  380,  378,  237,  362,  232,
      231,  231,  231,  361,  231,  231,  231,  231,  231,  231,
      236,  236,  339,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  332,  330,  183,  183,
      307,  306,  302,  236,  236,  236,  236,  236,  236,  236,
      301,  294,  291,  167,  160,  290,  289,  283,  236,  236,
      236,  236,  282,  236,  278,  275,  237,  232,  150,  229,
      228,  183,  169,  167,  158,  142,  135,  655,  134,  134,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  236,

      236,  236,  655,  236,  236,  236,  236,  236,  236,  275,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  385,  385,  385,  385,  655,  655,  655,
      655,  655,  655,  655,  385,  385,  385,  385,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  385,  385,
      385,  385,  385,  385,  282,  655,  655,  655,  655,  655,
      655,  655,  655,  393,  393,  393,  393,  655,  655,  655,
      655,  655,  655,  655,  393,  393,  393,  393,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  393,  393,
      393,  393,  393,  393,  412,  412,  412,  412,  655,  655,

      655,  655,  655,  655,  655,  412,  412,  412,  412,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  307,  412,
      412,  412,  412,  412,  412,  275,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  136,
      136,  136,  136,  655,  655,  655,  655,  655,  655,  655,
      136,  136,  136,  136,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  136,  136,  136,  136,  136,  136,
      282,  655,  655,  655,  655,  655,  655,  655,  655,  143,
      143,  143,  143,  655,  655,  655,  655,  655,  655,  655,
      143,  143,  143,  143,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  143,  143,  143,  143,  143,  143,
      179,  179,  179,  179,  655,  655,  655,  655,  655,  655,
      655,  179,  179,  179,  179,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  307,  179,  179,  179,  179,  179,
      179,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  140,  655,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  168,  655,  655,  655,
      168,  168,  655,  655,  655,  168,  168,  168,  655,  168,
      168,  168,  170,  655,  170,  170,  170,  655,  655,  170,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  184,  655,  655,  655,  184,  184,  655,  655,
      655,  184,  184,  184,  655,  184,  184,  184,  227,  655,
      227,  227,  227,  227,  655,  227,  655,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  231,
      231,  231,  231,  655,  655,  655,  231,  231,  231,  655,
      231,  231,  234,  234,  655,  655,  655,  234,  234,  234,
      655,  655,  234,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  236,  236,  236,  236,  655,  655,  655,  236,
      236,  236,  655,  236,  236,  238,  238,  655,  655,  655,
      238,  238,  238,  655,  238,  238,  238,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  242,  242,
      655,  655,  655,  242,  242,  242,  655,  242,  242,  242,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  246,  246,  655,  655,  655,  246,  246,  246,  655,
      246,  246,  246,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  250,  250,  655,  655,  655,  250,
      250,  250,  655,  250,  250,  250,  251,  251,  251,  251,

      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  257,  257,
      655,  655,  655,  257,  257,  257,  655,  257,  257,  257,
      264,  655,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  655,  264,  264,  264,  655,  264,  264,
      264,  264,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  141,  655,  141,  655,
      655,  655,  655,  141,  655,  655,  655,  655,  655,  655,
      141,  655,  655,  141,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  288,  288,
      655,  655,  655,  288,  655,  655,  655,  655,  288,  168,
      655,  655,  655,  168,  168,  655,  655,  655,  168,  168,

      168,  655,  168,  168,  168,  170,  170,  170,  655,  655,
      170,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  184,  655,  655,  655,  184,
      184,  655,  655,  655,  184,  184,  184,  655,  184,  184,
      184,  227,  655,  227,  227,  227,  227,  655,  227,  655,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  231,  231,  231,  231,  655,  655,  655,  231,
      231,  231,  655,  231,  231,  234,  234,  655,  655,  655,
      234,  234,  234,  655,  655,  234,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  236,  236,  236,  236,  655,
      655,  655,  236,  236,  236,  655,  236,  236,  238,  238,
      655,  655,  655,  238,  238,  238,  655,  238,  238,  238,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,

      239,  239,  655,  239,  655,  655,  655,  655,  239,  655,
      655,  655,  655,  655,  655,  239,  655,  655,  239,  242,
      242,  655,  655,  655,  242,  242,  242,  655,  242,  242,
      242,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  655,  243,  655,  655,  655,  655,  243,
      655,  655,  655,  655,  655,  655,  243,  655,  655,  243,
      246,  246,  655,  655,  655,  246,  246,  246,  655,  246,
      246,  246,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  655,  247,  655,  655,  655,  655,
      247,  655,  655,  655,  655,  655,  655,  247,  655,  655,
      247,  250,  250,  655,  655,  655,  250,  250,  250,  655,
      250,  250,  250,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  655,  251,  655,  655,  655,
      655,  251,  655,  655,  655,  655,  655,  655,  251,  655,
      655,  251,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  655,  254,  655,  655,  655,  655,

      254,  655,  655,  655,  655,  655,  655,  254,  655,  655,
      254,  257,  257,  655,  655,  655,  257,  257,  257,  655,
      257,  257,  257,  374,  374,  655,  655,  655,  374,  655,
      655,  655,  655,  374,  264,  655,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  655,  264,  264,  264,  264,
      264,  655,  264,  264,  264,  264,  376,  376,  655,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  655,  379,  379,  379,  379,

      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  387,  387,  655,  655,  655,  387,  655,
      655,  655,  655,  387,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  288,  288,  655,

      655,  655,  288,  655,  655,  655,  655,  288,  170,  170,
      170,  655,  655,  170,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  184,  655,  655,
      655,  184,  184,  655,  655,  655,  184,  184,  184,  655,
      184,  184,  184,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  467,  467,  655,  655,  655,  467,  655,  655,  655,
      655,  467,  469,  469,  655,  655,  655,  469,  655,  655,
      655,  655,  469,  471,  471,  655,  655,  655,  471,  655,
      655,  655,  655,  471,  473,  473,  655,  655,  655,  473,
      655,  655,  655,  655,  473,  475,  475,  655,  655,  655,
      475,  655,  655,  655,  655,  475,  381,  655,  381,  655,
      655,  655,  655,  381,  655,  655,  655,  655,  655,  655,
      381,  655,  655,  381,  141,  141,  655,  655,  655,  141,
      655,  655,  655,  655,  141,  388,  655,  388,  655,  655,

      655,  655,  388,  655,  655,  655,  655,  655,  655,  388,
      655,  655,  388,  413,  655,  413,  655,  655,  655,  655,
      413,  655,  655,  655,  655,  655,  655,  413,  655,  655,
      413,  239,  239,  655,  655,  655,  239,  655,  655,  655,
      655,  239,  243,  243,  655,  655,  655,  243,  655,  655,
      655,  655,  243,  247,  247,  655,  655,  655,  247,  655,
      655,  655,  655,  247,  251,  251,  655,  655,  655,  251,
      655,  655,  655,  655,  251,  254,  254,  655,  655,  655,
      254,  655,  655,  655,  655,  254,  539,  539,  655,  655,
      655,  539,  655,  655,  655,  655,  539,  541,  541,  655,

      655,  655,  541,  655,  655,  655,  655,  541,  555,  555,
      655,  655,  655,  555,  655,  655,  655,  655,  555,  381,
      381,  655,  655,  655,  381,  655,  655,  655,  655,  381,
      388,  388,  655,  655,  655,  388,  655,  655,  655,  655,
      388,  413,  413,  655,  655,  655,  413,  655,  655,  655,
      655,  413,   29,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655
    } ;

static yyconst short int yy_chk[3633] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    5,    6,    6,    7,    7,    8,    8,  653,
        3,    4,    7,   42,    8,    3,    4,   47,   42,   47,

       47,   47,    7,  651,    8,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   15,   15,   25,   25,  175,   52,   34,   26,
       26,   52,  175,   44,   38,   44,   44,   44,   44,   68,
      126,  650,   25,   25,   25,   25,   62,   26,   26,   26,
       26,   15,   15,   15,   15,   15,   15,   15,   15,   41,
       41,   41,   34,   38,   15,   53,   52,   56,   43,  126,
       43,   43,   43,   43,   46,   41,   55,   41,   41,   41,

       41,   46,   43,   46,   46,   68,   41,   48,   43,   65,
       48,   48,  172,   62,  172,   25,   43,   15,   16,   16,
       26,   34,   38,   57,   56,   58,  107,  188,   56,   55,
      107,   53,   64,   60,   56,   51,   55,   53,   43,   59,
       55,  112,   65,   55,   61,  112,   65,   16,   16,   16,
       16,   16,   16,   16,   16,   66,   51,   51,   58,   51,
       16,   51,   58,   63,   51,   64,   58,   57,   51,   57,
       60,   51,   58,   51,  188,   58,  649,   59,   58,   57,
       60,   61,   64,  185,   59,   59,   69,   69,   69,   69,
       66,   61,   66,   16,   17,   17,  312,   67,   66,  136,

       90,   63,   90,   90,   90,   90,  117,  122,  155,  155,
      117,  122,   66,   63,  132,  132,  132,  132,  201,  185,
      131,  131,  131,   17,   17,   17,   17,   17,   17,   17,
       17,  312,  131,  136,  186,  190,   17,   67,  131,  133,
      133,  133,  133,  134,   67,  143,  131,   67,  142,  142,
      142,  174,  195,  648,  134,  149,  149,  149,  149,  174,
      189,  134,  646,  134,  134,  201,  142,  176,  131,   17,
       18,   18,  136,  176,  143,  179,  134,  134,  645,  179,
      152,  190,  152,  152,  152,  152,  186,  187,  195,  147,
      147,  147,  194,  189,  196,  152,  142,  192,  191,   18,

       18,   18,   18,   18,   18,   18,   18,  147,  147,  147,
      147,  152,   18,  143,  179,  153,  147,  153,  153,  153,
      153,  154,  197,  154,  154,  154,  154,  157,  198,  157,
      157,  157,  157,  191,  200,  206,  191,  199,  187,  187,
      202,  204,  196,  194,  208,   18,   19,   19,  192,  210,
      207,  192,  213,  215,  209,  212,  214,  216,  219,  220,
      218,  198,  217,  197,  295,  222,  197,  328,  224,  239,
      221,  223,  271,  239,  295,   19,   19,   19,   19,   19,
       19,   19,   19,  199,  200,  207,  202,  271,   19,  204,
      209,  206,  212,  214,  215,  217,  208,  207,  254,  219,

      310,  210,  213,  214,  218,  220,  216,  221,  222,  224,
      643,  225,  328,  225,  225,  225,  225,  258,  258,  258,
      221,   19,   20,   20,  223,  225,  272,  254,  223,  642,
      226,  225,  226,  226,  226,  226,  259,  259,  233,  225,
      233,  233,  233,  233,  240,  240,  240,  244,  244,  244,
      310,   20,   20,   20,   20,   20,   20,   20,   20,  243,
      272,  225,  240,  243,   20,  244,  247,  248,  248,  248,
      247,  251,  252,  252,  252,  251,  256,  256,  256,  261,
      261,  261,  261,  264,  641,  248,  263,  263,  263,  263,
      252,  640,  240,  273,  256,  244,  638,   20,   21,   21,

      262,  262,  262,  266,  637,  264,  636,  273,  273,  273,
      279,  279,  262,  267,  266,  248,  264,  264,  262,  269,
      252,  276,  276,  276,  256,  266,  262,   21,   21,   21,
       21,   21,   21,   21,   21,  267,  266,  266,  308,  279,
       21,  269,  287,  287,  305,  280,  267,  267,  262,  314,
      311,  313,  269,  269,  280,  280,  280,  285,  285,  285,
      285,  286,  286,  286,  286,  303,  303,  303,  316,  324,
      285,  322,  305,   21,   22,   22,  305,  315,  317,  323,
      320,  325,  326,  331,  335,  336,  285,  311,  334,  303,
      308,  329,  313,  341,  342,  343,  345,  337,  347,  346,

      314,  348,  351,   22,   22,   22,   22,   22,   22,   22,
       22,  356,  316,  315,  286,  326,   22,  320,  322,  317,
      324,  334,  344,  323,  349,  336,  329,  352,  353,  354,
      331,  334,  335,  325,  337,  373,  373,  341,  418,  348,
      363,  363,  363,  343,  347,  342,  380,  345,  351,   22,
       23,   23,  346,  365,  365,  365,  635,  344,  344,   23,
      367,  367,  367,  356,  352,  353,  354,  369,  369,  369,
      344,  358,  349,  358,  358,  358,  358,  359,  418,  359,
      359,  359,  359,  360,  380,  360,  360,  360,  360,  371,
      371,  371,  423,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  357,  377,
      357,  357,  357,  357,  379,  379,   23,   24,   24,  381,
      384,  388,  390,  357,  422,  425,   24,  386,  386,  386,
      634,  377,  633,  423,  384,  384,  384,  392,  632,  357,
      413,  414,  377,  377,  413,  414,  392,  392,  392,  421,
      388,  390,  631,  381,  396,  396,  396,  396,  425,  422,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  397,  397,  397,  397,  421,

      426,  630,  433,   24,   89,   89,  431,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
      383,  383,  383,  391,  391,  391,  435,   89,   89,   89,
       89,   89,   89,   89,  411,  411,  411,  484,  383,  433,
      484,  391,   89,   89,   89,   89,  426,   89,  448,  438,
      629,  415,  415,  415,  439,  628,  431,  627,  411,  441,
      626,  624,  447,  567,  503,  453,  522,  623,  383,  415,
      435,  391,  449,   89,   89,   89,  454,   89,   89,   89,
       89,   89,   89,  102,  102,  448,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  415,

      429,  438,  453,  441,  439,  449,  102,  102,  102,  102,
      102,  102,  102,  447,  503,  460,  522,  454,  455,  461,
      567,  102,  102,  102,  102,  507,  102,  466,  466,  466,
      468,  468,  468,  509,  622,  429,  470,  470,  470,  515,
      513,  429,  472,  472,  472,  496,  500,  429,  460,  474,
      474,  474,  102,  102,  102,  504,  102,  102,  102,  102,
      102,  102,  138,  507,  455,  461,  138,  138,  477,  477,
      477,  479,  479,  479,  506,  508,  138,  138,  138,  494,
      494,  494,  496,  500,  513,  509,  515,  523,  528,  521,
      516,  529,  504,  562,  138,  533,  138,  538,  538,  538,

      138,  138,  138,  540,  540,  540,  138,  506,  554,  554,
      554,  560,  556,  508,  138,  573,  568,  575,  138,  593,
      138,  576,  138,  621,  138,  145,  521,  620,  529,  145,
      145,  533,  614,  611,  610,  609,  608,  523,  528,  145,
      145,  145,  516,  607,  562,  604,  603,  602,  560,  598,
      597,  591,  573,  589,  575,  587,  593,  145,  556,  145,
      586,  585,  582,  145,  145,  145,  568,  581,  579,  145,
      577,  576,  572,  571,  569,  565,  564,  145,  563,  561,
      558,  145,  552,  145,  551,  145,  550,  145,  180,  549,
      548,  547,  180,  180,  545,  544,  542,  537,  534,  527,

      517,  511,  180,  180,  180,  501,  499,  493,  492,  491,
      490,  489,  487,  486,  485,  483,  481,  476,  464,  462,
      180,  459,  180,  457,  456,  452,  180,  180,  180,  451,
      450,  445,  180,  444,  443,  442,  436,  434,  432,  424,
      180,  420,  419,  416,  180,  410,  180,  409,  180,  408,
      180,  232,  232,  407,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  406,  405,  404,
      403,  402,  401,  400,  232,  232,  232,  232,  232,  232,
      232,  399,  398,  389,  378,  376,  362,  361,  355,  232,
      232,  232,  232,  350,  232,  338,  333,  327,  321,  319,

      318,  307,  302,  301,  300,  299,  298,  297,  296,  294,
      293,  292,  291,  284,  282,  270,  268,  236,  235,  231,
      232,  232,  232,  230,  232,  232,  232,  232,  232,  232,
      237,  237,  211,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  205,  203,  193,  184,
      182,  181,  178,  237,  237,  237,  237,  237,  237,  237,
      177,  173,  171,  168,  163,  159,  158,  148,  237,  237,
      237,  237,  146,  237,  144,  139,  101,   88,   83,   75,
       74,   54,   50,   49,   45,   37,   33,   29,   28,   27,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  237,

      237,  237,    0,  237,  237,  237,  237,  237,  237,  274,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  274,  274,  274,  274,    0,    0,    0,
        0,    0,    0,    0,  274,  274,  274,  274,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  274,  274,
      274,  274,  274,  274,  281,    0,    0,    0,    0,    0,
        0,    0,    0,  281,  281,  281,  281,    0,    0,    0,
        0,    0,    0,    0,  281,  281,  281,  281,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  281,  281,
      281,  281,  281,  281,  304,  304,  304,  304,    0,    0,

        0,    0,    0,    0,    0,  304,  304,  304,  304,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  304,  304,
      304,  304,  304,  304,  304,  385,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  385,
      385,  385,  385,    0,    0,    0,    0,    0,    0,    0,
      385,  385,  385,  385,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  385,  385,  385,  385,  385,  385,
      393,    0,    0,    0,    0,    0,    0,    0,    0,  393,
      393,  393,  393,    0,    0,    0,    0,    0,    0,    0,
      393,  393,  393,  393,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  393,  393,  393,  393,  393,  393,
      412,  412,  412,  412,    0,    0,    0,    0,    0,    0,
        0,  412,  412,  412,  412,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  412,  412,  412,  412,  412,  412,
      412,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  666,    0,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  669,    0,    0,    0,
      669,  669,    0,    0,    0,  669,  669,  669,    0,  669,
      669,  669,  670,    0,  670,  670,  670,    0,    0,  670,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  672,    0,    0,    0,  672,  672,    0,    0,
        0,  672,  672,  672,    0,  672,  672,  672,  673,    0,
      673,  673,  673,  673,    0,  673,    0,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  675,
      675,  675,  675,    0,    0,    0,  675,  675,  675,    0,
      675,  675,  676,  676,    0,    0,    0,  676,  676,  676,
        0,    0,  676,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  678,  678,  678,  678,    0,    0,    0,  678,
      678,  678,    0,  678,  678,  679,  679,    0,    0,    0,
      679,  679,  679,    0,  679,  679,  679,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  681,  681,
        0,    0,    0,  681,  681,  681,    0,  681,  681,  681,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  683,  683,    0,    0,    0,  683,  683,  683,    0,
      683,  683,  683,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  685,  685,    0,    0,    0,  685,
      685,  685,    0,  685,  685,  685,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  688,  688,
        0,    0,    0,  688,  688,  688,    0,  688,  688,  688,
      689,    0,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,    0,  689,  689,  689,    0,  689,  689,
      689,  689,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  692,    0,  692,    0,
        0,    0,    0,  692,    0,    0,    0,    0,    0,    0,
      692,    0,    0,  692,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  695,  695,
        0,    0,    0,  695,    0,    0,    0,    0,  695,  696,
        0,    0,    0,  696,  696,    0,    0,    0,  696,  696,

      696,    0,  696,  696,  696,  697,  697,  697,    0,    0,
      697,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  700,    0,    0,    0,  700,
      700,    0,    0,    0,  700,  700,  700,    0,  700,  700,
      700,  701,    0,  701,  701,  701,  701,    0,  701,    0,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  702,  702,  702,  702,  702,  702,  702,

      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  703,  703,  703,  703,    0,    0,    0,  703,
      703,  703,    0,  703,  703,  704,  704,    0,    0,    0,
      704,  704,  704,    0,    0,  704,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,    0,
        0,    0,  706,  706,  706,    0,  706,  706,  707,  707,
        0,    0,    0,  707,  707,  707,    0,  707,  707,  707,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  709,    0,  709,    0,    0,    0,    0,  709,    0,
        0,    0,    0,    0,    0,  709,    0,    0,  709,  710,
      710,    0,    0,    0,  710,  710,  710,    0,  710,  710,
      710,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  712,    0,  712,    0,    0,    0,    0,  712,
        0,    0,    0,    0,    0,    0,  712,    0,    0,  712,
      713,  713,    0,    0,    0,  713,  713,  713,    0,  713,
      713,  713,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      714,  714,  714,  715,    0,  715,    0,    0,    0,    0,
      715,    0,    0,    0,    0,    0,    0,  715,    0,    0,
      715,  716,  716,    0,    0,    0,  716,  716,  716,    0,
      716,  716,  716,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  718,    0,  718,    0,    0,    0,
        0,  718,    0,    0,    0,    0,    0,    0,  718,    0,
        0,  718,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  720,    0,  720,    0,    0,    0,    0,

      720,    0,    0,    0,    0,    0,    0,  720,    0,    0,
      720,  721,  721,    0,    0,    0,  721,  721,  721,    0,
      721,  721,  721,  722,  722,    0,    0,    0,  722,    0,
        0,    0,    0,  722,  723,    0,  723,  723,  723,  723,
      723,  723,  723,  723,  723,    0,  723,  723,  723,  723,
      723,    0,  723,  723,  723,  723,  724,  724,    0,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,    0,  725,  725,  725,  725,

      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  728,  728,    0,    0,    0,  728,    0,
        0,    0,    0,  728,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  731,  731,    0,

        0,    0,  731,    0,    0,    0,    0,  731,  732,  732,
      732,    0,    0,  732,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  735,    0,    0,
        0,  735,  735,    0,    0,    0,  735,  735,  735,    0,
      735,  735,  735,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  738,  738,    0,    0,    0,  738,    0,    0,    0,
        0,  738,  739,  739,    0,    0,    0,  739,    0,    0,
        0,    0,  739,  740,  740,    0,    0,    0,  740,    0,
        0,    0,    0,  740,  741,  741,    0,    0,    0,  741,
        0,    0,    0,    0,  741,  742,  742,    0,    0,    0,
      742,    0,    0,    0,    0,  742,  743,    0,  743,    0,
        0,    0,    0,  743,    0,    0,    0,    0,    0,    0,
      743,    0,    0,  743,  744,  744,    0,    0,    0,  744,
        0,    0,    0,    0,  744,  745,    0,  745,    0,    0,

        0,    0,  745,    0,    0,    0,    0,    0,    0,  745,
        0,    0,  745,  746,    0,  746,    0,    0,    0,    0,
      746,    0,    0,    0,    0,    0,    0,  746,    0,    0,
      746,  747,  747,    0,    0,    0,  747,    0,    0,    0,
        0,  747,  748,  748,    0,    0,    0,  748,    0,    0,
        0,    0,  748,  749,  749,    0,    0,    0,  749,    0,
        0,    0,    0,  749,  750,  750,    0,    0,    0,  750,
        0,    0,    0,    0,  750,  751,  751,    0,    0,    0,
      751,    0,    0,    0,    0,  751,  752,  752,    0,    0,
        0,  752,    0,    0,    0,    0,  752,  753,  753,    0,

        0,    0,  753,    0,    0,    0,    0,  753,  754,  754,
        0,    0,    0,  754,    0,    0,    0,    0,  754,  755,
      755,    0,    0,    0,  755,    0,    0,    0,    0,  755,
      756,  756,    0,    0,    0,  756,    0,    0,    0,    0,
      756,  757,  757,    0,    0,    0,  757,    0,    0,    0,
        0,  757,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*
 *  Authors:
 *    Martin Henz <henz@iscs.nus.sg>
 *    Leif Kornstaedt <kornstae@ps.uni-sb.de>
 * 
 *  Copyright:
 *    Martin Henz and Leif Kornstaedt, 1996-1999
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation of Oz 3:
 *    http://www.mozart-oz.org
 * 
 *  See the file "LICENSE" or
 *    http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */
#include <string.h>
#include <sys/stat.h>

#if !defined(__MINGW32__) && !defined(_MSC_VER)
#include <pwd.h>
#endif

#include "conf.h"
#include "base.hh"
#include "os.hh"
#include "dictionary.hh"
#include "am.hh"

#include "parser.hh"

void xyreportError(char *kind, char *message,
		   const char *file, int line, int column);
void xy_setScannerPrefix();
void xy_setParserExpect();

char xyFileName[100];
char xyhelpFileName[100];
OZ_Term xyFileNameAtom;

int xy_gumpSyntax, xy_allowDeprecated;
OZ_Term xy_errorMessages;

static int errorFlag;


//*******************
// THE INPUT ROUTINE
//*******************

int xylino;                             // current line number
char *xylastline;                       // remember where we have put the input

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size)   xy_input(buf, result, max_size)

static void xy_input(char *buf, int &result, const int max_size) {
  xylastline = buf;

  // read one line into buf
  int curpos = 0;
  int c = fgetc(xyin);
  while(curpos < max_size && c != EOF && c != OZEOF && c != '\n') {
    buf[curpos++] = c;
    if (curpos < max_size)
      c = fgetc(xyin);
  }

  if (c == EOF || c == OZEOF) {
    if (curpos > 0)   // did we read other chars than EOF?
      result = curpos;
    else
      result = YY_NULL;
  } else {
    if (curpos < max_size)
      buf[curpos++] = c;
    result = curpos;
  }
}


//****************
// OUTPUT OF FLEX
//****************

#undef YY_DECL
#define YY_DECL static int xymylex()


//*************************
// CONDITIONAL COMPILATION
// uses a stack of flags;
// \ifdef and \ifndef push
// \else toggles top
// \endif pops.
//*************************

static OzDictionary *defines;

#define CONDITIONALMAXDEPTH 1000

static int conditional[CONDITIONALMAXDEPTH];
static int conditional_p;       // points to top of stack
static int conditional_basep;   // points to bottom of stack

static void push_cond(int flag) {
  if (conditional_p < CONDITIONALMAXDEPTH - 1)
    conditional[++conditional_p] = flag;
  else
    xyreportError("macro directive limitation",
		  "conditionals nested too deep",
		  xyFileName,xylino,xycharno());
}

static void pop_cond() {
  if (conditional_p > conditional_basep)
    conditional_p--;
  else
    xyreportError("macro directive error",
		  "\\endif without previous corresponding \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
}

static void toggle_cond() {
  if (conditional_p > conditional_basep) {
    // toggle top of flag stack
    if (conditional[conditional_p])
      conditional[conditional_p] = 0;
    else
      conditional[conditional_p] = 1;
  } else
    xyreportError("macro directive error",
		  "\\else without previous corresponding \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
}

static int get_cond() {
  int i = conditional_p;
  while (i > conditional_basep)
    if (!conditional[i--])
      return 0;
  return 1;
}


//***********************
// STACK OF FILE ENTRIES
// for \insert
//***********************

class XyFileEntry {
public:
  YY_BUFFER_STATE buffer;
  OZ_Term fileNameAtom;
  int lino;
  int conditional_basep;
  XyFileEntry *previous;

  XyFileEntry(YY_BUFFER_STATE b, OZ_Term f, int l, int c, XyFileEntry *p):
      buffer(b), fileNameAtom(f), lino(l), conditional_basep(c), previous(p) {}
};

static XyFileEntry *bufferStack;

static void push_insert(FILE *filep, char *fileName) {
  bufferStack = new XyFileEntry(YY_CURRENT_BUFFER, xyFileNameAtom, xylino,
				conditional_basep, bufferStack);
  strncpy(xyFileName, fileName, 99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(fileName);
  xyin = filep;
  BEGIN(INITIAL);
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  xylino = 1;
  conditional_basep = conditional_p;
}

static int pop_insert() {
  if (conditional_p > conditional_basep)
    xyreportError("macro directive error",
		  "unterminated \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
  errorFlag = 0;
  if (bufferStack != NULL) {
    fclose(xyin);
    xy_switch_to_buffer(bufferStack->buffer);
    xyFileNameAtom = bufferStack->fileNameAtom;
    const char *fileName = OZ_atomToC(xyFileNameAtom);
    strncpy(xyFileName, fileName, 99);
    xyFileName[99] = '\0';
    xylino = bufferStack->lino;
    conditional_basep = bufferStack->conditional_basep;
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
    return 0;
  } else
    return 1;
}


//**********
// COMMENTS
//**********

static int commentdepth;
static OZ_Term commentfile;
static int commentlino;
static int commentoffset;
static int commentlastmode;


//*********************
// FILE NAME EXPANSION
//*********************

static char *getHomeUser(char *user) {
#ifdef WINDOWS
  return NULL;
#else
  struct passwd *pwentry = getpwnam(user);
  return pwentry != NULL? pwentry->pw_dir: (char *) NULL;
#endif
}

static int isReadableFile(char *file) {
  struct stat buf;

  if (access(file, F_OK) < 0 || stat(file, &buf) < 0)
    return 0;

  return !S_ISDIR(buf.st_mode);
}

static char *checkAccess(char *file) {
  char *ret = new char[strlen(file) + 1 + 3];

  strcpy(ret, file);
  if (isReadableFile(ret))
    return ret;

  strcat(ret, ".oz");
  if (isReadableFile(ret))
    return ret;

  delete[] ret;
  return NULL;
}

static char *scExpndFileName(char *fileName, char *curfile) {
  // full pathname given?
  if (fileName[0] == '/' ||
#ifdef WINDOWS
      fileName[1] == ':' ||   // good old DOS filename like E:...
#endif
      !strncmp(fileName, "./", 2))
    return checkAccess(fileName);

  // expand "~"
  if (fileName[0] == '~') {
    char *userhome;
    int len = 0;
    if (fileName[1] == '/') {
      userhome = getenv("HOME");
      len = 2;
    } else {
      char *rest = strchr(fileName, '/');
      if (rest == NULL)
	userhome = NULL;
      else {
	len = (rest + 1) - fileName;
	rest[0] = '\0';
	userhome = getHomeUser(&fileName[1]);
	rest[0] = '/';
      }
    }
    if (userhome == NULL)
      return NULL;

    char *help = new char[strlen(userhome) + 1 + strlen(&fileName[len]) + 1];
    sprintf(help, "%s/%s", userhome, &fileName[len]);
    char *ret = checkAccess(help);
    delete[] help;

    return ret;
  }

  // search in "current" directory
  if (curfile != NULL) {
    int i = strlen(curfile);
    while (i != 0 && curfile[i - 1] != '/')   // i. e., the dir part of curfile
      i--;
    if (i != 0) {
      char *help = new char[i + strlen(fileName) + 1];
      strncpy(help, curfile, i);
      strcpy(&help[i], fileName);
      char *ret = checkAccess(help);
      delete[] help;

      if (ret != NULL)
	return ret;
    }
  }

  // search in OZPATH
  char *path = getenv("OZPATH");
  if (path == NULL)
    path = ".";

  while (path[0] != '\0') {
    int i;
    for (i = 0; path[i] != PathSeparator && path[i] != '\0'; i++);
    char *help = new char[i + 1 + strlen(fileName) + 1];
    strncpy(help, path, i);
    help[i] = '/';
    strcpy(&help[i + 1], fileName);
    char *ret = checkAccess(help);
    delete[] help;
    if (ret != NULL)
      return ret;
    if (path[i] == '\0')
      break;
    path = &path[i + 1];
  }

  return NULL;
}


//***************************
// TREATING STRINGS AND SUCH
//***************************

static void stripDot() {
  int i, j;
  for (i = 0; xytext[i] < '0' || xytext[i] > '9'; i++)
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
  for (j = 0; xytext[i] != '\0'; xytext[j++] = xytext[i++]);
  xytext[j] = '\0';
}

static void strip(char c) {
  if (xytext[0] == c) {
    int i = 1;
    while (xytext[i] != '\0') {
      xytext[i - 1] = xytext[i];
      i++;
    }
    xytext[i - 2] = '\0';
  }
}

static void stripRegex() {
  int i = 1;
  while (xytext[i] != '\0') {
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
    xytext[i - 1] = xytext[i];
    i++;
  }
  xytext[i - 2] = '\0';
}

static void transBody(char c, char *text, int &i, int &j) {
  int jstart = j;
  while (text[j] != c) {
    if (text[j] == '\n')
      xylino++;
    if (text[j] == '\\') {
      j++;
      switch (text[j]) {
      case 'a':
	text[i] = '\a';
	break;
      case 'b':
	text[i] = '\b';
	break;
      case 'f':
	text[i] = '\f';
	break;
      case 'n':
	text[i] = '\n';
	break;
      case 'r':
	text[i] = '\r';
	break;
      case 't':
	text[i] = '\t';
	break;
      case 'v':
	text[i] = '\v';
	break;
      case 'x':
      case 'X':
	{ char hexstring[3];
	  hexstring[0] = text[++j];
	  hexstring[1] = text[++j];
	  hexstring[2] = '\0';
	  int hexnum = (int) strtol(hexstring, NULL, 16);
	  if (hexnum == 0 && get_cond())
	    xyreportError("lexical error",
			  "character in hexadecimal notation =< 0",
			  xyFileName,xylino,xycharno() + (j - jstart));
	  text[i] = hexnum;
	}
	break;
      case '\\':
      case '`':
      case '\"':
      case '\'':
      case '&':
	text[i] = text[j];
	break;
      default:
	{ char octstring[4];
	  octstring[0] = text[j++];
	  octstring[1] = text[j++];
	  octstring[2] = text[j];
	  octstring[3] = '\0';
	  int octnum = (int) strtol(octstring, NULL, 8);
	  if ((octnum == 0 || octnum > 255) && get_cond())
	    xyreportError("lexical error",
			  "character in octal notation =< 0 or >= 256",
			  xyFileName,xylino,xycharno() + (j - jstart));
	  text[i] = octnum & 0xFF;
	}
      }
    } else
      text[i] = text[j];
    i++;
    j++;
  }
}

static void stripTrans(char c) {
  if (xytext[0] == c) {
    int i = 0;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i] = '\0';
  }
}

static void trans(char c) {
  if (xytext[0] == c) {
    int i = 1;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i++] = c;
    xytext[i] = '\0';
  }
}

#define COMMENT 1

#define IGNOREDIRECTIVE 2
#define DIRECTIVE 3

#define LINE 4
#define SWITCHDIR 5
#define INSERT 6
#define DEFINE 7
#define IFDEF 8
#define IFNDEF 9
#define UNDEF 10

#define SCANNERPREFIX 11
#define PARSEREXPECT 12

#define LEX 13


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 656 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3553 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
;
	YY_BREAK
case 2:
YY_RULE_SETUP
{ commentdepth = 1;
				 commentfile = xyFileNameAtom;
				 commentlino = xylino;
				 commentoffset = xycharno();
				 commentlastmode = YYSTATE;
				 BEGIN(COMMENT);
			       }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ commentdepth++; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ if (--commentdepth == 0)
				   BEGIN(commentlastmode);
			       }
	YY_BREAK
case 5:
YY_RULE_SETUP
;
	YY_BREAK
case 6:
YY_RULE_SETUP
{ xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case 7:
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{ if (get_cond()) {
				   const char *file = OZ_atomToC(commentfile);
				   xyreportError("lexical error",
						 "unterminated comment",
						 file,commentlino,commentoffset);
				 }
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ BEGIN(SWITCHDIR); return T_SWITCH; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_PUSHSWITCHES; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_POPSWITCHES; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_LOCALSWITCHES; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ if (get_cond()) BEGIN(LINE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ BEGIN(INSERT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ BEGIN(DEFINE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ BEGIN(UNDEF); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ BEGIN(IFDEF); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ BEGIN(IFNDEF); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ toggle_cond();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ pop_cond();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ BEGIN(SCANNERPREFIX); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ BEGIN(PARSEREXPECT); }
	YY_BREAK

case 22:
YY_RULE_SETUP
;
	YY_BREAK
case 23:
YY_RULE_SETUP
;
	YY_BREAK
case 24:
YY_RULE_SETUP
{ BEGIN(INITIAL);
				 xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case YY_STATE_EOF(IGNOREDIRECTIVE):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 25:
YY_RULE_SETUP
;
	YY_BREAK
case 26:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(DIRECTIVE):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 28:
YY_RULE_SETUP
{ xylino = atol(xytext) - 1; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ strip('\'');
				 char *fullname = scExpndFileName(xytext,xyFileName);
				 if (fullname != NULL) {
				   strncpy(xyFileName, fullname, 99);
				   delete[] fullname;
				 } else
				   strncpy(xyFileName, xytext, 99);
				 xyFileName[99] = '\0';
				 xyFileNameAtom = OZ_atom(xyFileName);
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 30:
YY_RULE_SETUP
;
	YY_BREAK
case 31:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(LINE):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 33:
YY_RULE_SETUP
{ return '+'; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return '-'; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return T_SWITCHNAME; }
	YY_BREAK
case 36:
YY_RULE_SETUP
;
	YY_BREAK
case 37:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(SWITCHDIR):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 39:
YY_RULE_SETUP
{ if (get_cond()) {
				   strip('\'');
				   char *fullname = scExpndFileName(xytext,xyFileName);
				   if (fullname != NULL) {
				     OZ_Term coord =
				       OZ_mkTupleC("pos",3,xyFileNameAtom,
						   OZ_int(xylino),
						   OZ_int(xycharno()));
				     xy_errorMessages =
				       oz_cons(OZ_mkTupleC("logInsert",2,
							   OZ_atom(fullname),
							   coord),
					       xy_errorMessages);
				     FILE *filep = fopen(fullname, "r");
				     push_insert(filep, fullname);
				     delete[] fullname;
				     BEGIN(INITIAL);
				   } else {
				     const char *s =
				       "could not open file `";
				     char *f = new char[strlen(s) + 1 +
							strlen(xytext) + 2];
				     strcpy(f,s);
				     strcat(f,xytext);
				     strcat(f,"'");
				     xyreportError("macro directive error",f,
						   xyFileName,xylino,xycharno());
				     delete[] f;
				     BEGIN(DIRECTIVE);
				   }
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 40:
YY_RULE_SETUP
;
	YY_BREAK
case 41:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(INSERT):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 43:
YY_RULE_SETUP
{ if (get_cond()) {
				   trans('`');
				   OZ_Term key = OZ_atom(xytext);
				   defines->setArg(key, NameTrue);
				   BEGIN(DIRECTIVE);
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 44:
YY_RULE_SETUP
;
	YY_BREAK
case 45:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(DEFINE):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 47:
YY_RULE_SETUP
{ if (get_cond()) {
				   trans('`');
				   defines->remove(OZ_atom(xytext));
				   BEGIN(DIRECTIVE);
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 48:
YY_RULE_SETUP
;
	YY_BREAK
case 49:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ if (errorFlag)
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(UNDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 51:
YY_RULE_SETUP
{ trans('`');
				 OZ_Term key = OZ_atom(xytext);
				 push_cond(OZ_isTrue(defines->member(key)));
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 52:
YY_RULE_SETUP
;
	YY_BREAK
case 53:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(IFDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 55:
YY_RULE_SETUP
{ trans('`');
				 OZ_Term key = OZ_atom(xytext);
				 push_cond(!OZ_isTrue(defines->member(key)));
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 56:
YY_RULE_SETUP
;
	YY_BREAK
case 57:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(IFNDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 59:
YY_RULE_SETUP
{ stripTrans('\'');
				 xy_setScannerPrefix();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 60:
YY_RULE_SETUP
;
	YY_BREAK
case 61:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(SCANNERPREFIX):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK


case 63:
YY_RULE_SETUP
{ xy_setParserExpect();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 64:
YY_RULE_SETUP
;
	YY_BREAK
case 65:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(PARSEREXPECT):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 67:
YY_RULE_SETUP
{ BEGIN(INITIAL); return T_REGEX; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ BEGIN(INITIAL); stripRegex(); return T_REGEX; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return T_CHOICE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return T_LDOTS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return T_2DOTS; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return T_ITER; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return T_OOASSIGN; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return T_DEFAULT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return T_REDUCE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return T_DEREFF; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return T_SEP; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return T_ADD; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return T_FDMUL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return T_OTHERMUL; }
	YY_BREAK
case 81:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OTHERMUL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return T_COMPARE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return T_FDIN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ return T_FDCOMPARE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ return T_LMACRO; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ return T_RMACRO; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ // Hack to avoid strange parsing of X.1.1:
				 // If "." is followed by integer, then
				 // a special token is returned.
				 // If this rule would not be there, the
				 // resulting tokens would be "X" "." "1.1",
				 // where the last one is a float.
				 // Caveat: Comments are not allowed
				 //         between . and number.
				 stripDot(); return T_DOTINT; }
	YY_BREAK
case 88:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ // Hack to avoid parsing error for a(b:1...):
				 // If int is followed by ..., int is returned.
				 // If this rule would not be there, the rule
				 // for floats would match and an error would
				 // occur.
				 return T_OZINT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ return T_OZINT; }
	YY_BREAK
case 90:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OZINT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ return T_OZFLOAT; }
	YY_BREAK
case 92:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_UNIT_LABEL; }
	YY_BREAK
case 93:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_TRUE_LABEL; }
	YY_BREAK
case 94:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FALSE_LABEL; }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ return T_andthen; }
	YY_BREAK
case 96:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_andthen; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ return T_at; }
	YY_BREAK
case 98:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_at; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ return T_attr; }
	YY_BREAK
case 100:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_attr; }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ return T_case; }
	YY_BREAK
case 102:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_case; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ return T_catch; }
	YY_BREAK
case 104:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_catch; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ return T_choice; }
	YY_BREAK
case 106:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_choice; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ return T_class; }
	YY_BREAK
case 108:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_class; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ return T_cond; }
	YY_BREAK
case 110:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_cond; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ return T_declare; }
	YY_BREAK
case 112:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_declare; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ return T_define; }
	YY_BREAK
case 114:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_define; }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ return T_dis; }
	YY_BREAK
case 116:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_dis; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ return T_else; }
	YY_BREAK
case 118:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_else; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ return T_elsecase; }
	YY_BREAK
case 120:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elsecase; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ return T_elseif; }
	YY_BREAK
case 122:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseif; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ return T_elseof; }
	YY_BREAK
case 124:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseof; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ return T_end; }
	YY_BREAK
case 126:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_end; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ return T_export; }
	YY_BREAK
case 128:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_export; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ return T_fail; }
	YY_BREAK
case 130:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fail; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ return T_false; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ return T_feat; }
	YY_BREAK
case 133:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_feat; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return T_finally; }
	YY_BREAK
case 135:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_finally; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ return T_from; }
	YY_BREAK
case 137:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_from; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ return T_fun; }
	YY_BREAK
case 139:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fun; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ return T_functor; }
	YY_BREAK
case 141:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_functor; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ return T_if; }
	YY_BREAK
case 143:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_if; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ return T_import; }
	YY_BREAK
case 145:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_import; }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ return T_in; }
	YY_BREAK
case 147:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_in; }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_OZATOM; }
	YY_BREAK
case 149:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_ATOM_LABEL; }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ return T_local; }
	YY_BREAK
case 151:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_local; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ return T_lock; }
	YY_BREAK
case 153:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_lock; }
	YY_BREAK
case 154:
YY_RULE_SETUP
{ return T_meth; }
	YY_BREAK
case 155:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_meth; }
	YY_BREAK
case 156:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_OZATOM; }
	YY_BREAK
case 157:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_ATOM_LABEL; }
	YY_BREAK
case 158:
YY_RULE_SETUP
{ return T_not; }
	YY_BREAK
case 159:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_not; }
	YY_BREAK
case 160:
YY_RULE_SETUP
{ return T_of; }
	YY_BREAK
case 161:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_of; }
	YY_BREAK
case 162:
YY_RULE_SETUP
{ return T_or; }
	YY_BREAK
case 163:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_or; }
	YY_BREAK
case 164:
YY_RULE_SETUP
{ return T_orelse; }
	YY_BREAK
case 165:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_orelse; }
	YY_BREAK
case 166:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_OZATOM; }
	YY_BREAK
case 167:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_ATOM_LABEL; }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ return T_prepare; }
	YY_BREAK
case 169:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prepare; }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ return T_proc; }
	YY_BREAK
case 171:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_proc; }
	YY_BREAK
case 172:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_OZATOM; }
	YY_BREAK
case 173:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_ATOM_LABEL; }
	YY_BREAK
case 174:
YY_RULE_SETUP
{ return T_prop; }
	YY_BREAK
case 175:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prop; }
	YY_BREAK
case 176:
YY_RULE_SETUP
{ return T_raise; }
	YY_BREAK
case 177:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_raise; }
	YY_BREAK
case 178:
YY_RULE_SETUP
{ return T_require; }
	YY_BREAK
case 179:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_require; }
	YY_BREAK
case 180:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_OZATOM; }
	YY_BREAK
case 181:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_ATOM_LABEL; }
	YY_BREAK
case 182:
YY_RULE_SETUP
{ return T_self; }
	YY_BREAK
case 183:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_self; }
	YY_BREAK
case 184:
YY_RULE_SETUP
{ return T_skip; }
	YY_BREAK
case 185:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_skip; }
	YY_BREAK
case 186:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_OZATOM; }
	YY_BREAK
case 187:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_ATOM_LABEL; }
	YY_BREAK
case 188:
YY_RULE_SETUP
{ return T_then; }
	YY_BREAK
case 189:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_then; }
	YY_BREAK
case 190:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_OZATOM; }
	YY_BREAK
case 191:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_ATOM_LABEL; }
	YY_BREAK
case 192:
YY_RULE_SETUP
{ return T_thread; }
	YY_BREAK
case 193:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_thread; }
	YY_BREAK
case 194:
YY_RULE_SETUP
{ return T_true; }
	YY_BREAK
case 195:
YY_RULE_SETUP
{ return T_try; }
	YY_BREAK
case 196:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_try; }
	YY_BREAK
case 197:
YY_RULE_SETUP
{ return T_unit; }
	YY_BREAK
case 198:
YY_RULE_SETUP
{ return T_loop; }
	YY_BREAK
case 199:
YY_RULE_SETUP
{ return T_for; }
	YY_BREAK
case 200:
YY_RULE_SETUP
{ return T_do; }
	YY_BREAK
case 201:
YY_RULE_SETUP
{ stripTrans('\''); return T_OZATOM; }
	YY_BREAK
case 202:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_OZATOM;}
	YY_BREAK
case 203:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ stripTrans('\''); return T_ATOM_LABEL; }
	YY_BREAK
case 204:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_ATOM_LABEL;}
	YY_BREAK
case 205:
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE; }
	YY_BREAK
case 206:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
	YY_BREAK
case 207:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE_LABEL; }
	YY_BREAK
case 208:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
	YY_BREAK
case 209:
YY_RULE_SETUP
{ stripTrans('\"'); return T_STRING; }
	YY_BREAK
case 210:
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal string syntax",xyFileName,xylino,xycharno()); return T_STRING;}
	YY_BREAK
case 211:
YY_RULE_SETUP
{ int i = 0;
				 int j = 1;
				 transBody(0, xytext, i, j);
				 return T_AMPER;
			       }
	YY_BREAK
case 212:
YY_RULE_SETUP
{
				 return xytext[0];
			       }
	YY_BREAK
case 213:
YY_RULE_SETUP
;
	YY_BREAK
case 214:
YY_RULE_SETUP
{ xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case 215:
YY_RULE_SETUP
{ if (get_cond())
				   xyreportError("lexical error",
						 "unknown directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(IGNOREDIRECTIVE);
			       }
	YY_BREAK
case 216:
YY_RULE_SETUP
{ if (get_cond())
				   xyreportError("lexical error",
						 "illegal character",
						 xyFileName,xylino,xycharno());
			       }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEX):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK
case 217:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 79);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 656 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 79;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 656 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 655);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


static void xy_init(OZ_Term defines0) {
  xylino = 1;
  errorFlag = 0;

  bufferStack = NULL;

  defines = tagged2Dictionary(OZ_deref(defines0));
  conditional_p = 0;
  conditional_basep = 0;
  commentdepth = 0;

  BEGIN(INITIAL);
}

int xy_init_from_file(char *file, OZ_Term defines) {
  char *fullname = scExpndFileName(file, NULL);
  if (fullname == NULL)
    return 0;
  xy_errorMessages = oz_cons(OZ_mkTupleC("logInsert",1,OZ_atom(fullname)),
			     AtomNil);
  xyin = fopen(fullname, "r");
  if (xyin == NULL)
    return 0;
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  strncpy(xyFileName,fullname,99);
  xyFileName[99] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  delete[] fullname;
  xy_init(defines);
  return 1;
}

void xy_init_from_string(char *str, OZ_Term defines) {
  xy_errorMessages = AtomNil;
  xyFileName[0] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  xyin = NULL;
  xy_scan_string(str);
  xylastline = YY_CURRENT_BUFFER->yy_ch_buf;
  xy_init(defines);
}

char *xy_expand_file_name(char *file) {
  return scExpndFileName(file, NULL);
}

void xy_exit() {
  xy_delete_buffer(YY_CURRENT_BUFFER);
  while (bufferStack != NULL) {
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
  }
  if (xyin)
    fclose(xyin);
}

int xylex() {
  int next = xymylex();
  if (get_cond() || next == 0 || next == ENDOFFILE)
    return next;
  else
    return xylex();
}

/*
 *  Authors:
 *    Kostja Popow (popow@ps.uni-sb.de)
 *    Michael Mehl (mehl@dfki.de)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     $MOZARTURL$
 * 
 *  See the file "LICENSE" or
 *     $LICENSEURL$
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */

#ifndef __AM_ICC
#define __AM_ICC

#if !defined(OUTLINE) && defined(INTERFACE)
#pragma interface
#endif

// optimize: inline ....

INLINE
void oz_deinstallCurrent()
{
  oz_reduceTrailOnSuspend();
  oz_currentBoard()->unsetInstalled();
  am.setCurrent(oz_currentBoard()->getParent());
}

INLINE
void oz_deinstallPath(Board *top)
{
  Assert(!top->isCommitted() && !top->isFailed());
  
  while (!oz_isCurrentBoard(top)) {
    oz_deinstallCurrent();
  }
}

#define ShallowCheckLocal(ptr)						\
   if (inShallowGuard()) return reallyHeapNever(ptr,_shallowHeapTop);

INLINE
Bool AM::isLocalUVar(TaggedRef var,TaggedRef *varPtr)
{
  // variables are usually bound 
  // in the node where they are created
  ShallowCheckLocal(varPtr);
  if (currentUVarPrototypeEq(var)) return OK;
  return isLocalUVarOutline(var,varPtr);
}


INLINE
Bool AM::isLocalSVar(SVariable *var) {
  ShallowCheckLocal(var);
  return (oz_isCurrentBoard(var->getHome1())) || isLocalSVarOutline(var);
}

#undef ShallowCheckLocal

INLINE
Bool AM::isLocalSVar(TaggedRef var) {
  return isLocalSVar(tagged2SVarPlus(var));
}

INLINE
Bool AM::isLocalVariable(TaggedRef var,TaggedRef *varPtr)
{
  CHECK_ISVAR(var);

  if (isUVar(var)) return isLocalUVar(var,varPtr);
  return isLocalSVar(var);
}

/* ------------------------------------------------------------------------
 * Threads
 * ------------------------------------------------------------------------ */

INLINE
int AM::newId() {
  unsigned int currentThreadID = oz_currentThread() ?
    oz_currentThread()->getID() & THREAD_ID_MASK : 1;
  lastThreadID = (lastThreadID + 1) & THREAD_ID_MAX;
  return lastThreadID | (currentThreadID << THREAD_ID_SIZE);
}

INLINE
Thread *oz_newThreadInternal(int prio, Board *bb) {
  Thread *th = new Thread(S_RTHREAD | T_runnable,prio,bb,am.newId());
  th->setBody(am.threadsPool.allocateBody());
  bb->incSuspCount();
  oz_checkDebug(th,bb);
  return th;
}

//
//  Make a runnable thread with a task stack;
INLINE 
Thread *oz_mkRunnableThread(int prio, Board *bb)
{
  Thread *th = oz_newThreadInternal(prio,bb);

  int inSolve = oz_incSolveThreads(bb);
  if (inSolve) {
    th->setInSolve();
  }
  return th;
}

//
//  Make a runnable thread with a task stack;
INLINE 
Thread *oz_mkRunnableThreadOPT(int prio, Board *bb)
{
  Thread *th = oz_newThreadInternal(prio,bb);

  Assert(oz_isCurrentBoard(bb) || oz_isCurrentBoard(bb->getParent()));
  if (am.isBelowSolveBoard()) {
    int inSolve=oz_incSolveThreads(bb);
    Assert(inSolve);
    th->setInSolve();
  } else {
    Assert(!oz_isInSolveDebug(bb));
  }
  return th;
}

//
INLINE
Propagator * oz_mkPropagator(Board * bb, int prio, OZ_Propagator * p)
{
  Propagator * prop = new Propagator(p, bb);
  prop->markRunnable();
  prop->markUnifyPropagator();

  if (! p->isMonotonic()) 
    prop->markNonMonotonicPropagator();

  bb->incSuspCount();

  /* checkDebug(th,bb); TMUELLER ask BENNI */

  return prop;
}

//
INLINE 
Thread *oz_mkSuspendedThread(Board *bb, int prio)
{
  Thread *th = new Thread(S_RTHREAD,prio,bb,am.newId());
  th->setBody(am.threadsPool.allocateBody());
  bb->incSuspCount();

  oz_checkDebug(th,bb);

  return th;
}

INLINE
void oz_removeExtThread(Thread *tt) 
{
  if (tt->wasExtThread()) {
    oz_removeExtThreadOutlined(tt);
  }
}

INLINE 
void oz_suspThreadToRunnableOPT(Thread *tt)
{
  Assert(tt->isSuspended());

  tt->markRunnable();

  Assert(oz_isCurrentBoard(GETBOARD(tt)) || tt->isExtThread() ||
	 (oz_isCurrentBoard(GETBOARD(tt)->getParent())
	  && !GETBOARD(tt)->isSolve()));

  if (am.debugmode() && tt->getTrace()) {
    //Thread *t; if ((t = oz_currentThread()) && t->isTraced())
    //  execBreakpoint(t);
    debugStreamReady(tt);
  }
  
  if (am.isBelowSolveBoard() || tt->isExtThread()) {
    Assert(oz_isInSolveDebug(GETBOARD(tt)));
    oz_incSolveThreads(GETBOARD(tt));
    tt->setInSolve();
    oz_removeExtThread(tt);
    tt->clearExtThread();
  } else {
    Assert(!oz_isInSolveDebug(GETBOARD(tt)));
  }
}

INLINE 
void oz_suspThreadToRunnable(Thread *tt)
{
  Assert(tt->isSuspended());

  tt->markRunnable();

  if (am.debugmode() && tt->getTrace()) {
    //Thread *t; if ((t = oz_currentThread()) && t->isTraced())
    //  execBreakpoint(t);
    debugStreamReady(tt);
  }
  
  int inSolve = oz_incSolveThreads(GETBOARD(tt));
  if (inSolve) {
    tt->setInSolve();
    oz_removeExtThread(tt);
    tt->clearExtThread();
  }
}
 
INLINE 
void oz_updateSolveBoardPropagatorToRunnable(Thread *tt)
{
  if (am.isBelowSolveBoard() || tt->isExtThread()) {
    Assert(oz_isInSolveDebug(GETBOARD(tt)));
    oz_incSolveThreads(GETBOARD(tt));
    tt->setInSolve();
  } else {
    Assert(!oz_isInSolveDebug(GETBOARD(tt)));
  }
}

INLINE
void oz_propagatorToRunnable(Thread *tt)
{
  tt->markRunnable();

  oz_updateSolveBoardPropagatorToRunnable(tt);
}

//
INLINE
void oz_checkExtSuspension(Suspension susp) 
{
  if (susp.wasExtSuspension()) {
    oz_checkExtSuspensionOutlined(susp);
  }
}

#define WAKEUP_PROPAGATOR(CALL_WAKEUP_FUN)	\
{						\
  Board * bb = GETBOARD(prop);			\
  switch (oz_isBetween(bb, home)) {		\
  case B_BETWEEN:				\
						\
    if (calledBy)				\
      prop->markUnifyPropagator();		\
						\
    CALL_WAKEUP_FUN;				\
    return FALSE;				\
						\
  case B_NOT_BETWEEN:				\
    return FALSE;				\
						\
  case B_DEAD:					\
    prop->markDeadPropagator();			\
    oz_checkExtSuspension(prop);		\
    prop->dispose();				\
    return TRUE;				\
						\
  default:					\
    Assert(0);					\
    return FALSE;				\
  }						\
}

INLINE
Bool oz_wakeUpPropagator(Propagator * prop, Board * home, PropCaller calledBy)
{
  Assert(prop->getBoardInternal() && prop->getPropagator());

  Board *cb_cache = oz_currentBoard();
  
  if (prop->isNonMonotonicPropagator() && am.isBelowSolveBoard()) {
#ifdef DEBUG_NONMONOTONIC
    OZ_PropagatorProfile * profile = prop->getPropagator()->getProfile();
    char * pn = profile->getPropagatorName();
    printf("wakeUpPropagator: nonmono prop <%s %d>\n", 
	   pn, 
	   prop->getPropagator()->getOrder()); 
    fflush(stdout);
#endif

    Assert(!prop->getPropagator()->isMonotonic());

    WAKEUP_PROPAGATOR(prop->markRunnable();
		      SolveActor::Cast(am.currentSolveBoard()->getActor())->addToNonMonoSuspList(prop));
  }
  
  if (localPropStore.isUseIt()) {
    Assert(GETBOARD(prop) == cb_cache);
    prop->markRunnable();
    localPropStore.push(prop);
    return FALSE;
  }
  
  WAKEUP_PROPAGATOR(prop->markRunnable();
		    GETBOARD(prop)->pushToLPQ(prop));
} 

INLINE
void oz_scheduledPropagator(Propagator * prop)
{
  Assert(prop);
  Assert(!prop->isDeadPropagator());
  Assert(oz_isCurrentBoard(GETBOARD(prop)));

  prop->unmarkRunnable();
  oz_wakeUpPropagator(prop, oz_currentBoard(), pc_propagator);
}


//
//  (re-)Suspend the propagator again (former 'reviveCurrentTaskSusp');
INLINE
void oz_suspendPropagator(Propagator * prop)
{
  Assert(prop);
  Assert(!prop->isDeadPropagator());
  Assert(oz_isCurrentBoard(GETBOARD(prop)));

  prop->unmarkRunnable();
  prop->unmarkUnifyPropagator();
}

//
//  Dispose a thread. That's a private method!
INLINE
void oz_disposeThread(Thread *tt)
{
  tt->markDeadThread();

  if (am.debugmode() && tt->getTrace())
    debugStreamTerm(tt);
  
  switch (tt->getThrType()) {
  case S_RTHREAD: 
    am.threadsPool.freeThreadBody(tt);
    break;
    
  case S_WAKEUP: 
    break;
    
  default: 
    Assert(0);
  }
}

//
INLINE
void oz_disposeSuspendedThread(Thread *tt)
{
  Assert(tt->isSuspended());
  Assert(!GETBOARD(tt)->checkAlive());

  oz_disposeThread(tt);
}

//
//  It marks also the thread as dead;
INLINE 
void AM::oz_disposeRunnableThread(Thread *tt)
{
#ifdef DEBUG_THREADCOUNT
  if (tt->isLPQThread())
    existingLTQs -= 1;
#endif

  Assert(tt->isRunnable());

  oz_disposeThread(tt);
}

//
//  Close up a propagator which is done;
//  Actually, terminating a thread should be done through 
// 'LBLkillxxxx' in emulate.cc, but one cannot jump from the local 
// propagation queue there;
INLINE
void oz_closeDonePropagator(Propagator * prop)
{
  Assert(prop);
  Assert(!prop->isDeadPropagator());
  Assert(oz_isCurrentBoard(GETBOARD(prop)));

  // constructive disjunction ???
  // kost@: i don't know what's going on here - just keep it as it was;
  //if (isSuspended ()) 
  //return;

  prop->dispose();	// kost@: TODO? optimize;
  prop->markDeadPropagator();

  //
  //  Actually, the current board can be alive or not - 
  // so, in the last case it's redundant;
  oz_currentBoard()->decSuspCount();

  //
  //  ... again to the 'SolveActor::checkExtSuspList':
  // there is a limitation in the implementation that no stability
  // can be achieved before a propagator on a global variable(s) 
  // completely disappears. Therefore, we make the check here;
  oz_checkExtSuspension(prop);

  //
  //  An ESSENTIAL invariant:
  //  If entailment/whatever is reached somewhere, that's a bad news.
  //  I don't know how to check this assertion right now;
}

INLINE
void oz_closeDonePropagatorThreadCD(Propagator * prop)
{
  prop->markRunnable();
  oz_currentBoard()->decSuspCount();
  prop->markDeadPropagator();
  oz_checkExtSuspension(prop);
}

INLINE 
void oz_closeDonePropagatorCD(Propagator * prop) 
{
  prop->markRunnable();
  prop->dispose();
  prop->markDeadPropagator();
  oz_currentBoard()->decSuspCount();
  oz_checkExtSuspension(prop);
}

INLINE
OZ_Return oz_runPropagator(Propagator * p)
{
  ozstat.propagatorsInvoked.incf();

  CpiHeap.reset();

  if (am.profileMode()) {
    OZ_PropagatorProfile * prop = p->getPropagator()->getProfile();
    ozstat.enterProp(prop);
    int heapNow = getUsedMemoryBytes();
#ifdef DEBUG_PROPAGATORS
    OZ_PropagatorProfile * profile = prop;
    if (profile) {
      char * pn = profile->getPropagatorName();
      printf("<%s", pn); fflush(stdout);
    } else {
      printf("<CDSuppl"); fflush(stdout);
    }
#endif
    OZ_Return ret = p->getPropagator()->propagate();
#ifdef DEBUG_PROPAGATORS
    printf(">\n"); fflush(stdout);
#endif
    int heapUsed = getUsedMemoryBytes() - heapNow;
    prop->incHeap(heapUsed);
    ozstat.leaveProp();
    if (ozstat.currAbstr)
      ozstat.currAbstr->heapUsed -= heapUsed;
    return ret;
  } else {
#ifdef DEBUG_PROPAGATORS
    OZ_PropagatorProfile * profile = p->getPropagator()->getProfile();
    if (profile) {
      char * pn = profile->getPropagatorName();
      printf("<%s", pn); fflush(stdout);
    } else {
      printf("<CDSuppl"); fflush(stdout);
    }
    OZ_Return ret = p->getPropagator()->propagate();
    printf(">\n"); fflush(stdout);
    return ret;
#else
    return p->getPropagator()->propagate();
#endif
  }
}

/* ------------------------------------------------------------------------
 * OO stuff
 * ------------------------------------------------------------------------ */

INLINE
void AM::changeSelf(Object *o)
{
  Object *oldSelf = cachedSelf;
  if(o != oldSelf) {
    cachedStack->pushSelf(oldSelf);
    cachedSelf = o;
  }
}

INLINE
void AM::saveSelf()
{
  if (cachedSelf != 0) {
    oz_currentThread()->setSelf(cachedSelf);
    cachedSelf = 0;
  }
}

#endif  // __AM_ICC

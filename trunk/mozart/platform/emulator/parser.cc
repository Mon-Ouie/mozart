
/*  A Bison parser, made from /home/scheidhr/mozart/platform/emulator/parser.yy
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse xyparse
#define yylex xylex
#define yyerror xyerror
#define yylval xylval
#define yychar xychar
#define yydebug xydebug
#define yynerrs xynerrs
#define	SWITCH	258
#define	SWITCHNAME	259
#define	LOCALSWITCHES	260
#define	PUSHSWITCHES	261
#define	POPSWITCHES	262
#define	OZATOM	263
#define	ATOM_LABEL	264
#define	OZFLOAT	265
#define	OZINT	266
#define	AMPER	267
#define	DOTINT	268
#define	STRING	269
#define	VARIABLE	270
#define	VARIABLE_LABEL	271
#define	DEFAULT	272
#define	CHOICE	273
#define	LDOTS	274
#define	attr	275
#define	at	276
#define	_case_	277
#define	catch	278
#define	choice	279
#define	_class_	280
#define	cond	281
#define	_condis_	282
#define	declare	283
#define	define	284
#define	dis	285
#define	_else_	286
#define	elsecase	287
#define	elseif	288
#define	elseof	289
#define	end	290
#define	export	291
#define	fail	292
#define	false	293
#define	FALSE_LABEL	294
#define	feat	295
#define	finally	296
#define	_from_	297
#define	_fun_	298
#define	functor	299
#define	_if_	300
#define	import	301
#define	_in_	302
#define	local	303
#define	_lock_	304
#define	_meth_	305
#define	not	306
#define	of	307
#define	or	308
#define	prepare	309
#define	proc	310
#define	prop	311
#define	_raise_	312
#define	require	313
#define	self	314
#define	skip	315
#define	then	316
#define	thread	317
#define	true	318
#define	TRUE_LABEL	319
#define	try	320
#define	unit	321
#define	UNIT_LABEL	322
#define	ENDOFFILE	323
#define	REGEX	324
#define	lex	325
#define	_mode_	326
#define	_parser_	327
#define	prod	328
#define	_scanner_	329
#define	syn	330
#define	token	331
#define	REDUCE	332
#define	SEP	333
#define	OOASSIGN	334
#define	orelse	335
#define	andthen	336
#define	COMPARE	337
#define	FDCOMPARE	338
#define	FDIN	339
#define	ADD	340
#define	FDMUL	341
#define	OTHERMUL	342
#define	DEREFF	343


//
// See Oz/tools/compiler/Doc/TupleSyntax for an description of the
// generated parse trees.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>

#include "base.hh"


//----------------------
// Interface to Scanner
//----------------------

extern char xyFileName[];   // name of the current file, "" means stdin
extern char xyhelpFileName[];
extern OZ_Term xyFileNameAtom;

extern int xy_gumpSyntax, xy_allowDeprecated;
extern OZ_Term xy_errorMessages;

extern int xylino;
extern char *xytext;
extern char *xylastline;

char *xy_expand_file_name(char *file);

int xy_init_from_file(char *file, OZ_Term defines);
void xy_init_from_string(char *str, OZ_Term defines);
void xy_exit();

int xylex();

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

void checkDeprecation(OZ_Term coord);
void xyreportWarning(char *kind, char *msg, OZ_Term coord);
void xyreportError(char *kind, char *msg, OZ_Term coord);
void xyreportError(char *kind, char *msg,
		   const char *file, int line, int column);


//-----------------
// Local Variables
//-----------------

#define YYMAXDEPTH 1000000
#define YYERROR_VERBOSE

static OZ_Term nilAtom;
static OZ_Term yyoutput;

static void xyerror(char *);


// Gump Extensions

#define DEPTH 20

static int depth;

static char prodKeyBuffer[DEPTH][80];
static char *prodKey[DEPTH];
static OZ_Term prodName[DEPTH];

struct TermNode {
  OZ_Term term;
  TermNode *next;
  TermNode(OZ_Term t, TermNode *n) { term = t; next = n; }
};
static TermNode *terms[DEPTH];
static OZ_Term decls[DEPTH];


//---------------------
// Operations on Terms
//---------------------

#define pair(left,right) OZ_pair2(left,right)
#define consList(head,tail) OZ_cons(head,tail)

inline OZ_Term newCTerm(char *l) {
  return OZ_atom(l);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1) {
  return OZ_mkTupleC(l,1,t1);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2) {
  return OZ_mkTupleC(l,2,t1,t2);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3) {
  return OZ_mkTupleC(l,3,t1,t2,t3);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4) {
  return OZ_mkTupleC(l,4,t1,t2,t3,t4);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5) {
  return OZ_mkTupleC(l,5,t1,t2,t3,t4,t5);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5, OZ_Term t6) {
  return OZ_mkTupleC(l,6,t1,t2,t3,t4,t5,t6);
}

inline OZ_Term newCTerm(char *l, OZ_Term t1, OZ_Term t2, OZ_Term t3, OZ_Term t4, OZ_Term t5, OZ_Term t6, OZ_Term t7) {
  return OZ_mkTupleC(l,7,t1,t2,t3,t4,t5,t6,t7);
}

static OZ_Term makeLongPos(OZ_Term pos1, OZ_Term pos2) {
  return newCTerm("pos",OZ_subtree(pos1,OZ_int(1)),OZ_subtree(pos1,OZ_int(2)),
		  OZ_subtree(pos1,OZ_int(3)),OZ_subtree(pos2,OZ_int(1)),
		  OZ_subtree(pos2,OZ_int(2)),OZ_subtree(pos2,OZ_int(3)));
}

inline OZ_Term pos() {
  return newCTerm("pos",xyFileNameAtom,OZ_int(xylino),OZ_int(xycharno()));
}

inline OZ_Term makeVar(OZ_Term printName, OZ_Term pos) {
  return newCTerm("fVar",printName,pos);
}

inline OZ_Term makeVar(char *printName) {
  return makeVar(OZ_atom(printName),pos());
}

inline OZ_Term makeCons(OZ_Term first, OZ_Term second, OZ_Term pos) {
   return newCTerm("fRecord",
		   newCTerm("fAtom",OZ_atom("|"),pos),
		   consList(first,consList(second,nilAtom)));
}

static OZ_Term makeInt(char *chars, OZ_Term pos) {
  return newCTerm("fInt",OZ_CStringToInt(chars),pos);
}

static OZ_Term makeInt(char c, OZ_Term pos) {
  return newCTerm("fInt",OZ_int((unsigned char) c),pos);
}

static OZ_Term makeString(char *chars, OZ_Term pos) {
  if (chars[0] == '\0')
    return newCTerm("fAtom",nilAtom,pos);
  else
    return makeCons(makeInt(chars[0],pos),makeString(&chars[1],pos),pos);
}


//------
// Gump
//------

static OZ_Term scannerPrefix = 0;
static OZ_Term parserExpect = 0;

void xy_setScannerPrefix() {
  scannerPrefix = OZ_atom(xytext);
}

void xy_setParserExpect() {
  parserExpect = OZ_CStringToInt(xytext);
}


typedef union {
  OZ_Term t;
  int i;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		773
#define	YYFLAG		-32768
#define	YYNTBASE	109

#define YYTRANSLATE(x) ((unsigned)(x) <= 343 ? yytranslate[x] : 249)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   108,     2,    87,   102,     2,     2,     2,    99,
   100,     2,    97,    91,    98,    93,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   107,     2,     2,
    79,     2,     2,    95,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   103,     2,   104,    94,   101,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   105,    86,   106,    92,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    80,    81,    82,    83,    84,    85,    88,
    89,    90,    96
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     5,     8,    11,    13,    17,    20,    27,    34,
    40,    41,    44,    46,    48,    50,    51,    54,    57,    60,
    62,    65,    70,    75,    80,    85,    90,    95,   100,   105,
   107,   112,   114,   118,   123,   128,   133,   138,   142,   147,
   150,   155,   159,   163,   167,   169,   171,   173,   175,   177,
   179,   181,   183,   185,   187,   189,   191,   198,   205,   216,
   227,   234,   236,   243,   246,   249,   255,   263,   269,   277,
   283,   285,   287,   293,   296,   302,   308,   314,   320,   322,
   324,   325,   328,   329,   331,   336,   343,   348,   353,   358,
   365,   370,   371,   375,   382,   385,   387,   391,   394,   399,
   400,   403,   404,   407,   412,   414,   416,   418,   420,   422,
   424,   429,   431,   432,   435,   437,   441,   442,   446,   447,
   450,   458,   466,   468,   470,   472,   474,   476,   477,   480,
   485,   486,   488,   490,   492,   494,   496,   498,   500,   502,
   504,   511,   514,   517,   521,   523,   531,   538,   541,   544,
   548,   550,   552,   556,   560,   562,   566,   570,   572,   577,
   584,   589,   594,   596,   601,   609,   611,   613,   614,   617,
   622,   627,   632,   637,   638,   641,   645,   647,   649,   651,
   653,   655,   657,   659,   660,   663,   669,   671,   676,   678,
   680,   682,   684,   686,   691,   697,   699,   701,   705,   707,
   709,   711,   714,   715,   718,   723,   725,   727,   729,   733,
   734,   740,   743,   744,   746,   750,   755,   761,   765,   769,
   771,   774,   779,   784,   788,   792,   795,   800,   805,   811,
   813,   817,   820,   825,   830,   837,   839,   841,   843,   847,
   849,   851,   853,   855,   856,   857,   866,   868,   870,   872,
   875,   878,   881,   887,   893,   898,   900,   902,   907,   908,
   911,   914,   916,   918,   928,   930,   932,   935,   938,   939,
   942,   944,   947,   949,   953,   955,   958,   960,   963,   964,
   974,   975,   976,   987,   994,   998,  1001,  1004,  1006,  1007,
  1010,  1011,  1012,  1019,  1020,  1021,  1028,  1029,  1030,  1037,
  1039,  1043,  1045,  1047,  1049,  1050,  1052,  1054,  1056,  1057,
  1058,  1061,  1063,  1066,  1071,  1076,  1084,  1085,  1088,  1090,
  1092,  1094,  1096,  1098,  1102,  1105,  1109,  1110,  1113,  1116,
  1122,  1127,  1130,  1133,  1135,  1137,  1139,  1142,  1146,  1148,
  1150,  1155,  1157,  1163,  1165,  1167,  1173,  1178,  1179,  1180,
  1190,  1191,  1192,  1202,  1203,  1204,  1214,  1216,  1222,  1224,
  1226,  1228
};

static const short yyrhs[] = {   110,
    68,     0,     1,     0,   115,   111,     0,   203,   111,     0,
   111,     0,   187,   121,   111,     0,   112,   110,     0,    28,
   188,   115,    47,   187,   111,     0,    28,   188,   115,    47,
   115,   111,     0,    28,   188,   115,   187,   111,     0,     0,
     3,   113,     0,     5,     0,     6,     0,     7,     0,     0,
   114,   113,     0,    97,     4,     0,    98,     4,     0,   116,
     0,   116,   115,     0,   116,    79,   188,   116,     0,   116,
    80,   188,   116,     0,   116,    81,   188,   116,     0,   116,
    82,   188,   116,     0,   116,   127,   188,   116,     0,   116,
   128,   188,   116,     0,   116,   129,   188,   116,     0,   116,
    86,   188,   116,     0,   118,     0,   118,    87,   188,   117,
     0,   118,     0,   118,    87,   117,     0,   118,   130,   188,
   118,     0,   118,   131,   188,   118,     0,   118,   132,   188,
   118,     0,   118,    91,   188,   118,     0,    92,   188,   118,
     0,   118,    93,   188,   118,     0,   118,    13,     0,   118,
    94,   188,   118,     0,    95,   188,   118,     0,    96,   188,
   118,     0,    99,   133,   100,     0,   181,     0,   183,     0,
   101,     0,    66,     0,    63,     0,    38,     0,    59,     0,
   102,     0,   184,     0,   185,     0,   186,     0,   138,     0,
   103,   188,   116,   135,   104,   188,     0,   105,   188,   116,
   134,   106,   188,     0,    55,   188,   119,   105,   116,   134,
   106,   133,    35,   188,     0,    43,   188,   119,   105,   116,
   134,   106,   133,    35,   188,     0,    44,   188,   155,   120,
    35,   188,     0,   154,     0,    48,   188,   115,    47,   115,
    35,     0,    45,   145,     0,    22,   147,     0,    49,   188,
   133,    35,   188,     0,    49,   188,   116,    61,   133,    35,
   188,     0,    62,   188,   133,    35,   188,     0,    65,   188,
   133,   136,   137,    35,   188,     0,    57,   188,   133,    35,
   188,     0,    60,     0,    37,     0,    51,   188,   133,    35,
   188,     0,    26,   170,     0,    53,   188,   177,    35,   188,
     0,    30,   188,   177,    35,   188,     0,    24,   188,   179,
    35,   188,     0,    27,   188,   174,    35,   188,     0,   189,
     0,   197,     0,     0,   181,   119,     0,     0,   121,     0,
    58,   188,   122,   120,     0,    54,   188,   115,    47,   115,
   120,     0,    54,   188,   115,   120,     0,    46,   188,   122,
   120,     0,    36,   188,   126,   120,     0,    29,   188,   115,
    47,   115,   120,     0,    29,   188,   115,   120,     0,     0,
   182,   125,   122,     0,   123,    99,   124,   100,   125,   122,
     0,    16,   188,     0,   144,     0,   144,   107,   182,     0,
   144,   124,     0,   144,   107,   182,   124,     0,     0,    21,
   181,     0,     0,   182,   126,     0,   144,   107,   182,   126,
     0,    83,     0,    84,     0,    85,     0,    88,     0,    89,
     0,    90,     0,   115,    47,   188,   115,     0,   115,     0,
     0,   116,   134,     0,   187,     0,   187,   116,   135,     0,
     0,    23,   188,   150,     0,     0,    41,   133,     0,   139,
   188,    99,   141,   142,   100,   188,     0,   140,   188,    99,
   141,   142,   100,   188,     0,     9,     0,    67,     0,    64,
     0,    39,     0,    16,     0,     0,   116,   141,     0,   143,
   107,   116,   141,     0,     0,    19,     0,   181,     0,   182,
     0,   185,     0,    66,     0,    63,     0,    38,     0,   181,
     0,   185,     0,   188,   115,    61,   133,   146,   188,     0,
    33,   145,     0,    32,   147,     0,    31,   133,    35,     0,
    35,     0,   188,   115,    61,   188,   133,   148,   188,     0,
   188,   115,    52,   149,   148,   188,     0,    33,   145,     0,
    32,   147,     0,    31,   133,    35,     0,    35,     0,   151,
     0,   151,    18,   149,     0,   151,    34,   149,     0,   151,
     0,   151,    18,   150,     0,   152,    61,   133,     0,   153,
     0,   153,    82,   187,   115,     0,   153,    82,   187,   115,
    47,   115,     0,   153,    79,   188,   153,     0,   153,    86,
   188,   153,     0,   118,     0,   118,    87,   188,   117,     0,
    25,   188,   155,   156,   161,    35,   188,     0,   116,     0,
   187,     0,     0,   157,   156,     0,    42,   188,   116,   134,
     0,    20,   188,   159,   158,     0,    40,   188,   159,   158,
     0,    56,   188,   116,   134,     0,     0,   159,   158,     0,
   160,   107,   116,     0,   160,     0,   181,     0,   183,     0,
   185,     0,    66,     0,    63,     0,    38,     0,     0,   162,
   161,     0,    50,   188,   163,   133,    35,     0,   164,     0,
   164,    79,   188,   182,     0,   181,     0,   183,     0,    66,
     0,    63,     0,    38,     0,   165,    99,   166,   100,     0,
   165,    99,   166,    19,   100,     0,     9,     0,    16,     0,
   108,   188,    16,     0,    67,     0,    64,     0,    39,     0,
   167,   166,     0,     0,   168,   169,     0,   143,   107,   168,
   169,     0,   182,     0,   102,     0,   101,     0,    17,   188,
   116,     0,     0,   188,   172,   171,    35,   188,     0,    31,
   133,     0,     0,   173,     0,   173,    18,   172,     0,   115,
    61,   188,   133,     0,   115,    47,   115,    61,   133,     0,
   175,    18,   175,     0,   175,    18,   174,     0,   176,     0,
   176,   175,     0,   116,   128,   188,   116,     0,   116,   129,
   188,   116,     0,   178,    18,   178,     0,   178,    18,   177,
     0,   115,   187,     0,   115,    47,   115,   187,     0,   115,
   187,    61,   133,     0,   115,    47,   115,    61,   133,     0,
   180,     0,   180,    18,   179,     0,   115,   187,     0,   115,
   187,    47,   115,     0,   115,   187,    61,   133,     0,   115,
   187,    47,   115,    61,   133,     0,     8,     0,    15,     0,
   182,     0,   108,   188,   182,     0,    14,     0,    11,     0,
    12,     0,    10,     0,     0,     0,    74,   188,   182,   156,
   161,   190,    35,   188,     0,   191,     0,   192,     0,   194,
     0,   191,   190,     0,   192,   190,     0,   194,   190,     0,
    70,   181,    79,   193,    35,     0,    70,   182,    79,   193,
    35,     0,    70,   193,   133,    35,     0,    69,     0,    14,
     0,    71,   182,   195,    35,     0,     0,   196,   195,     0,
    42,   202,     0,   192,     0,   194,     0,    72,   188,   182,
   156,   161,   199,   198,    35,   188,     0,   226,     0,   204,
     0,   226,   198,     0,   204,   198,     0,     0,    76,   200,
     0,   201,     0,   201,   200,     0,   181,     0,   181,   107,
   116,     0,   182,     0,   182,   202,     0,   204,     0,   204,
   203,     0,     0,    73,   182,    79,   205,   208,   223,   224,
   229,    35,     0,     0,     0,    73,   102,   206,    79,   207,
   208,   223,   224,   229,    35,     0,    73,   208,   223,   224,
   229,    35,     0,   210,   182,   221,     0,   182,   222,     0,
   209,   211,     0,   210,     0,     0,   181,   107,     0,     0,
     0,    99,   212,   218,   100,   213,   221,     0,     0,     0,
   103,   214,   218,   104,   215,   221,     0,     0,     0,   105,
   216,   218,   106,   217,   221,     0,   219,     0,   219,   220,
   218,     0,   182,     0,   101,     0,    78,     0,     0,   222,
     0,    88,     0,    89,     0,     0,     0,   225,    47,     0,
   226,     0,   226,   225,     0,    75,   181,   229,    35,     0,
    75,   182,   229,    35,     0,    75,   247,    99,   227,   100,
   229,    35,     0,     0,   228,   227,     0,   182,     0,   102,
     0,   101,     0,   230,     0,   231,     0,   231,    18,   230,
     0,   187,   233,     0,    60,   188,   232,     0,     0,    77,
   133,     0,   234,   233,     0,   234,   222,   188,   235,   223,
     0,   234,    79,   237,   235,     0,    47,   235,     0,   238,
   235,     0,   232,     0,   182,     0,   232,     0,   236,   235,
     0,   183,    79,   237,     0,   237,     0,   182,     0,   182,
   222,   188,   223,     0,   239,     0,   108,   188,   182,    79,
   237,     0,   239,     0,   246,     0,   210,   188,   246,   221,
   223,     0,   246,   222,   188,   223,     0,     0,     0,   209,
   188,    99,   240,   248,   100,   241,   221,   223,     0,     0,
     0,   209,   188,   103,   242,   248,   104,   243,   221,   223,
     0,     0,     0,   209,   188,   105,   244,   248,   106,   245,
   221,   223,     0,   181,     0,   247,   188,    99,   134,   100,
     0,     9,     0,    16,     0,   229,     0,   229,   220,   248,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   367,   369,   373,   375,   378,   380,   385,   387,   390,   392,
   395,   399,   401,   403,   405,   409,   411,   415,   422,   431,
   433,   437,   439,   441,   443,   445,   448,   450,   452,   454,
   456,   462,   464,   468,   471,   474,   477,   479,   482,   485,
   489,   492,   494,   497,   499,   501,   503,   505,   507,   509,
   511,   513,   515,   517,   519,   521,   523,   527,   529,   532,
   535,   537,   539,   541,   543,   545,   547,   549,   551,   553,
   555,   557,   559,   561,   563,   566,   569,   572,   574,   576,
   580,   582,   587,   589,   594,   596,   598,   601,   603,   605,
   607,   612,   614,   616,   620,   624,   626,   628,   630,   634,
   636,   640,   642,   644,   649,   653,   657,   661,   665,   669,
   673,   675,   679,   681,   685,   687,   693,   695,   699,   701,
   705,   710,   717,   719,   721,   723,   727,   731,   733,   735,
   739,   741,   745,   747,   749,   751,   753,   755,   759,   761,
   765,   769,   771,   773,   775,   779,   783,   787,   789,   791,
   793,   797,   799,   801,   805,   807,   811,   815,   817,   820,
   824,   826,   828,   830,   836,   841,   843,   848,   850,   854,
   856,   858,   860,   864,   866,   870,   872,   876,   878,   880,
   882,   884,   886,   890,   892,   896,   900,   902,   906,   908,
   910,   912,   914,   916,   918,   922,   924,   926,   928,   930,
   932,   936,   938,   942,   944,   948,   950,   952,   957,   959,
   963,   967,   969,   973,   975,   979,   981,   985,   987,   991,
   993,   997,   999,  1003,  1005,  1009,  1013,  1015,  1018,  1022,
  1024,  1028,  1033,  1038,  1041,  1045,  1049,  1053,  1055,  1059,
  1063,  1065,  1069,  1073,  1077,  1087,  1095,  1097,  1099,  1101,
  1103,  1105,  1109,  1111,  1115,  1119,  1121,  1125,  1129,  1131,
  1135,  1137,  1139,  1145,  1153,  1155,  1157,  1159,  1163,  1165,
  1169,  1171,  1175,  1177,  1181,  1183,  1187,  1189,  1193,  1195,
  1197,  1198,  1199,  1201,  1205,  1207,  1209,  1213,  1214,  1217,
  1221,  1222,  1222,  1223,  1224,  1224,  1225,  1226,  1226,  1229,
  1231,  1235,  1236,  1239,  1243,  1244,  1247,  1248,  1251,  1259,
  1261,  1265,  1267,  1271,  1273,  1275,  1279,  1281,  1285,  1287,
  1289,  1293,  1297,  1299,  1303,  1312,  1316,  1318,  1322,  1324,
  1334,  1339,  1346,  1348,  1352,  1356,  1358,  1362,  1364,  1368,
  1370,  1376,  1380,  1383,  1388,  1390,  1394,  1398,  1399,  1400,
  1402,  1403,  1404,  1406,  1407,  1408,  1412,  1414,  1418,  1420,
  1425,  1427
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"SWITCHNAME","LOCALSWITCHES","PUSHSWITCHES","POPSWITCHES","OZATOM","ATOM_LABEL",
"OZFLOAT","OZINT","AMPER","DOTINT","STRING","VARIABLE","VARIABLE_LABEL","DEFAULT",
"CHOICE","LDOTS","attr","at","_case_","catch","choice","_class_","cond","_condis_",
"declare","define","dis","_else_","elsecase","elseif","elseof","end","export",
"fail","false","FALSE_LABEL","feat","finally","_from_","_fun_","functor","_if_",
"import","_in_","local","_lock_","_meth_","not","of","or","prepare","proc","prop",
"_raise_","require","self","skip","then","thread","true","TRUE_LABEL","try",
"unit","UNIT_LABEL","ENDOFFILE","REGEX","lex","_mode_","_parser_","prod","_scanner_",
"syn","token","REDUCE","SEP","'='","OOASSIGN","orelse","andthen","COMPARE","FDCOMPARE",
"FDIN","'|'","'#'","ADD","FDMUL","OTHERMUL","','","'~'","'.'","'^'","'@'","DEREFF",
"'+'","'-'","'('","')'","'_'","'$'","'['","']'","'{'","'}'","':'","'!'","file",
"queries","queries1","directive","switchList","switch","sequence","phrase","hashes",
"phrase2","procFlags","optFunctorDescriptorList","functorDescriptorList","importDecls",
"variableLabel","featureList","optImportAt","exportDecls","compare","fdCompare",
"fdIn","add","fdMul","otherMul","inSequence","phraseList","fixedListArgs","optCatch",
"optFinally","record","recordAtomLabel","recordVarLabel","recordArguments","optDots",
"feature","featureNoVar","ifMain","ifRest","caseMain","caseRest","elseOfList",
"caseClauseList","caseClause","sideCondition","pattern","class","phraseOpt",
"classDescriptorList","classDescriptor","attrFeatList","attrFeat","attrFeatFeature",
"methList","meth","methHead","methHead1","methHeadLabel","methFormals","methFormal",
"methFormalTerm","methFormalOptDefault","condMain","condElse","condClauseList",
"condClause","condisClauseList","condisClause","fdExpression","orClauseList",
"orClause","choiceClauseList","choiceClause","atom","nakedVariable","variable",
"string","int","float","thisCoord","coord","scannerSpecification","scannerRules",
"lexAbbrev","lexRule","regex","modeClause","modeDescrs","modeDescr","parserSpecification",
"parserRules","tokenClause","tokenList","tokenDecl","modeFromList","prodClauseList",
"prodClause","@1","@2","@3","prodHeadRest","prodName","prodNameAtom","prodKey",
"@4","@5","@6","@7","@8","@9","prodParams","prodParam","separatorOp","optTerminatorOp",
"terminatorOp","prodMakeKey","localRules","localRulesSub","synClause","synParams",
"synParam","synAlt","synSeqs","synSeq","optSynAction","nonEmptySeq","synVariable",
"synPrims","synPrim","synPrimNoAssign","synPrimNoVar","synPrimNoVarNoAssign",
"@10","@11","@12","@13","@14","@15","synInstTerm","synLabel","synProdCallParams", NULL
};
#endif

static const short yyr1[] = {     0,
   109,   109,   110,   110,   110,   110,   111,   111,   111,   111,
   111,   112,   112,   112,   112,   113,   113,   114,   114,   115,
   115,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   117,   117,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   119,   119,   120,   120,   121,   121,   121,   121,   121,   121,
   121,   122,   122,   122,   123,   124,   124,   124,   124,   125,
   125,   126,   126,   126,   127,   128,   129,   130,   131,   132,
   133,   133,   134,   134,   135,   135,   136,   136,   137,   137,
   138,   138,   139,   139,   139,   139,   140,   141,   141,   141,
   142,   142,   143,   143,   143,   143,   143,   143,   144,   144,
   145,   146,   146,   146,   146,   147,   147,   148,   148,   148,
   148,   149,   149,   149,   150,   150,   151,   152,   152,   152,
   153,   153,   153,   153,   154,   155,   155,   156,   156,   157,
   157,   157,   157,   158,   158,   159,   159,   160,   160,   160,
   160,   160,   160,   161,   161,   162,   163,   163,   164,   164,
   164,   164,   164,   164,   164,   165,   165,   165,   165,   165,
   165,   166,   166,   167,   167,   168,   168,   168,   169,   169,
   170,   171,   171,   172,   172,   173,   173,   174,   174,   175,
   175,   176,   176,   177,   177,   178,   178,   178,   178,   179,
   179,   180,   180,   180,   180,   181,   182,   183,   183,   184,
   185,   185,   186,   187,   188,   189,   190,   190,   190,   190,
   190,   190,   191,   191,   192,   193,   193,   194,   195,   195,
   196,   196,   196,   197,   198,   198,   198,   198,   199,   199,
   200,   200,   201,   201,   202,   202,   203,   203,   205,   204,
   206,   207,   204,   204,   208,   208,   208,   209,   209,   210,
   212,   213,   211,   214,   215,   211,   216,   217,   211,   218,
   218,   219,   219,   220,   221,   221,   222,   222,   223,   224,
   224,   225,   225,   226,   226,   226,   227,   227,   228,   228,
   228,   229,   230,   230,   231,   231,   232,   232,   233,   233,
   233,   233,   233,   233,   234,   235,   235,   236,   236,   237,
   237,   237,   238,   238,   239,   239,   239,   240,   241,   239,
   242,   243,   239,   244,   245,   239,   246,   246,   247,   247,
   248,   248
};

static const short yyr2[] = {     0,
     2,     1,     2,     2,     1,     3,     2,     6,     6,     5,
     0,     2,     1,     1,     1,     0,     2,     2,     2,     1,
     2,     4,     4,     4,     4,     4,     4,     4,     4,     1,
     4,     1,     3,     4,     4,     4,     4,     3,     4,     2,
     4,     3,     3,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     6,     6,    10,    10,
     6,     1,     6,     2,     2,     5,     7,     5,     7,     5,
     1,     1,     5,     2,     5,     5,     5,     5,     1,     1,
     0,     2,     0,     1,     4,     6,     4,     4,     4,     6,
     4,     0,     3,     6,     2,     1,     3,     2,     4,     0,
     2,     0,     2,     4,     1,     1,     1,     1,     1,     1,
     4,     1,     0,     2,     1,     3,     0,     3,     0,     2,
     7,     7,     1,     1,     1,     1,     1,     0,     2,     4,
     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     6,     2,     2,     3,     1,     7,     6,     2,     2,     3,
     1,     1,     3,     3,     1,     3,     3,     1,     4,     6,
     4,     4,     1,     4,     7,     1,     1,     0,     2,     4,
     4,     4,     4,     0,     2,     3,     1,     1,     1,     1,
     1,     1,     1,     0,     2,     5,     1,     4,     1,     1,
     1,     1,     1,     4,     5,     1,     1,     3,     1,     1,
     1,     2,     0,     2,     4,     1,     1,     1,     3,     0,
     5,     2,     0,     1,     3,     4,     5,     3,     3,     1,
     2,     4,     4,     3,     3,     2,     4,     4,     5,     1,
     3,     2,     4,     4,     6,     1,     1,     1,     3,     1,
     1,     1,     1,     0,     0,     8,     1,     1,     1,     2,
     2,     2,     5,     5,     4,     1,     1,     4,     0,     2,
     2,     1,     1,     9,     1,     1,     2,     2,     0,     2,
     1,     2,     1,     3,     1,     2,     1,     2,     0,     9,
     0,     0,    10,     6,     3,     2,     2,     1,     0,     2,
     0,     0,     6,     0,     0,     6,     0,     0,     6,     1,
     3,     1,     1,     1,     0,     1,     1,     1,     0,     0,
     2,     1,     2,     4,     4,     7,     0,     2,     1,     1,
     1,     1,     1,     3,     2,     3,     0,     2,     2,     5,
     4,     2,     2,     1,     1,     1,     2,     3,     1,     1,
     4,     1,     5,     1,     1,     5,     4,     0,     0,     9,
     0,     0,     9,     0,     0,     9,     1,     5,     1,     1,
     1,     3
};

static const short yydefact[] = {     0,
     2,    16,    13,    14,    15,   236,   123,   243,   241,   242,
   240,   237,   127,   245,   245,   245,   245,   245,   245,   245,
    72,    50,   126,   245,   245,   245,   245,   245,   245,   245,
   245,   245,    51,    71,   245,    49,   125,   245,    48,   124,
   245,   289,   245,   245,   245,   245,     0,    47,    52,   245,
   245,   245,     0,     5,   244,    11,    20,    30,    56,   245,
   245,    62,    45,   238,    46,    53,    54,    55,     0,    79,
    80,    11,   277,     0,     0,    12,    16,    65,     0,     0,
   244,    74,     0,     0,     0,     0,    81,   244,    64,     0,
     0,     0,     0,     0,    81,     0,     0,     0,     0,   281,
     0,     0,   309,     0,   288,     0,     0,     0,     0,   112,
     0,     0,     0,     0,     1,     7,     3,   245,   245,   245,
   245,   105,   106,   107,   245,    21,   245,   245,   245,    40,
   245,   108,   109,   110,   245,   245,   245,   245,   245,   245,
     0,     0,   245,   245,   245,   245,   245,    11,     4,   278,
    18,    19,    17,     0,   244,     0,   230,   166,   168,   167,
     0,   213,   214,     0,     0,     0,   220,   244,   244,     0,
     0,     0,    81,    83,     0,     0,    20,     0,     0,     0,
     0,     0,     0,   117,   168,     0,   290,   279,   307,   308,
   286,   310,   291,   294,   297,   287,   305,   168,    38,    42,
    43,   245,    44,   244,   113,   239,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,   128,     0,   102,    92,     0,    92,     6,     0,
   245,   232,   245,     0,   245,   245,   245,   245,   184,   168,
     0,   245,     0,     0,     0,   245,   245,   245,     0,   221,
   244,    11,     0,   226,   245,     0,     0,    82,     0,    84,
     0,     0,     0,   245,   245,   245,     0,   245,   245,   245,
   119,   184,   282,   289,     0,   244,     0,   312,     0,     0,
     0,   285,   306,   184,     0,     0,   115,   113,     0,    22,
    23,    24,    25,    29,    26,    27,    28,    31,    32,    37,
    39,    41,    34,    35,    36,    50,    49,    48,   128,   131,
     0,    45,   238,    54,   131,    83,    83,     0,   139,   102,
   140,   245,    83,     0,   100,    83,    83,   163,     0,   152,
     0,   158,     0,     0,     0,    77,   231,     0,     0,     0,
     0,   245,     0,   184,   169,     0,     0,   212,   245,   215,
     0,     0,    78,   219,   218,    11,    11,    10,   244,     0,
    76,   225,   224,   113,   245,     0,     0,     0,    66,    73,
    75,   113,    70,    68,     0,     0,     0,   269,   289,     0,
   309,   359,   360,   244,   244,     0,   245,   327,     0,   322,
   323,   311,   313,   303,   302,     0,   300,     0,     0,     0,
   111,   245,   244,   114,   245,     0,   129,   132,     0,     0,
     0,     0,    91,    89,     0,   103,    95,    88,     0,     0,
    92,     0,    87,    85,   245,     0,   245,   245,   151,   245,
     0,     0,     0,   245,   244,   245,     0,   233,   234,   183,
   182,   181,   174,   177,   178,   179,   180,   174,   113,   113,
     0,   245,   185,     0,   216,   211,   222,   223,     9,     8,
     0,   227,   228,     0,    61,     0,   245,   245,   145,   245,
    63,   245,     0,   118,   155,   120,   245,     0,     0,   309,
   310,     0,     0,   317,   327,   327,     0,   245,   357,   335,
   245,   245,   334,   325,   327,   327,   344,   345,   245,   284,
   244,   292,   304,     0,   295,   298,     0,     0,     0,   247,
   248,   249,    57,   116,    58,    33,   245,   128,   245,    83,
   102,     0,    96,   101,    93,    83,     0,     0,   149,   148,
   147,   153,   154,   157,     0,     0,     0,   245,     0,   171,
   174,     0,   172,   170,   173,   196,   197,   193,   201,   192,
   200,   191,   199,   245,     0,   187,     0,   189,   190,   165,
   217,   229,     0,     0,   143,   142,   141,    67,     0,     0,
    69,   273,   270,   271,     0,   266,   265,   310,   244,   314,
   315,   321,   320,   319,     0,   317,   326,   340,     0,   336,
   332,   327,   339,   342,   328,     0,     0,     0,   289,   245,
   329,   333,   245,     0,   324,   305,   301,   305,   305,   257,
   256,     0,     0,     0,   259,   245,   250,   251,   252,   121,
   130,   122,    90,   104,   100,     0,    98,    86,   164,   150,
   161,   159,   162,   146,   235,   175,   176,     0,     0,   245,
   203,     0,   144,     0,   156,     0,   272,   245,   268,   267,
   244,     0,   244,   318,   245,   289,   337,     0,   348,   351,
   354,   357,   305,   340,   327,   327,   309,   113,   293,   296,
   299,     0,     0,     0,     0,     0,   262,   263,     0,   259,
   246,    92,    97,     0,   198,   186,     0,   138,   137,   136,
   208,   207,     0,     0,   203,   210,   133,   206,   135,   245,
   245,   274,   264,     0,   280,     0,   309,   338,   289,   244,
   244,   244,   309,   331,   309,   347,     0,     0,     0,   255,
   275,   261,   258,   260,    94,    99,   160,   188,     0,     0,
   194,   202,   245,   204,    60,    59,   283,   316,   341,   343,
   361,     0,     0,     0,   346,   330,   358,   253,   254,   276,
   210,   206,   195,     0,   244,   349,   352,   355,   205,   209,
   362,   305,   305,   305,   309,   309,   309,   350,   353,   356,
     0,     0,     0
};

static const short yydefgoto[] = {   771,
    53,    54,    55,    76,    77,   110,    57,   298,    58,   172,
   259,   260,   323,   324,   522,   421,   317,   127,   128,   129,
   138,   139,   140,   111,   289,   286,   271,   377,    59,    60,
    61,   310,   409,   311,   318,    89,   470,    78,   430,   329,
   474,   330,   331,   332,    62,   159,   239,   240,   540,   541,
   444,   343,   344,   555,   556,   557,   694,   695,   696,   734,
    82,   244,   162,   163,   165,   166,   167,   170,   171,   156,
   157,    63,    64,    65,    66,    67,    68,   388,    79,    70,
   509,   510,   511,   614,   512,   679,   680,    71,   575,   479,
   573,   574,   722,    72,    73,   274,   186,   379,   103,   491,
   492,   196,   279,   606,   280,   608,   281,   609,   396,   397,
   504,   282,   283,   192,   276,   277,   278,   585,   586,   741,
   390,   391,   590,   494,   495,   591,   592,   593,   496,   594,
   710,   762,   711,   763,   712,   764,   498,   499,   742
};

static const short yypact[] = {  1069,
-32768,   170,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    33,-32768,-32768,-32768,-32768,  1580,-32768,-32768,-32768,
-32768,-32768,    11,-32768,  1176,   537,  1378,   473,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   331,-32768,
-32768,   537,    10,   138,   182,-32768,   170,-32768,  1580,  1580,
  1580,-32768,  1580,  1580,  1580,  1580,   189,  1580,-32768,  1580,
  1580,  1580,  1580,  1580,   189,  1580,  1580,  1580,   185,-32768,
   123,    -3,-32768,   205,   185,   185,  1580,  1580,  1580,   187,
   141,  1580,  1580,   185,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   147,   164,-32768,-32768,-32768,-32768,-32768,   537,-32768,-32768,
-32768,-32768,-32768,   150,-32768,   242,   262,   763,    51,-32768,
    19,   252,   294,   763,   271,   297,  1580,   272,   274,   304,
   305,   237,   189,   331,   283,   316,  1277,   336,   338,   358,
   279,   367,   371,   389,    51,   335,-32768,-32768,-32768,-32768,
-32768,   345,-32768,-32768,-32768,-32768,   204,    51,    98,-32768,
-32768,-32768,-32768,   763,  1378,-32768,  1580,  1580,  1580,  1580,
  1580,  1580,  1580,  1580,  1580,  1580,  1580,  1580,  1580,  1580,
  1580,  1681,  1681,  1580,   488,   317,  1580,   317,-32768,  1580,
-32768,    35,-32768,  1580,-32768,-32768,-32768,-32768,   368,    51,
  1580,-32768,  1580,   387,  1580,-32768,-32768,-32768,  1580,-32768,
  1580,   537,  1580,   364,-32768,  1580,  1580,-32768,   395,-32768,
  1580,  1580,  1580,-32768,-32768,-32768,  1580,-32768,-32768,-32768,
   391,   368,-32768,    69,   349,   384,   407,   345,    73,    73,
    73,-32768,-32768,   368,  1580,   357,  1580,  1378,   369,   763,
   598,   753,   671,   378,   467,   261,   261,-32768,   676,   188,
-32768,-32768,   247,   188,   188,   394,   398,   400,  1479,   460,
   403,   406,   419,   422,   460,   420,   331,   430,-32768,   488,
-32768,-32768,   331,   433,   462,   434,   331,   734,   376,    31,
   477,   216,  1580,  1580,  1580,-32768,-32768,   288,   288,  1580,
  1580,-32768,   459,   368,-32768,   480,  1580,-32768,-32768,-32768,
  1580,  1580,-32768,-32768,   297,   537,   537,-32768,   498,  1580,
-32768,-32768,   305,  1378,-32768,   484,   535,   539,-32768,-32768,
-32768,  1378,-32768,-32768,  1580,  1580,   540,   496,    69,   204,
-32768,-32768,-32768,   384,   384,   482,-32768,   600,   551,-32768,
   572,-32768,-32768,-32768,-32768,   491,   514,   489,   492,   282,
-32768,-32768,   763,-32768,-32768,  1580,-32768,-32768,   495,  1580,
   497,  1580,-32768,-32768,   185,-32768,-32768,-32768,   571,   189,
   317,  1580,-32768,-32768,-32768,  1580,-32768,-32768,-32768,-32768,
  1580,  1580,  1580,-32768,-32768,-32768,   376,   541,-32768,-32768,
-32768,-32768,   288,   493,-32768,-32768,-32768,   288,  1378,  1378,
   605,-32768,-32768,  1580,-32768,-32768,   775,   784,-32768,-32768,
  1580,-32768,-32768,   499,-32768,  1580,-32768,-32768,-32768,-32768,
-32768,-32768,   511,-32768,   585,-32768,-32768,   189,   186,-32768,
   345,   569,   583,    83,   542,   340,  1580,-32768,   123,-32768,
-32768,   215,-32768,-32768,   711,   340,-32768,   204,-32768,-32768,
   384,-32768,-32768,    73,-32768,-32768,   221,   185,   587,   282,
   282,   282,-32768,-32768,-32768,-32768,-32768,  1479,-32768,   331,
   488,   523,    62,-32768,-32768,   331,  1580,   589,-32768,-32768,
-32768,-32768,-32768,-32768,  1580,  1580,  1580,-32768,  1580,-32768,
   288,  1580,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1580,   547,   529,-32768,-32768,-32768,
-32768,-32768,  1580,   596,-32768,-32768,-32768,-32768,  1580,  1580,
-32768,   525,-32768,   189,   602,   186,   186,   345,   384,-32768,
-32768,-32768,-32768,-32768,   538,    83,-32768,   136,   556,-32768,
-32768,   340,-32768,-32768,-32768,   185,   296,   372,   349,-32768,
-32768,-32768,-32768,   546,-32768,   204,-32768,   204,   204,-32768,
-32768,   562,   579,  1580,    30,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   462,   185,-32768,-32768,-32768,-32768,
   131,   612,   575,-32768,-32768,-32768,   763,   425,   627,-32768,
   510,   628,-32768,   632,-32768,  1580,-32768,-32768,-32768,-32768,
   384,   635,   384,-32768,-32768,   349,-32768,   594,-32768,-32768,
-32768,-32768,   204,   204,   340,   340,-32768,  1580,-32768,-32768,
-32768,    40,    40,   639,   185,    40,-32768,-32768,   652,    30,
-32768,   317,   571,  1580,-32768,-32768,   185,-32768,-32768,-32768,
-32768,-32768,   588,    38,   510,   673,-32768,   419,-32768,-32768,
-32768,   763,-32768,   661,-32768,   662,-32768,-32768,   349,   384,
   384,   384,-32768,-32768,-32768,-32768,   601,   663,   669,-32768,
   185,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    87,   609,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   514,   611,   610,   615,-32768,-32768,-32768,-32768,-32768,-32768,
   673,-32768,-32768,  1580,   384,-32768,-32768,-32768,-32768,   763,
-32768,   204,   204,   204,-32768,-32768,-32768,-32768,-32768,-32768,
   717,   722,-32768
};

static const short yypgoto[] = {-32768,
   668,    22,-32768,   647,-32768,    60,   443,  -379,   -40,   -14,
  -264,   660,  -222,-32768,  -489,   108,  -312,-32768,   574,   576,
-32768,-32768,-32768,   173,  -245,   332,-32768,-32768,-32768,-32768,
-32768,  -201,   424,  -542,  -386,  -230,-32768,  -215,   311,    15,
   171,  -351,-32768,  -440,-32768,   672,     8,-32768,  -408,   113,
-32768,   -58,-32768,-32768,-32768,-32768,    55,-32768,    39,     0,
-32768,-32768,   517,-32768,   524,  -123,-32768,   -73,   516,   543,
-32768,   355,    50,  -283,-32768,    66,-32768,   343,   -15,-32768,
   -21,-32768,  -452,  -214,  -433,    96,-32768,-32768,  -108,-32768,
   206,-32768,    61,   708,  -415,-32768,-32768,-32768,  -227,   -17,
   -10,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -262,-32768,
    44,  -519,   -95,  -339,  -442,   508,  -404,   203,-32768,  -218,
   290,-32768,  -338,   298,-32768,  -458,-32768,  -538,-32768,  -337,
-32768,-32768,-32768,-32768,-32768,-32768,   194,   521,  -516
};


#define	YYLAST		1789


static const short yytable[] = {    80,
    81,    83,    84,    85,    86,   327,   191,   416,    87,    88,
    90,    91,    92,    93,    94,    95,    96,   398,   399,    97,
   180,   315,    98,   475,   104,    99,   516,   106,   107,   108,
   109,   105,   523,   627,   112,   113,   114,   602,   579,   543,
     6,   481,   404,   250,   141,   142,   381,    12,   431,   493,
   497,   413,   414,   610,   446,   446,   730,   389,   418,    56,
   665,   423,   424,   576,   432,   241,   199,   200,   201,     6,
   235,   675,     9,    10,   577,   188,     6,   117,   115,   242,
   181,   334,    42,    12,   189,   190,   669,    12,   670,   671,
   236,   102,   237,   149,   631,   335,   633,    12,   693,   676,
   508,    12,   207,   208,   209,   210,   238,   407,   611,   211,
   130,   212,   213,   214,    56,   215,   126,   708,   464,   216,
   217,   218,   219,   220,   221,   355,   473,   224,   225,   226,
   227,   228,   636,   657,   100,   651,   523,   731,   154,   155,
   578,   151,   161,   713,   168,   169,   587,   629,   185,   175,
   176,   480,   693,   169,   197,   198,   493,   497,   258,   446,
   576,   576,   677,   206,   446,   482,   483,   559,   626,   229,
   740,   577,   577,   394,   299,   300,   301,   302,   303,   304,
   305,   678,   362,   582,   583,   152,   285,   691,   692,   328,
   136,   137,   272,   726,   743,   744,     6,   530,   525,    12,
   130,   230,   589,   544,   545,   284,   714,   715,   624,   434,
   231,   529,   589,   378,  -238,   333,   436,   336,   475,   338,
   339,   340,   341,   189,   190,   400,   347,   677,     6,   187,
   351,   352,   353,   202,   610,    12,   126,   566,   761,   361,
   203,   607,   765,   766,   767,   222,   678,   345,   369,   370,
   371,   565,   373,   374,   375,   623,   104,   446,    42,   130,
   275,   628,   223,   105,   178,   179,    74,    75,   182,   183,
   184,   313,   313,   358,   320,   325,   233,   325,   135,   234,
   136,   137,   243,   316,   191,   453,   326,   314,   314,   611,
   321,   189,   190,   155,   434,     6,   523,   435,     9,    10,
   346,   436,    12,   193,   161,   248,   417,   194,   589,   195,
   356,   245,   359,  -288,   249,   169,   621,  -288,   251,  -288,
   253,   367,   256,   380,   385,   440,   451,   716,   395,   395,
   395,    12,   322,   456,   328,   133,   134,   135,   255,   136,
   137,   257,    69,   261,   401,-32768,   125,     6,   382,   465,
   441,   507,   508,   442,    12,   383,     6,   382,   313,   143,
   652,   104,   262,    12,   383,   299,   144,   739,   105,   320,
   264,   485,   265,   745,   314,   746,   145,   459,   460,     6,
   382,   589,   589,   267,   146,   321,   513,   383,   147,   515,
   328,   328,   266,   438,   659,    52,   101,    69,   660,   600,
   661,   268,   603,   447,   447,   269,   426,   427,   428,   527,
   429,   270,    90,   273,   531,   348,   487,   342,   535,   275,
   537,   349,   717,   160,   360,   768,   769,   770,   380,   365,
   160,   376,   704,   366,   706,   368,   560,   490,  -289,    12,
   685,   173,  -289,   387,  -289,   532,   533,    52,   143,   173,
   443,   448,    90,   392,   567,   144,   568,   718,   719,   725,
   402,   571,   143,   125,   521,   145,   412,   649,   650,   144,
   325,   520,   596,   146,   405,   597,   598,   147,   408,   145,
   422,   526,   420,   604,   321,   130,   299,   146,   617,   618,
   619,   147,   655,   452,   328,     6,   328,   232,     9,    10,
  -138,   620,    12,   622,  -137,   437,  -136,   439,   447,   410,
   252,   254,  -133,   447,   466,   467,   468,     6,   469,   455,
     9,    10,   634,   158,    12,  -134,   164,   173,  -135,   328,
   158,   419,   463,   584,   177,   588,   415,   433,   638,     2,
   454,     3,     4,     5,   490,   588,   287,   688,   476,-32768,
-32768,   124,   125,   395,   204,   205,   613,   615,   461,   131,
   132,   133,   134,   135,    19,   136,   137,   313,   655,   471,
   320,   478,   689,   472,   477,   690,   312,   312,     6,   319,
   484,     9,    10,   314,   666,   500,   321,   667,   321,   501,
   502,   503,   505,   357,   517,   632,   519,   506,   528,   542,
   681,   539,   570,   580,   563,   534,   447,     6,   382,   164,
   691,   692,     6,   546,    12,   383,   569,   581,   487,    12,
   547,   616,   625,   630,   687,   640,   561,   641,   101,   384,
   643,   646,   703,   562,   656,   584,   648,   653,   564,   707,
   672,   588,   548,   549,   668,   658,   486,   288,   664,   290,
   291,   292,   293,   294,   295,   296,   297,   673,   684,   595,
   436,   686,   700,   312,   309,   309,   701,   550,   551,   705,
   552,   553,   709,   720,   319,   683,   487,   119,   120,   121,
   122,   123,   124,   125,   735,   736,   723,   206,   130,   733,
   698,   164,   445,   445,   729,   737,   738,   748,  -289,   364,
   747,   462,  -289,   749,  -289,   664,   699,   488,   753,   372,
   756,   635,   554,   757,   588,   588,   772,   754,     6,   382,
   758,   773,   116,   153,   721,    12,   383,   639,   148,   403,
   288,   325,   682,   101,   514,   642,   728,   246,   411,   247,
   645,   644,   489,   727,   698,   287,   130,   538,   321,   732,
   759,   309,   121,   122,   123,   124,   125,   486,   664,   174,
   699,   350,   406,   132,   133,   134,   135,   751,   136,   137,
   721,   363,   354,   319,   524,   724,   337,   536,   752,   647,
   150,   750,   449,   450,   755,   393,   674,   487,   654,   599,
   605,   663,   601,   457,   458,   386,     0,   445,   189,   190,
     0,     0,   445,     0,     0,   558,   288,     0,     0,  -289,
     0,     0,     0,  -289,   288,  -289,     0,     0,   488,     0,
   425,   132,   133,   134,   135,     0,   136,   137,     0,     0,
     0,     0,   572,   120,   121,   122,   123,   124,   125,     0,
   489,   118,   119,   120,   121,   122,   123,   124,   125,   489,
   489,     0,   518,   -27,   -27,   -27,   -27,   -27,   -27,-32768,
   125,   612,   -28,   -28,   -28,   -28,   -28,   -28,-32768,   125,
     0,     0,   312,     0,     0,   319,     0,   319,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   288,   288,     0,     0,   445,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   572,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   489,     0,     0,     0,
     0,     0,   662,   489,     0,     0,     0,     0,     0,     0,
   309,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   637,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   697,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   489,     0,     0,     0,     0,     0,     0,     0,     0,   489,
   489,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   319,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   697,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   489,     0,     0,     0,     0,     0,     1,
     0,     2,     0,     3,     4,     5,     6,     7,     8,     9,
    10,     0,    11,    12,    13,     0,     0,     0,   702,     0,
    14,     0,    15,    16,    17,    18,    19,  -244,    20,     0,
     0,     0,     0,     0,  -244,    21,    22,    23,     0,     0,
   288,    24,    25,    26,  -244,     0,    27,    28,     0,    29,
     0,    30,  -244,    31,     0,    32,  -244,    33,    34,     0,
    35,    36,    37,    38,    39,    40,   -11,     0,     0,     0,
    41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    44,     0,     0,    45,    46,     0,     0,    47,     0,    48,
    49,    50,     0,    51,     0,     0,    52,     0,     2,     0,
     3,     4,     5,     6,     7,     8,     9,    10,     0,    11,
    12,    13,     0,     0,     0,     0,   760,    14,     0,    15,
    16,    17,    18,    19,     0,    20,     0,     0,     0,     0,
     0,     0,    21,    22,    23,     0,     0,     0,    24,    25,
    26,     0,     0,    27,    28,     0,    29,     0,    30,     0,
    31,     0,    32,     0,    33,    34,     0,    35,    36,    37,
    38,    39,    40,   -11,     0,     0,     0,    41,    42,    43,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    44,     0,     0,
    45,    46,     0,     0,    47,     0,    48,    49,    50,     0,
    51,     0,     0,    52,     6,     7,     8,     9,    10,     0,
    11,    12,    13,     0,     0,     0,     0,     0,    14,     0,
    15,    16,    17,    18,     0,     0,    20,     0,     0,     0,
     0,     0,     0,    21,    22,    23,     0,     0,     0,    24,
    25,    26,     0,     0,    27,    28,     0,    29,     0,    30,
     0,    31,     0,    32,     0,    33,    34,   263,    35,    36,
    37,    38,    39,    40,     0,     0,     0,     0,    41,     0,
    43,     0,     0,     0,     0,   118,   119,   120,   121,   122,
   123,   124,   125,     0,     0,     0,     0,     0,    44,     0,
     0,    45,    46,     0,     0,    47,     0,    48,    49,    50,
     0,    51,     0,     0,    52,     6,     7,     8,     9,    10,
     0,    11,    12,    13,     0,     0,     0,     0,     0,    14,
     0,    15,    16,    17,    18,     0,     0,    20,     0,     0,
     0,     0,     0,     0,    21,    22,    23,     0,     0,     0,
    24,    25,    26,     0,     0,    27,    28,     0,    29,     0,
    30,     0,    31,     0,    32,     0,    33,    34,     0,    35,
    36,    37,    38,    39,    40,     0,     0,     0,     0,    41,
     0,    43,     0,     0,     0,     0,   118,   119,   120,   121,
   122,   123,   124,   125,     0,     0,     0,     0,     0,    44,
     0,     0,    45,    46,     0,     0,    47,     0,    48,    49,
    50,     0,    51,     0,     0,    52,     6,     7,     8,     9,
    10,     0,    11,    12,    13,     0,     0,     0,     0,     0,
    14,     0,    15,    16,    17,    18,     0,     0,    20,     0,
     0,     0,     0,     0,     0,    21,   306,    23,     0,     0,
     0,    24,    25,    26,     0,     0,    27,    28,     0,    29,
     0,    30,     0,    31,     0,    32,     0,    33,    34,     0,
    35,   307,    37,    38,   308,    40,     0,     0,     0,     0,
    41,     0,    43,     0,     0,     0,     0,   118,   119,   120,
   121,   122,   123,   124,   125,     0,     0,     0,     0,     0,
    44,     0,     0,    45,    46,     0,     0,    47,     0,    48,
    49,    50,     0,    51,     0,     0,    52,     6,     7,     8,
     9,    10,     0,    11,    12,    13,     0,     0,     0,     0,
     0,    14,     0,    15,    16,    17,    18,     0,     0,    20,
     0,     0,     0,     0,     0,     0,    21,    22,    23,     0,
     0,     0,    24,    25,    26,     0,     0,    27,    28,     0,
    29,     0,    30,     0,    31,     0,    32,     0,    33,    34,
     0,    35,    36,    37,    38,    39,    40,     0,     0,     0,
     0,    41,     0,    43,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    44,     0,     0,    45,    46,     0,     0,    47,     0,
    48,    49,    50,     0,    51,     0,     0,    52,     6,     7,
     8,     9,    10,     0,    11,    12,    13,     0,     0,     0,
     0,     0,    14,     0,    15,    16,    17,    18,     0,     0,
    20,     0,     0,     0,     0,     0,     0,    21,   306,    23,
     0,     0,     0,    24,    25,    26,     0,     0,    27,    28,
     0,    29,     0,    30,     0,    31,     0,    32,     0,    33,
    34,     0,    35,   307,    37,    38,   308,    40,     0,     0,
     0,     0,    41,     0,    43,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    44,     0,     0,    45,    46,     0,     0,    47,
     0,    48,    49,    50,     0,    51,     0,     0,    52
};

static const short yycheck[] = {    15,
    16,    17,    18,    19,    20,   228,   102,   320,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   280,   281,    35,
    94,   223,    38,   375,    42,    41,   406,    43,    44,    45,
    46,    42,   419,   523,    50,    51,    52,   496,   481,   448,
     8,   381,   288,   167,    60,    61,   274,    15,    18,   388,
   388,   316,   317,    14,   338,   339,    19,   276,   323,     0,
   599,   326,   327,   479,    34,    47,   107,   108,   109,     8,
    20,    42,    11,    12,   479,    79,     8,    56,    68,    61,
    95,    47,    73,    15,    88,    89,   606,    15,   608,   609,
    40,    42,    42,    72,   535,    61,   537,    15,   641,    70,
    71,    15,   118,   119,   120,   121,    56,   309,    69,   125,
    13,   127,   128,   129,    55,   131,    57,   656,   364,   135,
   136,   137,   138,   139,   140,   249,   372,   143,   144,   145,
   146,   147,   541,   592,   102,   578,   523,   100,    79,    80,
   480,     4,    83,   663,    85,    86,   485,   527,    99,    90,
    91,   379,   695,    94,   105,   106,   495,   495,   173,   443,
   576,   577,   615,   114,   448,   384,   385,   451,   107,   148,
   709,   576,   577,   101,   215,   216,   217,   218,   219,   220,
   221,   615,   256,   101,   102,     4,   202,   101,   102,   230,
    93,    94,   185,   683,   711,   712,     8,   428,   421,    15,
    13,    52,   486,   449,   450,   198,   665,   666,   521,    79,
    61,   427,   496,   272,    79,   231,    86,   233,   570,   235,
   236,   237,   238,    88,    89,   284,   242,   680,     8,   107,
   246,   247,   248,    47,    14,    15,   177,   468,   755,   255,
   100,   504,   762,   763,   764,    99,   680,   240,   264,   265,
   266,   467,   268,   269,   270,   520,   274,   541,    73,    13,
    75,   526,    99,   274,    92,    93,    97,    98,    96,    97,
    98,   222,   223,   252,   225,   226,    35,   228,    91,    18,
    93,    94,    31,   224,   380,   344,   227,   222,   223,    69,
   225,    88,    89,   234,    79,     8,   683,    82,    11,    12,
   241,    86,    15,    99,   245,    35,   322,   103,   592,   105,
   251,    18,   253,    99,    18,   256,   518,   103,    47,   105,
    47,   262,    18,   274,   275,    38,   342,   667,   279,   280,
   281,    15,    16,   349,   375,    89,    90,    91,    35,    93,
    94,   105,     0,    61,   285,    85,    86,     8,     9,   365,
    63,    70,    71,    66,    15,    16,     8,     9,   309,    29,
   579,   379,    47,    15,    16,   406,    36,   707,   379,   320,
    35,   387,    35,   713,   309,   715,    46,   356,   357,     8,
     9,   665,   666,   105,    54,   320,   402,    16,    58,   405,
   431,   432,    35,   334,    99,   108,    42,    55,   103,   495,
   105,    35,   498,   338,   339,    35,    31,    32,    33,   425,
    35,    23,   428,    79,   430,   243,    77,    50,   434,    75,
   436,    35,   668,    81,    61,   765,   766,   767,   379,    35,
    88,    41,   651,   261,   653,   263,   452,   388,    99,    15,
    16,    87,   103,    60,   105,   431,   432,   108,    29,    95,
   338,   339,   468,    47,   470,    36,   472,   672,   673,   682,
   104,   477,    29,    86,   415,    46,    47,   576,   577,    36,
   421,   412,   488,    54,   106,   491,   492,    58,    19,    46,
    47,   422,    21,   499,   419,    13,   527,    54,   510,   511,
   512,    58,   588,    35,   535,     8,   537,   155,    11,    12,
   107,   517,    15,   519,   107,   333,   107,   335,   443,   107,
   168,   169,   107,   448,    31,    32,    33,     8,    35,   347,
    11,    12,   538,    81,    15,   107,    84,   173,   107,   570,
    88,    99,   360,   484,    92,   486,   107,    61,   554,     3,
    61,     5,     6,     7,   495,   496,   204,    38,   376,    83,
    84,    85,    86,   504,   112,   113,   507,   508,    61,    87,
    88,    89,    90,    91,    28,    93,    94,   518,   664,    35,
   521,    76,    63,    35,    35,    66,   222,   223,     8,   225,
    99,    11,    12,   518,   600,    35,   521,   603,   523,    18,
   100,    78,   104,   251,   100,   536,   100,   106,   426,   107,
   616,    61,    18,    35,   106,   433,   541,     8,     9,   167,
   101,   102,     8,     9,    15,    16,   106,    35,    77,    15,
    16,    35,   100,    35,   640,    79,   454,    99,   274,   275,
    35,   107,   648,   461,    79,   586,    35,   100,   466,   655,
    79,   592,    38,    39,    99,   596,    47,   205,   599,   207,
   208,   209,   210,   211,   212,   213,   214,    79,    47,   487,
    86,    35,    35,   309,   222,   223,    35,    63,    64,    35,
    66,    67,    79,    35,   320,   626,    77,    80,    81,    82,
    83,    84,    85,    86,   700,   701,    35,   638,    13,    17,
   641,   249,   338,   339,   107,    35,    35,    35,    99,   257,
   100,   359,   103,    35,   105,   656,   641,   108,   100,   267,
   100,   539,   108,   104,   665,   666,     0,   733,     8,     9,
   106,     0,    55,    77,   675,    15,    16,   555,    69,   287,
   288,   682,   625,   379,   403,   563,   687,   164,   315,   164,
   570,   569,   388,   684,   695,   403,    13,   437,   683,   695,
   751,   309,    82,    83,    84,    85,    86,    47,   709,    88,
   695,   245,    87,    88,    89,    90,    91,   729,    93,    94,
   721,   256,   249,   419,   420,   680,   234,   435,   729,   574,
    73,   721,   340,   341,   741,   278,   614,    77,   586,    79,
   501,   598,   495,   351,   352,   275,    -1,   443,    88,    89,
    -1,    -1,   448,    -1,    -1,   451,   364,    -1,    -1,    99,
    -1,    -1,    -1,   103,   372,   105,    -1,    -1,   108,    -1,
    87,    88,    89,    90,    91,    -1,    93,    94,    -1,    -1,
    -1,    -1,   478,    81,    82,    83,    84,    85,    86,    -1,
   486,    79,    80,    81,    82,    83,    84,    85,    86,   495,
   496,    -1,   410,    79,    80,    81,    82,    83,    84,    85,
    86,   507,    79,    80,    81,    82,    83,    84,    85,    86,
    -1,    -1,   518,    -1,    -1,   521,    -1,   523,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   449,   450,    -1,    -1,   541,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   574,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,    -1,
    -1,    -1,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
   518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   542,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   641,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   656,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   665,
   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   683,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   695,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   709,    -1,    -1,    -1,    -1,    -1,     1,
    -1,     3,    -1,     5,     6,     7,     8,     9,    10,    11,
    12,    -1,    14,    15,    16,    -1,    -1,    -1,   646,    -1,
    22,    -1,    24,    25,    26,    27,    28,    29,    30,    -1,
    -1,    -1,    -1,    -1,    36,    37,    38,    39,    -1,    -1,
   668,    43,    44,    45,    46,    -1,    48,    49,    -1,    51,
    -1,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
    62,    63,    64,    65,    66,    67,    68,    -1,    -1,    -1,
    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    92,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   101,
   102,   103,    -1,   105,    -1,    -1,   108,    -1,     3,    -1,
     5,     6,     7,     8,     9,    10,    11,    12,    -1,    14,
    15,    16,    -1,    -1,    -1,    -1,   754,    22,    -1,    24,
    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    -1,
    -1,    -1,    37,    38,    39,    -1,    -1,    -1,    43,    44,
    45,    -1,    -1,    48,    49,    -1,    51,    -1,    53,    -1,
    55,    -1,    57,    -1,    59,    60,    -1,    62,    63,    64,
    65,    66,    67,    68,    -1,    -1,    -1,    72,    73,    74,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    -1,
    95,    96,    -1,    -1,    99,    -1,   101,   102,   103,    -1,
   105,    -1,    -1,   108,     8,     9,    10,    11,    12,    -1,
    14,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,    -1,
    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,    43,
    44,    45,    -1,    -1,    48,    49,    -1,    51,    -1,    53,
    -1,    55,    -1,    57,    -1,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    -1,    -1,    -1,    -1,    72,    -1,
    74,    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,
    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    92,    -1,
    -1,    95,    96,    -1,    -1,    99,    -1,   101,   102,   103,
    -1,   105,    -1,    -1,   108,     8,     9,    10,    11,    12,
    -1,    14,    15,    16,    -1,    -1,    -1,    -1,    -1,    22,
    -1,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
    -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,
    43,    44,    45,    -1,    -1,    48,    49,    -1,    51,    -1,
    53,    -1,    55,    -1,    57,    -1,    59,    60,    -1,    62,
    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    72,
    -1,    74,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    92,
    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   101,   102,
   103,    -1,   105,    -1,    -1,   108,     8,     9,    10,    11,
    12,    -1,    14,    15,    16,    -1,    -1,    -1,    -1,    -1,
    22,    -1,    24,    25,    26,    27,    -1,    -1,    30,    -1,
    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,
    -1,    43,    44,    45,    -1,    -1,    48,    49,    -1,    51,
    -1,    53,    -1,    55,    -1,    57,    -1,    59,    60,    -1,
    62,    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
    72,    -1,    74,    -1,    -1,    -1,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,
    92,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   101,
   102,   103,    -1,   105,    -1,    -1,   108,     8,     9,    10,
    11,    12,    -1,    14,    15,    16,    -1,    -1,    -1,    -1,
    -1,    22,    -1,    24,    25,    26,    27,    -1,    -1,    30,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    -1,
    -1,    -1,    43,    44,    45,    -1,    -1,    48,    49,    -1,
    51,    -1,    53,    -1,    55,    -1,    57,    -1,    59,    60,
    -1,    62,    63,    64,    65,    66,    67,    -1,    -1,    -1,
    -1,    72,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    92,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
   101,   102,   103,    -1,   105,    -1,    -1,   108,     8,     9,
    10,    11,    12,    -1,    14,    15,    16,    -1,    -1,    -1,
    -1,    -1,    22,    -1,    24,    25,    26,    27,    -1,    -1,
    30,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
    -1,    -1,    -1,    43,    44,    45,    -1,    -1,    48,    49,
    -1,    51,    -1,    53,    -1,    55,    -1,    57,    -1,    59,
    60,    -1,    62,    63,    64,    65,    66,    67,    -1,    -1,
    -1,    -1,    72,    -1,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    92,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,   101,   102,   103,    -1,   105,    -1,    -1,   108
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */


/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
{ yyoutput = yyvsp[-1].t; YYACCEPT; ;
    break;}
case 2:
{ yyoutput = OZ_atom("parseError"); YYABORT; ;
    break;}
case 3:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 4:
{ yyval.t = consList(newCTerm("fSynTopLevelProductionTemplates",
					   yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 5:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 6:
{ yyval.t = consList(newCTerm("fFunctor",newCTerm("fDollar",yyvsp[-2].t),
					   yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 7:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 8:
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-3].t,newCTerm("fSkip",yyvsp[-1].t),
					   yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 9:
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 10:
{ yyval.t = consList(newCTerm("fDeclare",yyvsp[-2].t,
					   newCTerm("fSkip",yyvsp[-1].t),yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 11:
{ yyval.t = nilAtom; ;
    break;}
case 12:
{ yyval.t = newCTerm("dirSwitch",yyvsp[0].t); ;
    break;}
case 13:
{ yyval.t = newCTerm("dirLocalSwitches"); ;
    break;}
case 14:
{ yyval.t = newCTerm("dirPushSwitches"); ;
    break;}
case 15:
{ yyval.t = newCTerm("dirPopSwitches"); ;
    break;}
case 16:
{ yyval.t = nilAtom; ;
    break;}
case 17:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 18:
{ if (!strcmp(xytext,"gump"))
		      xy_gumpSyntax = 1;
		    if (!strcmp(xytext,"allowdeprecated"))
		      xy_allowDeprecated = 1;
		    yyval.t = newCTerm("on",newCTerm(xytext),pos());
		  ;
    break;}
case 19:
{ if (!strcmp(xytext,"gump"))
		      xy_gumpSyntax = 0;
		    if (!strcmp(xytext,"allowdeprecated"))
		      xy_allowDeprecated = 0;
		    yyval.t = newCTerm("off",newCTerm(xytext),pos());
		  ;
    break;}
case 20:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 21:
{ yyval.t = newCTerm("fAnd",yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 22:
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 23:
{ yyval.t = newCTerm("fAssign",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 24:
{ yyval.t = newCTerm("fOrElse",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 25:
{ yyval.t = newCTerm("fAndThen",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 26:
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 27:
{ yyval.t = newCTerm("fFdCompare",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 28:
{ yyval.t = newCTerm("fFdIn",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 29:
{ yyval.t = makeCons(yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 30:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 31:
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("#"),yyvsp[-1].t),
				  consList(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 32:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 33:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 34:
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 35:
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 36:
{ yyval.t = newCTerm("fOpApply",yyvsp[-2].t,
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 37:
{ yyval.t = newCTerm("fObjApply",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 38:
{ yyval.t = newCTerm("fOpApply",newCTerm("~"),
				  consList(yyvsp[0].t,nilAtom),yyvsp[-1].t); ;
    break;}
case 39:
{ yyval.t = newCTerm("fOpApply",newCTerm("."),
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 40:
{ yyval.t = newCTerm("fOpApply",newCTerm("."),
				  consList(yyvsp[-1].t,consList(makeInt(xytext,pos()),
						       nilAtom)),pos()); ;
    break;}
case 41:
{ yyval.t = newCTerm("fOpApply",newCTerm("^"),
				  consList(yyvsp[-3].t,consList(yyvsp[0].t,nilAtom)),yyvsp[-1].t); ;
    break;}
case 42:
{ yyval.t = newCTerm("fAt",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 43:
{ yyval.t = newCTerm("fOpApply",newCTerm("!!"),
				  consList(yyvsp[0].t,nilAtom),yyvsp[-1].t); ;
    break;}
case 44:
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 45:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 46:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 47:
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 48:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 49:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 50:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 51:
{ yyval.t = newCTerm("fSelf",pos()); ;
    break;}
case 52:
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 53:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 54:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 55:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 56:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 57:
{ yyval.t = newCTerm("fRecord",newCTerm("fAtom",newCTerm("|"),
						     makeLongPos(yyvsp[-4].t,yyvsp[0].t)),
				  consList(yyvsp[-3].t,consList(yyvsp[-2].t,nilAtom))); ;
    break;}
case 58:
{ yyval.t = newCTerm("fApply",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 59:
{ yyval.t = newCTerm("fProc",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-7].t,makeLongPos(yyvsp[-8].t,yyvsp[0].t)); ;
    break;}
case 60:
{ yyval.t = newCTerm("fFun",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-7].t,makeLongPos(yyvsp[-8].t,yyvsp[0].t)); ;
    break;}
case 61:
{ yyval.t = newCTerm("fFunctor",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 62:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 63:
{ yyval.t = newCTerm("fLocal",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t); ;
    break;}
case 64:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 65:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 66:
{ yyval.t = newCTerm("fLock",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 67:
{ yyval.t = newCTerm("fLockThen",yyvsp[-4].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 68:
{ yyval.t = newCTerm("fThread",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 69:
{ yyval.t = newCTerm("fTry",yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 70:
{ yyval.t = newCTerm("fRaise",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 71:
{ yyval.t = newCTerm("fSkip",pos()); ;
    break;}
case 72:
{ yyval.t = newCTerm("fFail",pos()); ;
    break;}
case 73:
{ yyval.t = newCTerm("fNot",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 74:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 75:
{ yyval.t = newCTerm("fOr",yyvsp[-2].t,newCTerm("for"),
				  makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 76:
{ yyval.t = newCTerm("fOr",yyvsp[-2].t,newCTerm("fdis"),
				  makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 77:
{ yyval.t = newCTerm("fOr",yyvsp[-2].t,newCTerm("fchoice"),
				  makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 78:
{ yyval.t = newCTerm("fCondis",yyvsp[-2].t,makeLongPos(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 79:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 80:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 81:
{ yyval.t = nilAtom; ;
    break;}
case 82:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 83:
{ yyval.t = nilAtom; ;
    break;}
case 84:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 85:
{ yyval.t = consList(newCTerm("fRequire",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 86:
{ yyval.t = consList(newCTerm("fPrepare",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 87:
{ yyval.t = consList(newCTerm("fPrepare",yyvsp[-1].t,
					   newCTerm("fSkip",yyvsp[-2].t),yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 88:
{ yyval.t = consList(newCTerm("fImport",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 89:
{ yyval.t = consList(newCTerm("fExport",yyvsp[-1].t,yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 90:
{ yyval.t = consList(newCTerm("fDefine",yyvsp[-3].t,yyvsp[-1].t,yyvsp[-4].t),yyvsp[0].t); ;
    break;}
case 91:
{ yyval.t = consList(newCTerm("fDefine",yyvsp[-1].t,
					   newCTerm("fSkip",yyvsp[-2].t),yyvsp[-2].t),yyvsp[0].t); ;
    break;}
case 92:
{ yyval.t = nilAtom; ;
    break;}
case 93:
{ yyval.t = consList(newCTerm("fImportItem",yyvsp[-2].t,nilAtom,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 94:
{ yyval.t = consList(newCTerm("fImportItem",yyvsp[-5].t,yyvsp[-3].t,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 95:
{ yyval.t = newCTerm("fVar",OZ_atom(xytext),yyvsp[0].t); ;
    break;}
case 96:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 97:
{ yyval.t = consList(pair(yyvsp[0].t,yyvsp[-2].t),nilAtom); ;
    break;}
case 98:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 99:
{ yyval.t = consList(pair(yyvsp[-1].t,yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 100:
{ yyval.t = newCTerm("fNoImportAt"); ;
    break;}
case 101:
{ yyval.t = newCTerm("fImportAt",yyvsp[0].t); ;
    break;}
case 102:
{ yyval.t = nilAtom; ;
    break;}
case 103:
{ yyval.t = consList(newCTerm("fExportItem",yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 104:
{ yyval.t = consList(newCTerm("fExportItem",
					   newCTerm("fColon",yyvsp[-3].t,yyvsp[-1].t)),yyvsp[0].t); ;
    break;}
case 105:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 106:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 107:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 108:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 109:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 110:
{ yyval.t = newCTerm(xytext); ;
    break;}
case 111:
{ yyval.t = newCTerm("fLocal",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 112:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 113:
{ yyval.t = nilAtom; ;
    break;}
case 114:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 115:
{ yyval.t = newCTerm("fAtom",nilAtom,yyvsp[0].t); ;
    break;}
case 116:
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("|"),yyvsp[-2].t),
				  consList(yyvsp[-1].t,consList(yyvsp[0].t,nilAtom))); ;
    break;}
case 117:
{ yyval.t = newCTerm("fNoCatch"); ;
    break;}
case 118:
{ yyval.t = newCTerm("fCatch",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 119:
{ yyval.t = newCTerm("fNoFinally"); ;
    break;}
case 120:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 121:
{
		    yyval.t = newCTerm(OZ_isTrue(yyvsp[-2].t)? "fOpenRecord": "fRecord",
				  newCTerm("fAtom",yyvsp[-6].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)),yyvsp[-3].t);
		  ;
    break;}
case 122:
{
		    yyval.t = newCTerm(OZ_isTrue(yyvsp[-2].t)? "fOpenRecord": "fRecord",
				  makeVar(yyvsp[-6].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)),yyvsp[-3].t);
		  ;
    break;}
case 123:
{ yyval.t = OZ_atom(xytext); ;
    break;}
case 124:
{ yyval.t = OZ_unit(); ;
    break;}
case 125:
{ yyval.t = OZ_true(); ;
    break;}
case 126:
{ yyval.t = OZ_false(); ;
    break;}
case 127:
{ yyval.t = OZ_atom(xytext); ;
    break;}
case 128:
{ yyval.t = nilAtom; ;
    break;}
case 129:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 130:
{ yyval.t = consList(newCTerm("fColon",yyvsp[-3].t,yyvsp[-1].t),yyvsp[0].t); ;
    break;}
case 131:
{ yyval.t = OZ_false(); ;
    break;}
case 132:
{ yyval.t = OZ_true(); ;
    break;}
case 133:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 134:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 135:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 136:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 137:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 138:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 139:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 140:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 141:
{ yyval.t = newCTerm("fBoolCase",yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 142:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 143:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 144:
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 145:
{ yyval.t = newCTerm("fSkip",pos()); ;
    break;}
case 146:
{ checkDeprecation(yyvsp[-3].t);
		    yyval.t = newCTerm("fBoolCase",yyvsp[-5].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-6].t,yyvsp[0].t));
		  ;
    break;}
case 147:
{ yyval.t = newCTerm("fCase",yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 148:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 149:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 150:
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 151:
{ yyval.t = newCTerm("fNoElse",pos()); ;
    break;}
case 152:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 153:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 154:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 155:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 156:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 157:
{ yyval.t = newCTerm("fCaseClause",yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 158:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 159:
{ yyval.t = newCTerm("fSideCondition",yyvsp[-3].t,
				  newCTerm("fSkip",yyvsp[-1].t),yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 160:
{ yyval.t = newCTerm("fSideCondition",yyvsp[-5].t,yyvsp[-2].t,yyvsp[0].t,yyvsp[-3].t); ;
    break;}
case 161:
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 162:
{ yyval.t = makeCons(yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 163:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 164:
{ yyval.t = newCTerm("fRecord",
				  newCTerm("fAtom",newCTerm("#"),yyvsp[-1].t),
				  consList(yyvsp[-3].t,yyvsp[0].t)); ;
    break;}
case 165:
{ yyval.t = newCTerm("fClass",yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-5].t,yyvsp[0].t)); ;
    break;}
case 166:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 167:
{ yyval.t = newCTerm("fDollar",yyvsp[0].t); ;
    break;}
case 168:
{ yyval.t = nilAtom; ;
    break;}
case 169:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 170:
{ yyval.t = newCTerm("fFrom",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 171:
{ yyval.t = newCTerm("fAttr",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 172:
{ yyval.t = newCTerm("fFeat",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 173:
{ yyval.t = newCTerm("fProp",consList(yyvsp[-1].t,yyvsp[0].t),yyvsp[-2].t); ;
    break;}
case 174:
{ yyval.t = nilAtom; ;
    break;}
case 175:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 176:
{ yyval.t = pair(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 177:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 178:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 179:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 180:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 181:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 182:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 183:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 184:
{ yyval.t = nilAtom; ;
    break;}
case 185:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 186:
{ yyval.t = newCTerm("fMeth",yyvsp[-2].t,yyvsp[-1].t,yyvsp[-3].t); ;
    break;}
case 187:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 188:
{ yyval.t = newCTerm("fEq",yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 189:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 190:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 191:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 192:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 193:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 194:
{ yyval.t = newCTerm("fRecord",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 195:
{ yyval.t = newCTerm("fOpenRecord",yyvsp[-4].t,yyvsp[-2].t); ;
    break;}
case 196:
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 197:
{ yyval.t = makeVar(xytext); ;
    break;}
case 198:
{ yyval.t = newCTerm("fEscape",makeVar(xytext),yyvsp[-1].t); ;
    break;}
case 199:
{ yyval.t = newCTerm("fAtom",OZ_unit(),pos()); ;
    break;}
case 200:
{ yyval.t = newCTerm("fAtom",OZ_true(),pos()); ;
    break;}
case 201:
{ yyval.t = newCTerm("fAtom",OZ_false(),pos()); ;
    break;}
case 202:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 203:
{ yyval.t = nilAtom; ;
    break;}
case 204:
{ yyval.t = newCTerm("fMethArg",yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 205:
{ yyval.t = newCTerm("fMethColonArg",yyvsp[-3].t,yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 206:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 207:
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 208:
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 209:
{ yyval.t = newCTerm("fDefault",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 210:
{ yyval.t = newCTerm("fNoDefault"); ;
    break;}
case 211:
{ yyval.t = newCTerm("fCond",yyvsp[-3].t,yyvsp[-2].t,makeLongPos(yyvsp[-4].t,yyvsp[0].t)); ;
    break;}
case 212:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 213:
{ yyval.t = newCTerm("fNoElse",pos()); ;
    break;}
case 214:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 215:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 216:
{ yyval.t = newCTerm("fClause",newCTerm("fSkip",yyvsp[-1].t),yyvsp[-3].t,yyvsp[0].t); ;
    break;}
case 217:
{ yyval.t = newCTerm("fClause",yyvsp[-4].t,yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 218:
{ yyval.t = consList(yyvsp[-2].t,consList(yyvsp[0].t,nilAtom)); ;
    break;}
case 219:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 220:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 221:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 222:
{ yyval.t = newCTerm("fFdCompare",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 223:
{ yyval.t = newCTerm("fFdIn",yyvsp[-2].t,yyvsp[-3].t,yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 224:
{ yyval.t = consList(yyvsp[-2].t,consList(yyvsp[0].t,nilAtom)); ;
    break;}
case 225:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 226:
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[0].t),
				  yyvsp[-1].t,newCTerm("fNoThen",yyvsp[0].t)); ;
    break;}
case 227:
{ yyval.t = newCTerm("fClause",yyvsp[-3].t,yyvsp[-1].t,newCTerm("fNoThen",yyvsp[0].t)); ;
    break;}
case 228:
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[-2].t),yyvsp[-3].t,yyvsp[0].t); ;
    break;}
case 229:
{ yyval.t = newCTerm("fClause",yyvsp[-4].t,yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 230:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 231:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 232:
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[0].t),
				  newCTerm("fSkip",yyvsp[0].t),
				  yyvsp[-1].t); ;
    break;}
case 233:
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[-2].t),
				  newCTerm("fSkip",yyvsp[-2].t),
				  newCTerm("fLocal",yyvsp[-3].t,yyvsp[0].t,yyvsp[-2].t)); ;
    break;}
case 234:
{ yyval.t = newCTerm("fClause",
				  newCTerm("fSkip",yyvsp[-2].t),yyvsp[-3].t,yyvsp[0].t); ;
    break;}
case 235:
{ yyval.t = newCTerm("fClause",yyvsp[-5].t,yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 236:
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 237:
{ yyval.t = makeVar(xytext); ;
    break;}
case 238:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 239:
{ yyval.t = newCTerm("fEscape",yyvsp[0].t,yyvsp[-1].t); ;
    break;}
case 240:
{ yyval.t = makeString(xytext,pos()); ;
    break;}
case 241:
{ yyval.t = makeInt(xytext,pos()); ;
    break;}
case 242:
{ yyval.t = makeInt(xytext[0],pos()); ;
    break;}
case 243:
{ yyval.t = newCTerm("fFloat",OZ_CStringToFloat(xytext),pos()); ;
    break;}
case 244:
{ yyval.t = pos(); ;
    break;}
case 245:
{ yyval.t = pos(); ;
    break;}
case 246:
{ OZ_Term prefix =
		      scannerPrefix? scannerPrefix: OZ_atom("zy");
		    yyval.t = newCTerm("fScanner",yyvsp[-5].t,yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,prefix,
				  makeLongPos(yyvsp[-6].t,yyvsp[0].t)); ;
    break;}
case 247:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 248:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 249:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 250:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 251:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 252:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 253:
{ yyval.t = newCTerm("fLexicalAbbreviation",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 254:
{ yyval.t = newCTerm("fLexicalAbbreviation",yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 255:
{ yyval.t = newCTerm("fLexicalRule",yyvsp[-2].t,yyvsp[-1].t); ;
    break;}
case 256:
{ yyval.t = OZ_string(xytext); ;
    break;}
case 257:
{ yyval.t = OZ_string(xytext); ;
    break;}
case 258:
{ yyval.t = newCTerm("fMode",yyvsp[-2].t,yyvsp[-1].t); ;
    break;}
case 259:
{ yyval.t = nilAtom; ;
    break;}
case 260:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 261:
{ yyval.t = newCTerm("fInheritedModes",yyvsp[0].t); ;
    break;}
case 262:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 263:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 264:
{ OZ_Term expect = parserExpect? parserExpect: OZ_int(0);
		    yyval.t = newCTerm("fParser",yyvsp[-6].t,yyvsp[-5].t,yyvsp[-4].t,yyvsp[-3].t,yyvsp[-2].t,expect,
				  makeLongPos(yyvsp[-7].t,yyvsp[0].t)); ;
    break;}
case 265:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 266:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 267:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 268:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 269:
{ yyval.t = newCTerm("fToken",nilAtom); ;
    break;}
case 270:
{ yyval.t = newCTerm("fToken",yyvsp[0].t); ;
    break;}
case 271:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 272:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 273:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 274:
{ yyval.t = pair(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 275:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 276:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 277:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 278:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 279:
{ *prodKey[depth]++ = '='; ;
    break;}
case 280:
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,yyvsp[-7].t); ;
    break;}
case 281:
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 282:
{ *prodKey[depth]++ = '='; ;
    break;}
case 283:
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,yyvsp[-7].t); ;
    break;}
case 284:
{ yyval.t = newCTerm("fProductionTemplate",yyvsp[-3].t,yyvsp[-4].t,yyvsp[-2].t,yyvsp[-1].t,newCTerm("none")); ;
    break;}
case 285:
{ yyval.t = consList(yyvsp[-1].t,nilAtom); ;
    break;}
case 286:
{ yyval.t = consList(yyvsp[-1].t,nilAtom); ;
    break;}
case 287:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 290:
{ prodName[depth] = OZ_string(OZ_atomToC(OZ_getArg(yyvsp[-1].t,0))); ;
    break;}
case 291:
{ *prodKey[depth]++ = '('; depth++; ;
    break;}
case 292:
{ depth--; ;
    break;}
case 293:
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 294:
{ *prodKey[depth]++ = '['; depth++; ;
    break;}
case 295:
{ depth--; ;
    break;}
case 296:
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 297:
{ *prodKey[depth]++ = '{'; depth++; ;
    break;}
case 298:
{ depth--; ;
    break;}
case 299:
{ yyval.t = yyvsp[-3].t; ;
    break;}
case 300:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 301:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 302:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 303:
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 304:
{ *prodKey[depth - 1]++ = '/'; *prodKey[depth - 1]++ = '/'; ;
    break;}
case 307:
{ *prodKey[depth]++ = xytext[0]; ;
    break;}
case 308:
{ *prodKey[depth]++ = xytext[0]; ;
    break;}
case 309:
{ *prodKey[depth] = '\0';
		    yyval.t = pair(prodName[depth],OZ_string(prodKeyBuffer[depth]));
		    prodName[depth] = newCTerm("none");
		    prodKey[depth] = prodKeyBuffer[depth];
		  ;
    break;}
case 310:
{ yyval.t = nilAtom; ;
    break;}
case 311:
{ yyval.t = yyvsp[-1].t; ;
    break;}
case 312:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 313:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 314:
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-2].t,nilAtom,yyvsp[-1].t); ;
    break;}
case 315:
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-2].t,nilAtom,yyvsp[-1].t); ;
    break;}
case 316:
{ yyval.t = newCTerm("fSyntaxRule",yyvsp[-5].t,yyvsp[-3].t,yyvsp[-1].t); ;
    break;}
case 317:
{ yyval.t = nilAtom; ;
    break;}
case 318:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 319:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 320:
{ yyval.t = newCTerm("fDollar",pos()); ;
    break;}
case 321:
{ yyval.t = newCTerm("fWildcard",pos()); ;
    break;}
case 322:
{ yyval.t = newCTerm("fSynAlternative", yyvsp[0].t); ;
    break;}
case 323:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 324:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 325:
{ OZ_Term t = yyvsp[0].t;
		    while (terms[depth]) {
		      t = consList(newCTerm("fSynApplication", terms[depth]->term, nilAtom), t);
		      TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		    }
		    yyval.t = newCTerm("fSynSequence", decls[depth], t, yyvsp[-1].t);
		    decls[depth] = nilAtom;
		  ;
    break;}
case 326:
{ yyval.t = newCTerm("fSynSequence", nilAtom, yyvsp[0].t, yyvsp[-1].t); ;
    break;}
case 327:
{ yyval.t = nilAtom; ;
    break;}
case 328:
{ yyval.t = consList(newCTerm("fSynAction",yyvsp[0].t),nilAtom); ;
    break;}
case 329:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 330:
{ yyval.t = consList(newCTerm("fSynTemplateInstantiation", yyvsp[0].t,
					   consList(newCTerm("fSynApplication",
							     terms[depth]->term,
							     nilAtom),
						    nilAtom),
					   yyvsp[-2].t),
				  yyvsp[-1].t);
		    TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		  ;
    break;}
case 331:
{ yyval.t = consList(newCTerm("fSynAssignment", terms[depth]->term, yyvsp[-1].t),
				  yyvsp[0].t);
		    TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		  ;
    break;}
case 332:
{ while (terms[depth]) {
		      decls[depth] = consList(terms[depth]->term, decls[depth]);
		      TermNode *tmp = terms[depth]; terms[depth] = terms[depth]->next; delete tmp;
		    }
		    yyval.t = yyvsp[0].t;
		  ;
    break;}
case 333:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 334:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 335:
{ terms[depth] = new TermNode(yyvsp[0].t, terms[depth]); ;
    break;}
case 336:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 337:
{ yyval.t = consList(yyvsp[-1].t,yyvsp[0].t); ;
    break;}
case 338:
{ yyval.t = newCTerm("fSynAssignment",yyvsp[-2].t,yyvsp[0].t); ;
    break;}
case 339:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 340:
{ yyval.t = newCTerm("fSynApplication",yyvsp[0].t,nilAtom); ;
    break;}
case 341:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(newCTerm("fSynApplication",yyvsp[-3].t,
						    nilAtom),
					   nilAtom),yyvsp[-1].t);
		  ;
    break;}
case 342:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 343:
{ yyval.t = newCTerm("fSynAssignment",
				  newCTerm("fEscape",yyvsp[-2].t,yyvsp[-3].t),yyvsp[0].t); ;
    break;}
case 344:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 345:
{ yyval.t = yyvsp[0].t; ;
    break;}
case 346:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(yyvsp[-2].t,nilAtom),yyvsp[-3].t);
		  ;
    break;}
case 347:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,
				  consList(yyvsp[-3].t,nilAtom),yyvsp[-1].t);
		  ;
    break;}
case 348:
{ *prodKey[depth]++ = '('; depth++; ;
    break;}
case 349:
{ depth--; ;
    break;}
case 350:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 351:
{ *prodKey[depth]++ = '['; depth++; ;
    break;}
case 352:
{ depth--; ;
    break;}
case 353:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 354:
{ *prodKey[depth]++ = '{'; depth++; ;
    break;}
case 355:
{ depth--; ;
    break;}
case 356:
{ yyval.t = newCTerm("fSynTemplateInstantiation",yyvsp[0].t,yyvsp[-4].t,yyvsp[-7].t); ;
    break;}
case 357:
{ yyval.t = newCTerm("fSynApplication",yyvsp[0].t,nilAtom); ;
    break;}
case 358:
{ yyval.t = newCTerm("fSynApplication",yyvsp[-4].t,yyvsp[-1].t); ;
    break;}
case 359:
{ yyval.t = newCTerm("fAtom",newCTerm(xytext),pos()); ;
    break;}
case 360:
{ yyval.t = makeVar(xytext); ;
    break;}
case 361:
{ yyval.t = consList(yyvsp[0].t,nilAtom); ;
    break;}
case 362:
{ yyval.t = consList(yyvsp[-2].t,yyvsp[0].t); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}


void checkDeprecation(OZ_Term coord) {
  char *msg = "use `if' instead of `case' for boolean conditionals";
  if (xy_allowDeprecated) {
    xyreportWarning("deprecation warning",msg,coord);
  } else {
    xyreportError("deprecation error",msg,coord);
  }
}

void xyreportWarning(char *kind, char *msg, OZ_Term coord) {
  OZ_Term args = OZ_cons(OZ_pairA("coord",coord),
			 OZ_cons(OZ_pairAA("kind",kind),
				 OZ_cons(OZ_pairAA("msg",msg),OZ_nil())));
  xy_errorMessages = OZ_cons(OZ_recordInit(OZ_atom("warn"),args),
			     xy_errorMessages);
}

void xyreportError(char *kind, char *msg, OZ_Term coord) {
  OZ_Term args = OZ_cons(OZ_pairA("coord",coord),
			 OZ_cons(OZ_pairAA("kind",kind),
				 OZ_cons(OZ_pairAA("msg",msg),OZ_nil())));
  xy_errorMessages = OZ_cons(OZ_recordInit(OZ_atom("error"),args),
			     xy_errorMessages);
}

void xyreportError(char *kind, char *msg, const char *file,
		   int line, int column) {
  xyreportError(kind,msg,OZ_mkTupleC("pos",3,OZ_atom(file),
				     OZ_int(line),OZ_int(column)));
}

static void xyerror(char *s) {
  char *news;
  if (!strncmp(s, "parse error", 11)) {
    if (strlen(s) > 13) {
      xyreportError("parse error", s + 13, xyFileName, xylino, xycharno());
    } else if (yychar != YYEMPTY) {
      int yychar1 = YYTRANSLATE(yychar);
      char *s2 = new char[30 + strlen(yytname[yychar1])];
      sprintf(s2, "unexpected token `%s'", yytname[yychar1]);
      xyreportError("parse error", s2, xyFileName, xylino, xycharno());
      delete[] s2;
    } else {
      xyreportError("parse error", s, xyFileName, xylino, xycharno());
    }
  } else {
    xyreportError("parse error", s, xyFileName, xylino, xycharno());
  }
}

static OZ_Term init_options(OZ_Term optRec) {
  OZ_Term x;

  x = OZ_subtree(optRec, OZ_atom("gump"));
  xy_gumpSyntax = x == 0? 0: OZ_eq(x, OZ_true());

  x = OZ_subtree(optRec, OZ_atom("allowdeprecated"));
  xy_allowDeprecated = x == 0? 1: OZ_eq(x, OZ_true());

  OZ_Term defines = OZ_subtree(optRec, OZ_atom("defines"));
  return defines;
}

static OZ_Term parse() {
  nilAtom = OZ_nil();

  int i;
  for (i = 0; i < DEPTH; i++) {
    prodKey[i] = prodKeyBuffer[i];
    prodName[i] = OZ_atom("none");
    terms[i] = 0;
    decls[i] = nilAtom;
  }
  depth = 0;
  for (i = 0; i < DEPTH; i++)
    terms[i] = 0;

  xyparse();

  // in case there was a syntax error during the parse, delete garbage:
  xy_exit();
  for (i = 0; i < DEPTH; i++)
    while (terms[i]) {
      TermNode *tmp = terms[i]; terms[i] = terms[i]->next; delete tmp;
    }

  return OZ_pair2(yyoutput, xy_errorMessages);
}

OZ_BI_define(parser_parseFile, 2, 1)
{
  // {ParseFile FileName OptRec ?(AST#ReporterMessages)}
  OZ_declareVirtualString(0, file);
  OZ_declareDetTerm(1, optRec);
  if (!OZ_isRecord(optRec))
    return OZ_typeError(1, "ParseOptions");
  OZ_Term defines = init_options(optRec);
  if (defines == 0 || !OZ_isDictionary(defines))
    return OZ_typeError(1, "ParseOptions");
  if (!xy_init_from_file(file, defines))
    OZ_RETURN(OZ_pair2(OZ_atom("fileNotFound"), OZ_nil()));
  else
    OZ_RETURN(parse());
}
OZ_BI_end

OZ_BI_define(parser_parseVirtualString, 2, 1)
{
  // {ParseVirtualString VS OptRec ?(AST#ReporterMessages)}
  OZ_declareVirtualString(0, str);
  OZ_declareDetTerm(1, optRec);
  if (!OZ_isRecord(optRec))
    return OZ_typeError(1, "ParseOptions");
  OZ_Term defines = init_options(optRec);
  if (defines == 0 || !OZ_isDictionary(defines))
    return OZ_typeError(1, "ParseOptions");
  xy_init_from_string(str, defines);
  OZ_RETURN(parse());
}
OZ_BI_end

<!--
  - Authors:
  -   Denys Duchier     <duchier@ps.uni-sb.de>
  -   Leif Kornstaedt <kornstae@ps.uni-sb.de>
  -   Christian Schulte <schulte@ps.uni-sb.de>
  -
  - Copyright:
  -   Denys Duchier, 1998
  -   Leif Kornstaedt, 1998
  -   Christian Schulte, 1998
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://mozart.ps.uni-sb.de
  -
  - See the file "LICENSE" or
  -    http://mozart.ps.uni-sb.de/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->


<Chapter id="Chapter.Property" proglang=oz>
  <Title/Emulator Properties: <<Property>>/

  <P>
    The property module provides operations to query and possibly
    update Mozart system related parameters that control various
    aspects of the Mozart engine and system modules.
  </P>

  <P>
    The most important properties can be controlled graphically by means of
    the Mozart Panel, which is described in <Ptr.Extern
    to="ozdoc:panel">.
  </P>

  <P>
    The properties are accessible to the programmer by operations
    resembling the operations on dictionaries: <<Property.put>> sets a
    property, whereas <<Property.get>> and <<Property.condGet>> access
    properties. The operations are describeb <Ref
    to="section.property.interface"/here/ in more detail.
  </P>

  <Section id="section.property.intro">
    <Title/Engine Properties/

  <P>
    The properties that control the Mozart engine are identified by
    atoms. For example, the current number of runnable threads is
    identified by the atom <<'threads.runnable'>>. That is,
    <<<{Property.get 'threads.runnable'}>>> returns the number of
    currently runnable threads as an integer.
  </P>

  <P> 
    For convenience, most
    properties are organized into groups. They be accessed by an
    atom giving the group's name (<<'threads'>>, for example), and
    returns a record containing the 
    properties of that group. For example,
    <<<{Property.get 'threads'}>>> returns a record that has several
    features one of which is <<'runnable'>>. 
  </P>

  <P>
    Some properties are readonly in that they just provide access to
    statistical information (as the property <<'threads.runnable'>> in
    our previous example). Other properties are mutable:
    changing their values customizes the engine's behaviour. For
    example, the property 
    <<'threads.medium'>> gives the ratio between the number of time slices
    available for threads of priorities <<medium>> and <<low>>. This
    can be changed to 2:1 by:
<<<{Property.put 'threads.medium' 2}>>>
  </P>

  <P>
    <<Property.put>> supports groups as well, for example to customize
    time slices for threads of all priorities, we can use:
<<<{Property.put 'threads' foo('medium': 2
                            'high':   2)}>>>
    The record's label is not significant.
  </P>
 
  <P> 
    The properties sorted according to their group are listed in the
    following sections. 
  <P>


  <Subsection class=unnumbered id="section.property.threads">  
    <Title/Threads: <<threads>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<created>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Total number of threads created./
        </Tr>
        <Tr>
          <Td/<<runnable>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of currently runnable threads./
        </Tr>
        <Tr>
          <Td/<<min>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Minimal size of a thread stack in number of tasks./
        </Tr>
        <Tr>
          <Td/<<max>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Maximal size of a thread stack in number of tasks. If
          this limit is exceeded the user is prompted to increase the
          limit./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.priority">  
    <Title/Thread Priorities: <<priorities>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<high>>/
          <Td/yes/
          <Td/<<1>>&ellipsis;<<100>>/
          <Td/Relation between time slices available for threads of
        priorities <<medium>> and <<low>>./
        </Tr>
        <Tr>
          <Td/<<medium>>/
          <Td/yes/
          <Td/<<1>>&ellipsis;<<100>>/
          <Td/Relation between time slices available for threads of
        priorities <<high>> and <<medium>>./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.time">  
    <Title/Time Usage: <<time>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<user>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Operating system user time of the Oz Emulator process in
              milliseconds./
        </Tr>
        <Tr>
          <Td/<<system>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Operating system system time of the Oz Emulator process in
        milliseconds./
        </Tr>
        <Tr>
          <Td/<<total>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Elapsed real time in milli seconds from an arbitrary point in
        the past (for example, system start-up time). Can be used to
        determine the wall time elapsed between two successive
        applications of <<{Property.get 'time.total'}>>./
        </Tr>
        <Tr>
          <Td/<<run>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Run time in milliseconds./
        </Tr>
        <Tr>
          <Td/<<idle>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Idle time in milliseconds./
        </Tr>
        <Tr>
          <Td/<<copy>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Time spent on copying (that is, on cloning of spaces) in
        milliseconds./
        </Tr>
        <Tr>
          <Td/<<propagate>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Time spent on executing propagators in
        milliseconds./
        </Tr>
        <Tr>
          <Td/<<gc>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Time spent on garbage collection in
          milliseconds./
        </Tr>
        <Tr>
          <Td/<<detailed>>/
          <Td/yes/
          <Td/<<Bool>>/
          <Td/Only if <<true>>, the fields <<time.copy>>, <<time.gc>>,
          and <<time.propagate>> are updated accordingly./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.gc">  
    <Title/Garbage Collection: <<gc>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<size>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Current heap size in bytes/
        </Tr>
        <Tr>
          <Td/<<threshold>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Heap size in bytes when next automatic garbage collection takes
        place. Gets recomputed after every garbage collection./
        </Tr>
        <Tr>
          <Td/<<active>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Heap size in bytes after last garbage collection./
        </Tr>
        <Tr>
          <Td/<<max>>/
          <Td/yes/
          <Td/<<Int>>/
          <Td/Maximal allowed heap size in bytes. If the heap size exceeds this
        limit by a percentage of <<tolerance>> before garbage collection
        can take place, the user is prompted to increase the limit./
        </Tr>
        <Tr>
          <Td/<<min>>/
          <Td/yes/
          <Td/<<Int>>/
          <Td/Minimal heap size in bytes./
        </Tr>
        <Tr>
          <Td/<<free>>/
          <Td/yes/
          <Td/<<1>>&ellipsis;<<100>>/
          <Td>Gives the percentage of free heap memory after garbage
        collection. For example, a value of 75 means that 
        <<threshold>> is set to approximately: 
        <<active>>*100/(100-75)=<<active>>*4.</Td>
        </Tr>
        <Tr>
          <Td/<<tolerance>>/
          <Td/yes/
          <Td/<<1>>&ellipsis;<<100>>/
          <Td/Gives the percentage by which the emulator is allowed for
        purposes of better memory allocation to exceed
        the maximal heap size <<max>> or to increase <<threshold>>./
        </Tr>
        <Tr>
          <Td/<<on>>/
          <Td/yes/
          <Td/<<Bool>>/
          <Td/Whether garbage collection is invoked automatically./
        </Tr>
        <Tr>
          <Td/<<codeCycle>>/
          <Td/yes/
          <Td/<<Int>>/
          <Td/After how many garbage collections also code garbage
          collection is performed (zero means no code garbage
          collection)./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.print">  
    <Title/Printing Values: <<print>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<width>>/
          <Td/yes/
          <Td/<<Int>>/
          <Td/Maximal width used for <<System.show>> and
          <<System.print>> (see <Ptr to="chapter.system">)./
        </Tr>
        <Tr>
          <Td/<<depth>>/
          <Td/yes/
          <Td/<<Int>>/
          <Td/Maximal depth used for <<System.show>> and
          <<System.print>> (see <Ptr to="chapter.system">)./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.fd">  
    <Title/Finite Domains: <<fd>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<variables>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of finite domain variables created./
        </Tr>
        <Tr>
          <Td/<<propagators>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of finite domain propagators created./
        </Tr>
        <Tr>
          <Td/<<invoked>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of finite domain propagators invoked./
        </Tr>
        <Tr>
          <Td/<<threshold>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Integer when internal domain representation switches from
        bit sets to interval lists./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.spaces">  
    <Title/Computation Spaces: <<space>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<created>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of computation spaces created by <<Space.new>>./
        </Tr>
        <Tr>
          <Td/<<cloned>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of computation spaces cloned by <<Space.clone>>./
        </Tr>
        <Tr>
          <Td/<<committed>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of computation spaces committed by
          <<Space.commit>>./
        </Tr>
        <Tr>
          <Td/<<failed>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of failed computation spaces./
        </Tr>
        <Tr>
          <Td/<<succeeded>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Number of succeeded computation spaces./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.errors">  
    <Title/Printing Errors: <<errors>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<debug>>/
          <Td/yes/
          <Td/<<Bool>>/
          <Td/Whether error exceptions contain debug information./
        </Tr>
        <Tr>
          <Td/<<'thread'>>/
          <Td/yes/
          <Td/<<Int>>/
          <Td/Number of tasks on the thread to be printed./
        </Tr>
        <Tr>
          <Td/<<width>>/
          <Td/yes/
          <Td/<<Int>>/
          <Td/Maximal width used for printing values in error messages./
        </Tr>
        <Tr>
          <Td/<<depth>>/
          <Td/yes/
          <Td/<<Int>>/
          <Td/Maximal depth used for printing values in error messages./
        </Tr>
        <Tr>
          <Td/<<toplevel>>/
          <Td/yes/
          <Td/<<Procedure>>/
          <Td/Nullary procedure invoked after a message has been printed out
	    about an uncaught exception raised on top level./
        </Tr>
        <Tr>
          <Td/<<subordinate>>/
          <Td/yes/
          <Td/<<Procedure>>/
          <Td/Nullary procedure invoked after a message has been printed out
	    about an uncaught exception raised within a computation space./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.messages">  
    <Title/Printing Messages: <<messages>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<gc>>/
          <Td/yes/
          <Td/<<Bool>>/
          <Td/Whether messages on garbage collection are printed./
        </Tr>
        <Tr>
          <Td/<<idle>>/
          <Td/yes/
          <Td/<<Bool>>/
          <Td/Whether messages are printed when the Mozart Engine gets idle./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.memory">  
    <Title/Memory Usage: <<memory>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<atoms>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Memory used in bytes for atoms./
        </Tr>
        <Tr>
          <Td/<<names>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Memory used in bytes for names./
        </Tr>
        <Tr>
          <Td/<<freelist>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Memory allocated but held in free lists for later use in bytes./
        </Tr>
        <Tr>
          <Td/<<code>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Memory used in bytes for Mozart bytecode./
        </Tr>
        <Tr>
          <Td/<<heap>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/Total memory used in Kilo bytes (i.e., 1024 bytes) since start
        of the Mozart engine. Is increased after each garbage collection by
        the heap threshold./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.limits">  
    <Title/Implementation Limits: <<limits>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<int.min>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/The smallest integer that can be represented efficiently
          (that is, by a single word in memory)
          by the engine./
        </Tr>
        <Tr>
          <Td/<<int.max>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/The largest integer that can be represented efficiently
          (that is, by a single word in memory)
          by the engine./
        </Tr>
        <Tr>
          <Td/<<bytecode.xregisters>>/
          <Td/no/
          <Td/<<Int>>/
          <Td/The number of X&nbsp;registers this engine is able to handle
	  in the bytecode./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.platform">  
    <Title/Platform Information: <<platform>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<name>>/
          <Td/no/
          <Td/<<Atom>>/
          <Td>
              The name of the platform as atom of the form
              <<?_{OS}-?_{ARCH}>> where the following combinations are
              currently supported:
              <Table>
                <Tr><Th/Name/              <Th/OS/   <Th/ARCH/</Tr>
                <Tr><Th/<<'aix3-rs6000'>>/   <Th/<<'aix3'>>/    <Th/<<'rs6000'>>/</Tr>
                <Tr><Th/<<'freebsd-i486'>>/  <Th/<<'freebsd'>>/ <Th/<<'i486'>>/</Tr>
                <Tr><Th/<<'irix5-mips'>>/    <Th/<<'irix'>>/    <Th/<<'mips'>>/</Tr>
                <Tr><Th/<<'linux-i486'>>/    <Th/<<'linux'>>/ <Th/<<'i486'>>/</Tr>
                <Tr><Th/<<'linux-m68k'>>/    <Th/<<'linux'>>/ <Th/<<'m68k'>>/</Tr>
                <Tr><Th/<<'netbsd-i486'>>/   <Th/<<'netbsd'>>/ <Th/<<'i486'>>/</Tr>
                <Tr><Th/<<'netbsd-m68k'>>/   <Th/<<'netbsd'>>/ <Th/<<'m68k'>>/</Tr>
                <Tr><Th/<<'netbsd-sparc'>>/  <Th/<<'netbsd'>>/ <Th/<<'sparc'>>/</Tr>
                <Tr><Th/<<'osf1-alpha'>>/    <Th/<<'osf1'>>/ <Th/<<'alpha'>>/</Tr>
                <Tr><Th/<<'solaris-i486'>>/  <Th/<<'solaris'>>/ <Th/<<'i486'>>/</Tr>
                <Tr><Th/<<'solaris-sparc'>>/ <Th/<<'solaris'>>/ <Th/<<'sparc'>>/</Tr>
                <Tr><Th/<<'sunos-sparc'>>/   <Th/<<'sunos'>>/   <Th/<<'sparc'>>/</Tr>
                <Tr><Th/<<'ultrix-mips'>>/   <Th/<<'ultrix'>>/  <Th/<<'mips'>>/</Tr>
                <Tr><Th/<<'win32-i486'>>/    <Th/<<'win32'>>/   <Th/<<'i486'>>/</Tr>
              </Table>
          </Td>
        </Tr>
        <Tr>
          <Td/<<os>>/
          <Td/no/
          <Td/<<Atom>>/
          <Td/The operating system part of the platform name./
        </Tr>
        <Tr>
          <Td/<<arch>>/
          <Td/no/
          <Td/<<Atom>>/
          <Td/The architecture part of the platform name./
        </Tr>
      </Table>
    </P>

  </Subsection>

  <Subsection class=unnumbered id="section.property.application">  
    <Title/Application Support: <<application>>/

    <P>
      <Table>
        <Tr><Th/Field/ <Th/Mutable/ <Th/Type/ <Th/Explanation/</Tr>
        <Tr>
          <Td/<<args>>/
          <Td/no/
          <Td/list of atoms/
          <Td/The arguments passed to an application./
        </Tr>
        <Tr>
          <Td/<<url>>/
          <Td/no/
          <Td/<<Atom>>/
          <Td/The url of the root functor of an application./
        </Tr>
      </Table>
    </P>

  </Subsection>


  </Section>




  <Section id="section.property.interface">
    <Title/The Programming Interface/

  <P>
    <List>
      <Entry><Span class=index/<<get>>/
	<Index class=tails/<<Property>><And><<get>>/
      <Synopsis>
	<<{Property.get ?+{LI} ?_{X}}>>
      <Item>
        Returns the property stored under the key ?_{LI} (a literal or
        an integer). Raises an exception, if no property with key
        ?_{LI} exists.
    
      <Entry><Span class=index/<<condGet>>/
	<Index class=tails/<<Property>><And><<condGet>>/
      <Synopsis>
	<<{Property.condGet ?+{LI} ?_{X} ?_{Y}}>>
      <Item>
        Returns the property stored under the key ?_{LI} (a literal or
        an integer). If no property with key
        ?_{LI} exists, ?_{X} is returned.
    
      <Entry><Span class=index/<<put>>/
	<Index class=tails/<<Property>><And><<put>>/
      <Synopsis>
	<<{Property.put ?+{LI} ?_{X}}>>
      <Item>
        Stores the property ?_{X} under key ?_{LI} (a literal or
        an integer). Raises an exception, if the property is
        readonly.
    
    </List>
  </P>
  </Section>


</Chapter>

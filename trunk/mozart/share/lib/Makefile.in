VPATH		= @srcdir@
SRCDIR		= @srcdir@
TOPDIR		= @TOPDIR@

PREFIX		= @prefix@

OZBIN		= $(PREFIX)/bin
OZLIB		= $(PREFIX)/lib
BITMAPDIR	= $(OZLIB)/bitmaps

SHELL		= @SH@
RM		= @RM@ -f
MV		= @MV@
LN		= @LN@ -s
MKDIR		= @MKDIR@
RMDIR		= @RMDIR@
ECHO		= @ECHO@
M4		= @M4@
TRUE		= @TRUE@

INSTALL		= @INSTALL@
INSTALLFILE	= $(INSTALL) -m 444
INSTALLPRG	= $(INSTALL) -m 555
INSTALLSRC	= @INSTALLSRC@
INSTALLDIR	= $(INSTALL) -m 775 -d
MKINSTALLDIRS	= @MKINSTALLDIRS@

PERL		= perl
ENV2TYPE	= $(PERL) @ENV2TYPE@

OZFLAGS		=
OZBATCH		= @OZBATCH@

COMPILE		= $(OZBATCH) $(OZFLAGS) --include=DumpIntro.oz -c
EXEC		= $(OZBATCH) $(OZFLAGS)
EXECWITHSTD	= $(OZBATCH) $(OZFLAGS) -l AP --include=DumpIntro.oz
OZMA		= $(OZBATCH) $(OZFLAGS) -DOZM --ozma

# exports
export SRCDIR
export OZLIB
export OZMAINIT = Init.ozc
export OZMAFILE = $(SRCDIR)/ozbatch.ozm
export OZPATH = .:$(SRCDIR)
export OZ_PI = 1
export OZ_LIB = $(OZLIB)
export OZ_LOAD = root=.:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=tyc/:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(OZ_LIB)/

OZLIBDIRS1 = \
	Standard Init SP OP AP CP WP DP \
	compiler panel browser explorer ozcar profiler gump gump/examples
OZLIBDIRS = $(OZLIBDIRS1:%=$(OZLIB)/%)
OZCARBITMAPDIR = $(BITMAPDIR)/ozcar

STANDARDSRC1 = \
	Forward.oz \
	Record.oz Unit.oz Tuple.oz Atom.oz Name.oz Procedure.oz \
	Int.oz Float.oz Number.oz Bool.oz List.oz Chunk.oz \
	Literal.oz Value.oz Cell.oz Lock.oz Char.oz String.oz \
	VirtualString.oz Object.oz Class.oz Loop.oz Port.oz \
	Time.oz Thread.oz Match.oz Type.oz Space.oz \
	Array.oz Dictionary.oz Exception.oz Lazy.oz Promise.oz

STANDARDSRC = $(STANDARDSRC1:%=Standard/%) Standard.oz

INITSRC1 = URL.oz Prop.oz
INITSRC = $(INITSRC1:%=Init/%) Init.oz

SPSRC1 = System.oz Debug.oz Foreign.oz Error.oz Finalize.oz
SPSRC = $(SPSRC1:%=SP/%) SP.oz

OPSRC1 = OS.oz Open.oz Component.oz
OPSRC = $(OPSRC1:%.oz=OP/%.oz) OP.oz

APSRC1 = Application.oz StandardModules.oz StandardSubModules.oz \
	ArgParser.oz
APSRC = $(APSRC1:%.oz=AP/%.oz) AP.oz

CPSRC1 = Search.oz FD.oz FS.oz
CPSRC = $(CPSRC1:%=CP/%) CP.oz

DPSRC1 = Connection.oz Remote.oz RemoteServer.oz MakeAllLoader.oz
DPSRC = $(DPSRC1:%=DP/%) DP.oz

MISCSRC1 = Agenda.oz Server.oz
MISCSRC = $(MISCSRC1:%=Misc/%) Misc.oz

WPSRC1 = Tk.oz TkOptions.oz TkTools.oz TkInit.oz
WPSRC = $(WPSRC1:%=WP/%) WP.oz

COMPILERSRC1 = \
	InsertAll.oz CompilerClass.oz Misc.oz Reporter.oz ParseOz.oz \
	FormatStrings.oz Builtins.oz CoreLanguage.oz Annotate.oz \
	StaticAnalysis.oz POTypes.oz RegSet.oz CodeGen.oz CodeStore.oz \
	CodeEmitter.oz BindingAnalysis.oz TupleSyntax.oz Unnester.oz \
	UnnestFD.oz Assembler.oz Interface.oz \
	GenericInterface.oz QuietInterface.oz
COMPILERSRCNOVER = $(COMPILERSRC1:%=compiler/%) compiler-Builtins.oz \
	compiler-Opcodes.oz Compiler.oz
COMPILERSRC = $(COMPILERSRCNOVER) compiler-Version.oz

COMPILERPANELSRC1 = CompilerPanelClass.oz
COMPILERPANELSRC = $(COMPILERPANELSRC1:%=compiler/%) \
	CompilerPanel.oz

PANELSRC1 = \
	configure.oz load.oz make-notes.oz runtime-bar.oz top.oz \
	main.oz dialogs.oz
PANELSRC = $(PANELSRC1:%=panel/%) Panel.oz

BROWSERSRC1 = \
	XResources.oz browserObject.oz browserTerm.oz \
	bufsAndStreams.oz constants.oz controlObject.oz core.oz \
	errors.oz managerObject.oz reflect.oz repManager.oz \
	store.oz tcl-interface.oz termObject.oz \
	termsStore.oz undefs.oz windowManager.oz
BROWSERSRC = $(BROWSERSRC1:%=browser/%) Browser.oz

EXPLORERSRC1 = \
	main.oz misc.oz action-nodes.oz hide-nodes.oz \
	layout-nodes.oz manager.oz \
	menu-manager.oz move-nodes.oz tk-nodes.oz \
	configure.oz nodes.oz toplevel-manager.oz \
	default-actions.oz search-nodes.oz stat-nodes.oz \
	dialog-manager.oz shapes-and-images.oz status-manager.oz
EXPLORERSRC = $(EXPLORERSRC1:%=explorer/%) Explorer.oz

EMACSSRC = Emacs.oz

OZCARSRC1 = \
	prelude.oz string.oz tk.oz config.oz help.oz tree.oz thread.oz \
	stack.oz source.oz menu.oz dialog.oz gui.oz ozcar.oz
OZCARSRCNOVER = $(OZCARSRC1:%=ozcar/%) Ozcar.oz
OZCARSRC = $(OZCARSRCNOVER) ozcar-version.oz

PROFILERSRC1 = \
	prof-gui.oz prof-prelude.oz prof-tk.oz \
	prof-config.oz prof-help.oz profiler.oz \
	prof-dialog.oz prof-menu.oz prof-string.oz
PROFILERSRC = $(PROFILERSRC1:%=profiler/%) Profiler.oz

GUMPSRC1 = Bison.oz Main.oz Output.oz ParserGenerator.oz ScannerGenerator.oz
GUMPSRC = $(GUMPSRC1:%=gump/%) Gump.oz

GUMPSCANNERSRC1 = GumpScannerClass.oz
GUMPSCANNERSRC = $(GUMPSCANNERSRC1:%=gump/%) GumpScanner.oz

GUMPPARSERSRC1 = GumpParserClass.oz
GUMPPARSERSRC = $(GUMPPARSERSRC1:%=gump/%) GumpParser.oz

GUMPEXAMPLES = \
	Examples.oz Lambda.in LambdaParser.ozg LambdaScanner.ozg \
	OzParser.ozg OzScanner.ozg

ENVS = \
	SP.env OP.env AP.env CP.env WP.env DP.env \
	Compiler.env CompilerPanel.env Panel.env Browser.env Explorer.env \
	Emacs.env Ozcar.env Profiler.env Gump.env GumpScanner.env \
	GumpParser.env Misc.env
TYPS = $(ENVS:%.env=%.typ)
TYCS = $(TYPS:%.typ=tyc/%.tyc)

# This ensures that the $(TYCS) are not removed after, e.g., `make stage2',
# so that we can `make install' directly afterwards.
.PRECIOUS: $(TYCS)

ALLSRCS = \
	$(STANDARDSRC) $(INITSRC) \
	$(SPSRC) $(OPSRC) $(APSRC) $(CPSRC) $(DPSRC) $(WPSRC) \
	$(COMPILERSRC) $(COMPILERPANELSRC) $(PANELSRC) $(BROWSERSRC) \
	$(EXPLORERSRC) $(EMACSSRC) $(OZCARSRC) $(PROFILERSRC) \
	$(GUMPSRC) $(GUMPSCANNERSRC) $(GUMPPARSERSRC)

STANDARD = Base.ozc Standard.ozc Base.env Standard.env
DUMPINTRO = DumpIntro.oz $(STANDARD)

LIBFILES = \
	$(GUMPEXAMPLES:%=$(OZLIB)/gump/examples/%) \
	$(OZLIB)/gump/ProductionTemplates.oz \
	$(ENVS:%=$(OZLIB)/%) \
	$(TYCS:tyc/%=$(OZLIB)/%)

COMPONENTS = \
	Init.ozc SP.ozc OP.ozc AP.ozc CP.ozc WP.ozc DP.ozc \
	Compiler.ozc CompilerPanel.ozc Panel.ozc Browser.ozc \
	Explorer.ozc Emacs.ozc Ozcar.ozc Profiler.ozc Gump.ozc \
	GumpScanner.ozc GumpParser.ozc Misc.ozc \
	StandardModules.ozc StandardSubModules.ozc

LIBCOMPONENTS = $(COMPONENTS:%=$(OZLIB)/%)
STAGEEXTRAFILES = $(OZLIB)/Base.ozc $(OZLIB)/Standard.ozc $(OZLIB)/ozbatch.ozm

SYSLETS = opi ozbatch ozserver
BINFILES = $(SYSLETS:%=$(OZBIN)/%)

BITMAPS1 = \
	mini-dec.xbm mini-inc.xbm \
	compiler.xbm compilermask.xbm \
	lines-lr.xbm lines-rl.xbm grid-25.xbm grid-50.xbm \
	browserMIcon.xbm browserIcon.xbm stop.xbm \
	debugger.xbm
BITMAPS = $(BITMAPS1:%=$(BITMAPDIR)/%) \

OZCARBITMAPS1 = \
	children.xbm detach.xbm line.xbm next.xbm queries.xbm \
	step.xbm stop.xbm term.xbm unleash.xbm
OZCARBITMAPS = $(OZCARBITMAPS1:%=$(OZCARBITMAPDIR)/%)

.PHONY: all install install-stage install-main install-bitmaps
.PHONY: install-src install-cache
.PHONY: clean realclean veryclean tags

all: Makefile $(COMPONENTS) $(SYSLETS)

ozbatch.ozm: MakeAssembly.oz \
	$(STANDARDSRC) Base.env Standard.env \
	$(SPSRC) SP.env $(CPSRC) CP.env \
	$(OPSRC) OP.env $(GUMPSRC) Gump.env \
	$(COMPILERSRC) Compiler.env BatchCompile.oz
	$(OZMA) -o /tmp/$$$$.ozm MakeAssembly.oz && \
	$(MV) -f /tmp/$$$$.ozm $@

opi: MakeOPI.oz $(DUMPINTRO) \
	Init.ozc SP.ozc SP.env OP.ozc OP.env Compiler.env AP.ozc $(TYCS)
	$(EXECWITHSTD) $<

ozbatch: MakeBatch.oz BatchCompile.oz $(DUMPINTRO) \
	Init.ozc SP.ozc SP.env OP.ozc OP.env AP.ozc AP.env $(TYCS)
	$(EXECWITHSTD) $<

ozserver: MakeOzServer.oz $(DPSRC) $(DUMPINTRO) \
	Init.ozc AP.ozc SP.ozc OP.ozc $(TYCS)
	$(EXECWITHSTD) $<

Base.ozc: Standard.ozc
	@$(ECHO) > /dev/null

Standard.ozc: $(STANDARDSRC) Base.env Standard.env
	OZMAINIT="" $(EXEC) DumpInitial.oz

StandardModules.ozc: AP/StandardModules.oz
	$(COMPILE)  $< -o $@

StandardSubModules.ozc: AP/StandardSubModules.oz
	$(COMPILE)  $< -o $@

tycs: $(TYCS)

install: install-main install-bitmaps install-cache

install-stage: install-main $(STAGEEXTRAFILES)

install-main: all \
	$(OZLIB) $(OZLIB)/gump/examples $(LIBFILES) $(LIBCOMPONENTS) \
	$(OZBIN) $(BINFILES)

install-bitmaps: \
	$(BITMAPDIR) $(BITMAPS) $(OZCARBITMAPDIR) $(OZCARBITMAPS)

install-cache: \
	$(PREFIX)/cache/http/www.ps.uni-sb.de/ozhome

$(PREFIX)/cache/http/www.ps.uni-sb.de/ozhome: \
	$(PREFIX)/cache/http/www.ps.uni-sb.de
	cd $(PREFIX)/cache/http/www.ps.uni-sb.de && $(LN) ../../.. ozhome

$(PREFIX)/cache/http/www.ps.uni-sb.de:
	$(MKINSTALLDIRS) $(PREFIX)/cache/http/www.ps.uni-sb.de

install-src: $(OZLIB) $(OZLIBDIRS) $(ALLSRCS:%=$(OZLIB)/%)

clean:
	$(RM) *~ *.bak
	$(RM) compiler-Version.oz compiler-Builtins.oz compiler-Opcodes.oz
	$(RM) ozcar-version.oz
	$(RM) -r $(TYPS) tyc
	$(RM) Base.ozc Standard.ozc $(COMPONENTS) Fun*.ozc
	$(RM) ozbatch ozserver

realclean: clean
	$(RM) -r $(STAGE1) $(STAGE2) $(STAGE2B) $(STAGE3) $(STAGE3B)

veryclean: realclean
	$(RM) TAGS

distclean: veryclean
	$(RM) confdefs.h config.cache config.status config.log
	$(RM) Makefile

$(OZLIB) $(OZLIBDIRS) $(BITMAPDIR) $(OZCARBITMAPDIR) $(OZBIN):
	$(INSTALLDIR) $@

$(OZLIB)/%.oz: %.oz
	$(INSTALLSRC) $< $@

$(OZLIB)/%.ozc: %.ozc
	$(INSTALLFILE) $< $@

$(OZLIB)/%.ozm: %.ozm
	$(INSTALLFILE) $< $@

$(OZLIB)/gump/examples/%: gump/examples/%
	$(INSTALLSRC) $< $@

$(BITMAPDIR)/%: bitmaps/%
	$(INSTALLFILE) $< $@

$(OZCARBITMAPDIR)/%: ozcar/bitmaps/%
	$(INSTALLFILE) $< $@

$(OZLIB)/%.env: %.env
	$(INSTALLSRC) $< $@

$(OZLIB)/%.tyc: tyc/%.tyc
	$(INSTALLFILE) $< $@

$(OZBIN)/%: %
	$(INSTALLPRG) $< $@

%.typ: %.env
	$(ENV2TYPE) $< > $@

tyc/%.tyc: %.typ $(DUMPINTRO) Init.ozc
	@$(MKDIR) tyc 2> /dev/null || $(TRUE)
	$(COMPILE) $< -o $@

%.ozc: %.oz
	$(COMPILE) $< -o $@

%.ozc: compiler/%.oz
	$(COMPILE) $< -o $@

Init.ozc: $(DUMPINTRO) $(INITSRC)
	OZMAINIT="" $(COMPILE) Init.oz

SP.ozc: $(DUMPINTRO) $(SPSRC) SP.env Init.ozc

OP.ozc: $(DUMPINTRO) $(OPSRC) SP.env OP.env Init.ozc

AP.ozc: $(DUMPINTRO) $(APSRC) SP.env OP.env AP.env Init.ozc

DP.ozc: $(DUMPINTRO) $(DPSRC) OP.env Init.ozc

CP.ozc: $(DUMPINTRO) $(CPSRC) SP.env CP.env Init.ozc

WP.ozc: $(DUMPINTRO) $(WPSRC) SP.env OP.env WP.env Init.ozc

Misc.ozc: $(DUMPINTRO) $(MISCSRC) Misc.env Init.ozc

#---------------------------------------------------------------------
# COMPILER
#---------------------------------------------------------------------

FunMisc.ozc: compiler/Misc.oz $(STANDARD)

FunBuiltins.ozc: compiler/Builtins.oz compiler-Builtins.oz $(STANDARD)

FunSA.ozc: SP-new.env CP-new.env compiler/Misc-new.env \
	compiler/POTypes.oz compiler/StaticAnalysis.oz $(STANDARD)

FunCode.ozc: SP-new.env compiler/Misc-new.env compiler/RegSet.oz \
	compiler/CodeStore.oz compiler/CodeEmitter.oz compiler/CodeGen.oz \
	$(STANDARD)

FunCore.ozc: SP-new.env compiler/Misc-new.env compiler/Annotate.oz \
	compiler/CoreLanguage.oz $(STANDARD)

FunUnnest.ozc: CP-new.env compiler/Misc-new.env compiler/TupleSyntax.oz \
	compiler/BindingAnalysis.oz compiler/UnnestFD.oz compiler/Unnester.oz \
	$(STANDARD)

FunAssembler.ozc: SP-new.env compiler/Assembler.oz compiler-Opcodes.oz \
	$(STANDARD)

FunCompiler.ozc: SP-new.env compiler/Misc-new.env compiler/FormatStrings.oz \
	compiler/Reporter.oz compiler/ParseOz.oz compiler/Interface.oz \
	compiler/CompilerClass.oz compiler/GenericInterface.oz \
	compiler/QuietInterface.oz compiler-Version.oz $(STANDARD)

COMPILER_BIG = @COMPILER_BIG@
COMPILER_FUN = @COMPILER_FUN@

$(COMPILER_BIG): $(DUMPINTRO) $(COMPILERSRC) SP.env \
	CP.env Gump.env Compiler.env Init.ozc

$(COMPILER_FUN): $(DUMPINTRO) SP.env CP.env Gump.env Compiler.env Init.ozc \
	FunMisc.ozc FunBuiltins.ozc FunSA.ozc FunCode.ozc FunCore.ozc \
	FunUnnest.ozc FunAssembler.ozc FunCompiler.ozc compiler/FunMake.oz
	$(OZBATCH) $(OZFLAGS) --include=DumpIntro.oz -l OP \
	-c compiler/FunMake.oz -o Compiler.ozc

compiler-Version.oz: $(COMPILERSRCNOVER) compiler/Opcodes.m4oz
	$(ECHO) 'DATE = '\'`date '+%h %d 19%y (%T)'`\' > $@

compiler-Builtins.oz: $(TOPDIR)/Emulator/bidecl.perl
	$(PERL) $< -oztable > $@

compiler-Opcodes.oz: compiler/Opcodes.m4oz $(TOPDIR)/Emulator/instrDefs.m4
	$(M4) -DEMUDIR=$(TOPDIR)/Emulator < $< > $@

CompilerPanel.ozc: $(DUMPINTRO) $(COMPILERPANELSRC) SP.env OP.env WP.env \
	Compiler.env Browser.env CompilerPanel.env Init.ozc

Panel.ozc: $(DUMPINTRO) $(PANELSRC) SP.env OP.env \
	WP.env Panel.env Init.ozc

Browser.ozc: $(DUMPINTRO) $(BROWSERSRC) SP.env CP.env \
	WP.env Browser.env Init.ozc

Explorer.ozc: $(DUMPINTRO) $(EXPLORERSRC) SP.env WP.env \
	Browser.env Explorer.env Init.ozc

Emacs.ozc: $(DUMPINTRO) $(EMACSSRC) SP.env OP.env Emacs.env Init.ozc

Ozcar.ozc: $(DUMPINTRO) $(OZCARSRC) SP.env WP.env \
	Browser.env Emacs.env Compiler.env Ozcar.env Init.ozc

ozcar-version.oz: $(OZCARSRCNOVER)
	echo \'`date '+%b %d'`\' > $@

Profiler.ozc: $(DUMPINTRO) $(PROFILERSRC) SP.env OP.env \
	WP.env Browser.env Emacs.env \
	Compiler.env Profiler.env Init.ozc

Gump.ozc: $(DUMPINTRO) $(GUMPSRC) compiler/TupleSyntax.oz compiler/Misc.oz \
	compiler/FormatStrings.oz SP.env OP.env Gump.env

GumpScanner.ozc: $(DUMPINTRO) $(GUMPSCANNERSRC) SP.env GumpScanner.env

GumpParser.ozc: $(DUMPINTRO) $(GUMPPARSERSRC) SP.env GumpParser.env

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

tags:
	etags --language=none \
	--regex='/[ \t]*proc\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*fun\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*class[ \t]+!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*meth\([ \t]+\|[ \t]*![ \t]*\)\([A-Za-z0-9][A-Za-z0-9_]*\|`.+`|'\''.+'\''\)/\2/' \
	$(ALLSRCS)

#
# testing components locally
#    make check   or   make thorough-check
# test a new emulator with
#    make check OZEMULATOR=$(HOME)/Oz/Emulator/oz.emulator.bin
#

.PHONY: bootstrap stage1 stage2 stage2b stage3 stage3b check thorough-check

# use Ozma to create the components
bootstrap:
	$(MAKE) all \
		OZBATCH=$(SRCDIR)/ozbatch.sh \
		OZINIT=Init.ozc \
		OZ_LIB=. \
		OZ_LOAD=root=.:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=./tyc/:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=./:=

STAGE1=./stage1
STAGE2=./stage2
STAGE2B=./stage2b
STAGE3=./stage3
STAGE3B=./stage3b

# stage1: create the initial components using the installed ones
stage1:
	$(MAKE) install-main PREFIX=$(STAGE1)

# stage2: recreate the components and Ozma file using the stage1 components
stage2:
	$(MAKE) install-stage PREFIX=$(STAGE2) \
	OZ_LOAD=prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(STAGE1)/lib/:.:=\
	OZBATCH=$(STAGE1)/bin/ozbatch \
	OZINIT=$(STAGE1)/lib/Init.ozc

# stage2b: recreate the components and Ozma file using the stage2 components
stage2b:
	$(MAKE) install-stage PREFIX=$(STAGE2B) \
	OZ_LOAD=prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(STAGE2)/lib/:.:=\
	OZBATCH=$(STAGE2)/bin/ozbatch \
	OZINIT=$(STAGE2)/lib/Init.ozc

# stage3: recreate the components and Ozma file using the stage2 Ozma file
stage3:
	$(MAKE) install-stage PREFIX=$(STAGE3) \
	OZ_LOAD=all=.:all=tyc:= \
	OZBATCH=$(SRCDIR)/ozbatch.sh \
	OZINIT=$(STAGE2)/lib/Init.ozc \
	OZMAFILE=$(STAGE2)/lib/ozbatch.ozm

# stage3b: recreate the components and Ozma file using the stage3 components
stage3b:
	$(MAKE) install-stage PREFIX=$(STAGE3B) \
	OZ_LOAD=prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(STAGE3)/lib/:.:=\
	OZBATCH=$(STAGE3)/bin/ozbatch \
	OZINIT=$(STAGE3)/lib/Init.ozc

check:
	$(MAKE) clean bootstrap stage1
	$(MAKE) clean stage2
	$(MAKE) clean stage3

thorough-check:
	$(MAKE) clean bootstrap stage1
	$(MAKE) clean stage2
	$(MAKE) clean stage2b
	$(MAKE) clean stage3
	$(MAKE) clean stage3b

# haeh?
.PHONY: denys install-denys denys2

denys: SP.ozc CP.ozc OP.ozc Compiler.ozc Gump.ozc AP.ozc tycs ozbatch

install-denys:
	-$(MKDIR) stage1
	-$(MKDIR) stage1/lib
	-$(MKDIR) stage1/bin
	$(MV) *ozc tyc/*tyc stage1/lib/
	$(MV) ozbatch stage1/bin/

denys2:
	$(MAKE) denys \
	OZ_LOAD=prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(STAGE1)/lib/ \
	OZBATCH=$(STAGE1)/bin/ozbatch \
	OZINIT=$(STAGE1)/lib/Init.ozc

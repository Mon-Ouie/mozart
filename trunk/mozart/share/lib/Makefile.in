BUILDTOP	= @BUILDTOP@
VPATH		= @srcdir@
SRCDIR		= @srcdir@
TOPDIR		= @TOPDIR@

PREFIX		= @prefix@
OZPREFIX	= $(PREFIX)

OZBIN		= $(PREFIX)/bin
OZLIB		= $(PREFIX)/lib
IMAGESDIR	= $(OZLIB)/images
CACHEDIR	= $(PREFIX)/cache/http/www.ps.uni-sb.de/ozhome/lib

SHELL		= @SH@
RM		= @RM@ -f
MV		= @MV@
CP		= @CP@
LN		= @LN_S@
MKDIR		= @MKDIR@
RMDIR		= @RMDIR@
ECHO		= @ECHO@
M4		= @M4@
TRUE		= @TRUE@

INSTALL		= @INSTALL@
INSTALLFILE	= $(INSTALL) -m 444
INSTALLPRG	= $(INSTALL) -m 555
INSTALLSRC	= @INSTALLSRC@
MKINSTALLDIRS	= @MKINSTALLDIRS@
INSTALLDIR	= $(MKINSTALLDIRS)

PERL		= @PERL@
ENV2TYPE	= $(PERL) $(SRCDIR)/env2type

OZFLAGS		=
OZBATCH		= @OZBATCH@

COMPILE		= $(OZBATCH) $(OZFLAGS) --include=DumpIntro.oz -c
EXEC		= $(OZBATCH) $(OZFLAGS)
EXECWITHSTD	= $(OZBATCH) $(OZFLAGS) -l AP --include=DumpIntro.oz
OZMA		= $(OZBATCH) $(OZFLAGS) -DOZM --ozma

# exports
export SRCDIR
export OZPREFIX
export OZLIB
export OZMAINIT = Init.ozc
export OZMAFILE = $(SRCDIR)/ozbatch.ozm
export OZPATH = .:$(SRCDIR)
export OZ_PI = 1
export OZ_LIB = $(OZLIB)
export OZ_LOAD = root=.:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=tyc/:prefix=http\://www.ps.uni-sb.de/ozhome/lib/=$(OZ_LIB)/

STANDARDSRC1 = \
	Forward.oz \
	Record.oz Unit.oz Tuple.oz Atom.oz Name.oz Procedure.oz \
	Int.oz Float.oz Number.oz Bool.oz List.oz Chunk.oz \
	Literal.oz Value.oz Cell.oz Lock.oz Char.oz String.oz \
	VirtualString.oz Object.oz Class.oz Loop.oz Port.oz \
	Time.oz Thread.oz Match.oz Type.oz Space.oz \
	Array.oz Dictionary.oz Exception.oz Lazy.oz Promise.oz Functor.oz

STANDARDSRC = $(STANDARDSRC1:%=standard/%) Standard.oz

INITSRC1 = URL.oz Prop.oz
INITSRC = $(INITSRC1:%=init/%) Init.oz

SPSRC1 = System.oz Debug.oz Foreign.oz Error.oz Finalize.oz
SPSRC = $(SPSRC1:%=sp/%) SP.oz

OPSRC1 = OS.oz Open.oz Component.oz
OPSRC = $(OPSRC1:%.oz=op/%.oz) OP.oz

APSRC1 = Application.oz StandardModules.oz StandardSubModules.oz \
	ArgParser.oz
APSRC = $(APSRC1:%.oz=ap/%.oz) AP.oz

CPSRC1 = Search.oz FD.oz FS.oz
CPSRC = $(CPSRC1:%=cp/%) CP.oz

DPSRC1 = Connection.oz Remote.oz RemoteServer.oz MakeAllLoader.oz
DPSRC = $(DPSRC1:%=dp/%) DP.oz

WPSRC1 = Tk.oz TkOptions.oz TkTools.oz TkInit.oz
WPSRC = $(WPSRC1:%=wp/%) WP.oz

COMPILERSRC1 = \
	InsertAll.oz CompilerClass.oz Misc.oz Reporter.oz ParseOz.oz \
	FormatStrings.oz Builtins.oz CoreLanguage.oz Annotate.oz \
	StaticAnalysis.oz POTypes.oz RegSet.oz CodeGen.oz CodeStore.oz \
	CodeEmitter.oz BindingAnalysis.oz TupleSyntax.oz Unnester.oz \
	UnnestFD.oz Assembler.oz Interface.oz \
	GenericInterface.oz QuietInterface.oz
COMPILERSRCNOVER = $(COMPILERSRC1:%=compiler/%) compiler-Builtins.oz \
	compiler-Opcodes.oz Compiler.oz
COMPILERSRC = $(COMPILERSRCNOVER) compiler-Version.oz

MISCSRC1 = Agenda.oz Server.oz
MISCSRC = $(MISCSRC1:%=misc/%) Misc.oz

ENVS = SP.env OP.env AP.env CP.env WP.env DP.env Compiler.env Misc.env
TOOLENVS = Browser.env CompilerPanel.env Emacs.env Explorer.env Gump.env \
	GumpParser.env GumpScanner.env Ozcar.env Panel.env Profiler.env
LOCAL_TOOLENVS = $(TOOLENVS:%.env=tyc/tools/%.env)
LOCAL_TOOLTYPS = $(TOOLENVS:%.env=tyc/tools/%.typ)
LOCAL_TOOLTYCS = $(TOOLENVS:%.env=tyc/tools/%.tyc)
ENVS1 = Base.env Standard.env $(ENVS)
LOCAL_LIBTYPS = $(ENVS:%.env=tyc/lib/%.typ)
LOCAL_LIBTYCS = $(ENVS:%.env=tyc/lib/%.tyc)
TYCS = $(LOCAL_LIBTYCS) $(LOCAL_TOOLTYCS)

# This ensures that the $(TYCS) are not removed after, e.g., `make stage2',
# so that we can `make install' directly afterwards.
.PRECIOUS: $(TYCS)

ALLSRCS = \
	$(STANDARDSRC) $(INITSRC) \
	$(SPSRC) $(OPSRC) $(APSRC) $(CPSRC) $(DPSRC) $(WPSRC) \
	$(COMPILERSRC) $(MISCSRC)

LIBFILES = \
	$(ENVS1:%=$(OZLIB)/%) \
	$(LOCAL_LIBTYCS:tyc/lib/%=$(OZLIB)/%)

COMPONENTS = \
	Init.ozc SP.ozc OP.ozc AP.ozc CP.ozc WP.ozc DP.ozc \
	Compiler.ozc Misc.ozc StandardModules.ozc StandardSubModules.ozc \
	Tools.ozc

LIBCOMPONENTS = $(COMPONENTS:%=$(OZLIB)/%)
CACHECOMPONENTS = $(COMPONENTS:%=$(CACHEDIR)/%)
CACHETYCS	= $(ENVS:%.env=$(CACHEDIR)/%.tyc)

STAGEEXTRAFILES = $(OZLIB)/Base.ozc $(OZLIB)/Standard.ozc $(OZLIB)/ozbatch.ozm

SYSLETS = ozbatch ozserver
BINFILES = $(SYSLETS:%=$(OZBIN)/%)

IMAGES1 = mini-dec.xbm mini-inc.xbm
IMAGES = $(IMAGES1:%=$(IMAGESDIR)/%)

STANDARD = Base.ozc Standard.ozc Base.env Standard.env
DUMPINTRO = DumpIntro.oz $(STANDARD)

.PHONY: all

all: Makefile $(COMPONENTS) $(SYSLETS)

Makefile: Makefile.in ../config.status
	cd .. && ./config.status

../config.status: ../configure
	cd .. && ./config.status --recheck

#---------------------------------------------------------------------
# Components
#---------------------------------------------------------------------

$(LOCAL_TOOLENVS): tyc/tools/%.env : ../tools/%.env
	@$(MKDIR) tyc 2> /dev/null || $(TRUE)
	@$(MKDIR) tyc/tools 2> /dev/null || $(TRUE)
	$(CP) $< $@

$(LOCAL_TOOLTYPS): %.typ : %.env
	$(ENV2TYPE) $< > $@

$(LOCAL_TOOLTYCS): %.tyc : %.typ Init.ozc
	$(COMPILE) $< -o $@

$(LOCAL_LIBTYPS): tyc/lib/%.typ : %.env
	@$(MKDIR) tyc 2> /dev/null || $(TRUE)
	@$(MKDIR) tyc/lib 2> /dev/null || $(TRUE)
	$(ENV2TYPE) $< > $@

$(LOCAL_LIBTYCS): %.tyc : %.typ Init.ozc
	$(COMPILE) $< -o $@

%.ozc: %.oz
	$(COMPILE) $< -o $@

%.ozc: ap/%.oz
	$(COMPILE) $< -o $@

%.ozc: compiler/%.oz
	$(COMPILE) $< -o $@

Init.ozc: $(DUMPINTRO) $(INITSRC)
	OZMAINIT="" $(COMPILE) Init.oz

Base.ozc: Standard.ozc
	@$(ECHO) > /dev/null

Standard.ozc: $(STANDARDSRC) Base.env Standard.env
	OZMAINIT="" $(EXEC) DumpInitial.oz

SP.ozc: $(DUMPINTRO) $(SPSRC) SP.env Init.ozc

OP.ozc: $(DUMPINTRO) $(OPSRC) SP.env OP.env Init.ozc

AP.ozc: $(DUMPINTRO) $(APSRC) SP.env OP.env AP.env Init.ozc

DP.ozc: $(DUMPINTRO) $(DPSRC) OP.env Init.ozc

CP.ozc: $(DUMPINTRO) $(CPSRC) SP.env CP.env Init.ozc

WP.ozc: $(DUMPINTRO) $(WPSRC) SP.env OP.env WP.env Init.ozc

Misc.ozc: $(DUMPINTRO) $(MISCSRC) Misc.env Init.ozc

ozbatch.ozm: MakeAssembly.oz \
	$(STANDARDSRC) Base.env Standard.env \
	$(SPSRC) SP.env $(CPSRC) CP.env \
	$(OPSRC) OP.env $(COMPILERSRC) Compiler.env BatchCompile.oz
	$(OZMA) -o /tmp/$$$$.ozm MakeAssembly.oz && \
	$(MV) -f /tmp/$$$$.ozm $@

ozbatch: MakeBatch.oz BatchCompile.oz $(DUMPINTRO) \
	Init.ozc SP.ozc SP.env OP.ozc OP.env AP.ozc AP.env $(TYCS)
	$(EXECWITHSTD) $<

ozserver: MakeOzServer.oz $(DPSRC) $(DUMPINTRO) \
	Init.ozc AP.ozc SP.ozc OP.ozc $(TYCS)
	$(EXECWITHSTD) $<

#---------------------------------------------------------------------
# Compiler

FunMisc.ozc: compiler/Misc.oz $(STANDARD)

FunBuiltins.ozc: compiler/Builtins.oz compiler-Builtins.oz $(STANDARD)

FunSA.ozc: SP-new.env CP-new.env compiler/Misc-new.env \
	compiler/POTypes.oz compiler/StaticAnalysis.oz $(STANDARD)

FunCode.ozc: SP-new.env compiler/Misc-new.env compiler/RegSet.oz \
	compiler/CodeStore.oz compiler/CodeEmitter.oz compiler/CodeGen.oz \
	$(STANDARD)

FunCore.ozc: SP-new.env compiler/Misc-new.env compiler/Annotate.oz \
	compiler/CoreLanguage.oz $(STANDARD)

FunUnnest.ozc: CP-new.env compiler/Misc-new.env compiler/TupleSyntax.oz \
	compiler/BindingAnalysis.oz compiler/UnnestFD.oz compiler/Unnester.oz \
	$(STANDARD)

FunAssembler.ozc: SP-new.env compiler/Assembler.oz compiler-Opcodes.oz \
	$(STANDARD)

FunCompiler.ozc: SP-new.env compiler/Misc-new.env \
	compiler/FormatStrings.oz compiler/Reporter.oz compiler/ParseOz.oz \
	compiler/Interface.oz compiler/CompilerClass.oz \
	compiler/GenericInterface.oz compiler/QuietInterface.oz \
	compiler-Version.oz $(STANDARD)

COMPILER_BIG = @COMPILER_BIG@
COMPILER_FUN = @COMPILER_FUN@

$(COMPILER_BIG): $(DUMPINTRO) $(COMPILERSRC) SP.env CP.env \
	../tools/Gump.env Compiler.env Init.ozc

$(COMPILER_FUN): $(DUMPINTRO) SP.env CP.env ../tools/Gump.env Compiler.env \
	Init.ozc FunMisc.ozc FunBuiltins.ozc FunSA.ozc FunCode.ozc \
	FunCore.ozc FunUnnest.ozc FunAssembler.ozc FunCompiler.ozc \
	compiler/FunMake.oz $(TYCS)
	$(OZBATCH) $(OZFLAGS) --include=DumpIntro.oz -l OP \
	-c compiler/FunMake.oz -o Compiler.ozc

compiler-Version.oz: $(COMPILERSRCNOVER) compiler/Opcodes.m4oz
	$(ECHO) 'DATE = '\'`date '+%h %d 19%y (%T)'`\' > $@

compiler-Builtins.oz: ../../platform/emulator/bidecl.perl
	$(PERL) $< -oztable > $@

compiler-Opcodes.oz: compiler/Opcodes.m4oz ../../platform/emulator/instrDefs.m4
	$(M4) -DEMUDIR=$(SRCDIR)/../../platform/emulator < $< > $@

#---------------------------------------------------------------------
# Installation
#---------------------------------------------------------------------

.PHONY: install install-stage install-main install-images install-cache

install: install-main install-images install-cache

install-stage: install-main $(STAGEEXTRAFILES)

install-main: all \
	$(OZLIB) $(LIBFILES) $(LIBCOMPONENTS) \
	$(OZBIN) $(BINFILES)

install-images: \
	$(IMAGESDIR) $(IMAGES)

install-cache: $(CACHEDIR) $(CACHECOMPONENTS) $(CACHETYCS)
$(CACHEDIR):
	$(MKINSTALLDIRS) $(CACHEDIR)
$(CACHECOMPONENTS): $(CACHEDIR)/%.ozc : %.ozc
	$(INSTALLFILE) $< $@
$(CACHETYCS): $(CACHEDIR)/%.tyc : tyc/lib/%.tyc
	$(INSTALLFILE) $< $@

#$(PREFIX)/cache/http/www.ps.uni-sb.de/ozhome: \
#	$(PREFIX)/cache/http/www.ps.uni-sb.de
#	cd $(PREFIX)/cache/http/www.ps.uni-sb.de && $(LN) ../../.. ozhome

#$(PREFIX)/cache/http/www.ps.uni-sb.de:
#	$(MKINSTALLDIRS) $(PREFIX)/cache/http/www.ps.uni-sb.de

$(OZLIB) $(IMAGESDIR) $(OZBIN):
	$(INSTALLDIR) $@

$(OZLIB)/%.ozc: %.ozc
	$(INSTALLFILE) $< $@

$(OZLIB)/%.ozm: %.ozm
	$(INSTALLFILE) $< $@

$(IMAGESDIR)/%: images/%
	$(INSTALLFILE) $< $@

$(OZLIB)/%.env: %.env
	$(INSTALLSRC) $< $@

$(OZLIB)/%.tyc: tyc/lib/%.tyc
	$(INSTALLFILE) $< $@

$(OZBIN)/%: %
	$(INSTALLPRG) $< $@

#---------------------------------------------------------------------
# Cleaning up
#---------------------------------------------------------------------

.PHONY: clean realclean veryclean distclean tags

clean:
	$(RM) *~ *.bak
	$(RM) compiler-Version.oz compiler-Builtins.oz compiler-Opcodes.oz
	$(RM) -r tyc
	$(RM) Base.ozc Standard.ozc $(COMPONENTS) Fun*.ozc
	$(RM) ozbatch ozserver

realclean: clean
	$(RM) -r $(STAGE1) $(STAGE2) $(STAGE2B) $(STAGE3) $(STAGE3B)

veryclean: realclean
	$(RM) TAGS

distclean: veryclean
	$(RM) Makefile

tags:
	etags --language=none \
	--regex='/[ \t]*proc\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*fun\>[^{\n]*{!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*class[ \t]+!?\([A-Z][A-Za-z0-9_]*\|`.+`\)/\1/' \
	--regex='/[ \t]*meth\([ \t]+\|[ \t]*![ \t]*\)\([A-Za-z0-9][A-Za-z0-9_]*\|`.+`|'\''.+'\''\)/\2/' \
	$(ALLSRCS)

#---------------------------------------------------------------------
# Bootstrapping and Testing Components Locally
#---------------------------------------------------------------------
#    make check   or   make thorough-check
# Test a new emulator with
#    make check OZEMULATOR=$(HOME)/Oz/Emulator/oz.emulator.bin

.PHONY: bootstrap stage1 stage2 stage2b stage3 stage3b check thorough-check

URL=http\\://www.ps.uni-sb.de/ozhome

# use Ozma to create the components
bootstrap:
	$(MAKE) all \
	OZBATCH=$(SRCDIR)/ozbatch.sh \
	OZINIT=Init.ozc \
	OZ_LIB=. \
	OZ_LOAD=root=.:prefix=$(URL)/=./tyc/:prefix=$(URL)/lib/=./:=

STAGE1=./stage1
STAGE2=./stage2
STAGE2B=./stage2b
STAGE3=./stage3
STAGE3B=./stage3b

# stage1: create the initial components using the installed ones
stage1:
	$(MAKE) install-main PREFIX=$(STAGE1)

# stage2: recreate the components and Ozma file using the stage1 components
stage2:
	$(MAKE) install-stage PREFIX=$(STAGE2) \
	OZ_LOAD=prefix=$(URL)/lib/=$(STAGE1)/lib/:prefix=$(URL)/tools/=$(URL)/tools/:.:=\
	OZBATCH=$(STAGE1)/bin/ozbatch \
	OZINIT=$(STAGE1)/lib/Init.ozc

# stage2b: recreate the components and Ozma file using the stage2 components
stage2b:
	$(MAKE) install-stage PREFIX=$(STAGE2B) \
	OZ_LOAD=prefix=$(URL)/lib/=$(STAGE2)/lib/:prefix=$(URL)/tools/=$(URL)/tools/:.:=\
	OZBATCH=$(STAGE2)/bin/ozbatch \
	OZINIT=$(STAGE2)/lib/Init.ozc

# stage3: recreate the components and Ozma file using the stage2 Ozma file
stage3:
	$(MAKE) install-stage PREFIX=$(STAGE3) \
	OZ_LOAD=all=.:all=tyc:prefix=$(URL)/tools/=$(URL)/tools/:= \
	OZBATCH=$(SRCDIR)/ozbatch.sh \
	OZINIT=$(STAGE2)/lib/Init.ozc \
	OZMAFILE=$(STAGE2)/lib/ozbatch.ozm

# stage3b: recreate the components and Ozma file using the stage3 components
stage3b:
	$(MAKE) install-stage PREFIX=$(STAGE3B) \
	OZ_LOAD=prefix=$(URL)/lib/=$(STAGE3)/lib/:prefix=$(URL)/tools/=$(URL)/tools/:.:=\
	OZBATCH=$(STAGE3)/bin/ozbatch \
	OZINIT=$(STAGE3)/lib/Init.ozc

check:
	$(MAKE) clean bootstrap stage1
	$(MAKE) clean stage2
	$(MAKE) clean stage3

thorough-check:
	$(MAKE) clean bootstrap stage1
	$(MAKE) clean stage2
	$(MAKE) clean stage2b
	$(MAKE) clean stage3
	$(MAKE) clean stage3b

dnl
dnl Configure script for the GtkCanvas library
dnl

AC_INIT(gtk-canvas.h)
AM_CONFIG_HEADER(config.h)

AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(gtk-canvas, 0.1)

AM_ACLOCAL_INCLUDE(macros)

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AC_ARG_PROGRAM

AM_PROG_LIBTOOL

AM_MAINTAINER_MODE


GTK_X_CHECKS

dnl Evil stuff to extract GLIB stuff from gtk-config output
dnl (we want to make sure it matches with the gtk we're using)

changequote(,)dnl
GLIB_CFLAGS=`echo $GTK_CFLAGS | sed 's/^.*\(-I[^ ]*glib[^ ]*  *-I[^ ]*\).*$/\1/'`
GLIB_LDFLAGS=`echo $GTK_LIBS | sed -e 's/^.*-lgdk[^ ]* *\(-L[^ ]*\).*$/\1/' -e 's/^.* -lgdk[^ ]* .*$//'`
if test -z "$GLIB_LDFLAGS" ; then
  GLIB_LDFLAGS=`echo $GTK_LIBS | sed -e 's/\(-L[^ ]*\) .*$/\1/' -e 's/^.*\(-L[^ ]*\)$/\1/'`
fi 
GLIB_LIBS="$GLIB_LDFLAGS `echo $GTK_LIBS | sed 's/^.*\(-lglib[^ ]*\).*$/\1/'`"
changequote([,])dnl

AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

# define a MAINT-like variable REBUILD which is set if Perl
# and awk are found, so autogenerated sources can be rebuilt

AC_PROG_AWK
AC_CHECK_PROGS(PERL, perl5 perl)

AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)
AM_CONDITIONAL(HAVE_GTK_DOC, $GTKDOC)
AC_SUBST(HAVE_GTK_DOC)

dnl Let people disable the gtk-doc stuff.
AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc  Use gtk-doc to build documentation [default=auto]], enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xauto ; then
  if test x$GTKDOC = xtrue ; then
    enable_gtk_doc=yes
  else
    enable_gtk_doc=no
  fi
fi


# We would like indent, but don't require it.
AC_CHECK_PROG(INDENT, indent, indent)

REBUILD=\#
if test -n "$PERL" && $PERL -v | grep '5.' > /dev/null ; then
  if test -n "$AWK" ; then 
    REBUILD=
  fi
fi
AC_SUBST(REBUILD)

dnl Utility conditional
AM_CONDITIONAL(FALSE, test x = y)

AC_ARG_ENABLE(debug, [  --enable-debug turn on debugging [default=no]], enable_debug="$enableval", enable_debug=no)



AC_CHECK_LIB(m, floor)

AC_CHECK_HEADERS(dlfcn.h dl.h locale.h)

DL_LIB=
AC_CHECK_FUNCS(dlopen,,[
AC_CHECK_LIB(dl, dlopen, DL_LIB="-ldl",[
AC_CHECK_LIB(dld, shl_load, DL_LIB="-ldld",[
AC_CHECK_FUNCS(dlopen, DL_LIB="",
AC_MSG_ERROR(Dynamic linking is not available on this platform.))
])])])
oLIBS="$LIBS"
LIBS="$LIBS $DL_LIB"
AC_CHECK_FUNCS(dlerror,,)
LIBS="$oLIBS"
AC_SUBST(DL_LIB)

AC_CHECK_FUNCS(strerror gethostbyname setfsgid setenv putenv strdup)

NSL_LIBS=""
if test $ac_cv_func_gethostbyname = no; then
  AC_CHECK_LIB(nsl,gethostbyname,NSL_LIBS=-lnsl)
fi
AC_SUBST(NSL_LIBS)
AC_CHECK_FUNC(inet_aton,,[AC_CHECK_LIB(resolv,inet_aton)])

dnl libgtkxmhtml enables a workaround if this isn't present
xLIBS="$LIBS"
LIBS="$GTK_LIBS $X_LIBS $x_libs $LIBS"
AC_CHECK_FUNCS(gtk_signal_handler_pending)
LIBS="$xLIBS"

AC_CHECK_HEADER(stropts.h, AC_DEFINE(HAVE_STROPTS_H))
AC_CHECK_HEADER(dlfcn.h, AC_DEFINE(HAVE_DLFCN_H))

dnl And workaround for a Autoconf 2.4 bug:
if test x$ac_cv_func_grantpt = xyes; then
    :
else
    AC_CHECK_LIB(pt, grantpt)
fi

dnl
dnl Image handling libraries
dnl
Z_LIBS= JPEG_LIBS= PNG_LIBS= TIFF_LIBS= GIF_LIBS= GDK_IMLIB_LIBS=

dnl Test for libz
AC_CHECK_LIB(z, inflate,
  AC_CHECK_HEADER(zlib.h,
    Z_LIBS="-lz";  AC_DEFINE(HAVE_LIBZ)))
AC_CHECK_LIB(z, compress, , 
   AC_MSG_ERROR([[
*** Incorrect libz version found.  Please make sure you do not have
*** an outdated libz.a or libz.so hiding in your X11 distribution or
*** elsewhere on your system.  Versions of libz with the "compress" and
*** "uncompress" symbols are sufficiently recent to build GNOME.]]))

dnl Test for libjpeg
AC_CHECK_LIB(jpeg, jpeg_destroy_decompress,
  jpeg_ok=yes,
  jpeg_ok=no)
if test "$jpeg_ok" = yes; then
  AC_MSG_CHECKING([for jpeglib.h])
  AC_TRY_CPP(
[#include <stdio.h>
#undef PACKAGE
#undef VERSION
/* AAARGH!!! jpeglib.h defines HAVE_STDLIB_H.  */
#undef HAVE_STDDEF_H
#undef HAVE_STDLIB_H
#include <jpeglib.h>],
    jpeg_ok=yes,
    jpeg_ok=no)
  AC_MSG_RESULT($jpeg_ok)
  if test "$jpeg_ok" = yes; then
    JPEG_LIBS="-ljpeg"; AC_DEFINE(HAVE_LIBJPEG)
  fi
fi

dnl Test for libtiff
AC_CHECK_LIB(tiff, TIFFReadScanline,
  AC_CHECK_HEADER(tiffio.h,
    TIFF_LIBS="-ltiff"; AC_DEFINE(HAVE_LIBTIFF)),
  AC_CHECK_LIB(tiff, TIFFWriteScanline,
    AC_CHECK_HEADER(tiffio.h,
      TIFF_LIBS="-ltiff $JPEG_LIBS $Z_LIBS"; AC_DEFINE(HAVE_LIBTIFF)),
    AC_CHECK_LIB(tiff34, TIFFFlushData,
      AC_CHECK_HEADER(tiffio.h,
        TIFF_LIBS="-ltiff34 $JPEG_LIBS $Z_LIBS"; AC_DEFINE(HAVE_LIBTIFF)),,
$JPEG_LIBS $Z_LIBS -lm), $JPEG_LIBS $Z_LIBS -lm), -lm)

dnl Test for libgif
AC_CHECK_LIB(gif, DGifOpenFileName,
  AC_CHECK_HEADER(gif_lib.h,
    GIF_LIBS="-lgif"; AC_DEFINE(HAVE_LIBGIF)),,$GTK_LIBS)

dnl Test for libungif
AC_CHECK_LIB(ungif, DGifOpenFileName,
  AC_CHECK_HEADER(gif_lib.h,
    GIF_LIBS="-lungif"; AC_DEFINE(HAVE_LIBGIF)),,$GTK_LIBS)

dnl Test for libpng
AC_CHECK_LIB(png, png_read_info,
  AC_CHECK_HEADER(png.h,
    png_ok=yes,
    png_ok=no),,$Z_LIBS -lm)
if test "$png_ok" = yes; then
  AC_MSG_CHECKING([for png_structp in png.h])
  AC_TRY_COMPILE([#include <png.h>],
    [png_structp pp; png_infop info; png_colorp cmap; png_create_read_struct
;],
    png_ok=yes,
    png_ok=no)
  AC_CHECK_LIB(png, png_get_IHDR, 
               png_ok=yes,png_ok=no)
  AC_MSG_RESULT($png_ok)
  if test "$png_ok" = yes; then
    PNG_LIBS="-lpng $Z_LIBS"; AC_DEFINE(HAVE_LIBPNG)
  fi
fi

dnl Tests to support libvfs.
AC_CHECK_FUNCS(strdup)
AC_CHECK_HEADERS(utime.h)
AC_FUNC_MMAP
AC_CHECK_TYPE(umode_t, int)

AM_PATH_GDK_IMLIB(1.9, [define_imlib_1_9=true],[
    AM_PATH_GDK_IMLIB(1.8,[
	    GTK_CANVAS_LIBS="GTK_CANVAS_LIBS $PNG_LIBS"
	],[AC_MSG_ERROR([*** IMLIB 1.8 not installed - please install first ***])])])


if test x$define_imlib_1_9 = xtrue; then
    AC_DEFINE(HAVE_IMLIB_1_9)
fi



dnl These are for using lib*
ART_LIBS="-lart_lgpl"
LIBGTK_CANVAS_LIBS="$GDK_IMLIB_LIBS $GTK_LIBS"
GTK_CANVAS_LIBS="-lgtk-canvas $ART_LIBS $GDK_IMLIB_LIBS $GTK_LIBS"

AC_ARG_ENABLE(test-gtk-canvas, [  --enable-test-gtk-canvas     compile the test-gtk-canvas examples [default=yes]],[compile_test_gtk_canvas="$enableval"],[compile_test_gtk_canvas=yes])
AM_CONDITIONAL(COMPILE_TEST_GTK_CANVAS, test x$compile_test_gtk_canvas = xyes)

dnl
dnl LibART_LGPL
dnl
AC_CONFIG_SUBDIRS(libart_lgpl)


dnl
dnl Substitutions
dnl

AC_SUBST(GTK_LIBS)
AC_SUBST(GTK_CANVAS_LIBS)
AC_SUBST(GTK_CANVAS_LIBDIR)
AC_SUBST(GTK_CANVAS_INCLUDEDIR)
AC_SUBST(GTK_CANVAS_IDLDIR)

AC_SUBST(LIBGTK_CANVAS_LIBS)

dnl
dnl List of files to create
dnl
AC_OUTPUT([
Makefile
gtk-canvas/Makefile
test/Makefile
])

<!--
  - Authors:
  -   Thorsten Brunklaus  <brunklaus@ps.uni-sb.de>
  -   Leif Kornstaedt <kornstae@ps.uni-sb.de>
  -
  - Copyright:
  -   Thorsten Brunklaus, 2001
  -   Leif Kornstaedt, 2001
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation of Oz 3:
  -   http://www.mozart-oz.org
  -
  - See the file "LICENSE" or
  -   http://www.mozart-oz.org/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->

<Chapter id="chapter.reference">
  <Title/Oz API Reference/
  <P>
    This chapter describes functions specific to the binding, &ie;,
    those procedures not covered by the mapping described in <Ptr
    to="chapter.mapping">.
  <Section>
    <Title/String Arrays/
    <P>
      <List>
	<Entry><<makeStrArr>>
	<Synopsis>
	  <<{GTK.makeStrArr ?+{Vs} ??{ForeignPointer}}>>
	<Item>
	  converts the list of virtual strings ?_{Vs} to a string array.
	<Entry><<getStrArr>>
	<Synopsis>
	  <<{GTK.getStrArr ?+{ForeignPointer} ??{Vs}}>>
	<Item>
	  converts the string array ?_{ForeignPointer} to a list of virtual
	  strings.
        <Entry><<freeStrArr>>
        <Synopsis>
          <<{GTK.freeStrArr ?+{ForeignPointer}}>>
        <Item>
          deallocates the string array ?_{ForeignPointer},
          which must have been allocated with <<GTK.makeStrArr>>.
      </List>
  <Section>
    <Title/GtkArg Handling/
    <P>
      <List>
	<Entry><<makeArg>>
	<Synopsis>
	  <<{GTK.makeArg ?+{V} ?+{X} ??{ForeignPointer}}>>
	<Item>
	  creates a <Code proglang=c/GtkArg/ structure with the name&nbsp;?_{V}
	  and the value&nbsp;?_{X}.  ?_{X} can be of type int, float, bool,
	  virtual string and foreign pointer.
	<Entry><<getArg>>
	<Synopsis>
	  <<{GTK.getArg ?+{ForeignPointer} ??{X}}>>
	<Item>
	  retrieves the value stored in ?_{ForeignPointer}.
	<Entry><<freeArg>>
	<Synopsis>
	  <<{GTK.freeArg ?+{ForeignPointer}}>>
	<Item>
	  deallocates the GtkArg structure, which must have been allocated
	  with <<GTK.makeArg>>.
      </List>
   <Section>
     <Title/Creating Canvas Items/
     <P>
       <List>
         <Entry><<new>>
         <Synopsis>
	   <<{New GTKCANVAS.canvas new(?+{ImageSupportB}) ??{CanvasO}}>>
         <Item>
           creates are new canvas widget ?_{CanvasO}.  ?_{ImageSupportB}
           indicates whether the canvas supports image items; if <<true>>,
	   <<pushVisual>> is called.  You are required to call <<popVisual>>
	   after the last image item has been created for that canvas.
         <P>
	   Trying to create image items without image support being enabled
	   causes a segmentation violation of the Mozart process due to
	   implementation limitations.
         <Entry><<newItem>>
         <Synopsis>
           <<{CanvasO newItem(?+{GroupO} ?+{TypeA} ?+{Ts} ??{O})}>>
         <Item>
           creates a new item ?_{O} of type ?_{TypeA}, belonging to
	   group ?_{GroupO} and with properties given by ?_{Ts}.
         <P>
           ?_{Ts} denotes a list of properties given as pairs
           <<?_{NameV}#?_{X}>>, where ?_{X} is the value assigned to the
	   property named ?_{NameV}.
         <Entry><<configureItem>>
         <Synopsis>
           <<{CanvasO configureItem(?+{CanvasItemO} ?+{Ts})}>>
         <Item>
           configures the properties of ?_{CanvasItemO} as specified by ?_{Ts}.
         <Entry><<pushVisual>>
         <Synopsis>
           <<{CanvasO pushVisual()}>>
         <Item>
           pushes the default visual onto the GTK+ widget stack.
           This method should not be invoked directly; instead,
	   it should be invoked through the canvas constructor.
         <Entry><<popVisual>>
         <Synopsis>
           <<{CanvasO popVisual()}>>
         <Item>
           pops the default visual from the GTK+ widget stack.
           This method must be invoked after the last image item
	   has been created in a canvas with image support.
         <Entry><<newImageItem>>
         <Synopsis>
           <<{Canvas newImageItem(?+{GroupO} ?+{ImageO} ?+{X_I} ?+{Y_I} ?+{WidthI} ?+{HeightI} ?+{AnchorI} ??{O}}>>
         <Item>
           creates a new item ?_{O} of type image, belonging to group
	   ?_{GroupO} and scaled to fit into the rectangle described by
	   ?_{X_I}, ?_{Y_I}, ?_{WidthI} and ?_{HeightI} in relation to the
	   anchor ?+{AnchorI}.
       </List>
</Chapter>

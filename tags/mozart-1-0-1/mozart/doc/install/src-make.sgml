<!--
  - Authors:
  -   Denys Duchier <duchier@ps.uni-sb.de>
  -
  - Copyright:
  -   Denys Duchier, 1998
  -
  - Last change:
  -   $Date$ by $Author$
  -   $Revision$
  -
  - This file is part of Mozart, an implementation
  - of Oz 3
  -    http://www.mozart-oz.org
  -
  - See the file "LICENSE" or
  -    http://www.mozart-oz.org/LICENSE.html
  - for information on usage and redistribution
  - of this file, and for a DISCLAIMER OF ALL
  - WARRANTIES.
  -
  -->

<chapter id=chapter.src.make>
  <title/Configuration And Compilation/

  <p>Now, you need to decide where you are going to build the
system.  Let us assume that the Mozart sources are in
<file>~/mozart</file>.  We recommend that you then create a separate
build directory; for example, on a Linux system you might call it
<file>~/mozart-linux</file>.  Then, from that directory you should
invoke the <file/configure/ file from the Mozart source distribution.
<code display>
% mkdir ~/mozart-linux
% cd ~/mozart-linux
% ~/mozart/configure
</code>
The configure script takes a long time to run and prints out a lot of
information.  If you are lucky, the script completes successfully and
you can proceed directly with compilation:
<code display>
% make
</code>
Often, however, the configure script will fail and print out a message
explaining what went wrong and possibly how to fix it.  Most
frequently the problem is either that (1) a library, tool, or include
file cannot be found, (2) or the installed version is too old.  There
are many shell variables and command line options that can be used to
parametrize the configuration process.  They are described below.</p>

	&section.configure;

</chapter>
<!--
Local Variables:
mode: sgml
mode: auto-fill
sgml-default-dtd-file: "chapter.ced"
sgml-auto-activate-dtd: t
adaptive-fill-mode: nil
End:
-->

/*
 *  Authors:
 *    Ralf Scheidhauer (Ralf.Scheidhauer@ps.uni-sb.de)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     http://mozart.ps.uni-sb.de
 * 
 *  See the file "LICENSE" or
 *     http://mozart.ps.uni-sb.de/LICENSE.html
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */

#include "opcodes.hh"
#include "base.hh"

OpcodeInfo opcodes[] = {

define(readArg,$1)
define(writeArg,$1)

define(Size,`ifelse($1,`',0,
		    $1,Cache,CacheSize,
	            1)')

define(instruction,
	`define(`sz',eval(1+Size($2)+Size($3)+Size($4)+Size($5)+Size($6)+Size($7)+Size($8)))dnl
         ifelse(numOfRegs($2,$3,$4),1,oneReg($1,`sz'),
		numOfRegs($2,$3,$4),2,twoRegs($1,sz),
		`{"$1",sz},') dnl
')

define(oneReg,``
        {"$1X",$2},
        {"$1Y",$2},
        {"$1G",$2},
'')

define(twoRegs,``
         {"$1XX",$2},
         {"$1XY",$2},
         {"$1XG",$2},
         {"$1YX",$2},
         {"$1YY",$2},
         {"$1YG",$2},
         {"$1GX",$2},
         {"$1GY",$2},
         {"$1GG",$2},
'')


include(EMUDIR/instrDefs.m4)

{"OZERROR",1}
};



Opcode stringToOpcode(const char *s)
{
  for (int i=0; i < (Opcode) OZERROR; i++) {
    if (strcmp(s,opcodeToString((Opcode)i)) == 0 ) {
      return (Opcode) i;
    }
  }

  return OZERROR;
}

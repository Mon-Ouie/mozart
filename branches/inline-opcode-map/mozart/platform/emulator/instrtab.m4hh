/* -*-m4-*-
 *  Authors:
 *    Ralf Scheidhauer (Ralf.Scheidhauer@ps.uni-sb.de)
 * 
 *  Contributors:
 *    optional, Contributor's name (Contributor's email address)
 * 
 *  Copyright:
 *    Organization or Person (Year(s))
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation 
 *  of Oz 3:
 *     http://www.mozart-oz.org
 * 
 *  See the file "LICENSE" or
 *     http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution 
 *  of this file, and for a DISCLAIMER OF ALL 
 *  WARRANTIES.
 *
 */

define(readArg,$1)
define(writeArg,$1)

define(instruction,
	`INSTR(TOUPPER($1))
')


#ifdef __GNUC__

#ifdef AS_CAN_INLINE_OPCODE_MAP

#if defined(ARCH_I486)
#define LOAD_LABEL(instr) \
asm("movl $TRUE_"#instr",%0" : "=m" (*ptr))
#elif defined(ARCH_SPARC)
#define LOAD_LABEL(instr) \
asm("set TRUE_"#instr",%0" : "=m" (*ptr))
#else
#error platform not supported
#endif

/* trick GCC into believing that we actually need the FAKE_... labels */

#define INSTR(instr) \
  *ptr = && FAKE_##instr; \
  LOAD_LABEL(instr); \
  ++ptr;

#define INSTR_FINISH }

static void* instrTable[OZERROR+1];
{ void** ptr = instrTable;

#else /* AS_CAN_INLINE_OPCODE_MAP */

#define INSTR(instr) && TRUE_ ##instr,
#define INSTR_FINISH 0};
static void *instrTable[OZERROR+1] = {

#endif

#else /* __GNUC__ */

#define INSTR(instr) {					\
	__asm mov instrTable[eax], OFFSET instr 	\
	__asm add eax,4					\
      }
#define INSTR_FINISH

static void *instrTable[OZERROR+1];

   _asm mov eax,0

#endif

include(EMUDIR/instrDefs.m4)

INSTR_FINISH

#undef INSTR
#undef INSTR_FINISH

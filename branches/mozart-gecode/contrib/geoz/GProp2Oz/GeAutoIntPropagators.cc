/********************************************************************************
 * This file was automatically generated by GProp2Oz.
 * GProp2Oz is a tool to create an interface between Mozart and Gecode
 * propagators.
 *
 * GProp2Oz was created by Javier AndrÃ©s Mena Zapata.
 * e-mail: javimena@univalle.edu.co
 *
 ********************************************************************************/

#include "IntBasicMacros.hh"



OZ_BI_define(__abs,3,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_GE_INT_VAR_UPCAST(local_arg1,curr_space,0);
    if ((get_GeIntVar(OZ_deref(OZ_in(0)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg2,curr_space,1);
    if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(2,local_arg3);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::IntVar
    //   Gecode::IntVar
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::abs(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __abs",0);
  }
}
OZ_BI_end




OZ_BI_define(__assign,2,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_AVAL_SEL(local_arg2,1);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::AvalSel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::assign(curr_space->getSpace(),
                   local_arg1,
                   local_arg2);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __assign",0);
  }
}
OZ_BI_end




OZ_BI_define(__count,5,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_REL(local_arg3,2);
    DECLARE_INT_CON_LEVEL(4,local_arg5);

    if ( OZ_isGeIntVar(OZ_in(1)) ) {
      DECLARE_GE_INT_VAR(local_arg2,curr_space,1);
      if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      if ( OZ_isGeIntVar(OZ_in(3)) ) {
        DECLARE_GE_INT_VAR(local_arg4,curr_space,3);
        if ((get_GeIntVar(OZ_deref(OZ_in(3)))->getGeSpace()) != curr_space)
          RAISE_EXCEPTION("The variables are not in the same space");

        // generating code for the current variant
        //   Gecode::Space
        //   Gecode::VarArgArray<Gecode::IntVar>
        //   Gecode::IntVar
        //   Gecode::IntRelType
        //   Gecode::IntVar
        //   Gecode::IntConLevel
        if (curr_space==NULL)
          RAISE_EXCEPTION("No variable has the GeSpace object");
        Gecode::count(curr_space->getSpace(),
                      local_arg1,
                      local_arg2,
                      local_arg3,
                      local_arg4,
                      local_arg5);
      }
      else if ( OZ_isInt(OZ_in(3)) ) {
        OZ_declareInt(3,local_arg4);
        // generating code for the current variant
        //   Gecode::Space
        //   Gecode::VarArgArray<Gecode::IntVar>
        //   Gecode::IntVar
        //   Gecode::IntRelType
        //   int
        //   Gecode::IntConLevel
        if (curr_space==NULL)
          RAISE_EXCEPTION("No variable has the GeSpace object");
        Gecode::count(curr_space->getSpace(),
                      local_arg1,
                      local_arg2,
                      local_arg3,
                      local_arg4,
                      local_arg5);
      }
      else {
        // error: unrecognized or non expected type
      }
    }
    else if ( OZ_isInt(OZ_in(1)) ) {
      OZ_declareInt(1,local_arg2);
      if ( OZ_isGeIntVar(OZ_in(3)) ) {
        DECLARE_GE_INT_VAR(local_arg4,curr_space,3);
        if ((get_GeIntVar(OZ_deref(OZ_in(3)))->getGeSpace()) != curr_space)
          RAISE_EXCEPTION("The variables are not in the same space");

        // generating code for the current variant
        //   Gecode::Space
        //   Gecode::VarArgArray<Gecode::IntVar>
        //   int
        //   Gecode::IntRelType
        //   Gecode::IntVar
        //   Gecode::IntConLevel
        if (curr_space==NULL)
          RAISE_EXCEPTION("No variable has the GeSpace object");
        Gecode::count(curr_space->getSpace(),
                      local_arg1,
                      local_arg2,
                      local_arg3,
                      local_arg4,
                      local_arg5);
      }
      else if ( OZ_isInt(OZ_in(3)) ) {
        OZ_declareInt(3,local_arg4);
        // generating code for the current variant
        //   Gecode::Space
        //   Gecode::VarArgArray<Gecode::IntVar>
        //   int
        //   Gecode::IntRelType
        //   int
        //   Gecode::IntConLevel
        if (curr_space==NULL)
          RAISE_EXCEPTION("No variable has the GeSpace object");
        Gecode::count(curr_space->getSpace(),
                      local_arg1,
                      local_arg2,
                      local_arg3,
                      local_arg4,
                      local_arg5);
      }
      else {
        // error: unrecognized or non expected type
      }
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __count",0);
  }
}
OZ_BI_end




OZ_BI_define(__cumulatives,8,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg2,1);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(1)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INTVAR_ARGS_UPCAST(local_arg4,3);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(3)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_ARGS(local_arg6,5);
    OZ_declareBool(6,local_arg7);
    DECLARE_INT_CON_LEVEL(7,local_arg8);

    if ( isIntArgsTerm(OZ_in(0)) ) {
      DECLARE_INT_ARGS(local_arg1,0);
      if ( isIntArgsTerm(OZ_in(2)) ) {
        DECLARE_INT_ARGS(local_arg3,2);
        if ( isIntArgsTerm(OZ_in(4)) ) {
          DECLARE_INT_ARGS(local_arg5,4);
          // generating code for the current variant
          //   Gecode::Space
          //   Gecode::PrimArgArray<int>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   Gecode::PrimArgArray<int>
          //   bool
          //   Gecode::IntConLevel
          if (curr_space==NULL)
            RAISE_EXCEPTION("No variable has the GeSpace object");
          Gecode::cumulatives(curr_space->getSpace(),
                              local_arg1,
                              local_arg2,
                              local_arg3,
                              local_arg4,
                              local_arg5,
                              local_arg6,
                              local_arg7,
                              local_arg8);
        }
        else if ( isGeIntVarArgs(OZ_in(4)) ) {
          DECLARE_INTVAR_ARGS(local_arg5,4);
          if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(4)))) != curr_space)
            RAISE_EXCEPTION("The variables are not in the same space");

          // generating code for the current variant
          //   Gecode::Space
          //   Gecode::PrimArgArray<int>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   bool
          //   Gecode::IntConLevel
          if (curr_space==NULL)
            RAISE_EXCEPTION("No variable has the GeSpace object");
          Gecode::cumulatives(curr_space->getSpace(),
                              local_arg1,
                              local_arg2,
                              local_arg3,
                              local_arg4,
                              local_arg5,
                              local_arg6,
                              local_arg7,
                              local_arg8);
        }
        else {
          // error: unrecognized or non expected type
        }
      }
      else if ( isGeIntVarArgs(OZ_in(2)) ) {
        DECLARE_INTVAR_ARGS(local_arg3,2);
        if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(2)))) != curr_space)
          RAISE_EXCEPTION("The variables are not in the same space");

        if ( isIntArgsTerm(OZ_in(4)) ) {
          DECLARE_INT_ARGS(local_arg5,4);
          // generating code for the current variant
          //   Gecode::Space
          //   Gecode::PrimArgArray<int>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   Gecode::PrimArgArray<int>
          //   bool
          //   Gecode::IntConLevel
          if (curr_space==NULL)
            RAISE_EXCEPTION("No variable has the GeSpace object");
          Gecode::cumulatives(curr_space->getSpace(),
                              local_arg1,
                              local_arg2,
                              local_arg3,
                              local_arg4,
                              local_arg5,
                              local_arg6,
                              local_arg7,
                              local_arg8);
        }
        else if ( isGeIntVarArgs(OZ_in(4)) ) {
          DECLARE_INTVAR_ARGS(local_arg5,4);
          if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(4)))) != curr_space)
            RAISE_EXCEPTION("The variables are not in the same space");

          // generating code for the current variant
          //   Gecode::Space
          //   Gecode::PrimArgArray<int>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   bool
          //   Gecode::IntConLevel
          if (curr_space==NULL)
            RAISE_EXCEPTION("No variable has the GeSpace object");
          Gecode::cumulatives(curr_space->getSpace(),
                              local_arg1,
                              local_arg2,
                              local_arg3,
                              local_arg4,
                              local_arg5,
                              local_arg6,
                              local_arg7,
                              local_arg8);
        }
        else {
          // error: unrecognized or non expected type
        }
      }
      else {
        // error: unrecognized or non expected type
      }
    }
    else if ( isGeIntVarArgs(OZ_in(0)) ) {
      DECLARE_INTVAR_ARGS(local_arg1,0);
      if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      if ( isIntArgsTerm(OZ_in(2)) ) {
        DECLARE_INT_ARGS(local_arg3,2);
        if ( isIntArgsTerm(OZ_in(4)) ) {
          DECLARE_INT_ARGS(local_arg5,4);
          // generating code for the current variant
          //   Gecode::Space
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   Gecode::PrimArgArray<int>
          //   bool
          //   Gecode::IntConLevel
          if (curr_space==NULL)
            RAISE_EXCEPTION("No variable has the GeSpace object");
          Gecode::cumulatives(curr_space->getSpace(),
                              local_arg1,
                              local_arg2,
                              local_arg3,
                              local_arg4,
                              local_arg5,
                              local_arg6,
                              local_arg7,
                              local_arg8);
        }
        else if ( isGeIntVarArgs(OZ_in(4)) ) {
          DECLARE_INTVAR_ARGS(local_arg5,4);
          if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(4)))) != curr_space)
            RAISE_EXCEPTION("The variables are not in the same space");

          // generating code for the current variant
          //   Gecode::Space
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   bool
          //   Gecode::IntConLevel
          if (curr_space==NULL)
            RAISE_EXCEPTION("No variable has the GeSpace object");
          Gecode::cumulatives(curr_space->getSpace(),
                              local_arg1,
                              local_arg2,
                              local_arg3,
                              local_arg4,
                              local_arg5,
                              local_arg6,
                              local_arg7,
                              local_arg8);
        }
        else {
          // error: unrecognized or non expected type
        }
      }
      else if ( isGeIntVarArgs(OZ_in(2)) ) {
        DECLARE_INTVAR_ARGS(local_arg3,2);
        if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(2)))) != curr_space)
          RAISE_EXCEPTION("The variables are not in the same space");

        if ( isIntArgsTerm(OZ_in(4)) ) {
          DECLARE_INT_ARGS(local_arg5,4);
          // generating code for the current variant
          //   Gecode::Space
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   Gecode::PrimArgArray<int>
          //   bool
          //   Gecode::IntConLevel
          if (curr_space==NULL)
            RAISE_EXCEPTION("No variable has the GeSpace object");
          Gecode::cumulatives(curr_space->getSpace(),
                              local_arg1,
                              local_arg2,
                              local_arg3,
                              local_arg4,
                              local_arg5,
                              local_arg6,
                              local_arg7,
                              local_arg8);
        }
        else if ( isGeIntVarArgs(OZ_in(4)) ) {
          DECLARE_INTVAR_ARGS(local_arg5,4);
          if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(4)))) != curr_space)
            RAISE_EXCEPTION("The variables are not in the same space");

          // generating code for the current variant
          //   Gecode::Space
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::VarArgArray<Gecode::IntVar>
          //   Gecode::PrimArgArray<int>
          //   bool
          //   Gecode::IntConLevel
          if (curr_space==NULL)
            RAISE_EXCEPTION("No variable has the GeSpace object");
          Gecode::cumulatives(curr_space->getSpace(),
                              local_arg1,
                              local_arg2,
                              local_arg3,
                              local_arg4,
                              local_arg5,
                              local_arg6,
                              local_arg7,
                              local_arg8);
        }
        else {
          // error: unrecognized or non expected type
        }
      }
      else {
        // error: unrecognized or non expected type
      }
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __cumulatives",0);
  }
}
OZ_BI_end




OZ_BI_define(__distinct,2,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(1,local_arg2);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::distinct(curr_space->getSpace(),
                     local_arg1,
                     local_arg2);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __distinct",0);
  }
}
OZ_BI_end




OZ_BI_define(__distinct3,3,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INT_ARGS(local_arg1,0);
    DECLARE_INTVAR_ARGS_UPCAST(local_arg2,1);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(1)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(2,local_arg3);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::PrimArgArray<int>
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::distinct(curr_space->getSpace(),
                     local_arg1,
                     local_arg2,
                     local_arg3);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __distinct3",0);
  }
}
OZ_BI_end




OZ_BI_define(__dom,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    OZ_declareInt(1,local_arg2);
    OZ_declareInt(2,local_arg3);
    DECLARE_INT_CON_LEVEL(3,local_arg4);

    if ( OZ_isGeIntVar(OZ_in(0)) ) {
      DECLARE_GE_INT_VAR(local_arg1,curr_space,0);
      if ((get_GeIntVar(OZ_deref(OZ_in(0)))->getGeSpace()) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::IntVar
      //   int
      //   int
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::dom(curr_space->getSpace(),
                  local_arg1,
                  local_arg2,
                  local_arg3,
                  local_arg4);
    }
    else if ( isGeIntVarArgs(OZ_in(0)) ) {
      DECLARE_INTVAR_ARGS(local_arg1,0);
      if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::VarArgArray<Gecode::IntVar>
      //   int
      //   int
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::dom(curr_space->getSpace(),
                  local_arg1,
                  local_arg2,
                  local_arg3,
                  local_arg4);
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __dom",0);
  }
}
OZ_BI_end




OZ_BI_define(__dom3,3,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INT_SET(local_arg2,1);
    DECLARE_INT_CON_LEVEL(2,local_arg3);

    if ( OZ_isGeIntVar(OZ_in(0)) ) {
      DECLARE_GE_INT_VAR(local_arg1,curr_space,0);
      if ((get_GeIntVar(OZ_deref(OZ_in(0)))->getGeSpace()) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::IntVar
      //   Gecode::IntSet
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::dom(curr_space->getSpace(),
                  local_arg1,
                  local_arg2,
                  local_arg3);
    }
    else if ( isGeIntVarArgs(OZ_in(0)) ) {
      DECLARE_INTVAR_ARGS(local_arg1,0);
      if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::VarArgArray<Gecode::IntVar>
      //   Gecode::IntSet
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::dom(curr_space->getSpace(),
                  local_arg1,
                  local_arg2,
                  local_arg3);
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __dom3",0);
  }
}
OZ_BI_end




OZ_BI_define(__element,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_GE_INT_VAR_UPCAST(local_arg2,curr_space,1);
    if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg3,curr_space,2);
    if ((get_GeIntVar(OZ_deref(OZ_in(2)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(3,local_arg4);

    if ( isIntArgsTerm(OZ_in(0)) ) {
      DECLARE_INT_ARGS(local_arg1,0);
      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::PrimArgArray<int>
      //   Gecode::IntVar
      //   Gecode::IntVar
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::element(curr_space->getSpace(),
                      local_arg1,
                      local_arg2,
                      local_arg3,
                      local_arg4);
    }
    else if ( isGeIntVarArgs(OZ_in(0)) ) {
      DECLARE_INTVAR_ARGS(local_arg1,0);
      if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::VarArgArray<Gecode::IntVar>
      //   Gecode::IntVar
      //   Gecode::IntVar
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::element(curr_space->getSpace(),
                      local_arg1,
                      local_arg2,
                      local_arg3,
                      local_arg4);
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __element",0);
  }
}
OZ_BI_end




OZ_BI_define(__eq,3,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_GE_INT_VAR_UPCAST(local_arg1,curr_space,0);
    if ((get_GeIntVar(OZ_deref(OZ_in(0)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(2,local_arg3);

    if ( OZ_isGeIntVar(OZ_in(1)) ) {
      DECLARE_GE_INT_VAR(local_arg2,curr_space,1);
      if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::IntVar
      //   Gecode::IntVar
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::eq(curr_space->getSpace(),
                 local_arg1,
                 local_arg2,
                 local_arg3);
    }
    else if ( OZ_isInt(OZ_in(1)) ) {
      OZ_declareInt(1,local_arg2);
      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::IntVar
      //   int
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::eq(curr_space->getSpace(),
                 local_arg1,
                 local_arg2,
                 local_arg3);
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __eq",0);
  }
}
OZ_BI_end




OZ_BI_define(__eq2,2,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(1,local_arg2);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::eq(curr_space->getSpace(),
               local_arg1,
               local_arg2);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __eq2",0);
  }
}
OZ_BI_end




OZ_BI_define(__gcc,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    OZ_declareInt(1,local_arg2);
    OZ_declareInt(2,local_arg3);
    DECLARE_INT_CON_LEVEL(3,local_arg4);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   int
    //   int
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::gcc(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __gcc",0);
  }
}
OZ_BI_end




OZ_BI_define(__gcc10,10,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_ARGS(local_arg2,1);
    DECLARE_INTVAR_ARGS_UPCAST(local_arg3,2);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(2)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    OZ_declareInt(3,local_arg4);
    OZ_declareInt(4,local_arg5);
    OZ_declareInt(5,local_arg6);
    OZ_declareBool(6,local_arg7);
    OZ_declareInt(7,local_arg8);
    OZ_declareInt(8,local_arg9);
    DECLARE_INT_CON_LEVEL(9,local_arg10);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::PrimArgArray<int>
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   int
    //   int
    //   int
    //   bool
    //   int
    //   int
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::gcc(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4,
                local_arg5,
                local_arg6,
                local_arg7,
                local_arg8,
                local_arg9,
                local_arg10);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __gcc10",0);
  }
}
OZ_BI_end




OZ_BI_define(__gcc3,3,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    OZ_declareInt(1,local_arg2);
    DECLARE_INT_CON_LEVEL(2,local_arg3);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   int
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::gcc(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __gcc3",0);
  }
}
OZ_BI_end




OZ_BI_define(__gcc5,5,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INTVAR_ARGS_UPCAST(local_arg2,1);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(1)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    OZ_declareInt(2,local_arg3);
    OZ_declareInt(3,local_arg4);
    DECLARE_INT_CON_LEVEL(4,local_arg5);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   int
    //   int
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::gcc(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4,
                local_arg5);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __gcc5",0);
  }
}
OZ_BI_end




OZ_BI_define(__gcc7,7,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_ARGS(local_arg2,1);
    OZ_declareInt(2,local_arg3);
    OZ_declareInt(3,local_arg4);
    OZ_declareInt(4,local_arg5);
    OZ_declareInt(5,local_arg6);
    DECLARE_INT_CON_LEVEL(6,local_arg7);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::PrimArgArray<int>
    //   int
    //   int
    //   int
    //   int
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::gcc(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4,
                local_arg5,
                local_arg6,
                local_arg7);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __gcc7",0);
  }
}
OZ_BI_end




OZ_BI_define(__gcc8,8,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_ARGS(local_arg2,1);
    OZ_declareInt(2,local_arg3);
    OZ_declareInt(3,local_arg4);
    OZ_declareInt(4,local_arg5);
    OZ_declareInt(5,local_arg6);
    OZ_declareInt(6,local_arg7);
    DECLARE_INT_CON_LEVEL(7,local_arg8);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::PrimArgArray<int>
    //   int
    //   int
    //   int
    //   int
    //   int
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::gcc(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4,
                local_arg5,
                local_arg6,
                local_arg7,
                local_arg8);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __gcc8",0);
  }
}
OZ_BI_end




OZ_BI_define(__gcc9,9,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_ARGS(local_arg2,1);
    DECLARE_INTVAR_ARGS_UPCAST(local_arg3,2);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(2)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    OZ_declareInt(3,local_arg4);
    OZ_declareInt(4,local_arg5);
    OZ_declareBool(5,local_arg6);
    OZ_declareInt(6,local_arg7);
    OZ_declareInt(7,local_arg8);
    DECLARE_INT_CON_LEVEL(8,local_arg9);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::PrimArgArray<int>
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   int
    //   int
    //   bool
    //   int
    //   int
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::gcc(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4,
                local_arg5,
                local_arg6,
                local_arg7,
                local_arg8,
                local_arg9);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __gcc9",0);
  }
}
OZ_BI_end




OZ_BI_define(__lex,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_REL(local_arg2,1);
    DECLARE_INTVAR_ARGS_UPCAST(local_arg3,2);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(2)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(3,local_arg4);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntRelType
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::lex(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __lex",0);
  }
}
OZ_BI_end




OZ_BI_define(__linear,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_REL(local_arg2,1);
    DECLARE_INT_CON_LEVEL(3,local_arg4);

    if ( OZ_isGeIntVar(OZ_in(2)) ) {
      DECLARE_GE_INT_VAR(local_arg3,curr_space,2);
      if ((get_GeIntVar(OZ_deref(OZ_in(2)))->getGeSpace()) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::VarArgArray<Gecode::IntVar>
      //   Gecode::IntRelType
      //   Gecode::IntVar
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::linear(curr_space->getSpace(),
                     local_arg1,
                     local_arg2,
                     local_arg3,
                     local_arg4);
    }
    else if ( OZ_isInt(OZ_in(2)) ) {
      OZ_declareInt(2,local_arg3);
      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::VarArgArray<Gecode::IntVar>
      //   Gecode::IntRelType
      //   int
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::linear(curr_space->getSpace(),
                     local_arg1,
                     local_arg2,
                     local_arg3,
                     local_arg4);
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __linear",0);
  }
}
OZ_BI_end




OZ_BI_define(__linear5,5,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INT_ARGS(local_arg1,0);
    DECLARE_INTVAR_ARGS_UPCAST(local_arg2,1);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(1)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_REL(local_arg3,2);
    DECLARE_INT_CON_LEVEL(4,local_arg5);

    if ( OZ_isGeIntVar(OZ_in(3)) ) {
      DECLARE_GE_INT_VAR(local_arg4,curr_space,3);
      if ((get_GeIntVar(OZ_deref(OZ_in(3)))->getGeSpace()) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::PrimArgArray<int>
      //   Gecode::VarArgArray<Gecode::IntVar>
      //   Gecode::IntRelType
      //   Gecode::IntVar
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::linear(curr_space->getSpace(),
                     local_arg1,
                     local_arg2,
                     local_arg3,
                     local_arg4,
                     local_arg5);
    }
    else if ( OZ_isInt(OZ_in(3)) ) {
      OZ_declareInt(3,local_arg4);
      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::PrimArgArray<int>
      //   Gecode::VarArgArray<Gecode::IntVar>
      //   Gecode::IntRelType
      //   int
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::linear(curr_space->getSpace(),
                     local_arg1,
                     local_arg2,
                     local_arg3,
                     local_arg4,
                     local_arg5);
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __linear5",0);
  }
}
OZ_BI_end




OZ_BI_define(__max,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_GE_INT_VAR_UPCAST(local_arg1,curr_space,0);
    if ((get_GeIntVar(OZ_deref(OZ_in(0)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg2,curr_space,1);
    if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg3,curr_space,2);
    if ((get_GeIntVar(OZ_deref(OZ_in(2)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(3,local_arg4);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::IntVar
    //   Gecode::IntVar
    //   Gecode::IntVar
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::max(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __max",0);
  }
}
OZ_BI_end




OZ_BI_define(__max3,3,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg2,curr_space,1);
    if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(2,local_arg3);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntVar
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::max(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __max3",0);
  }
}
OZ_BI_end




OZ_BI_define(__min,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_GE_INT_VAR_UPCAST(local_arg1,curr_space,0);
    if ((get_GeIntVar(OZ_deref(OZ_in(0)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg2,curr_space,1);
    if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg3,curr_space,2);
    if ((get_GeIntVar(OZ_deref(OZ_in(2)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(3,local_arg4);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::IntVar
    //   Gecode::IntVar
    //   Gecode::IntVar
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::min(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3,
                local_arg4);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __min",0);
  }
}
OZ_BI_end




OZ_BI_define(__min3,3,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg2,curr_space,1);
    if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(2,local_arg3);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntVar
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::min(curr_space->getSpace(),
                local_arg1,
                local_arg2,
                local_arg3);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __min3",0);
  }
}
OZ_BI_end




OZ_BI_define(__mult,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_GE_INT_VAR_UPCAST(local_arg1,curr_space,0);
    if ((get_GeIntVar(OZ_deref(OZ_in(0)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg2,curr_space,1);
    if ((get_GeIntVar(OZ_deref(OZ_in(1)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_GE_INT_VAR_UPCAST(local_arg3,curr_space,2);
    if ((get_GeIntVar(OZ_deref(OZ_in(2)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(3,local_arg4);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::IntVar
    //   Gecode::IntVar
    //   Gecode::IntVar
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::mult(curr_space->getSpace(),
                 local_arg1,
                 local_arg2,
                 local_arg3,
                 local_arg4);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __mult",0);
  }
}
OZ_BI_end




OZ_BI_define(__rel,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_GE_INT_VAR_UPCAST(local_arg1,curr_space,0);
    if ((get_GeIntVar(OZ_deref(OZ_in(0)))->getGeSpace()) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_REL(local_arg2,1);
    DECLARE_INT_CON_LEVEL(3,local_arg4);

    if ( OZ_isGeIntVar(OZ_in(2)) ) {
      DECLARE_GE_INT_VAR(local_arg3,curr_space,2);
      if ((get_GeIntVar(OZ_deref(OZ_in(2)))->getGeSpace()) != curr_space)
        RAISE_EXCEPTION("The variables are not in the same space");

      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::IntVar
      //   Gecode::IntRelType
      //   Gecode::IntVar
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::rel(curr_space->getSpace(),
                  local_arg1,
                  local_arg2,
                  local_arg3,
                  local_arg4);
    }
    else if ( OZ_isInt(OZ_in(2)) ) {
      OZ_declareInt(2,local_arg3);
      // generating code for the current variant
      //   Gecode::Space
      //   Gecode::IntVar
      //   Gecode::IntRelType
      //   int
      //   Gecode::IntConLevel
      if (curr_space==NULL)
        RAISE_EXCEPTION("No variable has the GeSpace object");
      Gecode::rel(curr_space->getSpace(),
                  local_arg1,
                  local_arg2,
                  local_arg3,
                  local_arg4);
    }
    else {
      // error: unrecognized or non expected type
    }


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __rel",0);
  }
}
OZ_BI_end




OZ_BI_define(__sortedness,3,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INTVAR_ARGS_UPCAST(local_arg2,1);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(1)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(2,local_arg3);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::sortedness(curr_space->getSpace(),
                       local_arg1,
                       local_arg2,
                       local_arg3);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __sortedness",0);
  }
}
OZ_BI_end




OZ_BI_define(__sortedness4,4,0)
{
  GeSpace *curr_space = NULL;

  try{
    
    DECLARE_INTVAR_ARGS_UPCAST(local_arg1,0);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(0)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INTVAR_ARGS_UPCAST(local_arg2,1);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(1)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INTVAR_ARGS_UPCAST(local_arg3,2);
    if ((get_GeIntVarArgsAnyGeSpace(OZ_deref(OZ_in(2)))) != curr_space)
      RAISE_EXCEPTION("The variables are not in the same space");

    DECLARE_INT_CON_LEVEL(3,local_arg4);

    // generating code for the current variant
    //   Gecode::Space
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::VarArgArray<Gecode::IntVar>
    //   Gecode::IntConLevel
    if (curr_space==NULL)
      RAISE_EXCEPTION("No variable has the GeSpace object");
    Gecode::sortedness(curr_space->getSpace(),
                       local_arg1,
                       local_arg2,
                       local_arg3,
                       local_arg4);


      //std::cout << "imposed propagator" << std::endl;
      //std::cout << std::flush;
    return PROCEED;
  }
  catch (Gecode::Exception e) {
    return OZ_raiseC("prop: __sortedness4",0);
  }
}
OZ_BI_end


char oz_module_name[] = "module_name";

extern "C"
{
  OZ_C_proc_interface * oz_init_module(void)
  {
    static OZ_C_proc_interface i_table[] = {
      {"abs",3,0,__abs},
      {"assign",2,0,__assign},
      {"count",5,0,__count},
      {"cumulatives",8,0,__cumulatives},
      {"distinct",2,0,__distinct},
      {"distinct3",3,0,__distinct3},
      {"dom",4,0,__dom},
      {"dom3",3,0,__dom3},
      {"element",4,0,__element},
      {"eq",3,0,__eq},
      {"eq2",2,0,__eq2},
      {"gcc",4,0,__gcc},
      {"gcc10",10,0,__gcc10},
      {"gcc3",3,0,__gcc3},
      {"gcc5",5,0,__gcc5},
      {"gcc7",7,0,__gcc7},
      {"gcc8",8,0,__gcc8},
      {"gcc9",9,0,__gcc9},
      {"lex",4,0,__lex},
      {"linear",4,0,__linear},
      {"linear5",5,0,__linear5},
      {"max",4,0,__max},
      {"max3",3,0,__max3},
      {"min",4,0,__min},
      {"min3",3,0,__min3},
      {"mult",4,0,__mult},
      {"rel",4,0,__rel},
      {"sortedness",3,0,__sortedness},
      {"sortedness4",4,0,__sortedness4},
      {0,0,0,0}
    };


    return i_table;
  }
}

-*-outline-*-

* TODO
** --create must use the new naming conventions (see below)

	SECTION-PACKAGE__FORMAT__PLATFORM__VERSION.pkg

* extending MOGUL support to allow for many instances per package

** instance

   has everything that a package used to have (1) except url-doc which
   is more properly something we should associate with the package
   itself, (2) but with format and platform

** package

   has additional fields for its instances (header "instance").  Each
   instance is referenced by a name of the form:  PACKAGE:ID and
   resides in a file PACKAGE:ID.mogul.  For example, for the mozart
   stdlib, we could have:

	mozart.mogul
	mozart-stdlib.mogul
	mozart-stdlib:1.mogul
	mozart-stdlib:2.mogul
	mozart-stdlib:7.mogul

   inside of mozart-stdlib.mogul, we would have additional fields:

	instance: mozart-stdlib:1.mogul
	instance: mozart-stdlib:2.mogul
	instance: mozart-stdlib:7.mogul

   for each package, there would be one instance that would be
   explicitly distinguished as the primary representative.  This is
   the one that would provide all the info for the package itself.
   Typically, this should be the latest "source" release.

* extending ozmake to support multiple instances of packages

  In order to leverage HTTP as a means of obtaining packages, we
  cannot assume a smart server.  Instead, we need a smart client and
  some naming conventions that it can take advantage of.

  Until now, here was the situation.  For a package:

	mogul:/SECTION/PACKAGE

  we could obtain it from a MOGUL archive using:

	/SECTION/PACKAGE/SECTION-PACKAGE.pkg
  or	/SECTION/PACKAGE/SECTION-PACKAGE-VERSION.pkg

  Now, we wish to add FORMAT and PLATFORM information:

	/SECTION/PACKAGE/SECTION-PACKAGE__FORMAT__PLATFORM.pkg
	/SECTION/PACKAGE/SECTION-PACKAGE__FORMAT__PLATFORM__VERSION.pkg

  We can fault back to the previous format if nothing is found with
  the new one.

** what archives must guarantee

   it should always be possible to get the most recent version of a
   package without having to know what it is; therefore

	SECTION-PACKAGE__FORMAT__PLATFORM.pkg

   should always refer to the most recent version (a link or a copy).

** what about the notions of alpha, beta, stable?

   I'd say that if we wanted that, all that's necessary to not mess up
   everyone else is simply to not link such files as most recent.
   They'd be there - you could ask for them specifically - but they
   would not cause any harm.

** what about old files that do not follow the format above?

   as a safety precaution, if we have:

	SECTION-PACKAGE-VERSION.pkg

   then we should now write out:

	SECTION-PACKAGE__1.2.5__source__VERSION.pkg

   just to be sure.

** archive indexes

   it should also be possible to obtain, from an archive, an index of
   the software it holds - this should also be possible per package

	SECTION-PACKAGE.listing

   should contains one line per package instance available

	SECTION-PACKAGE__1.2.5__source__0.81.pkg
	SECTION-PACKAGE__1.3.0__source__0.82.pkg
	SECTION-PACKAGE__1.3.0__source__0.83.pkg
	SECTION-PACKAGE__1.3.0__win32-i486__0.82.pkg
	SECTION-PACKAGE__1.3.0__win32-i486__0.83.pkg

**********************************************************************

until now we also assumed that the MOGUL database and the ozmake
database would have the same kind of content.  However, now, the MOGUL
database can hold several instance for each package, while for ozmake
there should only be one instance installed.

the ozmake db is a db of packages while the mogul db is one of
instances.
#! /bin/bash
P=../infos2/f
rm -rf $P
mkdir $P
git log --oneline | cut '-d ' -f1 > $P/commits
cat $P/commits |
while read commit
do
git ls-tree --full-tree --name-only $commit 
git ls-tree --full-tree --name-only -d $commit trunk/ branches/ tags/
done > $P/paths1
sort -u $P/paths1 > $P/paths2

grep 'branches/' $P/paths2 > $P/paths3
grep 'tags/' $P/paths2 >> $P/paths3
sed 's_$_/_' < $P/paths3 | tr '\n' ' '> $P/paths4
cat $P/commits |
while read commit
do
git ls-tree --full-tree --name-only $commit $(cat $P/paths4)
done > $P/paths5
sort -u $P/paths5 > $P/paths6

grep -v 'branches/mozart-gecode/' $P/paths6 | grep -v 'branches/mozart-pthread' | grep -v 'tags/mozart-stdlib-debian-20060615-4/'> $P/paths7
echo 'branches/mozart-gecode' >>$P/paths7
#echo 'branches/mozart-gecode/mozart' >>$P/paths7
echo 'branches/mozart-pthread' >>$P/paths7
echo 'tags/mozart-stdlib-debian-20060615-4' >>$P/paths7
grep 'trunk/' $P/paths2 >> $P/paths7
tr '\n' ' '<$P/paths7 > $P/paths8

truncate -s 0 $P/oldPaths
tac $P/commits |
while read commit
do
git ls-tree --full-tree --name-only -d $commit $(cat $P/paths8) > $P/newPaths
diff $P/oldPaths $P/newPaths | grep '>' | cut '-d ' -f2 |
while read path
do
echo $commit $path
git ls-tree --full-tree -d $commit^ $(cat $P/paths8) | grep $(git ls-tree --full-tree -d $commit $path | cut -f1 | cut '-d ' -f3) | cut -f2
done
cp $P/newPaths $P/oldPaths
done > $P/sources
